apply plugin: 'java'

project.version = '1.0'
compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    flatDir { dirs "./" }
}

dependencies {
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    implementation("com.google.guava:guava:30.1-jre")

    implementation group: 'com.typesafe', name: 'config', version: '1.2.1'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'


    implementation group: 'org.antlr', name: 'antlr4', version: '4.9.2'
    implementation group: 'org.antlr', name: 'ST4', version: '4.3.1'

    testCompile "junit:junit:4.11"
    testCompile group: 'org.antlr', name: 'antlr4', version: '4.9.2'
    testCompile group: 'org.antlr', name: 'ST4', version: '4.3.1'
}

test {
    filter {
        exclude '**/*IT*'
    }
}

task IntegrationTest( type: Test ) {
    include '**/*IT*'
}

task generatePbDwLexer(type: JavaExec) {
    def grammarFile = "./src/main/java/com/datascience9/pb/dw/parse/PowerBuilderDWLexer.g4"
    def packageName = "com.datascience9.pb.dw.parse"
    def outputDir = "./"

    println 'input args: grammar file ' + grammarFile + ': packageName ' + packageName + ' : outputDir ' + outputDir
    classpath sourceSets.main.runtimeClasspath
    main = "org.antlr.v4.Tool"
    args  grammarFile, "-visitor",  "-package", packageName, "-o", outputDir
}

task generatePbDwParser(type: JavaExec) {
    def grammarFile = "./src/main/java/com/datascience9/pb/dw/parse/PowerBuilderDWParser.g4"
    def packageName = "com.datascience9.pb.dw.parse"
    def outputDir = "./"

    println 'input args: grammar file ' + grammarFile + ': packageName ' + packageName + ' : outputDir ' + outputDir
    classpath sourceSets.main.runtimeClasspath
    main = "org.antlr.v4.Tool"
    args  grammarFile, "-visitor",  "-package", packageName, "-o", outputDir
}

task generatePbDw() {
    dependsOn generatePbDwLexer, generatePbDwParser
    println 'Generate both lexer and parser successsfully'
}

task generatePbLexer(type: JavaExec) {
    def grammarFile = "./src/main/java/com/datascience9/pb/parse/PowerBuilderLexer.g4"
    def packageName = "com.datascience9.pb.parse"
    def outputDir = "./"

    println 'input args: grammar file ' + grammarFile + ': packageName ' + packageName + ' : outputDir ' + outputDir
    classpath sourceSets.main.runtimeClasspath
    main = "org.antlr.v4.Tool"
    args  grammarFile, "-visitor",  "-package", packageName, "-o", outputDir
}

task generatePbParser(type: JavaExec) {
    def grammarFile = "./src/main/java/com/datascience9/pb/parse/PowerBuilderParser.g4"
    def packageName = "com.datascience9.pb.parse"
    def outputDir = "./"

    println 'input args: grammar file ' + grammarFile + ': packageName ' + packageName + ' : outputDir ' + outputDir
    classpath sourceSets.main.runtimeClasspath
    main = "org.antlr.v4.Tool"
    args  grammarFile, "-visitor",  "-package", packageName, "-o", outputDir
}

task generatePb() {
    dependsOn generatePbLexer, generatePbParser
    println 'Generate both lexer and parser successsfully'
}

task generateMySqlLexer(type: JavaExec) {
    def grammarFile = "./src/main/java/com/datascience9/mysql/parse/MySqlLexer.g4"
    def packageName = "com.datascience9.mysql.parse"
    def outputDir = "./"

    println 'input args: grammar file ' + grammarFile + ': packageName ' + packageName + ' : outputDir ' + outputDir
    classpath sourceSets.main.runtimeClasspath
    main = "org.antlr.v4.Tool"
    args  grammarFile, "-visitor",  "-package", packageName, "-o", outputDir
}

task generateMySqlParser(type: JavaExec) {
    def grammarFile = "./src/main/java/com/datascience9/mysql/parse/MySqlParser.g4"
    def packageName = "com.datascience9.mysql.parse"
    def outputDir = "./"

    println 'input args: grammar file ' + grammarFile + ': packageName ' + packageName + ' : outputDir ' + outputDir
    classpath sourceSets.main.runtimeClasspath
    main = "org.antlr.v4.Tool"
    args  grammarFile, "-visitor",  "-package", packageName, "-o", outputDir
}

task generateMySql() {
    dependsOn generateMySqlLexer, generateMySqlParser
    println 'Generate both lexer and parser successsfully'
}

