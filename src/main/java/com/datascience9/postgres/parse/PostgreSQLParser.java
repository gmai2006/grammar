// Generated from ./src/main/java/com/datascience9/postgres/parse/PostgreSQLParser.g4 by ANTLR 4.9.2
package com.datascience9.postgres.parse;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PostgreSQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		Dollar=1, OPEN_PAREN=2, CLOSE_PAREN=3, OPEN_BRACKET=4, CLOSE_BRACKET=5, 
		COMMA=6, SEMI=7, COLON=8, STAR=9, EQUAL=10, DOT=11, AMPERSAND=12, QUESTION=13, 
		PLUS=14, MINUS=15, SLASH=16, CARET=17, LT=18, GT=19, LESS_LESS=20, GREATER_GREATER=21, 
		COLON_EQUALS=22, LESS_EQUALS=23, EQUALS_GREATER=24, GREATER_EQUALS=25, 
		DOT_DOT=26, NOT_EQUALS=27, NOT_EQUALS_1=28, TYPECAST=29, PERCENT=30, PARAM=31, 
		BITWISE_OR=32, BITWISE_XOR=33, BITWISE_NOT=34, SQUARE_ROOT=35, CUBIC_ROOT=36, 
		FACTORIAL=37, PREFIX_FACTORIAL=38, ABSOLUTE=39, TEXT_PATTERN1=40, TEXT_PATTERN2=41, 
		TEXT_PATTERN3=42, TEXT_PATTERN4=43, CONTAINS=44, IS_CONTAINS=45, OVERLAP=46, 
		CONCAT=47, LENGTH=48, CENTER=49, CLOSET_POINT=50, DISTANT=51, EXTEND_RIGHT=52, 
		EXTEND_LEFT=53, IS_STRICTLY_BELOW=54, IS_STRICTLY_ABOVE=55, EXTEND_ABOVE=56, 
		EXTEND_BELOW=57, IS_BELOW=58, IS_ABOVE=59, INTERSECTION=60, IS_HORIZON=61, 
		IS_VERTICAL=62, IS_PERPENDICULAR=63, IS_PARALLEL=64, SAME=65, ALL=66, 
		ANALYSE=67, ANALYZE=68, AND=69, ANY=70, ARRAY=71, AS=72, ASC=73, ASYMMETRIC=74, 
		BOTH=75, CASE=76, CAST=77, CHECK=78, COLLATE=79, COLUMN=80, CONSTRAINT=81, 
		CREATE=82, CURRENT_CATALOG=83, CURRENT_DATE=84, CURRENT_ROLE=85, CURRENT_TIME=86, 
		CURRENT_TIMESTAMP=87, CURRENT_USER=88, DEFAULT=89, DEFERRABLE=90, DESC=91, 
		DISTINCT=92, DO=93, ELSE=94, EXCEPT=95, FALSE_P=96, FETCH=97, FOR=98, 
		FOREIGN=99, FROM=100, GRANT=101, GROUP_P=102, HAVING=103, IN_P=104, INITIALLY=105, 
		INTERSECT=106, INTO=107, LATERAL_P=108, LEADING=109, LIMIT=110, LOCALTIME=111, 
		LOCALTIMESTAMP=112, NOT=113, NULL_P=114, OFFSET=115, ON=116, ONLY=117, 
		OR=118, ORDER=119, PLACING=120, PRIMARY=121, REFERENCES=122, RETURNING=123, 
		SELECT=124, SESSION_USER=125, SOME=126, SYMMETRIC=127, TABLE=128, THEN=129, 
		TO=130, TRAILING=131, TRUE_P=132, UNION=133, UNIQUE=134, USER=135, USING=136, 
		VARIADIC=137, WHEN=138, WHERE=139, WINDOW=140, WITH=141, AUTHORIZATION=142, 
		BINARY=143, COLLATION=144, CONCURRENTLY=145, CROSS=146, CURRENT_SCHEMA=147, 
		FREEZE=148, FULL=149, ILIKE=150, INNER_P=151, IS=152, ISNULL=153, JOIN=154, 
		LEFT=155, LIKE=156, NATURAL=157, NOTNULL=158, OUTER_P=159, OVER=160, OVERLAPS=161, 
		RIGHT=162, SIMILAR=163, VERBOSE=164, ABORT_P=165, ABSOLUTE_P=166, ACCESS=167, 
		ACTION=168, ADD_P=169, ADMIN=170, AFTER=171, AGGREGATE=172, ALSO=173, 
		ALTER=174, ALWAYS=175, ASSERTION=176, ASSIGNMENT=177, AT=178, ATTRIBUTE=179, 
		BACKWARD=180, BEFORE=181, BEGIN_P=182, BY=183, CACHE=184, CALLED=185, 
		CASCADE=186, CASCADED=187, CATALOG=188, CHAIN=189, CHARACTERISTICS=190, 
		CHECKPOINT=191, CLASS=192, CLOSE=193, CLUSTER=194, COMMENT=195, COMMENTS=196, 
		COMMIT=197, COMMITTED=198, CONFIGURATION=199, CONNECTION=200, CONSTRAINTS=201, 
		CONTENT_P=202, CONTINUE_P=203, CONVERSION_P=204, COPY=205, COST=206, CSV=207, 
		CURSOR=208, CYCLE=209, DATA_P=210, DATABASE=211, DAY_P=212, DEALLOCATE=213, 
		DECLARE=214, DEFAULTS=215, DEFERRED=216, DEFINER=217, DELETE_P=218, DELIMITER=219, 
		DELIMITERS=220, DICTIONARY=221, DISABLE_P=222, DISCARD=223, DOCUMENT_P=224, 
		DOMAIN_P=225, DOUBLE_P=226, DROP=227, EACH=228, ENABLE_P=229, ENCODING=230, 
		ENCRYPTED=231, ENUM_P=232, ESCAPE=233, EVENT=234, EXCLUDE=235, EXCLUDING=236, 
		EXCLUSIVE=237, EXECUTE=238, EXPLAIN=239, EXTENSION=240, EXTERNAL=241, 
		FAMILY=242, FIRST_P=243, FOLLOWING=244, FORCE=245, FORWARD=246, FUNCTION=247, 
		FUNCTIONS=248, GLOBAL=249, GRANTED=250, HANDLER=251, HEADER_P=252, HOLD=253, 
		HOUR_P=254, IDENTITY_P=255, IF_P=256, IMMEDIATE=257, IMMUTABLE=258, IMPLICIT_P=259, 
		INCLUDING=260, INCREMENT=261, INDEX=262, INDEXES=263, INHERIT=264, INHERITS=265, 
		INLINE_P=266, INSENSITIVE=267, INSERT=268, INSTEAD=269, INVOKER=270, ISOLATION=271, 
		KEY=272, LABEL=273, LANGUAGE=274, LARGE_P=275, LAST_P=276, LEAKPROOF=277, 
		LEVEL=278, LISTEN=279, LOAD=280, LOCAL=281, LOCATION=282, LOCK_P=283, 
		MAPPING=284, MATCH=285, MATERIALIZED=286, MAXVALUE=287, MINUTE_P=288, 
		MINVALUE=289, MODE=290, MONTH_P=291, MOVE=292, NAME_P=293, NAMES=294, 
		NEXT=295, NO=296, NOTHING=297, NOTIFY=298, NOWAIT=299, NULLS_P=300, OBJECT_P=301, 
		OF=302, OFF=303, OIDS=304, OPERATOR=305, OPTION=306, OPTIONS=307, OWNED=308, 
		OWNER=309, PARSER=310, PARTIAL=311, PARTITION=312, PASSING=313, PASSWORD=314, 
		PLANS=315, PRECEDING=316, PREPARE=317, PREPARED=318, PRESERVE=319, PRIOR=320, 
		PRIVILEGES=321, PROCEDURAL=322, PROCEDURE=323, PROGRAM=324, QUOTE=325, 
		RANGE=326, READ=327, REASSIGN=328, RECHECK=329, RECURSIVE=330, REF=331, 
		REFRESH=332, REINDEX=333, RELATIVE_P=334, RELEASE=335, RENAME=336, REPEATABLE=337, 
		REPLACE=338, REPLICA=339, RESET=340, RESTART=341, RESTRICT=342, RETURNS=343, 
		REVOKE=344, ROLE=345, ROLLBACK=346, ROWS=347, RULE=348, SAVEPOINT=349, 
		SCHEMA=350, SCROLL=351, SEARCH=352, SECOND_P=353, SECURITY=354, SEQUENCE=355, 
		SEQUENCES=356, SERIALIZABLE=357, SERVER=358, SESSION=359, SET=360, SHARE=361, 
		SHOW=362, SIMPLE=363, SNAPSHOT=364, STABLE=365, STANDALONE_P=366, START=367, 
		STATEMENT=368, STATISTICS=369, STDIN=370, STDOUT=371, STORAGE=372, STRICT_P=373, 
		STRIP_P=374, SYSID=375, SYSTEM_P=376, TABLES=377, TABLESPACE=378, TEMP=379, 
		TEMPLATE=380, TEMPORARY=381, TEXT_P=382, TRANSACTION=383, TRIGGER=384, 
		TRUNCATE=385, TRUSTED=386, TYPE_P=387, TYPES_P=388, UNBOUNDED=389, UNCOMMITTED=390, 
		UNENCRYPTED=391, UNKNOWN=392, UNLISTEN=393, UNLOGGED=394, UNTIL=395, UPDATE=396, 
		VACUUM=397, VALID=398, VALIDATE=399, VALIDATOR=400, VARYING=401, VERSION_P=402, 
		VIEW=403, VOLATILE=404, WHITESPACE_P=405, WITHOUT=406, WORK=407, WRAPPER=408, 
		WRITE=409, XML_P=410, YEAR_P=411, YES_P=412, ZONE=413, BETWEEN=414, BIGINT=415, 
		BIT=416, BOOLEAN_P=417, CHAR_P=418, CHARACTER=419, COALESCE=420, DEC=421, 
		DECIMAL_P=422, EXISTS=423, EXTRACT=424, FLOAT_P=425, GREATEST=426, INOUT=427, 
		INT_P=428, INTEGER=429, INTERVAL=430, LEAST=431, NATIONAL=432, NCHAR=433, 
		NONE=434, NULLIF=435, NUMERIC=436, OVERLAY=437, POSITION=438, PRECISION=439, 
		REAL=440, ROW=441, SETOF=442, SMALLINT=443, SUBSTRING=444, TIME=445, TIMESTAMP=446, 
		TREAT=447, TRIM=448, VALUES=449, VARCHAR=450, XMLATTRIBUTES=451, XMLCONCAT=452, 
		XMLELEMENT=453, XMLEXISTS=454, XMLFOREST=455, XMLPARSE=456, XMLPI=457, 
		XMLROOT=458, XMLSERIALIZE=459, CALL=460, CURRENT_P=461, CATALOG_P=462, 
		ATTACH=463, DETACH=464, EXPRESSION=465, GENERATED=466, LOGGED=467, STORED=468, 
		INCLUDE=469, ROUTINE=470, TRANSFORM=471, IMPORT_P=472, POLICY=473, METHOD=474, 
		REFERENCING=475, NEW=476, OLD=477, VALUE_P=478, SUBSCRIPTION=479, PUBLICATION=480, 
		OUT_P=481, END_P=482, ROUTINES=483, SCHEMAS=484, PROCEDURES=485, INPUT_P=486, 
		SUPPORT=487, PARALLEL=488, SQL_P=489, DEPENDS=490, OVERRIDING=491, CONFLICT=492, 
		SKIP_P=493, LOCKED=494, TIES=495, ROLLUP=496, CUBE=497, GROUPING=498, 
		SETS=499, TABLESAMPLE=500, ORDINALITY=501, XMLTABLE=502, COLUMNS=503, 
		XMLNAMESPACES=504, ROWTYPE=505, NORMALIZED=506, WITHIN=507, FILTER=508, 
		GROUPS=509, OTHERS=510, NFC=511, NFD=512, NFKC=513, NFKD=514, UESCAPE=515, 
		VIEWS=516, NORMALIZE=517, DUMP=518, PRINT_STRICT_PARAMS=519, VARIABLE_CONFLICT=520, 
		ERROR=521, USE_VARIABLE=522, USE_COLUMN=523, ALIAS=524, CONSTANT=525, 
		PERFORM=526, GET=527, DIAGNOSTICS=528, STACKED=529, ELSIF=530, WHILE=531, 
		REVERSE=532, FOREACH=533, SLICE=534, EXIT=535, RETURN=536, QUERY=537, 
		RAISE=538, SQLSTATE=539, DEBUG=540, LOG=541, INFO=542, NOTICE=543, WARNING=544, 
		EXCEPTION=545, ASSERT=546, LOOP=547, OPEN=548, Identifier=549, QuotedIdentifier=550, 
		UnterminatedQuotedIdentifier=551, InvalidQuotedIdentifier=552, InvalidUnterminatedQuotedIdentifier=553, 
		UnicodeQuotedIdentifier=554, UnterminatedUnicodeQuotedIdentifier=555, 
		InvalidUnicodeQuotedIdentifier=556, InvalidUnterminatedUnicodeQuotedIdentifier=557, 
		StringConstant=558, UnterminatedStringConstant=559, UnicodeEscapeStringConstant=560, 
		UnterminatedUnicodeEscapeStringConstant=561, BeginDollarStringConstant=562, 
		BinaryStringConstant=563, UnterminatedBinaryStringConstant=564, InvalidBinaryStringConstant=565, 
		InvalidUnterminatedBinaryStringConstant=566, HexadecimalStringConstant=567, 
		UnterminatedHexadecimalStringConstant=568, InvalidHexadecimalStringConstant=569, 
		InvalidUnterminatedHexadecimalStringConstant=570, Integral=571, NumericFail=572, 
		Numeric=573, PLSQLVARIABLENAME=574, PLSQLIDENTIFIER=575, Whitespace=576, 
		Newline=577, LineComment=578, BlockComment=579, UnterminatedBlockComment=580, 
		MetaCommand=581, EndMetaCommand=582, ErrorCharacter=583, EscapeStringConstant=584, 
		UnterminatedEscapeStringConstant=585, InvalidEscapeStringConstant=586, 
		InvalidUnterminatedEscapeStringConstant=587, AfterEscapeStringConstantMode_NotContinued=588, 
		AfterEscapeStringConstantWithNewlineMode_NotContinued=589, DollarText=590, 
		EndDollarStringConstant=591, AfterEscapeStringConstantWithNewlineMode_Continued=592;
	public static final int
		RULE_root = 0, RULE_plsqlroot = 1, RULE_stmtblock = 2, RULE_stmtmulti = 3, 
		RULE_stmt = 4, RULE_plsqlconsolecommand = 5, RULE_callstmt = 6, RULE_createrolestmt = 7, 
		RULE_opt_with = 8, RULE_optrolelist = 9, RULE_alteroptrolelist = 10, RULE_alteroptroleelem = 11, 
		RULE_createoptroleelem = 12, RULE_createuserstmt = 13, RULE_alterrolestmt = 14, 
		RULE_opt_in_database = 15, RULE_alterrolesetstmt = 16, RULE_droprolestmt = 17, 
		RULE_creategroupstmt = 18, RULE_altergroupstmt = 19, RULE_add_drop = 20, 
		RULE_createschemastmt = 21, RULE_optschemaname = 22, RULE_optschemaeltlist = 23, 
		RULE_schema_stmt = 24, RULE_variablesetstmt = 25, RULE_set_rest = 26, 
		RULE_generic_set = 27, RULE_set_rest_more = 28, RULE_var_name = 29, RULE_var_list = 30, 
		RULE_var_value = 31, RULE_iso_level = 32, RULE_opt_boolean_or_string = 33, 
		RULE_zone_value = 34, RULE_opt_encoding = 35, RULE_nonreservedword_or_sconst = 36, 
		RULE_variableresetstmt = 37, RULE_reset_rest = 38, RULE_generic_reset = 39, 
		RULE_setresetclause = 40, RULE_functionsetresetclause = 41, RULE_variableshowstmt = 42, 
		RULE_constraintssetstmt = 43, RULE_constraints_set_list = 44, RULE_constraints_set_mode = 45, 
		RULE_checkpointstmt = 46, RULE_discardstmt = 47, RULE_altertablestmt = 48, 
		RULE_alter_table_cmds = 49, RULE_partition_cmd = 50, RULE_index_partition_cmd = 51, 
		RULE_alter_table_cmd = 52, RULE_alter_column_default = 53, RULE_opt_drop_behavior = 54, 
		RULE_opt_collate_clause = 55, RULE_alter_using = 56, RULE_replica_identity = 57, 
		RULE_reloptions = 58, RULE_opt_reloptions = 59, RULE_reloption_list = 60, 
		RULE_reloption_elem = 61, RULE_alter_identity_column_option_list = 62, 
		RULE_alter_identity_column_option = 63, RULE_partitionboundspec = 64, 
		RULE_hash_partbound_elem = 65, RULE_hash_partbound = 66, RULE_altercompositetypestmt = 67, 
		RULE_alter_type_cmds = 68, RULE_alter_type_cmd = 69, RULE_closeportalstmt = 70, 
		RULE_copystmt = 71, RULE_copy_from = 72, RULE_opt_program = 73, RULE_copy_file_name = 74, 
		RULE_copy_options = 75, RULE_copy_opt_list = 76, RULE_copy_opt_item = 77, 
		RULE_opt_binary = 78, RULE_copy_delimiter = 79, RULE_opt_using = 80, RULE_copy_generic_opt_list = 81, 
		RULE_copy_generic_opt_elem = 82, RULE_copy_generic_opt_arg = 83, RULE_copy_generic_opt_arg_list = 84, 
		RULE_copy_generic_opt_arg_list_item = 85, RULE_createstmt = 86, RULE_opttemp = 87, 
		RULE_opttableelementlist = 88, RULE_opttypedtableelementlist = 89, RULE_tableelementlist = 90, 
		RULE_typedtableelementlist = 91, RULE_tableelement = 92, RULE_typedtableelement = 93, 
		RULE_columnDef = 94, RULE_columnOptions = 95, RULE_colquallist = 96, RULE_colconstraint = 97, 
		RULE_colconstraintelem = 98, RULE_generated_when = 99, RULE_constraintattr = 100, 
		RULE_tablelikeclause = 101, RULE_tablelikeoptionlist = 102, RULE_tablelikeoption = 103, 
		RULE_tableconstraint = 104, RULE_constraintelem = 105, RULE_opt_no_inherit = 106, 
		RULE_opt_column_list = 107, RULE_columnlist = 108, RULE_columnElem = 109, 
		RULE_opt_c_include = 110, RULE_key_match = 111, RULE_exclusionconstraintlist = 112, 
		RULE_exclusionconstraintelem = 113, RULE_exclusionwhereclause = 114, RULE_key_actions = 115, 
		RULE_key_update = 116, RULE_key_delete = 117, RULE_key_action = 118, RULE_optinherit = 119, 
		RULE_optpartitionspec = 120, RULE_partitionspec = 121, RULE_part_params = 122, 
		RULE_part_elem = 123, RULE_table_access_method_clause = 124, RULE_optwith = 125, 
		RULE_oncommitoption = 126, RULE_opttablespace = 127, RULE_optconstablespace = 128, 
		RULE_existingindex = 129, RULE_createstatsstmt = 130, RULE_alterstatsstmt = 131, 
		RULE_createasstmt = 132, RULE_create_as_target = 133, RULE_opt_with_data = 134, 
		RULE_creatematviewstmt = 135, RULE_create_mv_target = 136, RULE_optnolog = 137, 
		RULE_refreshmatviewstmt = 138, RULE_createseqstmt = 139, RULE_alterseqstmt = 140, 
		RULE_optseqoptlist = 141, RULE_optparenthesizedseqoptlist = 142, RULE_seqoptlist = 143, 
		RULE_seqoptelem = 144, RULE_opt_by = 145, RULE_numericonly = 146, RULE_numericonly_list = 147, 
		RULE_createplangstmt = 148, RULE_opt_trusted = 149, RULE_handler_name = 150, 
		RULE_opt_inline_handler = 151, RULE_validator_clause = 152, RULE_opt_validator = 153, 
		RULE_opt_procedural = 154, RULE_createtablespacestmt = 155, RULE_opttablespaceowner = 156, 
		RULE_droptablespacestmt = 157, RULE_createextensionstmt = 158, RULE_create_extension_opt_list = 159, 
		RULE_create_extension_opt_item = 160, RULE_alterextensionstmt = 161, RULE_alter_extension_opt_list = 162, 
		RULE_alter_extension_opt_item = 163, RULE_alterextensioncontentsstmt = 164, 
		RULE_createfdwstmt = 165, RULE_fdw_option = 166, RULE_fdw_options = 167, 
		RULE_opt_fdw_options = 168, RULE_alterfdwstmt = 169, RULE_create_generic_options = 170, 
		RULE_generic_option_list = 171, RULE_alter_generic_options = 172, RULE_alter_generic_option_list = 173, 
		RULE_alter_generic_option_elem = 174, RULE_generic_option_elem = 175, 
		RULE_generic_option_name = 176, RULE_generic_option_arg = 177, RULE_createforeignserverstmt = 178, 
		RULE_opt_type = 179, RULE_foreign_server_version = 180, RULE_opt_foreign_server_version = 181, 
		RULE_alterforeignserverstmt = 182, RULE_createforeigntablestmt = 183, 
		RULE_importforeignschemastmt = 184, RULE_import_qualification_type = 185, 
		RULE_import_qualification = 186, RULE_createusermappingstmt = 187, RULE_auth_ident = 188, 
		RULE_dropusermappingstmt = 189, RULE_alterusermappingstmt = 190, RULE_createpolicystmt = 191, 
		RULE_alterpolicystmt = 192, RULE_rowsecurityoptionalexpr = 193, RULE_rowsecurityoptionalwithcheck = 194, 
		RULE_rowsecuritydefaulttorole = 195, RULE_rowsecurityoptionaltorole = 196, 
		RULE_rowsecuritydefaultpermissive = 197, RULE_rowsecuritydefaultforcmd = 198, 
		RULE_row_security_cmd = 199, RULE_createamstmt = 200, RULE_am_type = 201, 
		RULE_createtrigstmt = 202, RULE_triggeractiontime = 203, RULE_triggerevents = 204, 
		RULE_triggeroneevent = 205, RULE_triggerreferencing = 206, RULE_triggertransitions = 207, 
		RULE_triggertransition = 208, RULE_transitionoldornew = 209, RULE_transitionrowortable = 210, 
		RULE_transitionrelname = 211, RULE_triggerforspec = 212, RULE_triggerforopteach = 213, 
		RULE_triggerfortype = 214, RULE_triggerwhen = 215, RULE_function_or_procedure = 216, 
		RULE_triggerfuncargs = 217, RULE_triggerfuncarg = 218, RULE_optconstrfromtable = 219, 
		RULE_constraintattributespec = 220, RULE_constraintattributeElem = 221, 
		RULE_createeventtrigstmt = 222, RULE_event_trigger_when_list = 223, RULE_event_trigger_when_item = 224, 
		RULE_event_trigger_value_list = 225, RULE_altereventtrigstmt = 226, RULE_enable_trigger = 227, 
		RULE_createassertionstmt = 228, RULE_definestmt = 229, RULE_definition = 230, 
		RULE_def_list = 231, RULE_def_elem = 232, RULE_def_arg = 233, RULE_old_aggr_definition = 234, 
		RULE_old_aggr_list = 235, RULE_old_aggr_elem = 236, RULE_opt_enum_val_list = 237, 
		RULE_enum_val_list = 238, RULE_alterenumstmt = 239, RULE_opt_if_not_exists = 240, 
		RULE_createopclassstmt = 241, RULE_opclass_item_list = 242, RULE_opclass_item = 243, 
		RULE_opt_default = 244, RULE_opt_opfamily = 245, RULE_opclass_purpose = 246, 
		RULE_opt_recheck = 247, RULE_createopfamilystmt = 248, RULE_alteropfamilystmt = 249, 
		RULE_opclass_drop_list = 250, RULE_opclass_drop = 251, RULE_dropopclassstmt = 252, 
		RULE_dropopfamilystmt = 253, RULE_dropownedstmt = 254, RULE_reassignownedstmt = 255, 
		RULE_dropstmt = 256, RULE_object_type_any_name = 257, RULE_object_type_name = 258, 
		RULE_drop_type_name = 259, RULE_object_type_name_on_any_name = 260, RULE_any_name_list = 261, 
		RULE_any_name = 262, RULE_attrs = 263, RULE_type_name_list = 264, RULE_truncatestmt = 265, 
		RULE_opt_restart_seqs = 266, RULE_commentstmt = 267, RULE_comment_text = 268, 
		RULE_seclabelstmt = 269, RULE_opt_provider = 270, RULE_security_label = 271, 
		RULE_fetchstmt = 272, RULE_fetch_args = 273, RULE_from_in = 274, RULE_opt_from_in = 275, 
		RULE_grantstmt = 276, RULE_revokestmt = 277, RULE_privileges = 278, RULE_privilege_list = 279, 
		RULE_privilege = 280, RULE_privilege_target = 281, RULE_grantee_list = 282, 
		RULE_grantee = 283, RULE_opt_grant_grant_option = 284, RULE_grantrolestmt = 285, 
		RULE_revokerolestmt = 286, RULE_opt_grant_admin_option = 287, RULE_opt_granted_by = 288, 
		RULE_alterdefaultprivilegesstmt = 289, RULE_defacloptionlist = 290, RULE_defacloption = 291, 
		RULE_defaclaction = 292, RULE_defacl_privilege_target = 293, RULE_indexstmt = 294, 
		RULE_opt_unique = 295, RULE_opt_concurrently = 296, RULE_opt_index_name = 297, 
		RULE_access_method_clause = 298, RULE_index_params = 299, RULE_index_elem_options = 300, 
		RULE_index_elem = 301, RULE_opt_include = 302, RULE_index_including_params = 303, 
		RULE_opt_collate = 304, RULE_opt_class = 305, RULE_opt_asc_desc = 306, 
		RULE_opt_nulls_order = 307, RULE_createfunctionstmt = 308, RULE_opt_or_replace = 309, 
		RULE_func_args = 310, RULE_func_args_list = 311, RULE_function_with_argtypes_list = 312, 
		RULE_function_with_argtypes = 313, RULE_func_args_with_defaults = 314, 
		RULE_func_args_with_defaults_list = 315, RULE_func_arg = 316, RULE_arg_class = 317, 
		RULE_param_name = 318, RULE_func_return = 319, RULE_func_type = 320, RULE_func_arg_with_default = 321, 
		RULE_aggr_arg = 322, RULE_aggr_args = 323, RULE_aggr_args_list = 324, 
		RULE_aggregate_with_argtypes = 325, RULE_aggregate_with_argtypes_list = 326, 
		RULE_createfunc_opt_list = 327, RULE_common_func_opt_item = 328, RULE_createfunc_opt_item = 329, 
		RULE_func_as = 330, RULE_transform_type_list = 331, RULE_opt_definition = 332, 
		RULE_table_func_column = 333, RULE_table_func_column_list = 334, RULE_alterfunctionstmt = 335, 
		RULE_alterfunc_opt_list = 336, RULE_opt_restrict = 337, RULE_removefuncstmt = 338, 
		RULE_removeaggrstmt = 339, RULE_removeoperstmt = 340, RULE_oper_argtypes = 341, 
		RULE_any_operator = 342, RULE_operator_with_argtypes_list = 343, RULE_operator_with_argtypes = 344, 
		RULE_dostmt = 345, RULE_dostmt_opt_list = 346, RULE_dostmt_opt_item = 347, 
		RULE_createcaststmt = 348, RULE_cast_context = 349, RULE_dropcaststmt = 350, 
		RULE_opt_if_exists = 351, RULE_createtransformstmt = 352, RULE_transform_element_list = 353, 
		RULE_droptransformstmt = 354, RULE_reindexstmt = 355, RULE_reindex_target_type = 356, 
		RULE_reindex_target_multitable = 357, RULE_reindex_option_list = 358, 
		RULE_reindex_option_elem = 359, RULE_altertblspcstmt = 360, RULE_renamestmt = 361, 
		RULE_opt_column = 362, RULE_opt_set_data = 363, RULE_alterobjectdependsstmt = 364, 
		RULE_opt_no = 365, RULE_alterobjectschemastmt = 366, RULE_alteroperatorstmt = 367, 
		RULE_operator_def_list = 368, RULE_operator_def_elem = 369, RULE_operator_def_arg = 370, 
		RULE_altertypestmt = 371, RULE_alterownerstmt = 372, RULE_createpublicationstmt = 373, 
		RULE_opt_publication_for_tables = 374, RULE_publication_for_tables = 375, 
		RULE_alterpublicationstmt = 376, RULE_createsubscriptionstmt = 377, RULE_publication_name_list = 378, 
		RULE_publication_name_item = 379, RULE_altersubscriptionstmt = 380, RULE_dropsubscriptionstmt = 381, 
		RULE_rulestmt = 382, RULE_ruleactionlist = 383, RULE_ruleactionmulti = 384, 
		RULE_ruleactionstmt = 385, RULE_ruleactionstmtOrEmpty = 386, RULE_event = 387, 
		RULE_opt_instead = 388, RULE_notifystmt = 389, RULE_notify_payload = 390, 
		RULE_listenstmt = 391, RULE_unlistenstmt = 392, RULE_transactionstmt = 393, 
		RULE_opt_transaction = 394, RULE_transaction_mode_item = 395, RULE_transaction_mode_list = 396, 
		RULE_transaction_mode_list_or_empty = 397, RULE_opt_transaction_chain = 398, 
		RULE_viewstmt = 399, RULE_opt_check_option = 400, RULE_loadstmt = 401, 
		RULE_createdbstmt = 402, RULE_createdb_opt_list = 403, RULE_createdb_opt_items = 404, 
		RULE_createdb_opt_item = 405, RULE_createdb_opt_name = 406, RULE_opt_equal = 407, 
		RULE_alterdatabasestmt = 408, RULE_alterdatabasesetstmt = 409, RULE_dropdbstmt = 410, 
		RULE_drop_option_list = 411, RULE_drop_option = 412, RULE_altercollationstmt = 413, 
		RULE_altersystemstmt = 414, RULE_createdomainstmt = 415, RULE_alterdomainstmt = 416, 
		RULE_opt_as = 417, RULE_altertsdictionarystmt = 418, RULE_altertsconfigurationstmt = 419, 
		RULE_any_with = 420, RULE_createconversionstmt = 421, RULE_clusterstmt = 422, 
		RULE_cluster_index_specification = 423, RULE_vacuumstmt = 424, RULE_analyzestmt = 425, 
		RULE_vac_analyze_option_list = 426, RULE_analyze_keyword = 427, RULE_vac_analyze_option_elem = 428, 
		RULE_vac_analyze_option_name = 429, RULE_vac_analyze_option_arg = 430, 
		RULE_opt_analyze = 431, RULE_opt_verbose = 432, RULE_opt_full = 433, RULE_opt_freeze = 434, 
		RULE_opt_name_list = 435, RULE_vacuum_relation = 436, RULE_vacuum_relation_list = 437, 
		RULE_opt_vacuum_relation_list = 438, RULE_explainstmt = 439, RULE_explainablestmt = 440, 
		RULE_explain_option_list = 441, RULE_explain_option_elem = 442, RULE_explain_option_name = 443, 
		RULE_explain_option_arg = 444, RULE_preparestmt = 445, RULE_prep_type_clause = 446, 
		RULE_preparablestmt = 447, RULE_executestmt = 448, RULE_execute_param_clause = 449, 
		RULE_deallocatestmt = 450, RULE_insertstmt = 451, RULE_insert_target = 452, 
		RULE_insert_rest = 453, RULE_override_kind = 454, RULE_insert_column_list = 455, 
		RULE_insert_column_item = 456, RULE_opt_on_conflict = 457, RULE_opt_conf_expr = 458, 
		RULE_returning_clause = 459, RULE_deletestmt = 460, RULE_using_clause = 461, 
		RULE_lockstmt = 462, RULE_opt_lock = 463, RULE_lock_type = 464, RULE_opt_nowait = 465, 
		RULE_opt_nowait_or_skip = 466, RULE_updatestmt = 467, RULE_set_clause_list = 468, 
		RULE_set_clause = 469, RULE_set_target = 470, RULE_set_target_list = 471, 
		RULE_declarecursorstmt = 472, RULE_cursor_name = 473, RULE_cursor_options = 474, 
		RULE_opt_hold = 475, RULE_selectstmt = 476, RULE_select_with_parens = 477, 
		RULE_select_no_parens = 478, RULE_select_clause = 479, RULE_simple_select = 480, 
		RULE_set_operator = 481, RULE_set_operator_with_all_or_distinct = 482, 
		RULE_with_clause = 483, RULE_cte_list = 484, RULE_common_table_expr = 485, 
		RULE_opt_materialized = 486, RULE_opt_with_clause = 487, RULE_into_clause = 488, 
		RULE_opt_strict = 489, RULE_opttempTableName = 490, RULE_opt_table = 491, 
		RULE_all_or_distinct = 492, RULE_distinct_clause = 493, RULE_opt_all_clause = 494, 
		RULE_opt_sort_clause = 495, RULE_sort_clause = 496, RULE_sortby_list = 497, 
		RULE_sortby = 498, RULE_select_limit = 499, RULE_opt_select_limit = 500, 
		RULE_limit_clause = 501, RULE_offset_clause = 502, RULE_select_limit_value = 503, 
		RULE_select_offset_value = 504, RULE_select_fetch_first_value = 505, RULE_i_or_f_const = 506, 
		RULE_row_or_rows = 507, RULE_first_or_next = 508, RULE_group_clause = 509, 
		RULE_group_by_list = 510, RULE_group_by_item = 511, RULE_empty_grouping_set = 512, 
		RULE_rollup_clause = 513, RULE_cube_clause = 514, RULE_grouping_sets_clause = 515, 
		RULE_having_clause = 516, RULE_for_locking_clause = 517, RULE_opt_for_locking_clause = 518, 
		RULE_for_locking_items = 519, RULE_for_locking_item = 520, RULE_for_locking_strength = 521, 
		RULE_locked_rels_list = 522, RULE_values_clause = 523, RULE_from_clause = 524, 
		RULE_from_list = 525, RULE_table_ref = 526, RULE_alias_clause = 527, RULE_opt_alias_clause = 528, 
		RULE_func_alias_clause = 529, RULE_join_type = 530, RULE_join_outer = 531, 
		RULE_join_qual = 532, RULE_relation_expr = 533, RULE_relation_expr_list = 534, 
		RULE_relation_expr_opt_alias = 535, RULE_tablesample_clause = 536, RULE_opt_repeatable_clause = 537, 
		RULE_func_table = 538, RULE_rowsfrom_item = 539, RULE_rowsfrom_list = 540, 
		RULE_opt_col_def_list = 541, RULE_opt_ordinality = 542, RULE_where_clause = 543, 
		RULE_where_or_current_clause = 544, RULE_opttablefuncelementlist = 545, 
		RULE_tablefuncelementlist = 546, RULE_tablefuncelement = 547, RULE_xmltable = 548, 
		RULE_xmltable_column_list = 549, RULE_xmltable_column_el = 550, RULE_xmltable_column_option_list = 551, 
		RULE_xmltable_column_option_el = 552, RULE_xml_namespace_list = 553, RULE_xml_namespace_el = 554, 
		RULE_typename = 555, RULE_opt_array_bounds = 556, RULE_simpletypename = 557, 
		RULE_consttypename = 558, RULE_generictype = 559, RULE_opt_type_modifiers = 560, 
		RULE_numeric = 561, RULE_opt_float = 562, RULE_bit = 563, RULE_constbit = 564, 
		RULE_bitwithlength = 565, RULE_bitwithoutlength = 566, RULE_character = 567, 
		RULE_constcharacter = 568, RULE_characterWithLength = 569, RULE_characterWithoutLength = 570, 
		RULE_character_c = 571, RULE_opt_varying = 572, RULE_constdatetime = 573, 
		RULE_constinterval = 574, RULE_opt_timezone = 575, RULE_opt_interval = 576, 
		RULE_interval_second = 577, RULE_opt_escape = 578, RULE_a_expr = 579, 
		RULE_not_la = 580, RULE_b_expr = 581, RULE_c_expr = 582, RULE_plsqlvariablename = 583, 
		RULE_func_application = 584, RULE_func_expr = 585, RULE_func_expr_windowless = 586, 
		RULE_func_expr_common_subexpr = 587, RULE_xml_root_version = 588, RULE_opt_xml_root_standalone = 589, 
		RULE_xml_attributes = 590, RULE_xml_attribute_list = 591, RULE_xml_attribute_el = 592, 
		RULE_document_or_content = 593, RULE_xml_whitespace_option = 594, RULE_xmlexists_argument = 595, 
		RULE_xml_passing_mech = 596, RULE_within_group_clause = 597, RULE_filter_clause = 598, 
		RULE_window_clause = 599, RULE_window_definition_list = 600, RULE_window_definition = 601, 
		RULE_over_clause = 602, RULE_window_specification = 603, RULE_opt_existing_window_name = 604, 
		RULE_opt_partition_clause = 605, RULE_opt_frame_clause = 606, RULE_frame_extent = 607, 
		RULE_frame_bound = 608, RULE_opt_window_exclusion_clause = 609, RULE_row = 610, 
		RULE_explicit_row = 611, RULE_implicit_row = 612, RULE_sub_type = 613, 
		RULE_all_op = 614, RULE_text_patterns = 615, RULE_geometric_operators = 616, 
		RULE_mathop = 617, RULE_qual_op = 618, RULE_qual_all_op = 619, RULE_subquery_Op = 620, 
		RULE_expr_list = 621, RULE_func_arg_list = 622, RULE_func_arg_expr = 623, 
		RULE_type_list = 624, RULE_array_expr = 625, RULE_array_expr_list = 626, 
		RULE_extract_list = 627, RULE_extract_arg = 628, RULE_unicode_normal_form = 629, 
		RULE_overlay_list = 630, RULE_position_list = 631, RULE_substr_list = 632, 
		RULE_trim_list = 633, RULE_in_expr = 634, RULE_case_expr = 635, RULE_when_clause_list = 636, 
		RULE_when_clause = 637, RULE_case_default = 638, RULE_case_arg = 639, 
		RULE_columnref = 640, RULE_indirection_el = 641, RULE_opt_slice_bound = 642, 
		RULE_indirection = 643, RULE_opt_indirection = 644, RULE_opt_asymmetric = 645, 
		RULE_opt_target_list = 646, RULE_target_list = 647, RULE_target_el = 648, 
		RULE_qualified_name_list = 649, RULE_qualified_name = 650, RULE_name_list = 651, 
		RULE_name = 652, RULE_attr_name = 653, RULE_file_name = 654, RULE_func_name = 655, 
		RULE_aexprconst = 656, RULE_xconst = 657, RULE_bconst = 658, RULE_fconst = 659, 
		RULE_iconst = 660, RULE_sconst = 661, RULE_anysconst = 662, RULE_opt_uescape = 663, 
		RULE_signediconst = 664, RULE_roleid = 665, RULE_rolespec = 666, RULE_role_list = 667, 
		RULE_colid = 668, RULE_type_function_name = 669, RULE_nonreservedword = 670, 
		RULE_collabel = 671, RULE_identifier = 672, RULE_plsqlidentifier = 673, 
		RULE_unreserved_keyword = 674, RULE_col_name_keyword = 675, RULE_type_func_name_keyword = 676, 
		RULE_reserved_keyword = 677, RULE_pl_function = 678, RULE_comp_options = 679, 
		RULE_comp_option = 680, RULE_operator = 681, RULE_sharp = 682, RULE_option_value = 683, 
		RULE_opt_semi = 684, RULE_pl_block = 685, RULE_decl_sect = 686, RULE_decl_start = 687, 
		RULE_decl_stmts = 688, RULE_label_decl = 689, RULE_decl_stmt = 690, RULE_decl_statement = 691, 
		RULE_opt_scrollable = 692, RULE_decl_cursor_query = 693, RULE_decl_cursor_args = 694, 
		RULE_decl_cursor_arglist = 695, RULE_decl_cursor_arg = 696, RULE_decl_is_for = 697, 
		RULE_decl_aliasitem = 698, RULE_decl_varname = 699, RULE_decl_const = 700, 
		RULE_decl_datatype = 701, RULE_decl_collate = 702, RULE_decl_notnull = 703, 
		RULE_decl_defval = 704, RULE_decl_defkey = 705, RULE_assign_operator = 706, 
		RULE_proc_sect = 707, RULE_proc_stmt = 708, RULE_stmt_perform = 709, RULE_stmt_call = 710, 
		RULE_opt_expr_list = 711, RULE_stmt_assign = 712, RULE_stmt_getdiag = 713, 
		RULE_getdiag_area_opt = 714, RULE_getdiag_list = 715, RULE_getdiag_list_item = 716, 
		RULE_getdiag_item = 717, RULE_getdiag_target = 718, RULE_assign_var = 719, 
		RULE_stmt_if = 720, RULE_stmt_elsifs = 721, RULE_stmt_else = 722, RULE_stmt_case = 723, 
		RULE_opt_expr_until_when = 724, RULE_case_when_list = 725, RULE_case_when = 726, 
		RULE_opt_case_else = 727, RULE_stmt_loop = 728, RULE_stmt_while = 729, 
		RULE_stmt_for = 730, RULE_for_control = 731, RULE_opt_for_using_expression = 732, 
		RULE_opt_cursor_parameters = 733, RULE_opt_reverse = 734, RULE_opt_by_expression = 735, 
		RULE_for_variable = 736, RULE_stmt_foreach_a = 737, RULE_foreach_slice = 738, 
		RULE_stmt_exit = 739, RULE_exit_type = 740, RULE_stmt_return = 741, RULE_opt_return_result = 742, 
		RULE_stmt_raise = 743, RULE_opt_stmt_raise_level = 744, RULE_opt_raise_list = 745, 
		RULE_opt_raise_using = 746, RULE_opt_raise_using_elem = 747, RULE_opt_raise_using_elem_list = 748, 
		RULE_stmt_assert = 749, RULE_opt_stmt_assert_message = 750, RULE_loop_body = 751, 
		RULE_stmt_execsql = 752, RULE_stmt_dynexecute = 753, RULE_opt_execute_using = 754, 
		RULE_opt_execute_using_list = 755, RULE_opt_execute_into = 756, RULE_stmt_open = 757, 
		RULE_opt_open_bound_list_item = 758, RULE_opt_open_bound_list = 759, RULE_opt_open_using = 760, 
		RULE_sql_expression_list = 761, RULE_opt_scroll_option = 762, RULE_opt_scroll_option_no = 763, 
		RULE_stmt_fetch = 764, RULE_into_target = 765, RULE_opt_cursor_from = 766, 
		RULE_opt_fetch_direction = 767, RULE_stmt_move = 768, RULE_stmt_close = 769, 
		RULE_stmt_null = 770, RULE_stmt_commit = 771, RULE_stmt_rollback = 772, 
		RULE_plsql_opt_transaction_chain = 773, RULE_stmt_set = 774, RULE_cursor_variable = 775, 
		RULE_exception_sect = 776, RULE_proc_exceptions = 777, RULE_proc_exception = 778, 
		RULE_proc_conditions = 779, RULE_proc_condition = 780, RULE_opt_block_label = 781, 
		RULE_opt_loop_label = 782, RULE_opt_label = 783, RULE_opt_exitcond = 784, 
		RULE_any_identifier = 785, RULE_plsql_unreserved_keyword = 786, RULE_sql_expression = 787, 
		RULE_expr_until_then = 788, RULE_expr_until_semi = 789, RULE_expr_until_rightbracket = 790, 
		RULE_expr_until_loop = 791, RULE_make_execsql_stmt = 792, RULE_opt_returning_clause_into = 793;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "plsqlroot", "stmtblock", "stmtmulti", "stmt", "plsqlconsolecommand", 
			"callstmt", "createrolestmt", "opt_with", "optrolelist", "alteroptrolelist", 
			"alteroptroleelem", "createoptroleelem", "createuserstmt", "alterrolestmt", 
			"opt_in_database", "alterrolesetstmt", "droprolestmt", "creategroupstmt", 
			"altergroupstmt", "add_drop", "createschemastmt", "optschemaname", "optschemaeltlist", 
			"schema_stmt", "variablesetstmt", "set_rest", "generic_set", "set_rest_more", 
			"var_name", "var_list", "var_value", "iso_level", "opt_boolean_or_string", 
			"zone_value", "opt_encoding", "nonreservedword_or_sconst", "variableresetstmt", 
			"reset_rest", "generic_reset", "setresetclause", "functionsetresetclause", 
			"variableshowstmt", "constraintssetstmt", "constraints_set_list", "constraints_set_mode", 
			"checkpointstmt", "discardstmt", "altertablestmt", "alter_table_cmds", 
			"partition_cmd", "index_partition_cmd", "alter_table_cmd", "alter_column_default", 
			"opt_drop_behavior", "opt_collate_clause", "alter_using", "replica_identity", 
			"reloptions", "opt_reloptions", "reloption_list", "reloption_elem", "alter_identity_column_option_list", 
			"alter_identity_column_option", "partitionboundspec", "hash_partbound_elem", 
			"hash_partbound", "altercompositetypestmt", "alter_type_cmds", "alter_type_cmd", 
			"closeportalstmt", "copystmt", "copy_from", "opt_program", "copy_file_name", 
			"copy_options", "copy_opt_list", "copy_opt_item", "opt_binary", "copy_delimiter", 
			"opt_using", "copy_generic_opt_list", "copy_generic_opt_elem", "copy_generic_opt_arg", 
			"copy_generic_opt_arg_list", "copy_generic_opt_arg_list_item", "createstmt", 
			"opttemp", "opttableelementlist", "opttypedtableelementlist", "tableelementlist", 
			"typedtableelementlist", "tableelement", "typedtableelement", "columnDef", 
			"columnOptions", "colquallist", "colconstraint", "colconstraintelem", 
			"generated_when", "constraintattr", "tablelikeclause", "tablelikeoptionlist", 
			"tablelikeoption", "tableconstraint", "constraintelem", "opt_no_inherit", 
			"opt_column_list", "columnlist", "columnElem", "opt_c_include", "key_match", 
			"exclusionconstraintlist", "exclusionconstraintelem", "exclusionwhereclause", 
			"key_actions", "key_update", "key_delete", "key_action", "optinherit", 
			"optpartitionspec", "partitionspec", "part_params", "part_elem", "table_access_method_clause", 
			"optwith", "oncommitoption", "opttablespace", "optconstablespace", "existingindex", 
			"createstatsstmt", "alterstatsstmt", "createasstmt", "create_as_target", 
			"opt_with_data", "creatematviewstmt", "create_mv_target", "optnolog", 
			"refreshmatviewstmt", "createseqstmt", "alterseqstmt", "optseqoptlist", 
			"optparenthesizedseqoptlist", "seqoptlist", "seqoptelem", "opt_by", "numericonly", 
			"numericonly_list", "createplangstmt", "opt_trusted", "handler_name", 
			"opt_inline_handler", "validator_clause", "opt_validator", "opt_procedural", 
			"createtablespacestmt", "opttablespaceowner", "droptablespacestmt", "createextensionstmt", 
			"create_extension_opt_list", "create_extension_opt_item", "alterextensionstmt", 
			"alter_extension_opt_list", "alter_extension_opt_item", "alterextensioncontentsstmt", 
			"createfdwstmt", "fdw_option", "fdw_options", "opt_fdw_options", "alterfdwstmt", 
			"create_generic_options", "generic_option_list", "alter_generic_options", 
			"alter_generic_option_list", "alter_generic_option_elem", "generic_option_elem", 
			"generic_option_name", "generic_option_arg", "createforeignserverstmt", 
			"opt_type", "foreign_server_version", "opt_foreign_server_version", "alterforeignserverstmt", 
			"createforeigntablestmt", "importforeignschemastmt", "import_qualification_type", 
			"import_qualification", "createusermappingstmt", "auth_ident", "dropusermappingstmt", 
			"alterusermappingstmt", "createpolicystmt", "alterpolicystmt", "rowsecurityoptionalexpr", 
			"rowsecurityoptionalwithcheck", "rowsecuritydefaulttorole", "rowsecurityoptionaltorole", 
			"rowsecuritydefaultpermissive", "rowsecuritydefaultforcmd", "row_security_cmd", 
			"createamstmt", "am_type", "createtrigstmt", "triggeractiontime", "triggerevents", 
			"triggeroneevent", "triggerreferencing", "triggertransitions", "triggertransition", 
			"transitionoldornew", "transitionrowortable", "transitionrelname", "triggerforspec", 
			"triggerforopteach", "triggerfortype", "triggerwhen", "function_or_procedure", 
			"triggerfuncargs", "triggerfuncarg", "optconstrfromtable", "constraintattributespec", 
			"constraintattributeElem", "createeventtrigstmt", "event_trigger_when_list", 
			"event_trigger_when_item", "event_trigger_value_list", "altereventtrigstmt", 
			"enable_trigger", "createassertionstmt", "definestmt", "definition", 
			"def_list", "def_elem", "def_arg", "old_aggr_definition", "old_aggr_list", 
			"old_aggr_elem", "opt_enum_val_list", "enum_val_list", "alterenumstmt", 
			"opt_if_not_exists", "createopclassstmt", "opclass_item_list", "opclass_item", 
			"opt_default", "opt_opfamily", "opclass_purpose", "opt_recheck", "createopfamilystmt", 
			"alteropfamilystmt", "opclass_drop_list", "opclass_drop", "dropopclassstmt", 
			"dropopfamilystmt", "dropownedstmt", "reassignownedstmt", "dropstmt", 
			"object_type_any_name", "object_type_name", "drop_type_name", "object_type_name_on_any_name", 
			"any_name_list", "any_name", "attrs", "type_name_list", "truncatestmt", 
			"opt_restart_seqs", "commentstmt", "comment_text", "seclabelstmt", "opt_provider", 
			"security_label", "fetchstmt", "fetch_args", "from_in", "opt_from_in", 
			"grantstmt", "revokestmt", "privileges", "privilege_list", "privilege", 
			"privilege_target", "grantee_list", "grantee", "opt_grant_grant_option", 
			"grantrolestmt", "revokerolestmt", "opt_grant_admin_option", "opt_granted_by", 
			"alterdefaultprivilegesstmt", "defacloptionlist", "defacloption", "defaclaction", 
			"defacl_privilege_target", "indexstmt", "opt_unique", "opt_concurrently", 
			"opt_index_name", "access_method_clause", "index_params", "index_elem_options", 
			"index_elem", "opt_include", "index_including_params", "opt_collate", 
			"opt_class", "opt_asc_desc", "opt_nulls_order", "createfunctionstmt", 
			"opt_or_replace", "func_args", "func_args_list", "function_with_argtypes_list", 
			"function_with_argtypes", "func_args_with_defaults", "func_args_with_defaults_list", 
			"func_arg", "arg_class", "param_name", "func_return", "func_type", "func_arg_with_default", 
			"aggr_arg", "aggr_args", "aggr_args_list", "aggregate_with_argtypes", 
			"aggregate_with_argtypes_list", "createfunc_opt_list", "common_func_opt_item", 
			"createfunc_opt_item", "func_as", "transform_type_list", "opt_definition", 
			"table_func_column", "table_func_column_list", "alterfunctionstmt", "alterfunc_opt_list", 
			"opt_restrict", "removefuncstmt", "removeaggrstmt", "removeoperstmt", 
			"oper_argtypes", "any_operator", "operator_with_argtypes_list", "operator_with_argtypes", 
			"dostmt", "dostmt_opt_list", "dostmt_opt_item", "createcaststmt", "cast_context", 
			"dropcaststmt", "opt_if_exists", "createtransformstmt", "transform_element_list", 
			"droptransformstmt", "reindexstmt", "reindex_target_type", "reindex_target_multitable", 
			"reindex_option_list", "reindex_option_elem", "altertblspcstmt", "renamestmt", 
			"opt_column", "opt_set_data", "alterobjectdependsstmt", "opt_no", "alterobjectschemastmt", 
			"alteroperatorstmt", "operator_def_list", "operator_def_elem", "operator_def_arg", 
			"altertypestmt", "alterownerstmt", "createpublicationstmt", "opt_publication_for_tables", 
			"publication_for_tables", "alterpublicationstmt", "createsubscriptionstmt", 
			"publication_name_list", "publication_name_item", "altersubscriptionstmt", 
			"dropsubscriptionstmt", "rulestmt", "ruleactionlist", "ruleactionmulti", 
			"ruleactionstmt", "ruleactionstmtOrEmpty", "event", "opt_instead", "notifystmt", 
			"notify_payload", "listenstmt", "unlistenstmt", "transactionstmt", "opt_transaction", 
			"transaction_mode_item", "transaction_mode_list", "transaction_mode_list_or_empty", 
			"opt_transaction_chain", "viewstmt", "opt_check_option", "loadstmt", 
			"createdbstmt", "createdb_opt_list", "createdb_opt_items", "createdb_opt_item", 
			"createdb_opt_name", "opt_equal", "alterdatabasestmt", "alterdatabasesetstmt", 
			"dropdbstmt", "drop_option_list", "drop_option", "altercollationstmt", 
			"altersystemstmt", "createdomainstmt", "alterdomainstmt", "opt_as", "altertsdictionarystmt", 
			"altertsconfigurationstmt", "any_with", "createconversionstmt", "clusterstmt", 
			"cluster_index_specification", "vacuumstmt", "analyzestmt", "vac_analyze_option_list", 
			"analyze_keyword", "vac_analyze_option_elem", "vac_analyze_option_name", 
			"vac_analyze_option_arg", "opt_analyze", "opt_verbose", "opt_full", "opt_freeze", 
			"opt_name_list", "vacuum_relation", "vacuum_relation_list", "opt_vacuum_relation_list", 
			"explainstmt", "explainablestmt", "explain_option_list", "explain_option_elem", 
			"explain_option_name", "explain_option_arg", "preparestmt", "prep_type_clause", 
			"preparablestmt", "executestmt", "execute_param_clause", "deallocatestmt", 
			"insertstmt", "insert_target", "insert_rest", "override_kind", "insert_column_list", 
			"insert_column_item", "opt_on_conflict", "opt_conf_expr", "returning_clause", 
			"deletestmt", "using_clause", "lockstmt", "opt_lock", "lock_type", "opt_nowait", 
			"opt_nowait_or_skip", "updatestmt", "set_clause_list", "set_clause", 
			"set_target", "set_target_list", "declarecursorstmt", "cursor_name", 
			"cursor_options", "opt_hold", "selectstmt", "select_with_parens", "select_no_parens", 
			"select_clause", "simple_select", "set_operator", "set_operator_with_all_or_distinct", 
			"with_clause", "cte_list", "common_table_expr", "opt_materialized", "opt_with_clause", 
			"into_clause", "opt_strict", "opttempTableName", "opt_table", "all_or_distinct", 
			"distinct_clause", "opt_all_clause", "opt_sort_clause", "sort_clause", 
			"sortby_list", "sortby", "select_limit", "opt_select_limit", "limit_clause", 
			"offset_clause", "select_limit_value", "select_offset_value", "select_fetch_first_value", 
			"i_or_f_const", "row_or_rows", "first_or_next", "group_clause", "group_by_list", 
			"group_by_item", "empty_grouping_set", "rollup_clause", "cube_clause", 
			"grouping_sets_clause", "having_clause", "for_locking_clause", "opt_for_locking_clause", 
			"for_locking_items", "for_locking_item", "for_locking_strength", "locked_rels_list", 
			"values_clause", "from_clause", "from_list", "table_ref", "alias_clause", 
			"opt_alias_clause", "func_alias_clause", "join_type", "join_outer", "join_qual", 
			"relation_expr", "relation_expr_list", "relation_expr_opt_alias", "tablesample_clause", 
			"opt_repeatable_clause", "func_table", "rowsfrom_item", "rowsfrom_list", 
			"opt_col_def_list", "opt_ordinality", "where_clause", "where_or_current_clause", 
			"opttablefuncelementlist", "tablefuncelementlist", "tablefuncelement", 
			"xmltable", "xmltable_column_list", "xmltable_column_el", "xmltable_column_option_list", 
			"xmltable_column_option_el", "xml_namespace_list", "xml_namespace_el", 
			"typename", "opt_array_bounds", "simpletypename", "consttypename", "generictype", 
			"opt_type_modifiers", "numeric", "opt_float", "bit", "constbit", "bitwithlength", 
			"bitwithoutlength", "character", "constcharacter", "characterWithLength", 
			"characterWithoutLength", "character_c", "opt_varying", "constdatetime", 
			"constinterval", "opt_timezone", "opt_interval", "interval_second", "opt_escape", 
			"a_expr", "not_la", "b_expr", "c_expr", "plsqlvariablename", "func_application", 
			"func_expr", "func_expr_windowless", "func_expr_common_subexpr", "xml_root_version", 
			"opt_xml_root_standalone", "xml_attributes", "xml_attribute_list", "xml_attribute_el", 
			"document_or_content", "xml_whitespace_option", "xmlexists_argument", 
			"xml_passing_mech", "within_group_clause", "filter_clause", "window_clause", 
			"window_definition_list", "window_definition", "over_clause", "window_specification", 
			"opt_existing_window_name", "opt_partition_clause", "opt_frame_clause", 
			"frame_extent", "frame_bound", "opt_window_exclusion_clause", "row", 
			"explicit_row", "implicit_row", "sub_type", "all_op", "text_patterns", 
			"geometric_operators", "mathop", "qual_op", "qual_all_op", "subquery_Op", 
			"expr_list", "func_arg_list", "func_arg_expr", "type_list", "array_expr", 
			"array_expr_list", "extract_list", "extract_arg", "unicode_normal_form", 
			"overlay_list", "position_list", "substr_list", "trim_list", "in_expr", 
			"case_expr", "when_clause_list", "when_clause", "case_default", "case_arg", 
			"columnref", "indirection_el", "opt_slice_bound", "indirection", "opt_indirection", 
			"opt_asymmetric", "opt_target_list", "target_list", "target_el", "qualified_name_list", 
			"qualified_name", "name_list", "name", "attr_name", "file_name", "func_name", 
			"aexprconst", "xconst", "bconst", "fconst", "iconst", "sconst", "anysconst", 
			"opt_uescape", "signediconst", "roleid", "rolespec", "role_list", "colid", 
			"type_function_name", "nonreservedword", "collabel", "identifier", "plsqlidentifier", 
			"unreserved_keyword", "col_name_keyword", "type_func_name_keyword", "reserved_keyword", 
			"pl_function", "comp_options", "comp_option", "operator", "sharp", "option_value", 
			"opt_semi", "pl_block", "decl_sect", "decl_start", "decl_stmts", "label_decl", 
			"decl_stmt", "decl_statement", "opt_scrollable", "decl_cursor_query", 
			"decl_cursor_args", "decl_cursor_arglist", "decl_cursor_arg", "decl_is_for", 
			"decl_aliasitem", "decl_varname", "decl_const", "decl_datatype", "decl_collate", 
			"decl_notnull", "decl_defval", "decl_defkey", "assign_operator", "proc_sect", 
			"proc_stmt", "stmt_perform", "stmt_call", "opt_expr_list", "stmt_assign", 
			"stmt_getdiag", "getdiag_area_opt", "getdiag_list", "getdiag_list_item", 
			"getdiag_item", "getdiag_target", "assign_var", "stmt_if", "stmt_elsifs", 
			"stmt_else", "stmt_case", "opt_expr_until_when", "case_when_list", "case_when", 
			"opt_case_else", "stmt_loop", "stmt_while", "stmt_for", "for_control", 
			"opt_for_using_expression", "opt_cursor_parameters", "opt_reverse", "opt_by_expression", 
			"for_variable", "stmt_foreach_a", "foreach_slice", "stmt_exit", "exit_type", 
			"stmt_return", "opt_return_result", "stmt_raise", "opt_stmt_raise_level", 
			"opt_raise_list", "opt_raise_using", "opt_raise_using_elem", "opt_raise_using_elem_list", 
			"stmt_assert", "opt_stmt_assert_message", "loop_body", "stmt_execsql", 
			"stmt_dynexecute", "opt_execute_using", "opt_execute_using_list", "opt_execute_into", 
			"stmt_open", "opt_open_bound_list_item", "opt_open_bound_list", "opt_open_using", 
			"sql_expression_list", "opt_scroll_option", "opt_scroll_option_no", "stmt_fetch", 
			"into_target", "opt_cursor_from", "opt_fetch_direction", "stmt_move", 
			"stmt_close", "stmt_null", "stmt_commit", "stmt_rollback", "plsql_opt_transaction_chain", 
			"stmt_set", "cursor_variable", "exception_sect", "proc_exceptions", "proc_exception", 
			"proc_conditions", "proc_condition", "opt_block_label", "opt_loop_label", 
			"opt_label", "opt_exitcond", "any_identifier", "plsql_unreserved_keyword", 
			"sql_expression", "expr_until_then", "expr_until_semi", "expr_until_rightbracket", 
			"expr_until_loop", "make_execsql_stmt", "opt_returning_clause_into"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'*'", 
			"'='", "'.'", "'&'", "'?'", "'+'", "'-'", "'/'", "'^'", "'<'", "'>'", 
			"'<<'", "'>>'", "':='", "'<='", "'=>'", "'>='", "'..'", "'<>'", "'!='", 
			"'::'", "'%'", null, "'|'", "'#'", "'~'", "'|/'", "'||/'", "'!'", "'!!'", 
			"'@'", "'~>=~'", "'~<=~'", "'~>~'", "'~<~'", "'@>'", "'<@'", "'&&'", 
			"'||'", "'@-@'", "'@@'", "'##'", "'<->'", "'&<'", "'&>'", "'<<|'", "'|>>'", 
			"'&<|'", "'|&>'", "'<^'", "'>^'", "'?#'", "'?-'", "'?|'", "'?-|'", "'?||'", 
			"'~='", null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, "'\\\\'", null, null, null, null, null, null, null, null, null, 
			"'''"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "Dollar", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
			"COMMA", "SEMI", "COLON", "STAR", "EQUAL", "DOT", "AMPERSAND", "QUESTION", 
			"PLUS", "MINUS", "SLASH", "CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", 
			"COLON_EQUALS", "LESS_EQUALS", "EQUALS_GREATER", "GREATER_EQUALS", "DOT_DOT", 
			"NOT_EQUALS", "NOT_EQUALS_1", "TYPECAST", "PERCENT", "PARAM", "BITWISE_OR", 
			"BITWISE_XOR", "BITWISE_NOT", "SQUARE_ROOT", "CUBIC_ROOT", "FACTORIAL", 
			"PREFIX_FACTORIAL", "ABSOLUTE", "TEXT_PATTERN1", "TEXT_PATTERN2", "TEXT_PATTERN3", 
			"TEXT_PATTERN4", "CONTAINS", "IS_CONTAINS", "OVERLAP", "CONCAT", "LENGTH", 
			"CENTER", "CLOSET_POINT", "DISTANT", "EXTEND_RIGHT", "EXTEND_LEFT", "IS_STRICTLY_BELOW", 
			"IS_STRICTLY_ABOVE", "EXTEND_ABOVE", "EXTEND_BELOW", "IS_BELOW", "IS_ABOVE", 
			"INTERSECTION", "IS_HORIZON", "IS_VERTICAL", "IS_PERPENDICULAR", "IS_PARALLEL", 
			"SAME", "ALL", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", 
			"ASYMMETRIC", "BOTH", "CASE", "CAST", "CHECK", "COLLATE", "COLUMN", "CONSTRAINT", 
			"CREATE", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_TIME", 
			"CURRENT_TIMESTAMP", "CURRENT_USER", "DEFAULT", "DEFERRABLE", "DESC", 
			"DISTINCT", "DO", "ELSE", "EXCEPT", "FALSE_P", "FETCH", "FOR", "FOREIGN", 
			"FROM", "GRANT", "GROUP_P", "HAVING", "IN_P", "INITIALLY", "INTERSECT", 
			"INTO", "LATERAL_P", "LEADING", "LIMIT", "LOCALTIME", "LOCALTIMESTAMP", 
			"NOT", "NULL_P", "OFFSET", "ON", "ONLY", "OR", "ORDER", "PLACING", "PRIMARY", 
			"REFERENCES", "RETURNING", "SELECT", "SESSION_USER", "SOME", "SYMMETRIC", 
			"TABLE", "THEN", "TO", "TRAILING", "TRUE_P", "UNION", "UNIQUE", "USER", 
			"USING", "VARIADIC", "WHEN", "WHERE", "WINDOW", "WITH", "AUTHORIZATION", 
			"BINARY", "COLLATION", "CONCURRENTLY", "CROSS", "CURRENT_SCHEMA", "FREEZE", 
			"FULL", "ILIKE", "INNER_P", "IS", "ISNULL", "JOIN", "LEFT", "LIKE", "NATURAL", 
			"NOTNULL", "OUTER_P", "OVER", "OVERLAPS", "RIGHT", "SIMILAR", "VERBOSE", 
			"ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", 
			"AGGREGATE", "ALSO", "ALTER", "ALWAYS", "ASSERTION", "ASSIGNMENT", "AT", 
			"ATTRIBUTE", "BACKWARD", "BEFORE", "BEGIN_P", "BY", "CACHE", "CALLED", 
			"CASCADE", "CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", "CHECKPOINT", 
			"CLASS", "CLOSE", "CLUSTER", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", 
			"CONFIGURATION", "CONNECTION", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", 
			"CONVERSION_P", "COPY", "COST", "CSV", "CURSOR", "CYCLE", "DATA_P", "DATABASE", 
			"DAY_P", "DEALLOCATE", "DECLARE", "DEFAULTS", "DEFERRED", "DEFINER", 
			"DELETE_P", "DELIMITER", "DELIMITERS", "DICTIONARY", "DISABLE_P", "DISCARD", 
			"DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "ENABLE_P", "ENCODING", 
			"ENCRYPTED", "ENUM_P", "ESCAPE", "EVENT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", 
			"EXECUTE", "EXPLAIN", "EXTENSION", "EXTERNAL", "FAMILY", "FIRST_P", "FOLLOWING", 
			"FORCE", "FORWARD", "FUNCTION", "FUNCTIONS", "GLOBAL", "GRANTED", "HANDLER", 
			"HEADER_P", "HOLD", "HOUR_P", "IDENTITY_P", "IF_P", "IMMEDIATE", "IMMUTABLE", 
			"IMPLICIT_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", 
			"INHERITS", "INLINE_P", "INSENSITIVE", "INSERT", "INSTEAD", "INVOKER", 
			"ISOLATION", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LEAKPROOF", 
			"LEVEL", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "MAPPING", 
			"MATCH", "MATERIALIZED", "MAXVALUE", "MINUTE_P", "MINVALUE", "MODE", 
			"MONTH_P", "MOVE", "NAME_P", "NAMES", "NEXT", "NO", "NOTHING", "NOTIFY", 
			"NOWAIT", "NULLS_P", "OBJECT_P", "OF", "OFF", "OIDS", "OPERATOR", "OPTION", 
			"OPTIONS", "OWNED", "OWNER", "PARSER", "PARTIAL", "PARTITION", "PASSING", 
			"PASSWORD", "PLANS", "PRECEDING", "PREPARE", "PREPARED", "PRESERVE", 
			"PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM", "QUOTE", 
			"RANGE", "READ", "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFRESH", 
			"REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE", 
			"REPLICA", "RESET", "RESTART", "RESTRICT", "RETURNS", "REVOKE", "ROLE", 
			"ROLLBACK", "ROWS", "RULE", "SAVEPOINT", "SCHEMA", "SCROLL", "SEARCH", 
			"SECOND_P", "SECURITY", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", 
			"SESSION", "SET", "SHARE", "SHOW", "SIMPLE", "SNAPSHOT", "STABLE", "STANDALONE_P", 
			"START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STRICT_P", 
			"STRIP_P", "SYSID", "SYSTEM_P", "TABLES", "TABLESPACE", "TEMP", "TEMPLATE", 
			"TEMPORARY", "TEXT_P", "TRANSACTION", "TRIGGER", "TRUNCATE", "TRUSTED", 
			"TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNKNOWN", 
			"UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "VACUUM", "VALID", "VALIDATE", 
			"VALIDATOR", "VARYING", "VERSION_P", "VIEW", "VOLATILE", "WHITESPACE_P", 
			"WITHOUT", "WORK", "WRAPPER", "WRITE", "XML_P", "YEAR_P", "YES_P", "ZONE", 
			"BETWEEN", "BIGINT", "BIT", "BOOLEAN_P", "CHAR_P", "CHARACTER", "COALESCE", 
			"DEC", "DECIMAL_P", "EXISTS", "EXTRACT", "FLOAT_P", "GREATEST", "INOUT", 
			"INT_P", "INTEGER", "INTERVAL", "LEAST", "NATIONAL", "NCHAR", "NONE", 
			"NULLIF", "NUMERIC", "OVERLAY", "POSITION", "PRECISION", "REAL", "ROW", 
			"SETOF", "SMALLINT", "SUBSTRING", "TIME", "TIMESTAMP", "TREAT", "TRIM", 
			"VALUES", "VARCHAR", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", 
			"XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", "CALL", 
			"CURRENT_P", "CATALOG_P", "ATTACH", "DETACH", "EXPRESSION", "GENERATED", 
			"LOGGED", "STORED", "INCLUDE", "ROUTINE", "TRANSFORM", "IMPORT_P", "POLICY", 
			"METHOD", "REFERENCING", "NEW", "OLD", "VALUE_P", "SUBSCRIPTION", "PUBLICATION", 
			"OUT_P", "END_P", "ROUTINES", "SCHEMAS", "PROCEDURES", "INPUT_P", "SUPPORT", 
			"PARALLEL", "SQL_P", "DEPENDS", "OVERRIDING", "CONFLICT", "SKIP_P", "LOCKED", 
			"TIES", "ROLLUP", "CUBE", "GROUPING", "SETS", "TABLESAMPLE", "ORDINALITY", 
			"XMLTABLE", "COLUMNS", "XMLNAMESPACES", "ROWTYPE", "NORMALIZED", "WITHIN", 
			"FILTER", "GROUPS", "OTHERS", "NFC", "NFD", "NFKC", "NFKD", "UESCAPE", 
			"VIEWS", "NORMALIZE", "DUMP", "PRINT_STRICT_PARAMS", "VARIABLE_CONFLICT", 
			"ERROR", "USE_VARIABLE", "USE_COLUMN", "ALIAS", "CONSTANT", "PERFORM", 
			"GET", "DIAGNOSTICS", "STACKED", "ELSIF", "WHILE", "REVERSE", "FOREACH", 
			"SLICE", "EXIT", "RETURN", "QUERY", "RAISE", "SQLSTATE", "DEBUG", "LOG", 
			"INFO", "NOTICE", "WARNING", "EXCEPTION", "ASSERT", "LOOP", "OPEN", "Identifier", 
			"QuotedIdentifier", "UnterminatedQuotedIdentifier", "InvalidQuotedIdentifier", 
			"InvalidUnterminatedQuotedIdentifier", "UnicodeQuotedIdentifier", "UnterminatedUnicodeQuotedIdentifier", 
			"InvalidUnicodeQuotedIdentifier", "InvalidUnterminatedUnicodeQuotedIdentifier", 
			"StringConstant", "UnterminatedStringConstant", "UnicodeEscapeStringConstant", 
			"UnterminatedUnicodeEscapeStringConstant", "BeginDollarStringConstant", 
			"BinaryStringConstant", "UnterminatedBinaryStringConstant", "InvalidBinaryStringConstant", 
			"InvalidUnterminatedBinaryStringConstant", "HexadecimalStringConstant", 
			"UnterminatedHexadecimalStringConstant", "InvalidHexadecimalStringConstant", 
			"InvalidUnterminatedHexadecimalStringConstant", "Integral", "NumericFail", 
			"Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", "Whitespace", "Newline", 
			"LineComment", "BlockComment", "UnterminatedBlockComment", "MetaCommand", 
			"EndMetaCommand", "ErrorCharacter", "EscapeStringConstant", "UnterminatedEscapeStringConstant", 
			"InvalidEscapeStringConstant", "InvalidUnterminatedEscapeStringConstant", 
			"AfterEscapeStringConstantMode_NotContinued", "AfterEscapeStringConstantWithNewlineMode_NotContinued", 
			"DollarText", "EndDollarStringConstant", "AfterEscapeStringConstantWithNewlineMode_Continued"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PostgreSQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PostgreSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public StmtblockContext stmtblock() {
			return getRuleContext(StmtblockContext.class,0);
		}
		public TerminalNode EOF() { return getToken(PostgreSQLParser.EOF, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1588);
			stmtblock();
			setState(1589);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlsqlrootContext extends ParserRuleContext {
		public Pl_functionContext pl_function() {
			return getRuleContext(Pl_functionContext.class,0);
		}
		public PlsqlrootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlroot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlroot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlroot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlroot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlrootContext plsqlroot() throws RecognitionException {
		PlsqlrootContext _localctx = new PlsqlrootContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_plsqlroot);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1591);
			pl_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtblockContext extends ParserRuleContext {
		public StmtmultiContext stmtmulti() {
			return getRuleContext(StmtmultiContext.class,0);
		}
		public StmtblockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtblock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmtblock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmtblock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmtblock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtblockContext stmtblock() throws RecognitionException {
		StmtblockContext _localctx = new StmtblockContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_stmtblock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1593);
			stmtmulti();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtmultiContext extends ParserRuleContext {
		public List<StmtContext> stmt() {
			return getRuleContexts(StmtContext.class);
		}
		public StmtContext stmt(int i) {
			return getRuleContext(StmtContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(PostgreSQLParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(PostgreSQLParser.SEMI, i);
		}
		public List<PlsqlconsolecommandContext> plsqlconsolecommand() {
			return getRuleContexts(PlsqlconsolecommandContext.class);
		}
		public PlsqlconsolecommandContext plsqlconsolecommand(int i) {
			return getRuleContext(PlsqlconsolecommandContext.class,i);
		}
		public StmtmultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtmulti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmtmulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmtmulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmtmulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtmultiContext stmtmulti() throws RecognitionException {
		StmtmultiContext _localctx = new StmtmultiContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_stmtmulti);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1600); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1595);
				stmt();
				setState(1598);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SEMI:
					{
					setState(1596);
					match(SEMI);
					}
					break;
				case MetaCommand:
					{
					setState(1597);
					plsqlconsolecommand();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(1602); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==OPEN_PAREN || _la==SEMI || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (ANALYSE - 67)) | (1L << (ANALYZE - 67)) | (1L << (CREATE - 67)) | (1L << (DO - 67)) | (1L << (FETCH - 67)) | (1L << (GRANT - 67)) | (1L << (SELECT - 67)) | (1L << (TABLE - 67)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (WITH - 141)) | (1L << (ABORT_P - 141)) | (1L << (ALTER - 141)) | (1L << (BEGIN_P - 141)) | (1L << (CHECKPOINT - 141)) | (1L << (CLOSE - 141)) | (1L << (CLUSTER - 141)) | (1L << (COMMENT - 141)) | (1L << (COMMIT - 141)))) != 0) || ((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (COPY - 205)) | (1L << (DEALLOCATE - 205)) | (1L << (DECLARE - 205)) | (1L << (DELETE_P - 205)) | (1L << (DISCARD - 205)) | (1L << (DROP - 205)) | (1L << (EXECUTE - 205)) | (1L << (EXPLAIN - 205)) | (1L << (INSERT - 205)))) != 0) || ((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & ((1L << (LISTEN - 279)) | (1L << (LOAD - 279)) | (1L << (LOCK_P - 279)) | (1L << (MOVE - 279)) | (1L << (NOTIFY - 279)) | (1L << (PREPARE - 279)) | (1L << (REASSIGN - 279)) | (1L << (REFRESH - 279)) | (1L << (REINDEX - 279)) | (1L << (RELEASE - 279)) | (1L << (RESET - 279)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (REVOKE - 344)) | (1L << (ROLLBACK - 344)) | (1L << (SAVEPOINT - 344)) | (1L << (SECURITY - 344)) | (1L << (SET - 344)) | (1L << (SHOW - 344)) | (1L << (START - 344)) | (1L << (TRUNCATE - 344)) | (1L << (UNLISTEN - 344)) | (1L << (UPDATE - 344)) | (1L << (VACUUM - 344)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (VALUES - 449)) | (1L << (CALL - 449)) | (1L << (IMPORT_P - 449)) | (1L << (END_P - 449)))) != 0) || _la==MetaCommand );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtContext extends ParserRuleContext {
		public AltereventtrigstmtContext altereventtrigstmt() {
			return getRuleContext(AltereventtrigstmtContext.class,0);
		}
		public AltercollationstmtContext altercollationstmt() {
			return getRuleContext(AltercollationstmtContext.class,0);
		}
		public AlterdatabasestmtContext alterdatabasestmt() {
			return getRuleContext(AlterdatabasestmtContext.class,0);
		}
		public AlterdatabasesetstmtContext alterdatabasesetstmt() {
			return getRuleContext(AlterdatabasesetstmtContext.class,0);
		}
		public AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() {
			return getRuleContext(AlterdefaultprivilegesstmtContext.class,0);
		}
		public AlterdomainstmtContext alterdomainstmt() {
			return getRuleContext(AlterdomainstmtContext.class,0);
		}
		public AlterenumstmtContext alterenumstmt() {
			return getRuleContext(AlterenumstmtContext.class,0);
		}
		public AlterextensionstmtContext alterextensionstmt() {
			return getRuleContext(AlterextensionstmtContext.class,0);
		}
		public AlterextensioncontentsstmtContext alterextensioncontentsstmt() {
			return getRuleContext(AlterextensioncontentsstmtContext.class,0);
		}
		public AlterfdwstmtContext alterfdwstmt() {
			return getRuleContext(AlterfdwstmtContext.class,0);
		}
		public AlterforeignserverstmtContext alterforeignserverstmt() {
			return getRuleContext(AlterforeignserverstmtContext.class,0);
		}
		public AlterfunctionstmtContext alterfunctionstmt() {
			return getRuleContext(AlterfunctionstmtContext.class,0);
		}
		public AltergroupstmtContext altergroupstmt() {
			return getRuleContext(AltergroupstmtContext.class,0);
		}
		public AlterobjectdependsstmtContext alterobjectdependsstmt() {
			return getRuleContext(AlterobjectdependsstmtContext.class,0);
		}
		public AlterobjectschemastmtContext alterobjectschemastmt() {
			return getRuleContext(AlterobjectschemastmtContext.class,0);
		}
		public AlterownerstmtContext alterownerstmt() {
			return getRuleContext(AlterownerstmtContext.class,0);
		}
		public AlteroperatorstmtContext alteroperatorstmt() {
			return getRuleContext(AlteroperatorstmtContext.class,0);
		}
		public AltertypestmtContext altertypestmt() {
			return getRuleContext(AltertypestmtContext.class,0);
		}
		public AlterpolicystmtContext alterpolicystmt() {
			return getRuleContext(AlterpolicystmtContext.class,0);
		}
		public AlterseqstmtContext alterseqstmt() {
			return getRuleContext(AlterseqstmtContext.class,0);
		}
		public AltersystemstmtContext altersystemstmt() {
			return getRuleContext(AltersystemstmtContext.class,0);
		}
		public AltertablestmtContext altertablestmt() {
			return getRuleContext(AltertablestmtContext.class,0);
		}
		public AltertblspcstmtContext altertblspcstmt() {
			return getRuleContext(AltertblspcstmtContext.class,0);
		}
		public AltercompositetypestmtContext altercompositetypestmt() {
			return getRuleContext(AltercompositetypestmtContext.class,0);
		}
		public AlterpublicationstmtContext alterpublicationstmt() {
			return getRuleContext(AlterpublicationstmtContext.class,0);
		}
		public AlterrolesetstmtContext alterrolesetstmt() {
			return getRuleContext(AlterrolesetstmtContext.class,0);
		}
		public AlterrolestmtContext alterrolestmt() {
			return getRuleContext(AlterrolestmtContext.class,0);
		}
		public AltersubscriptionstmtContext altersubscriptionstmt() {
			return getRuleContext(AltersubscriptionstmtContext.class,0);
		}
		public AlterstatsstmtContext alterstatsstmt() {
			return getRuleContext(AlterstatsstmtContext.class,0);
		}
		public AltertsconfigurationstmtContext altertsconfigurationstmt() {
			return getRuleContext(AltertsconfigurationstmtContext.class,0);
		}
		public AltertsdictionarystmtContext altertsdictionarystmt() {
			return getRuleContext(AltertsdictionarystmtContext.class,0);
		}
		public AlterusermappingstmtContext alterusermappingstmt() {
			return getRuleContext(AlterusermappingstmtContext.class,0);
		}
		public AnalyzestmtContext analyzestmt() {
			return getRuleContext(AnalyzestmtContext.class,0);
		}
		public CallstmtContext callstmt() {
			return getRuleContext(CallstmtContext.class,0);
		}
		public CheckpointstmtContext checkpointstmt() {
			return getRuleContext(CheckpointstmtContext.class,0);
		}
		public CloseportalstmtContext closeportalstmt() {
			return getRuleContext(CloseportalstmtContext.class,0);
		}
		public ClusterstmtContext clusterstmt() {
			return getRuleContext(ClusterstmtContext.class,0);
		}
		public CommentstmtContext commentstmt() {
			return getRuleContext(CommentstmtContext.class,0);
		}
		public ConstraintssetstmtContext constraintssetstmt() {
			return getRuleContext(ConstraintssetstmtContext.class,0);
		}
		public CopystmtContext copystmt() {
			return getRuleContext(CopystmtContext.class,0);
		}
		public CreateamstmtContext createamstmt() {
			return getRuleContext(CreateamstmtContext.class,0);
		}
		public CreateasstmtContext createasstmt() {
			return getRuleContext(CreateasstmtContext.class,0);
		}
		public CreateassertionstmtContext createassertionstmt() {
			return getRuleContext(CreateassertionstmtContext.class,0);
		}
		public CreatecaststmtContext createcaststmt() {
			return getRuleContext(CreatecaststmtContext.class,0);
		}
		public CreateconversionstmtContext createconversionstmt() {
			return getRuleContext(CreateconversionstmtContext.class,0);
		}
		public CreatedomainstmtContext createdomainstmt() {
			return getRuleContext(CreatedomainstmtContext.class,0);
		}
		public CreateextensionstmtContext createextensionstmt() {
			return getRuleContext(CreateextensionstmtContext.class,0);
		}
		public CreatefdwstmtContext createfdwstmt() {
			return getRuleContext(CreatefdwstmtContext.class,0);
		}
		public CreateforeignserverstmtContext createforeignserverstmt() {
			return getRuleContext(CreateforeignserverstmtContext.class,0);
		}
		public CreateforeigntablestmtContext createforeigntablestmt() {
			return getRuleContext(CreateforeigntablestmtContext.class,0);
		}
		public CreatefunctionstmtContext createfunctionstmt() {
			return getRuleContext(CreatefunctionstmtContext.class,0);
		}
		public CreategroupstmtContext creategroupstmt() {
			return getRuleContext(CreategroupstmtContext.class,0);
		}
		public CreatematviewstmtContext creatematviewstmt() {
			return getRuleContext(CreatematviewstmtContext.class,0);
		}
		public CreateopclassstmtContext createopclassstmt() {
			return getRuleContext(CreateopclassstmtContext.class,0);
		}
		public CreateopfamilystmtContext createopfamilystmt() {
			return getRuleContext(CreateopfamilystmtContext.class,0);
		}
		public CreatepublicationstmtContext createpublicationstmt() {
			return getRuleContext(CreatepublicationstmtContext.class,0);
		}
		public AlteropfamilystmtContext alteropfamilystmt() {
			return getRuleContext(AlteropfamilystmtContext.class,0);
		}
		public CreatepolicystmtContext createpolicystmt() {
			return getRuleContext(CreatepolicystmtContext.class,0);
		}
		public CreateplangstmtContext createplangstmt() {
			return getRuleContext(CreateplangstmtContext.class,0);
		}
		public CreateschemastmtContext createschemastmt() {
			return getRuleContext(CreateschemastmtContext.class,0);
		}
		public CreateseqstmtContext createseqstmt() {
			return getRuleContext(CreateseqstmtContext.class,0);
		}
		public CreatestmtContext createstmt() {
			return getRuleContext(CreatestmtContext.class,0);
		}
		public CreatesubscriptionstmtContext createsubscriptionstmt() {
			return getRuleContext(CreatesubscriptionstmtContext.class,0);
		}
		public CreatestatsstmtContext createstatsstmt() {
			return getRuleContext(CreatestatsstmtContext.class,0);
		}
		public CreatetablespacestmtContext createtablespacestmt() {
			return getRuleContext(CreatetablespacestmtContext.class,0);
		}
		public CreatetransformstmtContext createtransformstmt() {
			return getRuleContext(CreatetransformstmtContext.class,0);
		}
		public CreatetrigstmtContext createtrigstmt() {
			return getRuleContext(CreatetrigstmtContext.class,0);
		}
		public CreateeventtrigstmtContext createeventtrigstmt() {
			return getRuleContext(CreateeventtrigstmtContext.class,0);
		}
		public CreaterolestmtContext createrolestmt() {
			return getRuleContext(CreaterolestmtContext.class,0);
		}
		public CreateuserstmtContext createuserstmt() {
			return getRuleContext(CreateuserstmtContext.class,0);
		}
		public CreateusermappingstmtContext createusermappingstmt() {
			return getRuleContext(CreateusermappingstmtContext.class,0);
		}
		public CreatedbstmtContext createdbstmt() {
			return getRuleContext(CreatedbstmtContext.class,0);
		}
		public DeallocatestmtContext deallocatestmt() {
			return getRuleContext(DeallocatestmtContext.class,0);
		}
		public DeclarecursorstmtContext declarecursorstmt() {
			return getRuleContext(DeclarecursorstmtContext.class,0);
		}
		public DefinestmtContext definestmt() {
			return getRuleContext(DefinestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public DiscardstmtContext discardstmt() {
			return getRuleContext(DiscardstmtContext.class,0);
		}
		public DostmtContext dostmt() {
			return getRuleContext(DostmtContext.class,0);
		}
		public DropcaststmtContext dropcaststmt() {
			return getRuleContext(DropcaststmtContext.class,0);
		}
		public DropopclassstmtContext dropopclassstmt() {
			return getRuleContext(DropopclassstmtContext.class,0);
		}
		public DropopfamilystmtContext dropopfamilystmt() {
			return getRuleContext(DropopfamilystmtContext.class,0);
		}
		public DropownedstmtContext dropownedstmt() {
			return getRuleContext(DropownedstmtContext.class,0);
		}
		public DropstmtContext dropstmt() {
			return getRuleContext(DropstmtContext.class,0);
		}
		public DropsubscriptionstmtContext dropsubscriptionstmt() {
			return getRuleContext(DropsubscriptionstmtContext.class,0);
		}
		public DroptablespacestmtContext droptablespacestmt() {
			return getRuleContext(DroptablespacestmtContext.class,0);
		}
		public DroptransformstmtContext droptransformstmt() {
			return getRuleContext(DroptransformstmtContext.class,0);
		}
		public DroprolestmtContext droprolestmt() {
			return getRuleContext(DroprolestmtContext.class,0);
		}
		public DropusermappingstmtContext dropusermappingstmt() {
			return getRuleContext(DropusermappingstmtContext.class,0);
		}
		public DropdbstmtContext dropdbstmt() {
			return getRuleContext(DropdbstmtContext.class,0);
		}
		public ExecutestmtContext executestmt() {
			return getRuleContext(ExecutestmtContext.class,0);
		}
		public ExplainstmtContext explainstmt() {
			return getRuleContext(ExplainstmtContext.class,0);
		}
		public FetchstmtContext fetchstmt() {
			return getRuleContext(FetchstmtContext.class,0);
		}
		public GrantstmtContext grantstmt() {
			return getRuleContext(GrantstmtContext.class,0);
		}
		public GrantrolestmtContext grantrolestmt() {
			return getRuleContext(GrantrolestmtContext.class,0);
		}
		public ImportforeignschemastmtContext importforeignschemastmt() {
			return getRuleContext(ImportforeignschemastmtContext.class,0);
		}
		public IndexstmtContext indexstmt() {
			return getRuleContext(IndexstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public ListenstmtContext listenstmt() {
			return getRuleContext(ListenstmtContext.class,0);
		}
		public RefreshmatviewstmtContext refreshmatviewstmt() {
			return getRuleContext(RefreshmatviewstmtContext.class,0);
		}
		public LoadstmtContext loadstmt() {
			return getRuleContext(LoadstmtContext.class,0);
		}
		public LockstmtContext lockstmt() {
			return getRuleContext(LockstmtContext.class,0);
		}
		public NotifystmtContext notifystmt() {
			return getRuleContext(NotifystmtContext.class,0);
		}
		public PreparestmtContext preparestmt() {
			return getRuleContext(PreparestmtContext.class,0);
		}
		public ReassignownedstmtContext reassignownedstmt() {
			return getRuleContext(ReassignownedstmtContext.class,0);
		}
		public ReindexstmtContext reindexstmt() {
			return getRuleContext(ReindexstmtContext.class,0);
		}
		public RemoveaggrstmtContext removeaggrstmt() {
			return getRuleContext(RemoveaggrstmtContext.class,0);
		}
		public RemovefuncstmtContext removefuncstmt() {
			return getRuleContext(RemovefuncstmtContext.class,0);
		}
		public RemoveoperstmtContext removeoperstmt() {
			return getRuleContext(RemoveoperstmtContext.class,0);
		}
		public RenamestmtContext renamestmt() {
			return getRuleContext(RenamestmtContext.class,0);
		}
		public RevokestmtContext revokestmt() {
			return getRuleContext(RevokestmtContext.class,0);
		}
		public RevokerolestmtContext revokerolestmt() {
			return getRuleContext(RevokerolestmtContext.class,0);
		}
		public RulestmtContext rulestmt() {
			return getRuleContext(RulestmtContext.class,0);
		}
		public SeclabelstmtContext seclabelstmt() {
			return getRuleContext(SeclabelstmtContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TransactionstmtContext transactionstmt() {
			return getRuleContext(TransactionstmtContext.class,0);
		}
		public TruncatestmtContext truncatestmt() {
			return getRuleContext(TruncatestmtContext.class,0);
		}
		public UnlistenstmtContext unlistenstmt() {
			return getRuleContext(UnlistenstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public VacuumstmtContext vacuumstmt() {
			return getRuleContext(VacuumstmtContext.class,0);
		}
		public VariableresetstmtContext variableresetstmt() {
			return getRuleContext(VariableresetstmtContext.class,0);
		}
		public VariablesetstmtContext variablesetstmt() {
			return getRuleContext(VariablesetstmtContext.class,0);
		}
		public VariableshowstmtContext variableshowstmt() {
			return getRuleContext(VariableshowstmtContext.class,0);
		}
		public ViewstmtContext viewstmt() {
			return getRuleContext(ViewstmtContext.class,0);
		}
		public PlsqlconsolecommandContext plsqlconsolecommand() {
			return getRuleContext(PlsqlconsolecommandContext.class,0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_stmt);
		try {
			setState(1729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1604);
				altereventtrigstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1605);
				altercollationstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1606);
				alterdatabasestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1607);
				alterdatabasesetstmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1608);
				alterdefaultprivilegesstmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1609);
				alterdomainstmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1610);
				alterenumstmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1611);
				alterextensionstmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1612);
				alterextensioncontentsstmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1613);
				alterfdwstmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1614);
				alterforeignserverstmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1615);
				alterfunctionstmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1616);
				altergroupstmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1617);
				alterobjectdependsstmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1618);
				alterobjectschemastmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1619);
				alterownerstmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1620);
				alteroperatorstmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1621);
				altertypestmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1622);
				alterpolicystmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1623);
				alterseqstmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1624);
				altersystemstmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1625);
				altertablestmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1626);
				altertblspcstmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1627);
				altercompositetypestmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1628);
				alterpublicationstmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1629);
				alterrolesetstmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1630);
				alterrolestmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1631);
				altersubscriptionstmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1632);
				alterstatsstmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1633);
				altertsconfigurationstmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1634);
				altertsdictionarystmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1635);
				alterusermappingstmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1636);
				analyzestmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1637);
				callstmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1638);
				checkpointstmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1639);
				closeportalstmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1640);
				clusterstmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1641);
				commentstmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1642);
				constraintssetstmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1643);
				copystmt();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1644);
				createamstmt();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1645);
				createasstmt();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1646);
				createassertionstmt();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1647);
				createcaststmt();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1648);
				createconversionstmt();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1649);
				createdomainstmt();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1650);
				createextensionstmt();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1651);
				createfdwstmt();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1652);
				createforeignserverstmt();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1653);
				createforeigntablestmt();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1654);
				createfunctionstmt();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1655);
				creategroupstmt();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1656);
				creatematviewstmt();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1657);
				createopclassstmt();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1658);
				createopfamilystmt();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1659);
				createpublicationstmt();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1660);
				alteropfamilystmt();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1661);
				createpolicystmt();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1662);
				createplangstmt();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1663);
				createschemastmt();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1664);
				createseqstmt();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1665);
				createstmt();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1666);
				createsubscriptionstmt();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1667);
				createstatsstmt();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1668);
				createtablespacestmt();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1669);
				createtransformstmt();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1670);
				createtrigstmt();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1671);
				createeventtrigstmt();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1672);
				createrolestmt();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1673);
				createuserstmt();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1674);
				createusermappingstmt();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1675);
				createdbstmt();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1676);
				deallocatestmt();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1677);
				declarecursorstmt();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1678);
				definestmt();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1679);
				deletestmt();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1680);
				discardstmt();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1681);
				dostmt();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1682);
				dropcaststmt();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1683);
				dropopclassstmt();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1684);
				dropopfamilystmt();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1685);
				dropownedstmt();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1686);
				dropstmt();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1687);
				dropsubscriptionstmt();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1688);
				droptablespacestmt();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1689);
				droptransformstmt();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1690);
				droprolestmt();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1691);
				dropusermappingstmt();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1692);
				dropdbstmt();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1693);
				executestmt();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1694);
				explainstmt();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1695);
				fetchstmt();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1696);
				grantstmt();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1697);
				grantrolestmt();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1698);
				importforeignschemastmt();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1699);
				indexstmt();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1700);
				insertstmt();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1701);
				listenstmt();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1702);
				refreshmatviewstmt();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1703);
				loadstmt();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1704);
				lockstmt();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1705);
				notifystmt();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1706);
				preparestmt();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1707);
				reassignownedstmt();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1708);
				reindexstmt();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(1709);
				removeaggrstmt();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(1710);
				removefuncstmt();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(1711);
				removeoperstmt();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(1712);
				renamestmt();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(1713);
				revokestmt();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				setState(1714);
				revokerolestmt();
				}
				break;
			case 112:
				enterOuterAlt(_localctx, 112);
				{
				setState(1715);
				rulestmt();
				}
				break;
			case 113:
				enterOuterAlt(_localctx, 113);
				{
				setState(1716);
				seclabelstmt();
				}
				break;
			case 114:
				enterOuterAlt(_localctx, 114);
				{
				setState(1717);
				selectstmt();
				}
				break;
			case 115:
				enterOuterAlt(_localctx, 115);
				{
				setState(1718);
				transactionstmt();
				}
				break;
			case 116:
				enterOuterAlt(_localctx, 116);
				{
				setState(1719);
				truncatestmt();
				}
				break;
			case 117:
				enterOuterAlt(_localctx, 117);
				{
				setState(1720);
				unlistenstmt();
				}
				break;
			case 118:
				enterOuterAlt(_localctx, 118);
				{
				setState(1721);
				updatestmt();
				}
				break;
			case 119:
				enterOuterAlt(_localctx, 119);
				{
				setState(1722);
				vacuumstmt();
				}
				break;
			case 120:
				enterOuterAlt(_localctx, 120);
				{
				setState(1723);
				variableresetstmt();
				}
				break;
			case 121:
				enterOuterAlt(_localctx, 121);
				{
				setState(1724);
				variablesetstmt();
				}
				break;
			case 122:
				enterOuterAlt(_localctx, 122);
				{
				setState(1725);
				variableshowstmt();
				}
				break;
			case 123:
				enterOuterAlt(_localctx, 123);
				{
				setState(1726);
				viewstmt();
				}
				break;
			case 124:
				enterOuterAlt(_localctx, 124);
				{
				setState(1727);
				plsqlconsolecommand();
				}
				break;
			case 125:
				enterOuterAlt(_localctx, 125);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlsqlconsolecommandContext extends ParserRuleContext {
		public TerminalNode MetaCommand() { return getToken(PostgreSQLParser.MetaCommand, 0); }
		public TerminalNode EndMetaCommand() { return getToken(PostgreSQLParser.EndMetaCommand, 0); }
		public PlsqlconsolecommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlconsolecommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlconsolecommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlconsolecommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlconsolecommand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlconsolecommandContext plsqlconsolecommand() throws RecognitionException {
		PlsqlconsolecommandContext _localctx = new PlsqlconsolecommandContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_plsqlconsolecommand);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1731);
			match(MetaCommand);
			setState(1733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EndMetaCommand) {
				{
				setState(1732);
				match(EndMetaCommand);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallstmtContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public Func_applicationContext func_application() {
			return getRuleContext(Func_applicationContext.class,0);
		}
		public CallstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCallstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCallstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCallstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallstmtContext callstmt() throws RecognitionException {
		CallstmtContext _localctx = new CallstmtContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_callstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1735);
			match(CALL);
			setState(1736);
			func_application();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreaterolestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public RoleidContext roleid() {
			return getRuleContext(RoleidContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public CreaterolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createrolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreaterolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreaterolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreaterolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreaterolestmtContext createrolestmt() throws RecognitionException {
		CreaterolestmtContext _localctx = new CreaterolestmtContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_createrolestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1738);
			match(CREATE);
			setState(1739);
			match(ROLE);
			setState(1740);
			roleid();
			setState(1741);
			opt_with();
			setState(1742);
			optrolelist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Opt_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_with(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_withContext opt_with() throws RecognitionException {
		Opt_withContext _localctx = new Opt_withContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_opt_with);
		try {
			setState(1746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1744);
				match(WITH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptrolelistContext extends ParserRuleContext {
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public CreateoptroleelemContext createoptroleelem() {
			return getRuleContext(CreateoptroleelemContext.class,0);
		}
		public OptrolelistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optrolelist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptrolelist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptrolelist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptrolelist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptrolelistContext optrolelist() throws RecognitionException {
		return optrolelist(0);
	}

	private OptrolelistContext optrolelist(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptrolelistContext _localctx = new OptrolelistContext(_ctx, _parentState);
		OptrolelistContext _prevctx = _localctx;
		int _startState = 18;
		enterRecursionRule(_localctx, 18, RULE_optrolelist, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1753);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptrolelistContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_optrolelist);
					setState(1749);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1750);
					createoptroleelem();
					}
					} 
				}
				setState(1755);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlteroptrolelistContext extends ParserRuleContext {
		public AlteroptrolelistContext alteroptrolelist() {
			return getRuleContext(AlteroptrolelistContext.class,0);
		}
		public AlteroptroleelemContext alteroptroleelem() {
			return getRuleContext(AlteroptroleelemContext.class,0);
		}
		public AlteroptrolelistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroptrolelist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteroptrolelist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteroptrolelist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteroptrolelist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteroptrolelistContext alteroptrolelist() throws RecognitionException {
		return alteroptrolelist(0);
	}

	private AlteroptrolelistContext alteroptrolelist(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AlteroptrolelistContext _localctx = new AlteroptrolelistContext(_ctx, _parentState);
		AlteroptrolelistContext _prevctx = _localctx;
		int _startState = 20;
		enterRecursionRule(_localctx, 20, RULE_alteroptrolelist, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1761);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AlteroptrolelistContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alteroptrolelist);
					setState(1757);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1758);
					alteroptroleelem();
					}
					} 
				}
				setState(1763);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlteroptroleelemContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(PostgreSQLParser.PASSWORD, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLParser.ENCRYPTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLParser.UNENCRYPTED, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLParser.UNTIL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlteroptroleelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroptroleelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteroptroleelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteroptroleelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteroptroleelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteroptroleelemContext alteroptroleelem() throws RecognitionException {
		AlteroptroleelemContext _localctx = new AlteroptroleelemContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alteroptroleelem);
		try {
			setState(1784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1764);
				match(PASSWORD);
				setState(1765);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1766);
				match(PASSWORD);
				setState(1767);
				match(NULL_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1768);
				match(ENCRYPTED);
				setState(1769);
				match(PASSWORD);
				setState(1770);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1771);
				match(UNENCRYPTED);
				setState(1772);
				match(PASSWORD);
				setState(1773);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1774);
				match(INHERIT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1775);
				match(CONNECTION);
				setState(1776);
				match(LIMIT);
				setState(1777);
				signediconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1778);
				match(VALID);
				setState(1779);
				match(UNTIL);
				setState(1780);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1781);
				match(USER);
				setState(1782);
				role_list(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1783);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateoptroleelemContext extends ParserRuleContext {
		public AlteroptroleelemContext alteroptroleelem() {
			return getRuleContext(AlteroptroleelemContext.class,0);
		}
		public TerminalNode SYSID() { return getToken(PostgreSQLParser.SYSID, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public CreateoptroleelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createoptroleelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateoptroleelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateoptroleelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateoptroleelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateoptroleelemContext createoptroleelem() throws RecognitionException {
		CreateoptroleelemContext _localctx = new CreateoptroleelemContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createoptroleelem);
		try {
			setState(1799);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1786);
				alteroptroleelem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1787);
				match(SYSID);
				setState(1788);
				iconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1789);
				match(ADMIN);
				setState(1790);
				role_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1791);
				match(ROLE);
				setState(1792);
				role_list(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1793);
				match(IN_P);
				setState(1794);
				match(ROLE);
				setState(1795);
				role_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1796);
				match(IN_P);
				setState(1797);
				match(GROUP_P);
				setState(1798);
				role_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateuserstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public RoleidContext roleid() {
			return getRuleContext(RoleidContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public CreateuserstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createuserstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateuserstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateuserstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateuserstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateuserstmtContext createuserstmt() throws RecognitionException {
		CreateuserstmtContext _localctx = new CreateuserstmtContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createuserstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1801);
			match(CREATE);
			setState(1802);
			match(USER);
			setState(1803);
			roleid();
			setState(1804);
			opt_with();
			setState(1805);
			optrolelist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterrolestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public AlteroptrolelistContext alteroptrolelist() {
			return getRuleContext(AlteroptrolelistContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public AlterrolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterrolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterrolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterrolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterrolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterrolestmtContext alterrolestmt() throws RecognitionException {
		AlterrolestmtContext _localctx = new AlterrolestmtContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alterrolestmt);
		try {
			setState(1819);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1807);
				match(ALTER);
				setState(1808);
				match(ROLE);
				setState(1809);
				rolespec();
				setState(1810);
				opt_with();
				setState(1811);
				alteroptrolelist(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1813);
				match(ALTER);
				setState(1814);
				match(USER);
				setState(1815);
				rolespec();
				setState(1816);
				opt_with();
				setState(1817);
				alteroptrolelist(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_in_databaseContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_in_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_in_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_in_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_in_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_in_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_in_databaseContext opt_in_database() throws RecognitionException {
		Opt_in_databaseContext _localctx = new Opt_in_databaseContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_opt_in_database);
		try {
			setState(1825);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESET:
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case IN_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(1822);
				match(IN_P);
				setState(1823);
				match(DATABASE);
				setState(1824);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterrolesetstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Opt_in_databaseContext opt_in_database() {
			return getRuleContext(Opt_in_databaseContext.class,0);
		}
		public SetresetclauseContext setresetclause() {
			return getRuleContext(SetresetclauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public AlterrolesetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterrolesetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterrolesetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterrolesetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterrolesetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterrolesetstmtContext alterrolesetstmt() throws RecognitionException {
		AlterrolesetstmtContext _localctx = new AlterrolesetstmtContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alterrolesetstmt);
		try {
			setState(1851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1827);
				match(ALTER);
				setState(1828);
				match(ROLE);
				setState(1829);
				rolespec();
				setState(1830);
				opt_in_database();
				setState(1831);
				setresetclause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1833);
				match(ALTER);
				setState(1834);
				match(ROLE);
				setState(1835);
				match(ALL);
				setState(1836);
				opt_in_database();
				setState(1837);
				setresetclause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1839);
				match(ALTER);
				setState(1840);
				match(USER);
				setState(1841);
				rolespec();
				setState(1842);
				opt_in_database();
				setState(1843);
				setresetclause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1845);
				match(ALTER);
				setState(1846);
				match(USER);
				setState(1847);
				match(ALL);
				setState(1848);
				opt_in_database();
				setState(1849);
				setresetclause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DroprolestmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public DroprolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_droprolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDroprolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDroprolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDroprolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DroprolestmtContext droprolestmt() throws RecognitionException {
		DroprolestmtContext _localctx = new DroprolestmtContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_droprolestmt);
		try {
			setState(1877);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1853);
				match(DROP);
				setState(1854);
				match(ROLE);
				setState(1855);
				role_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1856);
				match(DROP);
				setState(1857);
				match(ROLE);
				setState(1858);
				match(IF_P);
				setState(1859);
				match(EXISTS);
				setState(1860);
				role_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1861);
				match(DROP);
				setState(1862);
				match(USER);
				setState(1863);
				role_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1864);
				match(DROP);
				setState(1865);
				match(USER);
				setState(1866);
				match(IF_P);
				setState(1867);
				match(EXISTS);
				setState(1868);
				role_list(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1869);
				match(DROP);
				setState(1870);
				match(GROUP_P);
				setState(1871);
				role_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1872);
				match(DROP);
				setState(1873);
				match(GROUP_P);
				setState(1874);
				match(IF_P);
				setState(1875);
				match(EXISTS);
				setState(1876);
				role_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreategroupstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public RoleidContext roleid() {
			return getRuleContext(RoleidContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public CreategroupstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_creategroupstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreategroupstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreategroupstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreategroupstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreategroupstmtContext creategroupstmt() throws RecognitionException {
		CreategroupstmtContext _localctx = new CreategroupstmtContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_creategroupstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1879);
			match(CREATE);
			setState(1880);
			match(GROUP_P);
			setState(1881);
			roleid();
			setState(1882);
			opt_with();
			setState(1883);
			optrolelist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltergroupstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public AltergroupstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altergroupstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltergroupstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltergroupstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltergroupstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltergroupstmtContext altergroupstmt() throws RecognitionException {
		AltergroupstmtContext _localctx = new AltergroupstmtContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_altergroupstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1885);
			match(ALTER);
			setState(1886);
			match(GROUP_P);
			setState(1887);
			rolespec();
			setState(1888);
			add_drop();
			setState(1889);
			match(USER);
			setState(1890);
			role_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_dropContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Add_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAdd_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAdd_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAdd_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_dropContext add_drop() throws RecognitionException {
		Add_dropContext _localctx = new Add_dropContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_add_drop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1892);
			_la = _input.LA(1);
			if ( !(_la==ADD_P || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateschemastmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public OptschemanameContext optschemaname() {
			return getRuleContext(OptschemanameContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public OptschemaeltlistContext optschemaeltlist() {
			return getRuleContext(OptschemaeltlistContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateschemastmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createschemastmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateschemastmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateschemastmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateschemastmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateschemastmtContext createschemastmt() throws RecognitionException {
		CreateschemastmtContext _localctx = new CreateschemastmtContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createschemastmt);
		try {
			setState(1924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1894);
				match(CREATE);
				setState(1895);
				match(SCHEMA);
				setState(1896);
				optschemaname();
				setState(1897);
				match(AUTHORIZATION);
				setState(1898);
				rolespec();
				setState(1899);
				optschemaeltlist(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1901);
				match(CREATE);
				setState(1902);
				match(SCHEMA);
				setState(1903);
				colid();
				setState(1904);
				optschemaeltlist(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1906);
				match(CREATE);
				setState(1907);
				match(SCHEMA);
				setState(1908);
				match(IF_P);
				setState(1909);
				match(NOT);
				setState(1910);
				match(EXISTS);
				setState(1911);
				optschemaname();
				setState(1912);
				match(AUTHORIZATION);
				setState(1913);
				rolespec();
				setState(1914);
				optschemaeltlist(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1916);
				match(CREATE);
				setState(1917);
				match(SCHEMA);
				setState(1918);
				match(IF_P);
				setState(1919);
				match(NOT);
				setState(1920);
				match(EXISTS);
				setState(1921);
				colid();
				setState(1922);
				optschemaeltlist(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptschemanameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public OptschemanameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optschemaname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptschemaname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptschemaname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptschemaname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptschemanameContext optschemaname() throws RecognitionException {
		OptschemanameContext _localctx = new OptschemanameContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_optschemaname);
		try {
			setState(1928);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1926);
				colid();
				}
				break;
			case AUTHORIZATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptschemaeltlistContext extends ParserRuleContext {
		public OptschemaeltlistContext optschemaeltlist() {
			return getRuleContext(OptschemaeltlistContext.class,0);
		}
		public Schema_stmtContext schema_stmt() {
			return getRuleContext(Schema_stmtContext.class,0);
		}
		public OptschemaeltlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optschemaeltlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptschemaeltlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptschemaeltlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptschemaeltlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptschemaeltlistContext optschemaeltlist() throws RecognitionException {
		return optschemaeltlist(0);
	}

	private OptschemaeltlistContext optschemaeltlist(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptschemaeltlistContext _localctx = new OptschemaeltlistContext(_ctx, _parentState);
		OptschemaeltlistContext _prevctx = _localctx;
		int _startState = 46;
		enterRecursionRule(_localctx, 46, RULE_optschemaeltlist, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1935);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptschemaeltlistContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_optschemaeltlist);
					setState(1931);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1932);
					schema_stmt();
					}
					} 
				}
				setState(1937);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,15,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Schema_stmtContext extends ParserRuleContext {
		public CreatestmtContext createstmt() {
			return getRuleContext(CreatestmtContext.class,0);
		}
		public IndexstmtContext indexstmt() {
			return getRuleContext(IndexstmtContext.class,0);
		}
		public CreateseqstmtContext createseqstmt() {
			return getRuleContext(CreateseqstmtContext.class,0);
		}
		public CreatetrigstmtContext createtrigstmt() {
			return getRuleContext(CreatetrigstmtContext.class,0);
		}
		public GrantstmtContext grantstmt() {
			return getRuleContext(GrantstmtContext.class,0);
		}
		public ViewstmtContext viewstmt() {
			return getRuleContext(ViewstmtContext.class,0);
		}
		public Schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSchema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSchema_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSchema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_stmtContext schema_stmt() throws RecognitionException {
		Schema_stmtContext _localctx = new Schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_schema_stmt);
		try {
			setState(1944);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1938);
				createstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1939);
				indexstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1940);
				createseqstmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1941);
				createtrigstmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1942);
				grantstmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1943);
				viewstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariablesetstmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public VariablesetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variablesetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVariablesetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVariablesetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVariablesetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariablesetstmtContext variablesetstmt() throws RecognitionException {
		VariablesetstmtContext _localctx = new VariablesetstmtContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_variablesetstmt);
		try {
			setState(1954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1946);
				match(SET);
				setState(1947);
				set_rest();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1948);
				match(SET);
				setState(1949);
				match(LOCAL);
				setState(1950);
				set_rest();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1951);
				match(SET);
				setState(1952);
				match(SESSION);
				setState(1953);
				set_rest();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_restContext extends ParserRuleContext {
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public Set_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_restContext set_rest() throws RecognitionException {
		Set_restContext _localctx = new Set_restContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_set_rest);
		try {
			setState(1964);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1956);
				match(TRANSACTION);
				setState(1957);
				transaction_mode_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1958);
				match(SESSION);
				setState(1959);
				match(CHARACTERISTICS);
				setState(1960);
				match(AS);
				setState(1961);
				match(TRANSACTION);
				setState(1962);
				transaction_mode_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1963);
				set_rest_more();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_setContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Generic_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_set(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_set(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_setContext generic_set() throws RecognitionException {
		Generic_setContext _localctx = new Generic_setContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_generic_set);
		try {
			setState(1982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1966);
				var_name(0);
				setState(1967);
				match(TO);
				setState(1968);
				var_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1970);
				var_name(0);
				setState(1971);
				match(EQUAL);
				setState(1972);
				var_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1974);
				var_name(0);
				setState(1975);
				match(TO);
				setState(1976);
				match(DEFAULT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1978);
				var_name(0);
				setState(1979);
				match(EQUAL);
				setState(1980);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_rest_moreContext extends ParserRuleContext {
		public Generic_setContext generic_set() {
			return getRuleContext(Generic_setContext.class,0);
		}
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public Zone_valueContext zone_value() {
			return getRuleContext(Zone_valueContext.class,0);
		}
		public TerminalNode CATALOG_P() { return getToken(PostgreSQLParser.CATALOG_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLParser.NAMES, 0); }
		public Opt_encodingContext opt_encoding() {
			return getRuleContext(Opt_encodingContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLParser.SNAPSHOT, 0); }
		public Set_rest_moreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest_more; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_rest_more(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_rest_more(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_rest_more(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_rest_moreContext set_rest_more() throws RecognitionException {
		Set_rest_moreContext _localctx = new Set_rest_moreContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_set_rest_more);
		try {
			setState(2012);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1984);
				generic_set();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1985);
				var_name(0);
				setState(1986);
				match(FROM);
				setState(1987);
				match(CURRENT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1989);
				match(TIME);
				setState(1990);
				match(ZONE);
				setState(1991);
				zone_value();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1992);
				match(CATALOG_P);
				setState(1993);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1994);
				match(SCHEMA);
				setState(1995);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1996);
				match(NAMES);
				setState(1997);
				opt_encoding();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1998);
				match(ROLE);
				setState(1999);
				nonreservedword_or_sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2000);
				match(SESSION);
				setState(2001);
				match(AUTHORIZATION);
				setState(2002);
				nonreservedword_or_sconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2003);
				match(SESSION);
				setState(2004);
				match(AUTHORIZATION);
				setState(2005);
				match(DEFAULT);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2006);
				match(XML_P);
				setState(2007);
				match(OPTION);
				setState(2008);
				document_or_content();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2009);
				match(TRANSACTION);
				setState(2010);
				match(SNAPSHOT);
				setState(2011);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_nameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVar_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVar_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVar_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_nameContext var_name() throws RecognitionException {
		return var_name(0);
	}

	private Var_nameContext var_name(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Var_nameContext _localctx = new Var_nameContext(_ctx, _parentState);
		Var_nameContext _prevctx = _localctx;
		int _startState = 58;
		enterRecursionRule(_localctx, 58, RULE_var_name, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2015);
			colid();
			}
			_ctx.stop = _input.LT(-1);
			setState(2022);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Var_nameContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_var_name);
					setState(2017);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2018);
					match(DOT);
					setState(2019);
					colid();
					}
					} 
				}
				setState(2024);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Var_listContext extends ParserRuleContext {
		public Var_valueContext var_value() {
			return getRuleContext(Var_valueContext.class,0);
		}
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Var_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVar_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVar_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVar_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_listContext var_list() throws RecognitionException {
		return var_list(0);
	}

	private Var_listContext var_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Var_listContext _localctx = new Var_listContext(_ctx, _parentState);
		Var_listContext _prevctx = _localctx;
		int _startState = 60;
		enterRecursionRule(_localctx, 60, RULE_var_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2026);
			var_value();
			}
			_ctx.stop = _input.LT(-1);
			setState(2033);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Var_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_var_list);
					setState(2028);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2029);
					match(COMMA);
					setState(2030);
					var_value();
					}
					} 
				}
				setState(2035);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Var_valueContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Var_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVar_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVar_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVar_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_valueContext var_value() throws RecognitionException {
		Var_valueContext _localctx = new Var_valueContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_var_value);
		try {
			setState(2038);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(2036);
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(2037);
				numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Iso_levelContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public Iso_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iso_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIso_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIso_level(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIso_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Iso_levelContext iso_level() throws RecognitionException {
		Iso_levelContext _localctx = new Iso_levelContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_iso_level);
		try {
			setState(2047);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2040);
				match(READ);
				setState(2041);
				match(UNCOMMITTED);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2042);
				match(READ);
				setState(2043);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2044);
				match(REPEATABLE);
				setState(2045);
				match(READ);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2046);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_boolean_or_stringContext extends ParserRuleContext {
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Opt_boolean_or_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_boolean_or_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_boolean_or_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_boolean_or_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_boolean_or_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_boolean_or_stringContext opt_boolean_or_string() throws RecognitionException {
		Opt_boolean_or_stringContext _localctx = new Opt_boolean_or_stringContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_opt_boolean_or_string);
		try {
			setState(2053);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(2049);
				match(TRUE_P);
				}
				break;
			case FALSE_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(2050);
				match(FALSE_P);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(2051);
				match(ON);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 4);
				{
				setState(2052);
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Zone_valueContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstintervalContext constinterval() {
			return getRuleContext(ConstintervalContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public Zone_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zone_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterZone_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitZone_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitZone_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Zone_valueContext zone_value() throws RecognitionException {
		Zone_valueContext _localctx = new Zone_valueContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_zone_value);
		try {
			setState(2070);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2055);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2056);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2057);
				constinterval();
				setState(2058);
				sconst();
				setState(2059);
				opt_interval();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2061);
				constinterval();
				setState(2062);
				match(OPEN_PAREN);
				setState(2063);
				iconst();
				setState(2064);
				match(CLOSE_PAREN);
				setState(2065);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2067);
				numericonly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2068);
				match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2069);
				match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_encodingContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Opt_encodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_encoding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_encoding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_encoding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_encoding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_encodingContext opt_encoding() throws RecognitionException {
		Opt_encodingContext _localctx = new Opt_encodingContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_opt_encoding);
		try {
			setState(2075);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2072);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2073);
				match(DEFAULT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nonreservedword_or_sconstContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Nonreservedword_or_sconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonreservedword_or_sconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNonreservedword_or_sconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNonreservedword_or_sconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNonreservedword_or_sconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nonreservedword_or_sconstContext nonreservedword_or_sconst() throws RecognitionException {
		Nonreservedword_or_sconstContext _localctx = new Nonreservedword_or_sconstContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_nonreservedword_or_sconst);
		try {
			setState(2079);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2077);
				nonreservedword();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(2078);
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableresetstmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public Reset_restContext reset_rest() {
			return getRuleContext(Reset_restContext.class,0);
		}
		public VariableresetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableresetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVariableresetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVariableresetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVariableresetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableresetstmtContext variableresetstmt() throws RecognitionException {
		VariableresetstmtContext _localctx = new VariableresetstmtContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_variableresetstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2081);
			match(RESET);
			setState(2082);
			reset_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reset_restContext extends ParserRuleContext {
		public Generic_resetContext generic_reset() {
			return getRuleContext(Generic_resetContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public Reset_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reset_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReset_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReset_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReset_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reset_restContext reset_rest() throws RecognitionException {
		Reset_restContext _localctx = new Reset_restContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_reset_rest);
		try {
			setState(2092);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2084);
				generic_reset();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2085);
				match(TIME);
				setState(2086);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2087);
				match(TRANSACTION);
				setState(2088);
				match(ISOLATION);
				setState(2089);
				match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2090);
				match(SESSION);
				setState(2091);
				match(AUTHORIZATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_resetContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Generic_resetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_reset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_reset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_reset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_reset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_resetContext generic_reset() throws RecognitionException {
		Generic_resetContext _localctx = new Generic_resetContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_generic_reset);
		try {
			setState(2096);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2094);
				var_name(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2095);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetresetclauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public VariableresetstmtContext variableresetstmt() {
			return getRuleContext(VariableresetstmtContext.class,0);
		}
		public SetresetclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setresetclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSetresetclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSetresetclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSetresetclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetresetclauseContext setresetclause() throws RecognitionException {
		SetresetclauseContext _localctx = new SetresetclauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_setresetclause);
		try {
			setState(2101);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2098);
				match(SET);
				setState(2099);
				set_rest();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2100);
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionsetresetclauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public VariableresetstmtContext variableresetstmt() {
			return getRuleContext(VariableresetstmtContext.class,0);
		}
		public FunctionsetresetclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionsetresetclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunctionsetresetclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunctionsetresetclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunctionsetresetclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionsetresetclauseContext functionsetresetclause() throws RecognitionException {
		FunctionsetresetclauseContext _localctx = new FunctionsetresetclauseContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_functionsetresetclause);
		try {
			setState(2106);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2103);
				match(SET);
				setState(2104);
				set_rest_more();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2105);
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableshowstmtContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(PostgreSQLParser.SHOW, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public VariableshowstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableshowstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVariableshowstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVariableshowstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVariableshowstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableshowstmtContext variableshowstmt() throws RecognitionException {
		VariableshowstmtContext _localctx = new VariableshowstmtContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_variableshowstmt);
		try {
			setState(2122);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2108);
				match(SHOW);
				setState(2109);
				var_name(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2110);
				match(SHOW);
				setState(2111);
				match(TIME);
				setState(2112);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2113);
				match(SHOW);
				setState(2114);
				match(TRANSACTION);
				setState(2115);
				match(ISOLATION);
				setState(2116);
				match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2117);
				match(SHOW);
				setState(2118);
				match(SESSION);
				setState(2119);
				match(AUTHORIZATION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2120);
				match(SHOW);
				setState(2121);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintssetstmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public Constraints_set_listContext constraints_set_list() {
			return getRuleContext(Constraints_set_listContext.class,0);
		}
		public Constraints_set_modeContext constraints_set_mode() {
			return getRuleContext(Constraints_set_modeContext.class,0);
		}
		public ConstraintssetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintssetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintssetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintssetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintssetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintssetstmtContext constraintssetstmt() throws RecognitionException {
		ConstraintssetstmtContext _localctx = new ConstraintssetstmtContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_constraintssetstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2124);
			match(SET);
			setState(2125);
			match(CONSTRAINTS);
			setState(2126);
			constraints_set_list();
			setState(2127);
			constraints_set_mode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraints_set_listContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Constraints_set_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraints_set_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraints_set_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraints_set_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_listContext constraints_set_list() throws RecognitionException {
		Constraints_set_listContext _localctx = new Constraints_set_listContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_constraints_set_list);
		try {
			setState(2131);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2129);
				match(ALL);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2130);
				qualified_name_list(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraints_set_modeContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public Constraints_set_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraints_set_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraints_set_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraints_set_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_modeContext constraints_set_mode() throws RecognitionException {
		Constraints_set_modeContext _localctx = new Constraints_set_modeContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_constraints_set_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2133);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckpointstmtContext extends ParserRuleContext {
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLParser.CHECKPOINT, 0); }
		public CheckpointstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkpointstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCheckpointstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCheckpointstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCheckpointstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckpointstmtContext checkpointstmt() throws RecognitionException {
		CheckpointstmtContext _localctx = new CheckpointstmtContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_checkpointstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2135);
			match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiscardstmtContext extends ParserRuleContext {
		public TerminalNode DISCARD() { return getToken(PostgreSQLParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLParser.PLANS, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public DiscardstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discardstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDiscardstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDiscardstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDiscardstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiscardstmtContext discardstmt() throws RecognitionException {
		DiscardstmtContext _localctx = new DiscardstmtContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_discardstmt);
		try {
			setState(2147);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2137);
				match(DISCARD);
				setState(2138);
				match(ALL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2139);
				match(DISCARD);
				setState(2140);
				match(TEMP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2141);
				match(DISCARD);
				setState(2142);
				match(TEMPORARY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2143);
				match(DISCARD);
				setState(2144);
				match(PLANS);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2145);
				match(DISCARD);
				setState(2146);
				match(SEQUENCES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltertablestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Partition_cmdContext partition_cmd() {
			return getRuleContext(Partition_cmdContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(PostgreSQLParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PostgreSQLParser.TABLESPACE, i);
		}
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Index_partition_cmdContext index_partition_cmd() {
			return getRuleContext(Index_partition_cmdContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public AltertablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertablestmtContext altertablestmt() throws RecognitionException {
		AltertablestmtContext _localctx = new AltertablestmtContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_altertablestmt);
		try {
			setState(2319);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2149);
				match(ALTER);
				setState(2150);
				match(TABLE);
				setState(2151);
				relation_expr();
				setState(2152);
				alter_table_cmds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2154);
				match(ALTER);
				setState(2155);
				match(TABLE);
				setState(2156);
				match(IF_P);
				setState(2157);
				match(EXISTS);
				setState(2158);
				relation_expr();
				setState(2159);
				alter_table_cmds(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2161);
				match(ALTER);
				setState(2162);
				match(TABLE);
				setState(2163);
				relation_expr();
				setState(2164);
				partition_cmd();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2166);
				match(ALTER);
				setState(2167);
				match(TABLE);
				setState(2168);
				match(IF_P);
				setState(2169);
				match(EXISTS);
				setState(2170);
				relation_expr();
				setState(2171);
				partition_cmd();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2173);
				match(ALTER);
				setState(2174);
				match(TABLE);
				setState(2175);
				match(ALL);
				setState(2176);
				match(IN_P);
				setState(2177);
				match(TABLESPACE);
				setState(2178);
				name();
				setState(2179);
				match(SET);
				setState(2180);
				match(TABLESPACE);
				setState(2181);
				name();
				setState(2182);
				opt_nowait();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2184);
				match(ALTER);
				setState(2185);
				match(TABLE);
				setState(2186);
				match(ALL);
				setState(2187);
				match(IN_P);
				setState(2188);
				match(TABLESPACE);
				setState(2189);
				name();
				setState(2190);
				match(OWNED);
				setState(2191);
				match(BY);
				setState(2192);
				role_list(0);
				setState(2193);
				match(SET);
				setState(2194);
				match(TABLESPACE);
				setState(2195);
				name();
				setState(2196);
				opt_nowait();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2198);
				match(ALTER);
				setState(2199);
				match(INDEX);
				setState(2200);
				qualified_name();
				setState(2201);
				alter_table_cmds(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2203);
				match(ALTER);
				setState(2204);
				match(INDEX);
				setState(2205);
				match(IF_P);
				setState(2206);
				match(EXISTS);
				setState(2207);
				qualified_name();
				setState(2208);
				alter_table_cmds(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2210);
				match(ALTER);
				setState(2211);
				match(INDEX);
				setState(2212);
				qualified_name();
				setState(2213);
				index_partition_cmd();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2215);
				match(ALTER);
				setState(2216);
				match(INDEX);
				setState(2217);
				match(ALL);
				setState(2218);
				match(IN_P);
				setState(2219);
				match(TABLESPACE);
				setState(2220);
				name();
				setState(2221);
				match(SET);
				setState(2222);
				match(TABLESPACE);
				setState(2223);
				name();
				setState(2224);
				opt_nowait();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2226);
				match(ALTER);
				setState(2227);
				match(INDEX);
				setState(2228);
				match(ALL);
				setState(2229);
				match(IN_P);
				setState(2230);
				match(TABLESPACE);
				setState(2231);
				name();
				setState(2232);
				match(OWNED);
				setState(2233);
				match(BY);
				setState(2234);
				role_list(0);
				setState(2235);
				match(SET);
				setState(2236);
				match(TABLESPACE);
				setState(2237);
				name();
				setState(2238);
				opt_nowait();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2240);
				match(ALTER);
				setState(2241);
				match(SEQUENCE);
				setState(2242);
				qualified_name();
				setState(2243);
				alter_table_cmds(0);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2245);
				match(ALTER);
				setState(2246);
				match(SEQUENCE);
				setState(2247);
				match(IF_P);
				setState(2248);
				match(EXISTS);
				setState(2249);
				qualified_name();
				setState(2250);
				alter_table_cmds(0);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2252);
				match(ALTER);
				setState(2253);
				match(VIEW);
				setState(2254);
				qualified_name();
				setState(2255);
				alter_table_cmds(0);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2257);
				match(ALTER);
				setState(2258);
				match(VIEW);
				setState(2259);
				match(IF_P);
				setState(2260);
				match(EXISTS);
				setState(2261);
				qualified_name();
				setState(2262);
				alter_table_cmds(0);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2264);
				match(ALTER);
				setState(2265);
				match(MATERIALIZED);
				setState(2266);
				match(VIEW);
				setState(2267);
				qualified_name();
				setState(2268);
				alter_table_cmds(0);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2270);
				match(ALTER);
				setState(2271);
				match(MATERIALIZED);
				setState(2272);
				match(VIEW);
				setState(2273);
				match(IF_P);
				setState(2274);
				match(EXISTS);
				setState(2275);
				qualified_name();
				setState(2276);
				alter_table_cmds(0);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2278);
				match(ALTER);
				setState(2279);
				match(MATERIALIZED);
				setState(2280);
				match(VIEW);
				setState(2281);
				match(ALL);
				setState(2282);
				match(IN_P);
				setState(2283);
				match(TABLESPACE);
				setState(2284);
				name();
				setState(2285);
				match(SET);
				setState(2286);
				match(TABLESPACE);
				setState(2287);
				name();
				setState(2288);
				opt_nowait();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2290);
				match(ALTER);
				setState(2291);
				match(MATERIALIZED);
				setState(2292);
				match(VIEW);
				setState(2293);
				match(ALL);
				setState(2294);
				match(IN_P);
				setState(2295);
				match(TABLESPACE);
				setState(2296);
				name();
				setState(2297);
				match(OWNED);
				setState(2298);
				match(BY);
				setState(2299);
				role_list(0);
				setState(2300);
				match(SET);
				setState(2301);
				match(TABLESPACE);
				setState(2302);
				name();
				setState(2303);
				opt_nowait();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2305);
				match(ALTER);
				setState(2306);
				match(FOREIGN);
				setState(2307);
				match(TABLE);
				setState(2308);
				relation_expr();
				setState(2309);
				alter_table_cmds(0);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2311);
				match(ALTER);
				setState(2312);
				match(FOREIGN);
				setState(2313);
				match(TABLE);
				setState(2314);
				match(IF_P);
				setState(2315);
				match(EXISTS);
				setState(2316);
				relation_expr();
				setState(2317);
				alter_table_cmds(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_cmdsContext extends ParserRuleContext {
		public Alter_table_cmdContext alter_table_cmd() {
			return getRuleContext(Alter_table_cmdContext.class,0);
		}
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Alter_table_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_table_cmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_table_cmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_table_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdsContext alter_table_cmds() throws RecognitionException {
		return alter_table_cmds(0);
	}

	private Alter_table_cmdsContext alter_table_cmds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_table_cmdsContext _localctx = new Alter_table_cmdsContext(_ctx, _parentState);
		Alter_table_cmdsContext _prevctx = _localctx;
		int _startState = 98;
		enterRecursionRule(_localctx, 98, RULE_alter_table_cmds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2322);
			alter_table_cmd();
			}
			_ctx.stop = _input.LT(-1);
			setState(2329);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_table_cmdsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_table_cmds);
					setState(2324);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2325);
					match(COMMA);
					setState(2326);
					alter_table_cmd();
					}
					} 
				}
				setState(2331);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Partition_cmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public PartitionboundspecContext partitionboundspec() {
			return getRuleContext(PartitionboundspecContext.class,0);
		}
		public TerminalNode DETACH() { return getToken(PostgreSQLParser.DETACH, 0); }
		public Partition_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPartition_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPartition_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPartition_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_cmdContext partition_cmd() throws RecognitionException {
		Partition_cmdContext _localctx = new Partition_cmdContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_partition_cmd);
		try {
			setState(2340);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATTACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2332);
				match(ATTACH);
				setState(2333);
				match(PARTITION);
				setState(2334);
				qualified_name();
				setState(2335);
				partitionboundspec();
				}
				break;
			case DETACH:
				enterOuterAlt(_localctx, 2);
				{
				setState(2337);
				match(DETACH);
				setState(2338);
				match(PARTITION);
				setState(2339);
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_partition_cmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Index_partition_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_partition_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_partition_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_partition_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_partition_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_partition_cmdContext index_partition_cmd() throws RecognitionException {
		Index_partition_cmdContext _localctx = new Index_partition_cmdContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_index_partition_cmd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2342);
			match(ATTACH);
			setState(2343);
			match(PARTITION);
			setState(2344);
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_cmdContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public List<ColidContext> colid() {
			return getRuleContexts(ColidContext.class);
		}
		public ColidContext colid(int i) {
			return getRuleContext(ColidContext.class,i);
		}
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode EXPRESSION() { return getToken(PostgreSQLParser.EXPRESSION, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public Generated_whenContext generated_when() {
			return getRuleContext(Generated_whenContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return getRuleContext(OptparenthesizedseqoptlistContext.class,0);
		}
		public Alter_identity_column_option_listContext alter_identity_column_option_list() {
			return getRuleContext(Alter_identity_column_option_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public Alter_usingContext alter_using() {
			return getRuleContext(Alter_usingContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLParser.LOGGED, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public Replica_identityContext replica_identity() {
			return getRuleContext(Replica_identityContext.class,0);
		}
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public Alter_table_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_table_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_table_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_table_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdContext alter_table_cmd() throws RecognitionException {
		Alter_table_cmdContext _localctx = new Alter_table_cmdContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_alter_table_cmd);
		try {
			setState(2598);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2346);
				match(ADD_P);
				setState(2347);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2348);
				match(ADD_P);
				setState(2349);
				match(IF_P);
				setState(2350);
				match(NOT);
				setState(2351);
				match(EXISTS);
				setState(2352);
				columnDef();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2353);
				match(ADD_P);
				setState(2354);
				match(COLUMN);
				setState(2355);
				columnDef();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2356);
				match(ADD_P);
				setState(2357);
				match(COLUMN);
				setState(2358);
				match(IF_P);
				setState(2359);
				match(NOT);
				setState(2360);
				match(EXISTS);
				setState(2361);
				columnDef();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2362);
				match(ALTER);
				setState(2363);
				opt_column();
				setState(2364);
				colid();
				setState(2365);
				alter_column_default();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2367);
				match(ALTER);
				setState(2368);
				opt_column();
				setState(2369);
				colid();
				setState(2370);
				match(DROP);
				setState(2371);
				match(NOT);
				setState(2372);
				match(NULL_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2374);
				match(ALTER);
				setState(2375);
				opt_column();
				setState(2376);
				colid();
				setState(2377);
				match(SET);
				setState(2378);
				match(NOT);
				setState(2379);
				match(NULL_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2381);
				match(ALTER);
				setState(2382);
				opt_column();
				setState(2383);
				colid();
				setState(2384);
				match(DROP);
				setState(2385);
				match(EXPRESSION);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2387);
				match(ALTER);
				setState(2388);
				opt_column();
				setState(2389);
				colid();
				setState(2390);
				match(DROP);
				setState(2391);
				match(EXPRESSION);
				setState(2392);
				match(IF_P);
				setState(2393);
				match(EXISTS);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2395);
				match(ALTER);
				setState(2396);
				opt_column();
				setState(2397);
				colid();
				setState(2398);
				match(SET);
				setState(2399);
				match(STATISTICS);
				setState(2400);
				signediconst();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2402);
				match(ALTER);
				setState(2403);
				opt_column();
				setState(2404);
				iconst();
				setState(2405);
				match(SET);
				setState(2406);
				match(STATISTICS);
				setState(2407);
				signediconst();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2409);
				match(ALTER);
				setState(2410);
				opt_column();
				setState(2411);
				colid();
				setState(2412);
				match(SET);
				setState(2413);
				reloptions();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2415);
				match(ALTER);
				setState(2416);
				opt_column();
				setState(2417);
				colid();
				setState(2418);
				match(RESET);
				setState(2419);
				reloptions();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2421);
				match(ALTER);
				setState(2422);
				opt_column();
				setState(2423);
				colid();
				setState(2424);
				match(SET);
				setState(2425);
				match(STORAGE);
				setState(2426);
				colid();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2428);
				match(ALTER);
				setState(2429);
				opt_column();
				setState(2430);
				colid();
				setState(2431);
				match(ADD_P);
				setState(2432);
				match(GENERATED);
				setState(2433);
				generated_when();
				setState(2434);
				match(AS);
				setState(2435);
				match(IDENTITY_P);
				setState(2436);
				optparenthesizedseqoptlist();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2438);
				match(ALTER);
				setState(2439);
				opt_column();
				setState(2440);
				colid();
				setState(2441);
				alter_identity_column_option_list(0);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2443);
				match(ALTER);
				setState(2444);
				opt_column();
				setState(2445);
				colid();
				setState(2446);
				match(DROP);
				setState(2447);
				match(IDENTITY_P);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2449);
				match(ALTER);
				setState(2450);
				opt_column();
				setState(2451);
				colid();
				setState(2452);
				match(DROP);
				setState(2453);
				match(IDENTITY_P);
				setState(2454);
				match(IF_P);
				setState(2455);
				match(EXISTS);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2457);
				match(DROP);
				setState(2458);
				opt_column();
				setState(2459);
				match(IF_P);
				setState(2460);
				match(EXISTS);
				setState(2461);
				colid();
				setState(2462);
				opt_drop_behavior();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2464);
				match(DROP);
				setState(2465);
				opt_column();
				setState(2466);
				colid();
				setState(2467);
				opt_drop_behavior();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2469);
				match(ALTER);
				setState(2470);
				opt_column();
				setState(2471);
				colid();
				setState(2472);
				opt_set_data();
				setState(2473);
				match(TYPE_P);
				setState(2474);
				typename();
				setState(2475);
				opt_collate_clause();
				setState(2476);
				alter_using();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2478);
				match(ALTER);
				setState(2479);
				opt_column();
				setState(2480);
				colid();
				setState(2481);
				alter_generic_options();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2483);
				match(ADD_P);
				setState(2484);
				tableconstraint();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2485);
				match(ALTER);
				setState(2486);
				match(CONSTRAINT);
				setState(2487);
				name();
				setState(2488);
				constraintattributespec(0);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2490);
				match(VALIDATE);
				setState(2491);
				match(CONSTRAINT);
				setState(2492);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2493);
				match(DROP);
				setState(2494);
				match(CONSTRAINT);
				setState(2495);
				match(IF_P);
				setState(2496);
				match(EXISTS);
				setState(2497);
				name();
				setState(2498);
				opt_drop_behavior();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2500);
				match(DROP);
				setState(2501);
				match(CONSTRAINT);
				setState(2502);
				name();
				setState(2503);
				opt_drop_behavior();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2505);
				match(SET);
				setState(2506);
				match(WITHOUT);
				setState(2507);
				match(OIDS);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2508);
				match(CLUSTER);
				setState(2509);
				match(ON);
				setState(2510);
				name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2511);
				match(SET);
				setState(2512);
				match(WITHOUT);
				setState(2513);
				match(CLUSTER);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2514);
				match(SET);
				setState(2515);
				match(LOGGED);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2516);
				match(SET);
				setState(2517);
				match(UNLOGGED);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2518);
				match(ENABLE_P);
				setState(2519);
				match(TRIGGER);
				setState(2520);
				name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2521);
				match(ENABLE_P);
				setState(2522);
				match(ALWAYS);
				setState(2523);
				match(TRIGGER);
				setState(2524);
				name();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2525);
				match(ENABLE_P);
				setState(2526);
				match(REPLICA);
				setState(2527);
				match(TRIGGER);
				setState(2528);
				name();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(2529);
				match(ENABLE_P);
				setState(2530);
				match(TRIGGER);
				setState(2531);
				match(ALL);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(2532);
				match(ENABLE_P);
				setState(2533);
				match(TRIGGER);
				setState(2534);
				match(USER);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(2535);
				match(DISABLE_P);
				setState(2536);
				match(TRIGGER);
				setState(2537);
				name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(2538);
				match(DISABLE_P);
				setState(2539);
				match(TRIGGER);
				setState(2540);
				match(ALL);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2541);
				match(DISABLE_P);
				setState(2542);
				match(TRIGGER);
				setState(2543);
				match(USER);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(2544);
				match(ENABLE_P);
				setState(2545);
				match(RULE);
				setState(2546);
				name();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(2547);
				match(ENABLE_P);
				setState(2548);
				match(ALWAYS);
				setState(2549);
				match(RULE);
				setState(2550);
				name();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(2551);
				match(ENABLE_P);
				setState(2552);
				match(REPLICA);
				setState(2553);
				match(RULE);
				setState(2554);
				name();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(2555);
				match(DISABLE_P);
				setState(2556);
				match(RULE);
				setState(2557);
				name();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(2558);
				match(INHERIT);
				setState(2559);
				qualified_name();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(2560);
				match(NO);
				setState(2561);
				match(INHERIT);
				setState(2562);
				qualified_name();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(2563);
				match(OF);
				setState(2564);
				any_name();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(2565);
				match(NOT);
				setState(2566);
				match(OF);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(2567);
				match(OWNER);
				setState(2568);
				match(TO);
				setState(2569);
				rolespec();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(2570);
				match(SET);
				setState(2571);
				match(TABLESPACE);
				setState(2572);
				name();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(2573);
				match(SET);
				setState(2574);
				reloptions();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(2575);
				match(RESET);
				setState(2576);
				reloptions();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(2577);
				match(REPLICA);
				setState(2578);
				match(IDENTITY_P);
				setState(2579);
				replica_identity();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(2580);
				match(ENABLE_P);
				setState(2581);
				match(ROW);
				setState(2582);
				match(LEVEL);
				setState(2583);
				match(SECURITY);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(2584);
				match(DISABLE_P);
				setState(2585);
				match(ROW);
				setState(2586);
				match(LEVEL);
				setState(2587);
				match(SECURITY);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(2588);
				match(FORCE);
				setState(2589);
				match(ROW);
				setState(2590);
				match(LEVEL);
				setState(2591);
				match(SECURITY);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(2592);
				match(NO);
				setState(2593);
				match(FORCE);
				setState(2594);
				match(ROW);
				setState(2595);
				match(LEVEL);
				setState(2596);
				match(SECURITY);
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(2597);
				alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_defaultContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Alter_column_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_column_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_column_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_column_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_defaultContext alter_column_default() throws RecognitionException {
		Alter_column_defaultContext _localctx = new Alter_column_defaultContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_alter_column_default);
		try {
			setState(2605);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2600);
				match(SET);
				setState(2601);
				match(DEFAULT);
				setState(2602);
				a_expr(0);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2603);
				match(DROP);
				setState(2604);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_drop_behaviorContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Opt_drop_behaviorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_drop_behavior; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_drop_behavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_drop_behavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_drop_behavior(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_drop_behaviorContext opt_drop_behavior() throws RecognitionException {
		Opt_drop_behaviorContext _localctx = new Opt_drop_behaviorContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_opt_drop_behavior);
		try {
			setState(2610);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2607);
				match(CASCADE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2608);
				match(RESTRICT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_collate_clauseContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_collate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_collate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_collate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_collate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collate_clauseContext opt_collate_clause() throws RecognitionException {
		Opt_collate_clauseContext _localctx = new Opt_collate_clauseContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_opt_collate_clause);
		try {
			setState(2615);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2612);
				match(COLLATE);
				setState(2613);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Alter_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_usingContext alter_using() throws RecognitionException {
		Alter_usingContext _localctx = new Alter_usingContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_alter_using);
		try {
			setState(2620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2617);
				match(USING);
				setState(2618);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replica_identityContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Replica_identityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replica_identity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReplica_identity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReplica_identity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReplica_identity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Replica_identityContext replica_identity() throws RecognitionException {
		Replica_identityContext _localctx = new Replica_identityContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_replica_identity);
		try {
			setState(2628);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOTHING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2622);
				match(NOTHING);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2623);
				match(FULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2624);
				match(DEFAULT);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 4);
				{
				setState(2625);
				match(USING);
				setState(2626);
				match(INDEX);
				setState(2627);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Reloption_listContext reloption_list() {
			return getRuleContext(Reloption_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionsContext reloptions() throws RecognitionException {
		ReloptionsContext _localctx = new ReloptionsContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_reloptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2630);
			match(OPEN_PAREN);
			setState(2631);
			reloption_list(0);
			setState(2632);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_reloptionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public Opt_reloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_reloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_reloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_reloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_reloptionsContext opt_reloptions() throws RecognitionException {
		Opt_reloptionsContext _localctx = new Opt_reloptionsContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_opt_reloptions);
		try {
			setState(2637);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2634);
				match(WITH);
				setState(2635);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reloption_listContext extends ParserRuleContext {
		public Reloption_elemContext reloption_elem() {
			return getRuleContext(Reloption_elemContext.class,0);
		}
		public Reloption_listContext reloption_list() {
			return getRuleContext(Reloption_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Reloption_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReloption_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReloption_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReloption_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_listContext reloption_list() throws RecognitionException {
		return reloption_list(0);
	}

	private Reloption_listContext reloption_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Reloption_listContext _localctx = new Reloption_listContext(_ctx, _parentState);
		Reloption_listContext _prevctx = _localctx;
		int _startState = 120;
		enterRecursionRule(_localctx, 120, RULE_reloption_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2640);
			reloption_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2647);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,46,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Reloption_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_reloption_list);
					setState(2642);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2643);
					match(COMMA);
					setState(2644);
					reloption_elem();
					}
					} 
				}
				setState(2649);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,46,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Reloption_elemContext extends ParserRuleContext {
		public List<CollabelContext> collabel() {
			return getRuleContexts(CollabelContext.class);
		}
		public CollabelContext collabel(int i) {
			return getRuleContext(CollabelContext.class,i);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Reloption_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReloption_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReloption_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReloption_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_elemContext reloption_elem() throws RecognitionException {
		Reloption_elemContext _localctx = new Reloption_elemContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_reloption_elem);
		try {
			setState(2665);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2650);
				collabel();
				setState(2651);
				match(EQUAL);
				setState(2652);
				def_arg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2654);
				collabel();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2655);
				collabel();
				setState(2656);
				match(DOT);
				setState(2657);
				collabel();
				setState(2658);
				match(EQUAL);
				setState(2659);
				def_arg();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2661);
				collabel();
				setState(2662);
				match(DOT);
				setState(2663);
				collabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_identity_column_option_listContext extends ParserRuleContext {
		public Alter_identity_column_optionContext alter_identity_column_option() {
			return getRuleContext(Alter_identity_column_optionContext.class,0);
		}
		public Alter_identity_column_option_listContext alter_identity_column_option_list() {
			return getRuleContext(Alter_identity_column_option_listContext.class,0);
		}
		public Alter_identity_column_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_identity_column_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_identity_column_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_identity_column_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_identity_column_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_identity_column_option_listContext alter_identity_column_option_list() throws RecognitionException {
		return alter_identity_column_option_list(0);
	}

	private Alter_identity_column_option_listContext alter_identity_column_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_identity_column_option_listContext _localctx = new Alter_identity_column_option_listContext(_ctx, _parentState);
		Alter_identity_column_option_listContext _prevctx = _localctx;
		int _startState = 124;
		enterRecursionRule(_localctx, 124, RULE_alter_identity_column_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2668);
			alter_identity_column_option();
			}
			_ctx.stop = _input.LT(-1);
			setState(2674);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_identity_column_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_identity_column_option_list);
					setState(2670);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2671);
					alter_identity_column_option();
					}
					} 
				}
				setState(2676);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_identity_column_optionContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public SeqoptelemContext seqoptelem() {
			return getRuleContext(SeqoptelemContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public Generated_whenContext generated_when() {
			return getRuleContext(Generated_whenContext.class,0);
		}
		public Alter_identity_column_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_identity_column_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_identity_column_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_identity_column_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_identity_column_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_identity_column_optionContext alter_identity_column_option() throws RecognitionException {
		Alter_identity_column_optionContext _localctx = new Alter_identity_column_optionContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alter_identity_column_option);
		try {
			setState(2687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2677);
				match(RESTART);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2678);
				match(RESTART);
				setState(2679);
				opt_with();
				setState(2680);
				numericonly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2682);
				match(SET);
				setState(2683);
				seqoptelem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2684);
				match(SET);
				setState(2685);
				match(GENERATED);
				setState(2686);
				generated_when();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionboundspecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public Hash_partboundContext hash_partbound() {
			return getRuleContext(Hash_partboundContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public PartitionboundspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionboundspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPartitionboundspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPartitionboundspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPartitionboundspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionboundspecContext partitionboundspec() throws RecognitionException {
		PartitionboundspecContext _localctx = new PartitionboundspecContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_partitionboundspec);
		try {
			setState(2715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2689);
				match(FOR);
				setState(2690);
				match(VALUES);
				setState(2691);
				match(WITH);
				setState(2692);
				match(OPEN_PAREN);
				setState(2693);
				hash_partbound(0);
				setState(2694);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2696);
				match(FOR);
				setState(2697);
				match(VALUES);
				setState(2698);
				match(IN_P);
				setState(2699);
				match(OPEN_PAREN);
				setState(2700);
				expr_list(0);
				setState(2701);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2703);
				match(FOR);
				setState(2704);
				match(VALUES);
				setState(2705);
				match(FROM);
				setState(2706);
				match(OPEN_PAREN);
				setState(2707);
				expr_list(0);
				setState(2708);
				match(CLOSE_PAREN);
				setState(2709);
				match(TO);
				setState(2710);
				match(OPEN_PAREN);
				setState(2711);
				expr_list(0);
				setState(2712);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2714);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partbound_elemContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Hash_partbound_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partbound_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHash_partbound_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHash_partbound_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHash_partbound_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_partbound_elemContext hash_partbound_elem() throws RecognitionException {
		Hash_partbound_elemContext _localctx = new Hash_partbound_elemContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_hash_partbound_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2717);
			nonreservedword();
			setState(2718);
			iconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partboundContext extends ParserRuleContext {
		public Hash_partbound_elemContext hash_partbound_elem() {
			return getRuleContext(Hash_partbound_elemContext.class,0);
		}
		public Hash_partboundContext hash_partbound() {
			return getRuleContext(Hash_partboundContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Hash_partboundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partbound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHash_partbound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHash_partbound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHash_partbound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_partboundContext hash_partbound() throws RecognitionException {
		return hash_partbound(0);
	}

	private Hash_partboundContext hash_partbound(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Hash_partboundContext _localctx = new Hash_partboundContext(_ctx, _parentState);
		Hash_partboundContext _prevctx = _localctx;
		int _startState = 132;
		enterRecursionRule(_localctx, 132, RULE_hash_partbound, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2721);
			hash_partbound_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2728);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,51,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Hash_partboundContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_hash_partbound);
					setState(2723);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2724);
					match(COMMA);
					setState(2725);
					hash_partbound_elem();
					}
					} 
				}
				setState(2730);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,51,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AltercompositetypestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Alter_type_cmdsContext alter_type_cmds() {
			return getRuleContext(Alter_type_cmdsContext.class,0);
		}
		public AltercompositetypestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altercompositetypestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltercompositetypestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltercompositetypestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltercompositetypestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltercompositetypestmtContext altercompositetypestmt() throws RecognitionException {
		AltercompositetypestmtContext _localctx = new AltercompositetypestmtContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_altercompositetypestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2731);
			match(ALTER);
			setState(2732);
			match(TYPE_P);
			setState(2733);
			any_name();
			setState(2734);
			alter_type_cmds(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_type_cmdsContext extends ParserRuleContext {
		public Alter_type_cmdContext alter_type_cmd() {
			return getRuleContext(Alter_type_cmdContext.class,0);
		}
		public Alter_type_cmdsContext alter_type_cmds() {
			return getRuleContext(Alter_type_cmdsContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Alter_type_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_type_cmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_type_cmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_type_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdsContext alter_type_cmds() throws RecognitionException {
		return alter_type_cmds(0);
	}

	private Alter_type_cmdsContext alter_type_cmds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_type_cmdsContext _localctx = new Alter_type_cmdsContext(_ctx, _parentState);
		Alter_type_cmdsContext _prevctx = _localctx;
		int _startState = 136;
		enterRecursionRule(_localctx, 136, RULE_alter_type_cmds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2737);
			alter_type_cmd();
			}
			_ctx.stop = _input.LT(-1);
			setState(2744);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_type_cmdsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_type_cmds);
					setState(2739);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2740);
					match(COMMA);
					setState(2741);
					alter_type_cmd();
					}
					} 
				}
				setState(2746);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_type_cmdContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public TablefuncelementContext tablefuncelement() {
			return getRuleContext(TablefuncelementContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public Alter_type_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_type_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_type_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_type_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdContext alter_type_cmd() throws RecognitionException {
		Alter_type_cmdContext _localctx = new Alter_type_cmdContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alter_type_cmd);
		try {
			setState(2773);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2747);
				match(ADD_P);
				setState(2748);
				match(ATTRIBUTE);
				setState(2749);
				tablefuncelement();
				setState(2750);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2752);
				match(DROP);
				setState(2753);
				match(ATTRIBUTE);
				setState(2754);
				match(IF_P);
				setState(2755);
				match(EXISTS);
				setState(2756);
				colid();
				setState(2757);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2759);
				match(DROP);
				setState(2760);
				match(ATTRIBUTE);
				setState(2761);
				colid();
				setState(2762);
				opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2764);
				match(ALTER);
				setState(2765);
				match(ATTRIBUTE);
				setState(2766);
				colid();
				setState(2767);
				opt_set_data();
				setState(2768);
				match(TYPE_P);
				setState(2769);
				typename();
				setState(2770);
				opt_collate_clause();
				setState(2771);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloseportalstmtContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public CloseportalstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closeportalstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCloseportalstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCloseportalstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCloseportalstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloseportalstmtContext closeportalstmt() throws RecognitionException {
		CloseportalstmtContext _localctx = new CloseportalstmtContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_closeportalstmt);
		try {
			setState(2779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2775);
				match(CLOSE);
				setState(2776);
				cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2777);
				match(CLOSE);
				setState(2778);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopystmtContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(PostgreSQLParser.COPY, 0); }
		public Opt_binaryContext opt_binary() {
			return getRuleContext(Opt_binaryContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Copy_fromContext copy_from() {
			return getRuleContext(Copy_fromContext.class,0);
		}
		public Opt_programContext opt_program() {
			return getRuleContext(Opt_programContext.class,0);
		}
		public Copy_file_nameContext copy_file_name() {
			return getRuleContext(Copy_file_nameContext.class,0);
		}
		public Copy_delimiterContext copy_delimiter() {
			return getRuleContext(Copy_delimiterContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Copy_optionsContext copy_options() {
			return getRuleContext(Copy_optionsContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public PreparablestmtContext preparablestmt() {
			return getRuleContext(PreparablestmtContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public CopystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopystmtContext copystmt() throws RecognitionException {
		CopystmtContext _localctx = new CopystmtContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_copystmt);
		try {
			setState(2803);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2781);
				match(COPY);
				setState(2782);
				opt_binary();
				setState(2783);
				qualified_name();
				setState(2784);
				opt_column_list();
				setState(2785);
				copy_from();
				setState(2786);
				opt_program();
				setState(2787);
				copy_file_name();
				setState(2788);
				copy_delimiter();
				setState(2789);
				opt_with();
				setState(2790);
				copy_options();
				setState(2791);
				where_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2793);
				match(COPY);
				setState(2794);
				match(OPEN_PAREN);
				setState(2795);
				preparablestmt();
				setState(2796);
				match(CLOSE_PAREN);
				setState(2797);
				match(TO);
				setState(2798);
				opt_program();
				setState(2799);
				copy_file_name();
				setState(2800);
				opt_with();
				setState(2801);
				copy_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_fromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Copy_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_fromContext copy_from() throws RecognitionException {
		Copy_fromContext _localctx = new Copy_fromContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_copy_from);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2805);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_programContext extends ParserRuleContext {
		public TerminalNode PROGRAM() { return getToken(PostgreSQLParser.PROGRAM, 0); }
		public Opt_programContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_program; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_program(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_program(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_program(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_programContext opt_program() throws RecognitionException {
		Opt_programContext _localctx = new Opt_programContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_opt_program);
		try {
			setState(2809);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROGRAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(2807);
				match(PROGRAM);
				}
				break;
			case STDIN:
			case STDOUT:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_file_nameContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode STDIN() { return getToken(PostgreSQLParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLParser.STDOUT, 0); }
		public Copy_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_file_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_file_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_file_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_file_nameContext copy_file_name() throws RecognitionException {
		Copy_file_nameContext _localctx = new Copy_file_nameContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_copy_file_name);
		try {
			setState(2814);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(2811);
				sconst();
				}
				break;
			case STDIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2812);
				match(STDIN);
				}
				break;
			case STDOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2813);
				match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_optionsContext extends ParserRuleContext {
		public Copy_opt_listContext copy_opt_list() {
			return getRuleContext(Copy_opt_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Copy_generic_opt_listContext copy_generic_opt_list() {
			return getRuleContext(Copy_generic_opt_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_optionsContext copy_options() throws RecognitionException {
		Copy_optionsContext _localctx = new Copy_optionsContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_copy_options);
		try {
			setState(2821);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2816);
				copy_opt_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2817);
				match(OPEN_PAREN);
				setState(2818);
				copy_generic_opt_list(0);
				setState(2819);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_opt_listContext extends ParserRuleContext {
		public Copy_opt_listContext copy_opt_list() {
			return getRuleContext(Copy_opt_listContext.class,0);
		}
		public Copy_opt_itemContext copy_opt_item() {
			return getRuleContext(Copy_opt_itemContext.class,0);
		}
		public Copy_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_listContext copy_opt_list() throws RecognitionException {
		return copy_opt_list(0);
	}

	private Copy_opt_listContext copy_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Copy_opt_listContext _localctx = new Copy_opt_listContext(_ctx, _parentState);
		Copy_opt_listContext _prevctx = _localctx;
		int _startState = 152;
		enterRecursionRule(_localctx, 152, RULE_copy_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2828);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,59,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_copy_opt_list);
					setState(2824);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2825);
					copy_opt_item();
					}
					} 
				}
				setState(2830);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,59,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Copy_opt_itemContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLParser.DELIMITER, 0); }
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLParser.CSV, 0); }
		public TerminalNode HEADER_P() { return getToken(PostgreSQLParser.HEADER_P, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLParser.QUOTE, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public Copy_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_itemContext copy_opt_item() throws RecognitionException {
		Copy_opt_itemContext _localctx = new Copy_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_copy_opt_item);
		try {
			setState(2866);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2831);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2832);
				match(FREEZE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2833);
				match(DELIMITER);
				setState(2834);
				opt_as();
				setState(2835);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2837);
				match(NULL_P);
				setState(2838);
				opt_as();
				setState(2839);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2841);
				match(CSV);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2842);
				match(HEADER_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2843);
				match(QUOTE);
				setState(2844);
				opt_as();
				setState(2845);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2847);
				match(ESCAPE);
				setState(2848);
				opt_as();
				setState(2849);
				sconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2851);
				match(FORCE);
				setState(2852);
				match(QUOTE);
				setState(2853);
				columnlist(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2854);
				match(FORCE);
				setState(2855);
				match(QUOTE);
				setState(2856);
				match(STAR);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2857);
				match(FORCE);
				setState(2858);
				match(NOT);
				setState(2859);
				match(NULL_P);
				setState(2860);
				columnlist(0);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2861);
				match(FORCE);
				setState(2862);
				match(NULL_P);
				setState(2863);
				columnlist(0);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2864);
				match(ENCODING);
				setState(2865);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_binaryContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public Opt_binaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_binary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_binary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_binary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_binary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_binaryContext opt_binary() throws RecognitionException {
		Opt_binaryContext _localctx = new Opt_binaryContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_opt_binary);
		try {
			setState(2870);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2868);
				match(BINARY);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_delimiterContext extends ParserRuleContext {
		public Opt_usingContext opt_using() {
			return getRuleContext(Opt_usingContext.class,0);
		}
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLParser.DELIMITERS, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Copy_delimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_delimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_delimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_delimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_delimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_delimiterContext copy_delimiter() throws RecognitionException {
		Copy_delimiterContext _localctx = new Copy_delimiterContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_copy_delimiter);
		try {
			setState(2877);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2872);
				opt_using();
				setState(2873);
				match(DELIMITERS);
				setState(2874);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Opt_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_usingContext opt_using() throws RecognitionException {
		Opt_usingContext _localctx = new Opt_usingContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_opt_using);
		try {
			setState(2881);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2879);
				match(USING);
				}
				break;
			case DELIMITERS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_listContext extends ParserRuleContext {
		public Copy_generic_opt_elemContext copy_generic_opt_elem() {
			return getRuleContext(Copy_generic_opt_elemContext.class,0);
		}
		public Copy_generic_opt_listContext copy_generic_opt_list() {
			return getRuleContext(Copy_generic_opt_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Copy_generic_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_listContext copy_generic_opt_list() throws RecognitionException {
		return copy_generic_opt_list(0);
	}

	private Copy_generic_opt_listContext copy_generic_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Copy_generic_opt_listContext _localctx = new Copy_generic_opt_listContext(_ctx, _parentState);
		Copy_generic_opt_listContext _prevctx = _localctx;
		int _startState = 162;
		enterRecursionRule(_localctx, 162, RULE_copy_generic_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2884);
			copy_generic_opt_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2891);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,64,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_generic_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_copy_generic_opt_list);
					setState(2886);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2887);
					match(COMMA);
					setState(2888);
					copy_generic_opt_elem();
					}
					} 
				}
				setState(2893);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,64,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Copy_generic_opt_elemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Copy_generic_opt_argContext copy_generic_opt_arg() {
			return getRuleContext(Copy_generic_opt_argContext.class,0);
		}
		public Copy_generic_opt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_elemContext copy_generic_opt_elem() throws RecognitionException {
		Copy_generic_opt_elemContext _localctx = new Copy_generic_opt_elemContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_copy_generic_opt_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2894);
			collabel();
			setState(2895);
			copy_generic_opt_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_argContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return getRuleContext(Copy_generic_opt_arg_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_generic_opt_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_argContext copy_generic_opt_arg() throws RecognitionException {
		Copy_generic_opt_argContext _localctx = new Copy_generic_opt_argContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_copy_generic_opt_arg);
		try {
			setState(2905);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2897);
				opt_boolean_or_string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2898);
				numericonly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2899);
				match(STAR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2900);
				match(OPEN_PAREN);
				setState(2901);
				copy_generic_opt_arg_list(0);
				setState(2902);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_arg_listContext extends ParserRuleContext {
		public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() {
			return getRuleContext(Copy_generic_opt_arg_list_itemContext.class,0);
		}
		public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return getRuleContext(Copy_generic_opt_arg_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Copy_generic_opt_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_arg_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_arg_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() throws RecognitionException {
		return copy_generic_opt_arg_list(0);
	}

	private Copy_generic_opt_arg_listContext copy_generic_opt_arg_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Copy_generic_opt_arg_listContext _localctx = new Copy_generic_opt_arg_listContext(_ctx, _parentState);
		Copy_generic_opt_arg_listContext _prevctx = _localctx;
		int _startState = 168;
		enterRecursionRule(_localctx, 168, RULE_copy_generic_opt_arg_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2908);
			copy_generic_opt_arg_list_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(2915);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,66,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_generic_opt_arg_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_copy_generic_opt_arg_list);
					setState(2910);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2911);
					match(COMMA);
					setState(2912);
					copy_generic_opt_arg_list_item();
					}
					} 
				}
				setState(2917);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,66,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Copy_generic_opt_arg_list_itemContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public Copy_generic_opt_arg_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_arg_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_arg_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() throws RecognitionException {
		Copy_generic_opt_arg_list_itemContext _localctx = new Copy_generic_opt_arg_list_itemContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_copy_generic_opt_arg_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2918);
			opt_boolean_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public OpttableelementlistContext opttableelementlist() {
			return getRuleContext(OpttableelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext optinherit() {
			return getRuleContext(OptinheritContext.class,0);
		}
		public OptpartitionspecContext optpartitionspec() {
			return getRuleContext(OptpartitionspecContext.class,0);
		}
		public Table_access_method_clauseContext table_access_method_clause() {
			return getRuleContext(Table_access_method_clauseContext.class,0);
		}
		public OptwithContext optwith() {
			return getRuleContext(OptwithContext.class,0);
		}
		public OncommitoptionContext oncommitoption() {
			return getRuleContext(OncommitoptionContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public OpttypedtableelementlistContext opttypedtableelementlist() {
			return getRuleContext(OpttypedtableelementlistContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public PartitionboundspecContext partitionboundspec() {
			return getRuleContext(PartitionboundspecContext.class,0);
		}
		public CreatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatestmtContext createstmt() throws RecognitionException {
		CreatestmtContext _localctx = new CreatestmtContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_createstmt);
		try {
			setState(3013);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2920);
				match(CREATE);
				setState(2921);
				opttemp();
				setState(2922);
				match(TABLE);
				setState(2923);
				qualified_name();
				setState(2924);
				match(OPEN_PAREN);
				setState(2925);
				opttableelementlist();
				setState(2926);
				match(CLOSE_PAREN);
				setState(2927);
				optinherit();
				setState(2928);
				optpartitionspec();
				setState(2929);
				table_access_method_clause();
				setState(2930);
				optwith();
				setState(2931);
				oncommitoption();
				setState(2932);
				opttablespace();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2934);
				match(CREATE);
				setState(2935);
				opttemp();
				setState(2936);
				match(TABLE);
				setState(2937);
				match(IF_P);
				setState(2938);
				match(NOT);
				setState(2939);
				match(EXISTS);
				setState(2940);
				qualified_name();
				setState(2941);
				match(OPEN_PAREN);
				setState(2942);
				opttableelementlist();
				setState(2943);
				match(CLOSE_PAREN);
				setState(2944);
				optinherit();
				setState(2945);
				optpartitionspec();
				setState(2946);
				table_access_method_clause();
				setState(2947);
				optwith();
				setState(2948);
				oncommitoption();
				setState(2949);
				opttablespace();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2951);
				match(CREATE);
				setState(2952);
				opttemp();
				setState(2953);
				match(TABLE);
				setState(2954);
				qualified_name();
				setState(2955);
				match(OF);
				setState(2956);
				any_name();
				setState(2957);
				opttypedtableelementlist();
				setState(2958);
				optpartitionspec();
				setState(2959);
				table_access_method_clause();
				setState(2960);
				optwith();
				setState(2961);
				oncommitoption();
				setState(2962);
				opttablespace();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2964);
				match(CREATE);
				setState(2965);
				opttemp();
				setState(2966);
				match(TABLE);
				setState(2967);
				match(IF_P);
				setState(2968);
				match(NOT);
				setState(2969);
				match(EXISTS);
				setState(2970);
				qualified_name();
				setState(2971);
				match(OF);
				setState(2972);
				any_name();
				setState(2973);
				opttypedtableelementlist();
				setState(2974);
				optpartitionspec();
				setState(2975);
				table_access_method_clause();
				setState(2976);
				optwith();
				setState(2977);
				oncommitoption();
				setState(2978);
				opttablespace();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2980);
				match(CREATE);
				setState(2981);
				opttemp();
				setState(2982);
				match(TABLE);
				setState(2983);
				qualified_name();
				setState(2984);
				match(PARTITION);
				setState(2985);
				match(OF);
				setState(2986);
				qualified_name();
				setState(2987);
				opttypedtableelementlist();
				setState(2988);
				partitionboundspec();
				setState(2989);
				optpartitionspec();
				setState(2990);
				table_access_method_clause();
				setState(2991);
				optwith();
				setState(2992);
				oncommitoption();
				setState(2993);
				opttablespace();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2995);
				match(CREATE);
				setState(2996);
				opttemp();
				setState(2997);
				match(TABLE);
				setState(2998);
				match(IF_P);
				setState(2999);
				match(NOT);
				setState(3000);
				match(EXISTS);
				setState(3001);
				qualified_name();
				setState(3002);
				match(PARTITION);
				setState(3003);
				match(OF);
				setState(3004);
				qualified_name();
				setState(3005);
				opttypedtableelementlist();
				setState(3006);
				partitionboundspec();
				setState(3007);
				optpartitionspec();
				setState(3008);
				table_access_method_clause();
				setState(3009);
				optwith();
				setState(3010);
				oncommitoption();
				setState(3011);
				opttablespace();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttempContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public OpttempContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttemp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttemp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttemp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttemp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttempContext opttemp() throws RecognitionException {
		OpttempContext _localctx = new OpttempContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_opttemp);
		try {
			setState(3027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3015);
				match(TEMPORARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3016);
				match(TEMP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3017);
				match(LOCAL);
				setState(3018);
				match(TEMPORARY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3019);
				match(LOCAL);
				setState(3020);
				match(TEMP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3021);
				match(GLOBAL);
				setState(3022);
				match(TEMPORARY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3023);
				match(GLOBAL);
				setState(3024);
				match(TEMP);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3025);
				match(UNLOGGED);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttableelementlistContext extends ParserRuleContext {
		public TableelementlistContext tableelementlist() {
			return getRuleContext(TableelementlistContext.class,0);
		}
		public OpttableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttableelementlistContext opttableelementlist() throws RecognitionException {
		OpttableelementlistContext _localctx = new OpttableelementlistContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_opttableelementlist);
		try {
			setState(3031);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case FOREIGN:
			case PRIMARY:
			case TABLE:
			case UNIQUE:
			case IS:
			case LIKE:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3029);
				tableelementlist(0);
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttypedtableelementlistContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TypedtableelementlistContext typedtableelementlist() {
			return getRuleContext(TypedtableelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OpttypedtableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttypedtableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttypedtableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttypedtableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttypedtableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttypedtableelementlistContext opttypedtableelementlist() throws RecognitionException {
		OpttypedtableelementlistContext _localctx = new OpttypedtableelementlistContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_opttypedtableelementlist);
		try {
			setState(3038);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3033);
				match(OPEN_PAREN);
				setState(3034);
				typedtableelementlist(0);
				setState(3035);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableelementlistContext extends ParserRuleContext {
		public TableelementContext tableelement() {
			return getRuleContext(TableelementContext.class,0);
		}
		public TableelementlistContext tableelementlist() {
			return getRuleContext(TableelementlistContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableelementlistContext tableelementlist() throws RecognitionException {
		return tableelementlist(0);
	}

	private TableelementlistContext tableelementlist(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableelementlistContext _localctx = new TableelementlistContext(_ctx, _parentState);
		TableelementlistContext _prevctx = _localctx;
		int _startState = 180;
		enterRecursionRule(_localctx, 180, RULE_tableelementlist, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3041);
			tableelement();
			}
			_ctx.stop = _input.LT(-1);
			setState(3048);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableelementlistContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableelementlist);
					setState(3043);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3044);
					match(COMMA);
					setState(3045);
					tableelement();
					}
					} 
				}
				setState(3050);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TypedtableelementlistContext extends ParserRuleContext {
		public TypedtableelementContext typedtableelement() {
			return getRuleContext(TypedtableelementContext.class,0);
		}
		public TypedtableelementlistContext typedtableelementlist() {
			return getRuleContext(TypedtableelementlistContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TypedtableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedtableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTypedtableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTypedtableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTypedtableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedtableelementlistContext typedtableelementlist() throws RecognitionException {
		return typedtableelementlist(0);
	}

	private TypedtableelementlistContext typedtableelementlist(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TypedtableelementlistContext _localctx = new TypedtableelementlistContext(_ctx, _parentState);
		TypedtableelementlistContext _prevctx = _localctx;
		int _startState = 182;
		enterRecursionRule(_localctx, 182, RULE_typedtableelementlist, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3052);
			typedtableelement();
			}
			_ctx.stop = _input.LT(-1);
			setState(3059);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,72,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypedtableelementlistContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_typedtableelementlist);
					setState(3054);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3055);
					match(COMMA);
					setState(3056);
					typedtableelement();
					}
					} 
				}
				setState(3061);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,72,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableelementContext extends ParserRuleContext {
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TablelikeclauseContext tablelikeclause() {
			return getRuleContext(TablelikeclauseContext.class,0);
		}
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TableelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableelement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTableelement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTableelement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTableelement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableelementContext tableelement() throws RecognitionException {
		TableelementContext _localctx = new TableelementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_tableelement);
		try {
			setState(3065);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3062);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3063);
				tablelikeclause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3064);
				tableconstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedtableelementContext extends ParserRuleContext {
		public ColumnOptionsContext columnOptions() {
			return getRuleContext(ColumnOptionsContext.class,0);
		}
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TypedtableelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedtableelement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTypedtableelement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTypedtableelement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTypedtableelement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedtableelementContext typedtableelement() throws RecognitionException {
		TypedtableelementContext _localctx = new TypedtableelementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_typedtableelement);
		try {
			setState(3069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3067);
				columnOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3068);
				tableconstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefContext columnDef() throws RecognitionException {
		ColumnDefContext _localctx = new ColumnDefContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_columnDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3071);
			colid();
			setState(3072);
			typename();
			setState(3073);
			create_generic_options();
			setState(3074);
			colquallist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnOptionsContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnOptionsContext columnOptions() throws RecognitionException {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_columnOptions);
		try {
			setState(3084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3076);
				colid();
				setState(3077);
				colquallist(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3079);
				colid();
				setState(3080);
				match(WITH);
				setState(3081);
				match(OPTIONS);
				setState(3082);
				colquallist(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColquallistContext extends ParserRuleContext {
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public ColconstraintContext colconstraint() {
			return getRuleContext(ColconstraintContext.class,0);
		}
		public ColquallistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colquallist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColquallist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColquallist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColquallist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColquallistContext colquallist() throws RecognitionException {
		return colquallist(0);
	}

	private ColquallistContext colquallist(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ColquallistContext _localctx = new ColquallistContext(_ctx, _parentState);
		ColquallistContext _prevctx = _localctx;
		int _startState = 192;
		enterRecursionRule(_localctx, 192, RULE_colquallist, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3091);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ColquallistContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_colquallist);
					setState(3087);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3088);
					colconstraint();
					}
					} 
				}
				setState(3093);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ColconstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ColconstraintelemContext colconstraintelem() {
			return getRuleContext(ColconstraintelemContext.class,0);
		}
		public ConstraintattrContext constraintattr() {
			return getRuleContext(ConstraintattrContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public ColconstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colconstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColconstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColconstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColconstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColconstraintContext colconstraint() throws RecognitionException {
		ColconstraintContext _localctx = new ColconstraintContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_colconstraint);
		try {
			setState(3102);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3094);
				match(CONSTRAINT);
				setState(3095);
				name();
				setState(3096);
				colconstraintelem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3098);
				colconstraintelem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3099);
				constraintattr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3100);
				match(COLLATE);
				setState(3101);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColconstraintelemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public OptconstablespaceContext optconstablespace() {
			return getRuleContext(OptconstablespaceContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_no_inheritContext opt_no_inherit() {
			return getRuleContext(Opt_no_inheritContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public Generated_whenContext generated_when() {
			return getRuleContext(Generated_whenContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return getRuleContext(OptparenthesizedseqoptlistContext.class,0);
		}
		public TerminalNode STORED() { return getToken(PostgreSQLParser.STORED, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public ColconstraintelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colconstraintelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColconstraintelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColconstraintelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColconstraintelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColconstraintelemContext colconstraintelem() throws RecognitionException {
		ColconstraintelemContext _localctx = new ColconstraintelemContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_colconstraintelem);
		try {
			setState(3144);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3104);
				match(NOT);
				setState(3105);
				match(NULL_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3106);
				match(NULL_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3107);
				match(UNIQUE);
				setState(3108);
				opt_definition();
				setState(3109);
				optconstablespace();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3111);
				match(PRIMARY);
				setState(3112);
				match(KEY);
				setState(3113);
				opt_definition();
				setState(3114);
				optconstablespace();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3116);
				match(CHECK);
				setState(3117);
				match(OPEN_PAREN);
				setState(3118);
				a_expr(0);
				setState(3119);
				match(CLOSE_PAREN);
				setState(3120);
				opt_no_inherit();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3122);
				match(DEFAULT);
				setState(3123);
				b_expr(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3124);
				match(GENERATED);
				setState(3125);
				generated_when();
				setState(3126);
				match(AS);
				setState(3127);
				match(IDENTITY_P);
				setState(3128);
				optparenthesizedseqoptlist();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3130);
				match(GENERATED);
				setState(3131);
				generated_when();
				setState(3132);
				match(AS);
				setState(3133);
				match(OPEN_PAREN);
				setState(3134);
				a_expr(0);
				setState(3135);
				match(CLOSE_PAREN);
				setState(3136);
				match(STORED);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3138);
				match(REFERENCES);
				setState(3139);
				qualified_name();
				setState(3140);
				opt_column_list();
				setState(3141);
				key_match();
				setState(3142);
				key_actions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generated_whenContext extends ParserRuleContext {
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Generated_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generated_when; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGenerated_when(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGenerated_when(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGenerated_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generated_whenContext generated_when() throws RecognitionException {
		Generated_whenContext _localctx = new Generated_whenContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_generated_when);
		try {
			setState(3149);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALWAYS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3146);
				match(ALWAYS);
				}
				break;
			case BY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3147);
				match(BY);
				setState(3148);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintattrContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public ConstraintattrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintattr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintattr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintattr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintattr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintattrContext constraintattr() throws RecognitionException {
		ConstraintattrContext _localctx = new ConstraintattrContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_constraintattr);
		try {
			setState(3158);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3151);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3152);
				match(NOT);
				setState(3153);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3154);
				match(INITIALLY);
				setState(3155);
				match(DEFERRED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3156);
				match(INITIALLY);
				setState(3157);
				match(IMMEDIATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablelikeclauseContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TablelikeoptionlistContext tablelikeoptionlist() {
			return getRuleContext(TablelikeoptionlistContext.class,0);
		}
		public TablelikeclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablelikeclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablelikeclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablelikeclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablelikeclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablelikeclauseContext tablelikeclause() throws RecognitionException {
		TablelikeclauseContext _localctx = new TablelikeclauseContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_tablelikeclause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3160);
			match(LIKE);
			setState(3161);
			qualified_name();
			setState(3162);
			tablelikeoptionlist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablelikeoptionlistContext extends ParserRuleContext {
		public TablelikeoptionlistContext tablelikeoptionlist() {
			return getRuleContext(TablelikeoptionlistContext.class,0);
		}
		public TerminalNode INCLUDING() { return getToken(PostgreSQLParser.INCLUDING, 0); }
		public TablelikeoptionContext tablelikeoption() {
			return getRuleContext(TablelikeoptionContext.class,0);
		}
		public TerminalNode EXCLUDING() { return getToken(PostgreSQLParser.EXCLUDING, 0); }
		public TablelikeoptionlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablelikeoptionlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablelikeoptionlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablelikeoptionlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablelikeoptionlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablelikeoptionlistContext tablelikeoptionlist() throws RecognitionException {
		return tablelikeoptionlist(0);
	}

	private TablelikeoptionlistContext tablelikeoptionlist(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TablelikeoptionlistContext _localctx = new TablelikeoptionlistContext(_ctx, _parentState);
		TablelikeoptionlistContext _prevctx = _localctx;
		int _startState = 204;
		enterRecursionRule(_localctx, 204, RULE_tablelikeoptionlist, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3173);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,82,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3171);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
					case 1:
						{
						_localctx = new TablelikeoptionlistContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_tablelikeoptionlist);
						setState(3165);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3166);
						match(INCLUDING);
						setState(3167);
						tablelikeoption();
						}
						break;
					case 2:
						{
						_localctx = new TablelikeoptionlistContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_tablelikeoptionlist);
						setState(3168);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3169);
						match(EXCLUDING);
						setState(3170);
						tablelikeoption();
						}
						break;
					}
					} 
				}
				setState(3175);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,82,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TablelikeoptionContext extends ParserRuleContext {
		public TerminalNode COMMENTS() { return getToken(PostgreSQLParser.COMMENTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLParser.DEFAULTS, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLParser.INDEXES, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TablelikeoptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablelikeoption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablelikeoption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablelikeoption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablelikeoption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablelikeoptionContext tablelikeoption() throws RecognitionException {
		TablelikeoptionContext _localctx = new TablelikeoptionContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_tablelikeoption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3176);
			_la = _input.LA(1);
			if ( !(_la==ALL || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (COMMENTS - 196)) | (1L << (CONSTRAINTS - 196)) | (1L << (DEFAULTS - 196)) | (1L << (IDENTITY_P - 196)))) != 0) || _la==INDEXES || _la==STATISTICS || _la==STORAGE || _la==GENERATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableconstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintelemContext constraintelem() {
			return getRuleContext(ConstraintelemContext.class,0);
		}
		public TableconstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableconstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTableconstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTableconstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTableconstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableconstraintContext tableconstraint() throws RecognitionException {
		TableconstraintContext _localctx = new TableconstraintContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_tableconstraint);
		try {
			setState(3183);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONSTRAINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3178);
				match(CONSTRAINT);
				setState(3179);
				name();
				setState(3180);
				constraintelem();
				}
				break;
			case CHECK:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
			case EXCLUDE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3182);
				constraintelem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintelemContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public Opt_c_includeContext opt_c_include() {
			return getRuleContext(Opt_c_includeContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public OptconstablespaceContext optconstablespace() {
			return getRuleContext(OptconstablespaceContext.class,0);
		}
		public ExistingindexContext existingindex() {
			return getRuleContext(ExistingindexContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public ExclusionconstraintlistContext exclusionconstraintlist() {
			return getRuleContext(ExclusionconstraintlistContext.class,0);
		}
		public ExclusionwhereclauseContext exclusionwhereclause() {
			return getRuleContext(ExclusionwhereclauseContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public ConstraintelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintelemContext constraintelem() throws RecognitionException {
		ConstraintelemContext _localctx = new ConstraintelemContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_constraintelem);
		try {
			setState(3242);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3185);
				match(CHECK);
				setState(3186);
				match(OPEN_PAREN);
				setState(3187);
				a_expr(0);
				setState(3188);
				match(CLOSE_PAREN);
				setState(3189);
				constraintattributespec(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3191);
				match(UNIQUE);
				setState(3192);
				match(OPEN_PAREN);
				setState(3193);
				columnlist(0);
				setState(3194);
				match(CLOSE_PAREN);
				setState(3195);
				opt_c_include();
				setState(3196);
				opt_definition();
				setState(3197);
				optconstablespace();
				setState(3198);
				constraintattributespec(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3200);
				match(UNIQUE);
				setState(3201);
				existingindex();
				setState(3202);
				constraintattributespec(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3204);
				match(PRIMARY);
				setState(3205);
				match(KEY);
				setState(3206);
				match(OPEN_PAREN);
				setState(3207);
				columnlist(0);
				setState(3208);
				match(CLOSE_PAREN);
				setState(3209);
				opt_c_include();
				setState(3210);
				opt_definition();
				setState(3211);
				optconstablespace();
				setState(3212);
				constraintattributespec(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3214);
				match(PRIMARY);
				setState(3215);
				match(KEY);
				setState(3216);
				existingindex();
				setState(3217);
				constraintattributespec(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3219);
				match(EXCLUDE);
				setState(3220);
				access_method_clause();
				setState(3221);
				match(OPEN_PAREN);
				setState(3222);
				exclusionconstraintlist(0);
				setState(3223);
				match(CLOSE_PAREN);
				setState(3224);
				opt_c_include();
				setState(3225);
				opt_definition();
				setState(3226);
				optconstablespace();
				setState(3227);
				exclusionwhereclause();
				setState(3228);
				constraintattributespec(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3230);
				match(FOREIGN);
				setState(3231);
				match(KEY);
				setState(3232);
				match(OPEN_PAREN);
				setState(3233);
				columnlist(0);
				setState(3234);
				match(CLOSE_PAREN);
				setState(3235);
				match(REFERENCES);
				setState(3236);
				qualified_name();
				setState(3237);
				opt_column_list();
				setState(3238);
				key_match();
				setState(3239);
				key_actions();
				setState(3240);
				constraintattributespec(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_no_inheritContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public Opt_no_inheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_no_inherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_no_inherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_no_inherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_no_inherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_no_inheritContext opt_no_inherit() throws RecognitionException {
		Opt_no_inheritContext _localctx = new Opt_no_inheritContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_opt_no_inherit);
		try {
			setState(3247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3244);
				match(NO);
				setState(3245);
				match(INHERIT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_column_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_column_listContext opt_column_list() throws RecognitionException {
		Opt_column_listContext _localctx = new Opt_column_listContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_opt_column_list);
		try {
			setState(3254);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3249);
				match(OPEN_PAREN);
				setState(3250);
				columnlist(0);
				setState(3251);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnlistContext extends ParserRuleContext {
		public ColumnElemContext columnElem() {
			return getRuleContext(ColumnElemContext.class,0);
		}
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public ColumnlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnlistContext columnlist() throws RecognitionException {
		return columnlist(0);
	}

	private ColumnlistContext columnlist(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ColumnlistContext _localctx = new ColumnlistContext(_ctx, _parentState);
		ColumnlistContext _prevctx = _localctx;
		int _startState = 216;
		enterRecursionRule(_localctx, 216, RULE_columnlist, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3257);
			columnElem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3264);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,87,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ColumnlistContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_columnlist);
					setState(3259);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3260);
					match(COMMA);
					setState(3261);
					columnElem();
					}
					} 
				}
				setState(3266);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,87,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ColumnElemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnElemContext columnElem() throws RecognitionException {
		ColumnElemContext _localctx = new ColumnElemContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_columnElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3267);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_c_includeContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_c_includeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_c_include; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_c_include(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_c_include(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_c_include(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_c_includeContext opt_c_include() throws RecognitionException {
		Opt_c_includeContext _localctx = new Opt_c_includeContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_opt_c_include);
		try {
			setState(3275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3269);
				match(INCLUDE);
				setState(3270);
				match(OPEN_PAREN);
				setState(3271);
				columnlist(0);
				setState(3272);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_matchContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(PostgreSQLParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLParser.SIMPLE, 0); }
		public Key_matchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_match; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_match(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_match(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_match(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_matchContext key_match() throws RecognitionException {
		Key_matchContext _localctx = new Key_matchContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_key_match);
		try {
			setState(3284);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3277);
				match(MATCH);
				setState(3278);
				match(FULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3279);
				match(MATCH);
				setState(3280);
				match(PARTIAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3281);
				match(MATCH);
				setState(3282);
				match(SIMPLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionconstraintlistContext extends ParserRuleContext {
		public ExclusionconstraintelemContext exclusionconstraintelem() {
			return getRuleContext(ExclusionconstraintelemContext.class,0);
		}
		public ExclusionconstraintlistContext exclusionconstraintlist() {
			return getRuleContext(ExclusionconstraintlistContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public ExclusionconstraintlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionconstraintlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExclusionconstraintlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExclusionconstraintlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExclusionconstraintlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionconstraintlistContext exclusionconstraintlist() throws RecognitionException {
		return exclusionconstraintlist(0);
	}

	private ExclusionconstraintlistContext exclusionconstraintlist(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExclusionconstraintlistContext _localctx = new ExclusionconstraintlistContext(_ctx, _parentState);
		ExclusionconstraintlistContext _prevctx = _localctx;
		int _startState = 224;
		enterRecursionRule(_localctx, 224, RULE_exclusionconstraintlist, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3287);
			exclusionconstraintelem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3294);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,90,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusionconstraintlistContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_exclusionconstraintlist);
					setState(3289);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3290);
					match(COMMA);
					setState(3291);
					exclusionconstraintelem();
					}
					} 
				}
				setState(3296);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,90,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExclusionconstraintelemContext extends ParserRuleContext {
		public Index_elemContext index_elem() {
			return getRuleContext(Index_elemContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public List<Any_operatorContext> any_operator() {
			return getRuleContexts(Any_operatorContext.class);
		}
		public Any_operatorContext any_operator(int i) {
			return getRuleContext(Any_operatorContext.class,i);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionconstraintelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionconstraintelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExclusionconstraintelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExclusionconstraintelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExclusionconstraintelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionconstraintelemContext exclusionconstraintelem() throws RecognitionException {
		ExclusionconstraintelemContext _localctx = new ExclusionconstraintelemContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_exclusionconstraintelem);
		int _la;
		try {
			int _alt;
			setState(3315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3297);
				index_elem();
				setState(3298);
				match(WITH);
				setState(3300); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3299);
						any_operator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3302); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,91,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3304);
				index_elem();
				setState(3305);
				match(WITH);
				setState(3306);
				match(OPERATOR);
				setState(3307);
				match(OPEN_PAREN);
				setState(3309); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3308);
					any_operator();
					}
					}
					setState(3311); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << EQUAL) | (1L << AMPERSAND) | (1L << PLUS) | (1L << MINUS) | (1L << SLASH) | (1L << CARET) | (1L << LT) | (1L << GT) | (1L << LESS_LESS) | (1L << GREATER_GREATER) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << NOT_EQUALS) | (1L << NOT_EQUALS_1) | (1L << PERCENT) | (1L << BITWISE_OR) | (1L << BITWISE_XOR) | (1L << BITWISE_NOT) | (1L << SQUARE_ROOT) | (1L << CUBIC_ROOT) | (1L << FACTORIAL) | (1L << PREFIX_FACTORIAL) | (1L << ABSOLUTE) | (1L << TEXT_PATTERN1) | (1L << TEXT_PATTERN2) | (1L << TEXT_PATTERN3) | (1L << TEXT_PATTERN4) | (1L << CONTAINS) | (1L << IS_CONTAINS) | (1L << OVERLAP) | (1L << CONCAT) | (1L << LENGTH) | (1L << CENTER) | (1L << CLOSET_POINT) | (1L << DISTANT) | (1L << EXTEND_RIGHT) | (1L << EXTEND_LEFT) | (1L << IS_STRICTLY_BELOW) | (1L << IS_STRICTLY_ABOVE) | (1L << EXTEND_ABOVE) | (1L << EXTEND_BELOW) | (1L << IS_BELOW) | (1L << IS_ABOVE) | (1L << INTERSECTION) | (1L << IS_HORIZON) | (1L << IS_VERTICAL) | (1L << IS_PERPENDICULAR))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (IS_PARALLEL - 64)) | (1L << (SAME - 64)) | (1L << (AND - 64)) | (1L << (ARRAY - 64)) | (1L << (COLLATE - 64)) | (1L << (COLUMN - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DO - 64)) | (1L << (FETCH - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (TABLE - 128)) | (1L << (IS - 128)) | (1L << (OUTER_P - 128)) | (1L << (OVER - 128)) | (1L << (ABORT_P - 128)) | (1L << (ABSOLUTE_P - 128)) | (1L << (ACCESS - 128)) | (1L << (ACTION - 128)) | (1L << (ADD_P - 128)) | (1L << (ADMIN - 128)) | (1L << (AFTER - 128)) | (1L << (AGGREGATE - 128)) | (1L << (ALSO - 128)) | (1L << (ALTER - 128)) | (1L << (ALWAYS - 128)) | (1L << (ASSERTION - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (AT - 128)) | (1L << (ATTRIBUTE - 128)) | (1L << (BACKWARD - 128)) | (1L << (BEFORE - 128)) | (1L << (BEGIN_P - 128)) | (1L << (BY - 128)) | (1L << (CACHE - 128)) | (1L << (CALLED - 128)) | (1L << (CASCADE - 128)) | (1L << (CASCADED - 128)) | (1L << (CHAIN - 128)) | (1L << (CHARACTERISTICS - 128)) | (1L << (CHECKPOINT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (CLASS - 192)) | (1L << (CLOSE - 192)) | (1L << (CLUSTER - 192)) | (1L << (COMMENT - 192)) | (1L << (COMMENTS - 192)) | (1L << (COMMIT - 192)) | (1L << (COMMITTED - 192)) | (1L << (CONFIGURATION - 192)) | (1L << (CONNECTION - 192)) | (1L << (CONSTRAINTS - 192)) | (1L << (CONTENT_P - 192)) | (1L << (CONTINUE_P - 192)) | (1L << (CONVERSION_P - 192)) | (1L << (COPY - 192)) | (1L << (COST - 192)) | (1L << (CSV - 192)) | (1L << (CURSOR - 192)) | (1L << (CYCLE - 192)) | (1L << (DATA_P - 192)) | (1L << (DATABASE - 192)) | (1L << (DAY_P - 192)) | (1L << (DEALLOCATE - 192)) | (1L << (DECLARE - 192)) | (1L << (DEFAULTS - 192)) | (1L << (DEFERRED - 192)) | (1L << (DEFINER - 192)) | (1L << (DELETE_P - 192)) | (1L << (DELIMITER - 192)) | (1L << (DELIMITERS - 192)) | (1L << (DICTIONARY - 192)) | (1L << (DISABLE_P - 192)) | (1L << (DISCARD - 192)) | (1L << (DOCUMENT_P - 192)) | (1L << (DOMAIN_P - 192)) | (1L << (DOUBLE_P - 192)) | (1L << (DROP - 192)) | (1L << (EACH - 192)) | (1L << (ENABLE_P - 192)) | (1L << (ENCODING - 192)) | (1L << (ENCRYPTED - 192)) | (1L << (ENUM_P - 192)) | (1L << (ESCAPE - 192)) | (1L << (EVENT - 192)) | (1L << (EXCLUDE - 192)) | (1L << (EXCLUDING - 192)) | (1L << (EXCLUSIVE - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXPLAIN - 192)) | (1L << (EXTENSION - 192)) | (1L << (EXTERNAL - 192)) | (1L << (FAMILY - 192)) | (1L << (FIRST_P - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FORCE - 192)) | (1L << (FORWARD - 192)) | (1L << (FUNCTION - 192)) | (1L << (FUNCTIONS - 192)) | (1L << (GLOBAL - 192)) | (1L << (GRANTED - 192)) | (1L << (HANDLER - 192)) | (1L << (HEADER_P - 192)) | (1L << (HOLD - 192)) | (1L << (HOUR_P - 192)) | (1L << (IDENTITY_P - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (IF_P - 256)) | (1L << (IMMEDIATE - 256)) | (1L << (IMMUTABLE - 256)) | (1L << (IMPLICIT_P - 256)) | (1L << (INCLUDING - 256)) | (1L << (INCREMENT - 256)) | (1L << (INDEX - 256)) | (1L << (INDEXES - 256)) | (1L << (INHERIT - 256)) | (1L << (INHERITS - 256)) | (1L << (INLINE_P - 256)) | (1L << (INSENSITIVE - 256)) | (1L << (INSERT - 256)) | (1L << (INSTEAD - 256)) | (1L << (INVOKER - 256)) | (1L << (ISOLATION - 256)) | (1L << (KEY - 256)) | (1L << (LABEL - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE_P - 256)) | (1L << (LAST_P - 256)) | (1L << (LEAKPROOF - 256)) | (1L << (LEVEL - 256)) | (1L << (LISTEN - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCATION - 256)) | (1L << (LOCK_P - 256)) | (1L << (MAPPING - 256)) | (1L << (MATCH - 256)) | (1L << (MATERIALIZED - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MINUTE_P - 256)) | (1L << (MINVALUE - 256)) | (1L << (MODE - 256)) | (1L << (MONTH_P - 256)) | (1L << (MOVE - 256)) | (1L << (NAME_P - 256)) | (1L << (NAMES - 256)) | (1L << (NEXT - 256)) | (1L << (NO - 256)) | (1L << (NOTHING - 256)) | (1L << (NOTIFY - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULLS_P - 256)) | (1L << (OBJECT_P - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OIDS - 256)) | (1L << (OPERATOR - 256)) | (1L << (OPTION - 256)) | (1L << (OPTIONS - 256)) | (1L << (OWNED - 256)) | (1L << (OWNER - 256)) | (1L << (PARSER - 256)) | (1L << (PARTIAL - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PASSWORD - 256)) | (1L << (PLANS - 256)) | (1L << (PRECEDING - 256)) | (1L << (PREPARE - 256)) | (1L << (PREPARED - 256)) | (1L << (PRESERVE - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRIOR - 320)) | (1L << (PRIVILEGES - 320)) | (1L << (PROCEDURAL - 320)) | (1L << (PROCEDURE - 320)) | (1L << (PROGRAM - 320)) | (1L << (QUOTE - 320)) | (1L << (RANGE - 320)) | (1L << (READ - 320)) | (1L << (REASSIGN - 320)) | (1L << (RECHECK - 320)) | (1L << (RECURSIVE - 320)) | (1L << (REF - 320)) | (1L << (REFRESH - 320)) | (1L << (REINDEX - 320)) | (1L << (RELATIVE_P - 320)) | (1L << (RELEASE - 320)) | (1L << (RENAME - 320)) | (1L << (REPEATABLE - 320)) | (1L << (REPLACE - 320)) | (1L << (REPLICA - 320)) | (1L << (RESET - 320)) | (1L << (RESTART - 320)) | (1L << (RESTRICT - 320)) | (1L << (RETURNS - 320)) | (1L << (REVOKE - 320)) | (1L << (ROLE - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROWS - 320)) | (1L << (RULE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCROLL - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND_P - 320)) | (1L << (SECURITY - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENCES - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERVER - 320)) | (1L << (SESSION - 320)) | (1L << (SET - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SIMPLE - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (STABLE - 320)) | (1L << (STANDALONE_P - 320)) | (1L << (START - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATISTICS - 320)) | (1L << (STDIN - 320)) | (1L << (STDOUT - 320)) | (1L << (STORAGE - 320)) | (1L << (STRICT_P - 320)) | (1L << (STRIP_P - 320)) | (1L << (SYSID - 320)) | (1L << (SYSTEM_P - 320)) | (1L << (TABLES - 320)) | (1L << (TABLESPACE - 320)) | (1L << (TEMP - 320)) | (1L << (TEMPLATE - 320)) | (1L << (TEMPORARY - 320)) | (1L << (TEXT_P - 320)) | (1L << (TRANSACTION - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (TRIGGER - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TRUSTED - 384)) | (1L << (TYPE_P - 384)) | (1L << (TYPES_P - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNCOMMITTED - 384)) | (1L << (UNENCRYPTED - 384)) | (1L << (UNKNOWN - 384)) | (1L << (UNLISTEN - 384)) | (1L << (UNLOGGED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (VACUUM - 384)) | (1L << (VALID - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALIDATOR - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION_P - 384)) | (1L << (VIEW - 384)) | (1L << (VOLATILE - 384)) | (1L << (WHITESPACE_P - 384)) | (1L << (WITHOUT - 384)) | (1L << (WORK - 384)) | (1L << (WRAPPER - 384)) | (1L << (WRITE - 384)) | (1L << (XML_P - 384)) | (1L << (YEAR_P - 384)) | (1L << (YES_P - 384)) | (1L << (ZONE - 384)) | (1L << (BETWEEN - 384)) | (1L << (BIGINT - 384)) | (1L << (BIT - 384)) | (1L << (BOOLEAN_P - 384)) | (1L << (CHAR_P - 384)) | (1L << (CHARACTER - 384)) | (1L << (COALESCE - 384)) | (1L << (DEC - 384)) | (1L << (DECIMAL_P - 384)) | (1L << (EXISTS - 384)) | (1L << (EXTRACT - 384)) | (1L << (FLOAT_P - 384)) | (1L << (GREATEST - 384)) | (1L << (INOUT - 384)) | (1L << (INT_P - 384)) | (1L << (INTEGER - 384)) | (1L << (INTERVAL - 384)) | (1L << (LEAST - 384)) | (1L << (NATIONAL - 384)) | (1L << (NCHAR - 384)) | (1L << (NONE - 384)) | (1L << (NULLIF - 384)) | (1L << (NUMERIC - 384)) | (1L << (OVERLAY - 384)) | (1L << (POSITION - 384)) | (1L << (PRECISION - 384)) | (1L << (REAL - 384)) | (1L << (ROW - 384)) | (1L << (SETOF - 384)) | (1L << (SMALLINT - 384)) | (1L << (SUBSTRING - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TREAT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (TRIM - 448)) | (1L << (VALUES - 448)) | (1L << (VARCHAR - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCONCAT - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (CALL - 448)) | (1L << (CURRENT_P - 448)) | (1L << (CATALOG_P - 448)) | (1L << (ATTACH - 448)) | (1L << (DETACH - 448)) | (1L << (EXPRESSION - 448)) | (1L << (GENERATED - 448)) | (1L << (LOGGED - 448)) | (1L << (STORED - 448)) | (1L << (INCLUDE - 448)) | (1L << (ROUTINE - 448)) | (1L << (TRANSFORM - 448)) | (1L << (IMPORT_P - 448)) | (1L << (POLICY - 448)) | (1L << (METHOD - 448)) | (1L << (REFERENCING - 448)) | (1L << (NEW - 448)) | (1L << (OLD - 448)) | (1L << (VALUE_P - 448)) | (1L << (SUBSCRIPTION - 448)) | (1L << (PUBLICATION - 448)) | (1L << (OUT_P - 448)) | (1L << (ROUTINES - 448)) | (1L << (SCHEMAS - 448)) | (1L << (PROCEDURES - 448)) | (1L << (INPUT_P - 448)) | (1L << (SUPPORT - 448)) | (1L << (PARALLEL - 448)) | (1L << (SQL_P - 448)) | (1L << (DEPENDS - 448)) | (1L << (OVERRIDING - 448)) | (1L << (CONFLICT - 448)) | (1L << (SKIP_P - 448)) | (1L << (LOCKED - 448)) | (1L << (TIES - 448)) | (1L << (ROLLUP - 448)) | (1L << (CUBE - 448)) | (1L << (GROUPING - 448)) | (1L << (SETS - 448)) | (1L << (ORDINALITY - 448)) | (1L << (XMLTABLE - 448)) | (1L << (COLUMNS - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (ROWTYPE - 448)) | (1L << (NORMALIZED - 448)) | (1L << (WITHIN - 448)) | (1L << (FILTER - 448)) | (1L << (GROUPS - 448)) | (1L << (OTHERS - 448)) | (1L << (NFC - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (NFD - 512)) | (1L << (NFKC - 512)) | (1L << (NFKD - 512)) | (1L << (UESCAPE - 512)) | (1L << (VIEWS - 512)) | (1L << (NORMALIZE - 512)) | (1L << (DUMP - 512)) | (1L << (PRINT_STRICT_PARAMS - 512)) | (1L << (VARIABLE_CONFLICT - 512)) | (1L << (ERROR - 512)) | (1L << (USE_VARIABLE - 512)) | (1L << (USE_COLUMN - 512)) | (1L << (ALIAS - 512)) | (1L << (CONSTANT - 512)) | (1L << (PERFORM - 512)) | (1L << (GET - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (STACKED - 512)) | (1L << (ELSIF - 512)) | (1L << (REVERSE - 512)) | (1L << (SLICE - 512)) | (1L << (EXIT - 512)) | (1L << (RETURN - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (DEBUG - 512)) | (1L << (LOG - 512)) | (1L << (INFO - 512)) | (1L << (NOTICE - 512)) | (1L << (WARNING - 512)) | (1L << (EXCEPTION - 512)) | (1L << (ASSERT - 512)) | (1L << (OPEN - 512)) | (1L << (Identifier - 512)) | (1L << (QuotedIdentifier - 512)) | (1L << (UnicodeQuotedIdentifier - 512)) | (1L << (PLSQLVARIABLENAME - 512)) | (1L << (PLSQLIDENTIFIER - 512)))) != 0) );
				setState(3313);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionwhereclauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionwhereclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionwhereclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExclusionwhereclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExclusionwhereclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExclusionwhereclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionwhereclauseContext exclusionwhereclause() throws RecognitionException {
		ExclusionwhereclauseContext _localctx = new ExclusionwhereclauseContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_exclusionwhereclause);
		try {
			setState(3323);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3317);
				match(WHERE);
				setState(3318);
				match(OPEN_PAREN);
				setState(3319);
				a_expr(0);
				setState(3320);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_actionsContext extends ParserRuleContext {
		public Key_updateContext key_update() {
			return getRuleContext(Key_updateContext.class,0);
		}
		public Key_deleteContext key_delete() {
			return getRuleContext(Key_deleteContext.class,0);
		}
		public Key_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_actions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_actions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_actions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_actions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionsContext key_actions() throws RecognitionException {
		Key_actionsContext _localctx = new Key_actionsContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_key_actions);
		try {
			setState(3334);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3325);
				key_update();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3326);
				key_delete();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3327);
				key_update();
				setState(3328);
				key_delete();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3330);
				key_delete();
				setState(3331);
				key_update();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public Key_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_update(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_update(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_update(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_updateContext key_update() throws RecognitionException {
		Key_updateContext _localctx = new Key_updateContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_key_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3336);
			match(ON);
			setState(3337);
			match(UPDATE);
			setState(3338);
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public Key_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_delete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_delete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_deleteContext key_delete() throws RecognitionException {
		Key_deleteContext _localctx = new Key_deleteContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_key_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3340);
			match(ON);
			setState(3341);
			match(DELETE_P);
			setState(3342);
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_actionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Key_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionContext key_action() throws RecognitionException {
		Key_actionContext _localctx = new Key_actionContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_key_action);
		try {
			setState(3352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3344);
				match(NO);
				setState(3345);
				match(ACTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3346);
				match(RESTRICT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3347);
				match(CASCADE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3348);
				match(SET);
				setState(3349);
				match(NULL_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3350);
				match(SET);
				setState(3351);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptinheritContext extends ParserRuleContext {
		public TerminalNode INHERITS() { return getToken(PostgreSQLParser.INHERITS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optinherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptinherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptinherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptinherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptinheritContext optinherit() throws RecognitionException {
		OptinheritContext _localctx = new OptinheritContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_optinherit);
		try {
			setState(3360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3354);
				match(INHERITS);
				setState(3355);
				match(OPEN_PAREN);
				setState(3356);
				qualified_name_list(0);
				setState(3357);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptpartitionspecContext extends ParserRuleContext {
		public PartitionspecContext partitionspec() {
			return getRuleContext(PartitionspecContext.class,0);
		}
		public OptpartitionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optpartitionspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptpartitionspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptpartitionspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptpartitionspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptpartitionspecContext optpartitionspec() throws RecognitionException {
		OptpartitionspecContext _localctx = new OptpartitionspecContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_optpartitionspec);
		try {
			setState(3364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3362);
				partitionspec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionspecContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Part_paramsContext part_params() {
			return getRuleContext(Part_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PartitionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPartitionspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPartitionspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPartitionspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionspecContext partitionspec() throws RecognitionException {
		PartitionspecContext _localctx = new PartitionspecContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_partitionspec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3366);
			match(PARTITION);
			setState(3367);
			match(BY);
			setState(3368);
			colid();
			setState(3369);
			match(OPEN_PAREN);
			setState(3370);
			part_params(0);
			setState(3371);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Part_paramsContext extends ParserRuleContext {
		public Part_elemContext part_elem() {
			return getRuleContext(Part_elemContext.class,0);
		}
		public Part_paramsContext part_params() {
			return getRuleContext(Part_paramsContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Part_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_part_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPart_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPart_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPart_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Part_paramsContext part_params() throws RecognitionException {
		return part_params(0);
	}

	private Part_paramsContext part_params(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Part_paramsContext _localctx = new Part_paramsContext(_ctx, _parentState);
		Part_paramsContext _prevctx = _localctx;
		int _startState = 244;
		enterRecursionRule(_localctx, 244, RULE_part_params, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3374);
			part_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3381);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,99,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Part_paramsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_part_params);
					setState(3376);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3377);
					match(COMMA);
					setState(3378);
					part_elem();
					}
					} 
				}
				setState(3383);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,99,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Part_elemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_collateContext opt_collate() {
			return getRuleContext(Opt_collateContext.class,0);
		}
		public Opt_classContext opt_class() {
			return getRuleContext(Opt_classContext.class,0);
		}
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Part_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_part_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPart_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPart_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPart_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Part_elemContext part_elem() throws RecognitionException {
		Part_elemContext _localctx = new Part_elemContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_part_elem);
		try {
			setState(3398);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3384);
				colid();
				setState(3385);
				opt_collate();
				setState(3386);
				opt_class();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3388);
				func_expr_windowless();
				setState(3389);
				opt_collate();
				setState(3390);
				opt_class();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3392);
				match(OPEN_PAREN);
				setState(3393);
				a_expr(0);
				setState(3394);
				match(CLOSE_PAREN);
				setState(3395);
				opt_collate();
				setState(3396);
				opt_class();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_access_method_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Table_access_method_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_access_method_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_access_method_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_access_method_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_access_method_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_access_method_clauseContext table_access_method_clause() throws RecognitionException {
		Table_access_method_clauseContext _localctx = new Table_access_method_clauseContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_table_access_method_clause);
		try {
			setState(3403);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3400);
				match(USING);
				setState(3401);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptwithContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public OptwithContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optwith; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptwith(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptwith(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptwith(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptwithContext optwith() throws RecognitionException {
		OptwithContext _localctx = new OptwithContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_optwith);
		try {
			setState(3410);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3405);
				match(WITH);
				setState(3406);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3407);
				match(WITHOUT);
				setState(3408);
				match(OIDS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OncommitoptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public OncommitoptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oncommitoption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOncommitoption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOncommitoption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOncommitoption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OncommitoptionContext oncommitoption() throws RecognitionException {
		OncommitoptionContext _localctx = new OncommitoptionContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_oncommitoption);
		try {
			setState(3424);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3412);
				match(ON);
				setState(3413);
				match(COMMIT);
				setState(3414);
				match(DROP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3415);
				match(ON);
				setState(3416);
				match(COMMIT);
				setState(3417);
				match(DELETE_P);
				setState(3418);
				match(ROWS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3419);
				match(ON);
				setState(3420);
				match(COMMIT);
				setState(3421);
				match(PRESERVE);
				setState(3422);
				match(ROWS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttablespaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OpttablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttablespaceContext opttablespace() throws RecognitionException {
		OpttablespaceContext _localctx = new OpttablespaceContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_opttablespace);
		try {
			setState(3429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3426);
				match(TABLESPACE);
				setState(3427);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptconstablespaceContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptconstablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optconstablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptconstablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptconstablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptconstablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptconstablespaceContext optconstablespace() throws RecognitionException {
		OptconstablespaceContext _localctx = new OptconstablespaceContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_optconstablespace);
		try {
			setState(3436);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3431);
				match(USING);
				setState(3432);
				match(INDEX);
				setState(3433);
				match(TABLESPACE);
				setState(3434);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistingindexContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistingindexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existingindex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExistingindex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExistingindex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExistingindex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistingindexContext existingindex() throws RecognitionException {
		ExistingindexContext _localctx = new ExistingindexContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_existingindex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3438);
			match(USING);
			setState(3439);
			match(INDEX);
			setState(3440);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatestatsstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreatestatsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createstatsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatestatsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatestatsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatestatsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatestatsstmtContext createstatsstmt() throws RecognitionException {
		CreatestatsstmtContext _localctx = new CreatestatsstmtContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_createstatsstmt);
		try {
			setState(3463);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3442);
				match(CREATE);
				setState(3443);
				match(STATISTICS);
				setState(3444);
				any_name();
				setState(3445);
				opt_name_list();
				setState(3446);
				match(ON);
				setState(3447);
				expr_list(0);
				setState(3448);
				match(FROM);
				setState(3449);
				from_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3451);
				match(CREATE);
				setState(3452);
				match(STATISTICS);
				setState(3453);
				match(IF_P);
				setState(3454);
				match(NOT);
				setState(3455);
				match(EXISTS);
				setState(3456);
				any_name();
				setState(3457);
				opt_name_list();
				setState(3458);
				match(ON);
				setState(3459);
				expr_list(0);
				setState(3460);
				match(FROM);
				setState(3461);
				from_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterstatsstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public List<TerminalNode> STATISTICS() { return getTokens(PostgreSQLParser.STATISTICS); }
		public TerminalNode STATISTICS(int i) {
			return getToken(PostgreSQLParser.STATISTICS, i);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AlterstatsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterstatsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterstatsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterstatsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterstatsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterstatsstmtContext alterstatsstmt() throws RecognitionException {
		AlterstatsstmtContext _localctx = new AlterstatsstmtContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_alterstatsstmt);
		try {
			setState(3481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3465);
				match(ALTER);
				setState(3466);
				match(STATISTICS);
				setState(3467);
				any_name();
				setState(3468);
				match(SET);
				setState(3469);
				match(STATISTICS);
				setState(3470);
				signediconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3472);
				match(ALTER);
				setState(3473);
				match(STATISTICS);
				setState(3474);
				match(IF_P);
				setState(3475);
				match(EXISTS);
				setState(3476);
				any_name();
				setState(3477);
				match(SET);
				setState(3478);
				match(STATISTICS);
				setState(3479);
				signediconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateasstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateasstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createasstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateasstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateasstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateasstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateasstmtContext createasstmt() throws RecognitionException {
		CreateasstmtContext _localctx = new CreateasstmtContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_createasstmt);
		try {
			setState(3502);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3483);
				match(CREATE);
				setState(3484);
				opttemp();
				setState(3485);
				match(TABLE);
				setState(3486);
				create_as_target();
				setState(3487);
				match(AS);
				setState(3488);
				selectstmt();
				setState(3489);
				opt_with_data();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3491);
				match(CREATE);
				setState(3492);
				opttemp();
				setState(3493);
				match(TABLE);
				setState(3494);
				match(IF_P);
				setState(3495);
				match(NOT);
				setState(3496);
				match(EXISTS);
				setState(3497);
				create_as_target();
				setState(3498);
				match(AS);
				setState(3499);
				selectstmt();
				setState(3500);
				opt_with_data();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_as_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Table_access_method_clauseContext table_access_method_clause() {
			return getRuleContext(Table_access_method_clauseContext.class,0);
		}
		public OptwithContext optwith() {
			return getRuleContext(OptwithContext.class,0);
		}
		public OncommitoptionContext oncommitoption() {
			return getRuleContext(OncommitoptionContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public Create_as_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_as_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_as_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_as_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_as_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_as_targetContext create_as_target() throws RecognitionException {
		Create_as_targetContext _localctx = new Create_as_targetContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_create_as_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3504);
			qualified_name();
			setState(3505);
			opt_column_list();
			setState(3506);
			table_access_method_clause();
			setState(3507);
			optwith();
			setState(3508);
			oncommitoption();
			setState(3509);
			opttablespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_with_dataContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_with_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_data; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_with_data(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_with_data(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_with_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_dataContext opt_with_data() throws RecognitionException {
		Opt_with_dataContext _localctx = new Opt_with_dataContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_opt_with_data);
		try {
			setState(3517);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3511);
				match(WITH);
				setState(3512);
				match(DATA_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3513);
				match(WITH);
				setState(3514);
				match(NO);
				setState(3515);
				match(DATA_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatematviewstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OptnologContext optnolog() {
			return getRuleContext(OptnologContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Create_mv_targetContext create_mv_target() {
			return getRuleContext(Create_mv_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreatematviewstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_creatematviewstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatematviewstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatematviewstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatematviewstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatematviewstmtContext creatematviewstmt() throws RecognitionException {
		CreatematviewstmtContext _localctx = new CreatematviewstmtContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_creatematviewstmt);
		try {
			setState(3540);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3519);
				match(CREATE);
				setState(3520);
				optnolog();
				setState(3521);
				match(MATERIALIZED);
				setState(3522);
				match(VIEW);
				setState(3523);
				create_mv_target();
				setState(3524);
				match(AS);
				setState(3525);
				selectstmt();
				setState(3526);
				opt_with_data();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3528);
				match(CREATE);
				setState(3529);
				optnolog();
				setState(3530);
				match(MATERIALIZED);
				setState(3531);
				match(VIEW);
				setState(3532);
				match(IF_P);
				setState(3533);
				match(NOT);
				setState(3534);
				match(EXISTS);
				setState(3535);
				create_mv_target();
				setState(3536);
				match(AS);
				setState(3537);
				selectstmt();
				setState(3538);
				opt_with_data();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_mv_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Table_access_method_clauseContext table_access_method_clause() {
			return getRuleContext(Table_access_method_clauseContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public Create_mv_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_mv_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_mv_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_mv_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_mv_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_mv_targetContext create_mv_target() throws RecognitionException {
		Create_mv_targetContext _localctx = new Create_mv_targetContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_create_mv_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3542);
			qualified_name();
			setState(3543);
			opt_column_list();
			setState(3544);
			table_access_method_clause();
			setState(3545);
			opt_reloptions();
			setState(3546);
			opttablespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptnologContext extends ParserRuleContext {
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public OptnologContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optnolog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptnolog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptnolog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptnolog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptnologContext optnolog() throws RecognitionException {
		OptnologContext _localctx = new OptnologContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_optnolog);
		try {
			setState(3550);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNLOGGED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3548);
				match(UNLOGGED);
				}
				break;
			case MATERIALIZED:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshmatviewstmtContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public RefreshmatviewstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshmatviewstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRefreshmatviewstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRefreshmatviewstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRefreshmatviewstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshmatviewstmtContext refreshmatviewstmt() throws RecognitionException {
		RefreshmatviewstmtContext _localctx = new RefreshmatviewstmtContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_refreshmatviewstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3552);
			match(REFRESH);
			setState(3553);
			match(MATERIALIZED);
			setState(3554);
			match(VIEW);
			setState(3555);
			opt_concurrently();
			setState(3556);
			qualified_name();
			setState(3557);
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateseqstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptseqoptlistContext optseqoptlist() {
			return getRuleContext(OptseqoptlistContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateseqstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createseqstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateseqstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateseqstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateseqstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateseqstmtContext createseqstmt() throws RecognitionException {
		CreateseqstmtContext _localctx = new CreateseqstmtContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_createseqstmt);
		try {
			setState(3574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3559);
				match(CREATE);
				setState(3560);
				opttemp();
				setState(3561);
				match(SEQUENCE);
				setState(3562);
				qualified_name();
				setState(3563);
				optseqoptlist();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3565);
				match(CREATE);
				setState(3566);
				opttemp();
				setState(3567);
				match(SEQUENCE);
				setState(3568);
				match(IF_P);
				setState(3569);
				match(NOT);
				setState(3570);
				match(EXISTS);
				setState(3571);
				qualified_name();
				setState(3572);
				optseqoptlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterseqstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AlterseqstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterseqstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterseqstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterseqstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterseqstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterseqstmtContext alterseqstmt() throws RecognitionException {
		AlterseqstmtContext _localctx = new AlterseqstmtContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_alterseqstmt);
		try {
			setState(3588);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3576);
				match(ALTER);
				setState(3577);
				match(SEQUENCE);
				setState(3578);
				qualified_name();
				setState(3579);
				seqoptlist(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3581);
				match(ALTER);
				setState(3582);
				match(SEQUENCE);
				setState(3583);
				match(IF_P);
				setState(3584);
				match(EXISTS);
				setState(3585);
				qualified_name();
				setState(3586);
				seqoptlist(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptseqoptlistContext extends ParserRuleContext {
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public OptseqoptlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optseqoptlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptseqoptlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptseqoptlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptseqoptlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptseqoptlistContext optseqoptlist() throws RecognitionException {
		OptseqoptlistContext _localctx = new OptseqoptlistContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_optseqoptlist);
		try {
			setState(3592);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3590);
				seqoptlist(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptparenthesizedseqoptlistContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptparenthesizedseqoptlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optparenthesizedseqoptlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptparenthesizedseqoptlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptparenthesizedseqoptlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptparenthesizedseqoptlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() throws RecognitionException {
		OptparenthesizedseqoptlistContext _localctx = new OptparenthesizedseqoptlistContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_optparenthesizedseqoptlist);
		try {
			setState(3599);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3594);
				match(OPEN_PAREN);
				setState(3595);
				seqoptlist(0);
				setState(3596);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqoptlistContext extends ParserRuleContext {
		public SeqoptelemContext seqoptelem() {
			return getRuleContext(SeqoptelemContext.class,0);
		}
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public SeqoptlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqoptlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSeqoptlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSeqoptlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSeqoptlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqoptlistContext seqoptlist() throws RecognitionException {
		return seqoptlist(0);
	}

	private SeqoptlistContext seqoptlist(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SeqoptlistContext _localctx = new SeqoptlistContext(_ctx, _parentState);
		SeqoptlistContext _prevctx = _localctx;
		int _startState = 286;
		enterRecursionRule(_localctx, 286, RULE_seqoptlist, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3602);
			seqoptelem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3608);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,116,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SeqoptlistContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_seqoptlist);
					setState(3604);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3605);
					seqoptelem();
					}
					} 
				}
				setState(3610);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,116,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SeqoptelemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public TerminalNode CACHE() { return getToken(PostgreSQLParser.CACHE, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode CYCLE() { return getToken(PostgreSQLParser.CYCLE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLParser.INCREMENT, 0); }
		public Opt_byContext opt_by() {
			return getRuleContext(Opt_byContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLParser.MINVALUE, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public SeqoptelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqoptelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSeqoptelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSeqoptelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSeqoptelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqoptelemContext seqoptelem() throws RecognitionException {
		SeqoptelemContext _localctx = new SeqoptelemContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_seqoptelem);
		try {
			setState(3645);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3611);
				match(AS);
				setState(3612);
				simpletypename();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3613);
				match(CACHE);
				setState(3614);
				numericonly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3615);
				match(CYCLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3616);
				match(NO);
				setState(3617);
				match(CYCLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3618);
				match(INCREMENT);
				setState(3619);
				opt_by();
				setState(3620);
				numericonly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3622);
				match(MAXVALUE);
				setState(3623);
				numericonly();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3624);
				match(MINVALUE);
				setState(3625);
				numericonly();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3626);
				match(NO);
				setState(3627);
				match(MAXVALUE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3628);
				match(NO);
				setState(3629);
				match(MINVALUE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3630);
				match(OWNED);
				setState(3631);
				match(BY);
				setState(3632);
				any_name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3633);
				match(SEQUENCE);
				setState(3634);
				match(NAME_P);
				setState(3635);
				any_name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3636);
				match(START);
				setState(3637);
				opt_with();
				setState(3638);
				numericonly();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3640);
				match(RESTART);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3641);
				match(RESTART);
				setState(3642);
				opt_with();
				setState(3643);
				numericonly();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_byContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Opt_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_by(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_byContext opt_by() throws RecognitionException {
		Opt_byContext _localctx = new Opt_byContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_opt_by);
		try {
			setState(3649);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3647);
				match(BY);
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericonlyContext extends ParserRuleContext {
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public NumericonlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericonly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNumericonly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNumericonly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNumericonly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericonlyContext numericonly() throws RecognitionException {
		NumericonlyContext _localctx = new NumericonlyContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_numericonly);
		try {
			setState(3657);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3651);
				fconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3652);
				match(PLUS);
				setState(3653);
				fconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3654);
				match(MINUS);
				setState(3655);
				fconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3656);
				signediconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numericonly_listContext extends ParserRuleContext {
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Numericonly_listContext numericonly_list() {
			return getRuleContext(Numericonly_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Numericonly_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericonly_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNumericonly_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNumericonly_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNumericonly_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numericonly_listContext numericonly_list() throws RecognitionException {
		return numericonly_list(0);
	}

	private Numericonly_listContext numericonly_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Numericonly_listContext _localctx = new Numericonly_listContext(_ctx, _parentState);
		Numericonly_listContext _prevctx = _localctx;
		int _startState = 294;
		enterRecursionRule(_localctx, 294, RULE_numericonly_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3660);
			numericonly();
			}
			_ctx.stop = _input.LT(-1);
			setState(3667);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,120,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Numericonly_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_numericonly_list);
					setState(3662);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3663);
					match(COMMA);
					setState(3664);
					numericonly();
					}
					} 
				}
				setState(3669);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,120,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CreateplangstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public Opt_trustedContext opt_trusted() {
			return getRuleContext(Opt_trustedContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Opt_inline_handlerContext opt_inline_handler() {
			return getRuleContext(Opt_inline_handlerContext.class,0);
		}
		public Opt_validatorContext opt_validator() {
			return getRuleContext(Opt_validatorContext.class,0);
		}
		public CreateplangstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createplangstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateplangstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateplangstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateplangstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateplangstmtContext createplangstmt() throws RecognitionException {
		CreateplangstmtContext _localctx = new CreateplangstmtContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_createplangstmt);
		try {
			setState(3688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3670);
				match(CREATE);
				setState(3671);
				opt_or_replace();
				setState(3672);
				opt_trusted();
				setState(3673);
				opt_procedural();
				setState(3674);
				match(LANGUAGE);
				setState(3675);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3677);
				match(CREATE);
				setState(3678);
				opt_or_replace();
				setState(3679);
				opt_trusted();
				setState(3680);
				opt_procedural();
				setState(3681);
				match(LANGUAGE);
				setState(3682);
				name();
				setState(3683);
				match(HANDLER);
				setState(3684);
				handler_name();
				setState(3685);
				opt_inline_handler();
				setState(3686);
				opt_validator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_trustedContext extends ParserRuleContext {
		public TerminalNode TRUSTED() { return getToken(PostgreSQLParser.TRUSTED, 0); }
		public Opt_trustedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_trusted; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_trusted(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_trusted(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_trusted(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_trustedContext opt_trusted() throws RecognitionException {
		Opt_trustedContext _localctx = new Opt_trustedContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_opt_trusted);
		try {
			setState(3692);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUSTED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3690);
				match(TRUSTED);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Handler_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHandler_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHandler_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHandler_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Handler_nameContext handler_name() throws RecognitionException {
		Handler_nameContext _localctx = new Handler_nameContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_handler_name);
		try {
			setState(3698);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3694);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3695);
				name();
				setState(3696);
				attrs(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_inline_handlerContext extends ParserRuleContext {
		public TerminalNode INLINE_P() { return getToken(PostgreSQLParser.INLINE_P, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Opt_inline_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_inline_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_inline_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_inline_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_inline_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_inline_handlerContext opt_inline_handler() throws RecognitionException {
		Opt_inline_handlerContext _localctx = new Opt_inline_handlerContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_opt_inline_handler);
		try {
			setState(3703);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INLINE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3700);
				match(INLINE_P);
				setState(3701);
				handler_name();
				}
				break;
			case SEMI:
			case INTO:
			case NO:
			case VALIDATOR:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Validator_clauseContext extends ParserRuleContext {
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Validator_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validator_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterValidator_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitValidator_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitValidator_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Validator_clauseContext validator_clause() throws RecognitionException {
		Validator_clauseContext _localctx = new Validator_clauseContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_validator_clause);
		try {
			setState(3709);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3705);
				match(VALIDATOR);
				setState(3706);
				handler_name();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3707);
				match(NO);
				setState(3708);
				match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_validatorContext extends ParserRuleContext {
		public Validator_clauseContext validator_clause() {
			return getRuleContext(Validator_clauseContext.class,0);
		}
		public Opt_validatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_validator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_validator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_validator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_validator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_validatorContext opt_validator() throws RecognitionException {
		Opt_validatorContext _localctx = new Opt_validatorContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_opt_validator);
		try {
			setState(3713);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3711);
				validator_clause();
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_proceduralContext extends ParserRuleContext {
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public Opt_proceduralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_procedural; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_procedural(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_procedural(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_procedural(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_proceduralContext opt_procedural() throws RecognitionException {
		Opt_proceduralContext _localctx = new Opt_proceduralContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_opt_procedural);
		try {
			setState(3717);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3715);
				match(PROCEDURAL);
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatetablespacestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OpttablespaceownerContext opttablespaceowner() {
			return getRuleContext(OpttablespaceownerContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public CreatetablespacestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createtablespacestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatetablespacestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatetablespacestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatetablespacestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatetablespacestmtContext createtablespacestmt() throws RecognitionException {
		CreatetablespacestmtContext _localctx = new CreatetablespacestmtContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_createtablespacestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3719);
			match(CREATE);
			setState(3720);
			match(TABLESPACE);
			setState(3721);
			name();
			setState(3722);
			opttablespaceowner();
			setState(3723);
			match(LOCATION);
			setState(3724);
			sconst();
			setState(3725);
			opt_reloptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttablespaceownerContext extends ParserRuleContext {
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public OpttablespaceownerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttablespaceowner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttablespaceowner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttablespaceowner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttablespaceowner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttablespaceownerContext opttablespaceowner() throws RecognitionException {
		OpttablespaceownerContext _localctx = new OpttablespaceownerContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_opttablespaceowner);
		try {
			setState(3730);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OWNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3727);
				match(OWNER);
				setState(3728);
				rolespec();
				}
				break;
			case LOCATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DroptablespacestmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DroptablespacestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_droptablespacestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDroptablespacestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDroptablespacestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDroptablespacestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DroptablespacestmtContext droptablespacestmt() throws RecognitionException {
		DroptablespacestmtContext _localctx = new DroptablespacestmtContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_droptablespacestmt);
		try {
			setState(3740);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3732);
				match(DROP);
				setState(3733);
				match(TABLESPACE);
				setState(3734);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3735);
				match(DROP);
				setState(3736);
				match(TABLESPACE);
				setState(3737);
				match(IF_P);
				setState(3738);
				match(EXISTS);
				setState(3739);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateextensionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Create_extension_opt_listContext create_extension_opt_list() {
			return getRuleContext(Create_extension_opt_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateextensionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createextensionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateextensionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateextensionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateextensionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateextensionstmtContext createextensionstmt() throws RecognitionException {
		CreateextensionstmtContext _localctx = new CreateextensionstmtContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_createextensionstmt);
		try {
			setState(3757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3742);
				match(CREATE);
				setState(3743);
				match(EXTENSION);
				setState(3744);
				name();
				setState(3745);
				opt_with();
				setState(3746);
				create_extension_opt_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3748);
				match(CREATE);
				setState(3749);
				match(EXTENSION);
				setState(3750);
				match(IF_P);
				setState(3751);
				match(NOT);
				setState(3752);
				match(EXISTS);
				setState(3753);
				name();
				setState(3754);
				opt_with();
				setState(3755);
				create_extension_opt_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_extension_opt_listContext extends ParserRuleContext {
		public Create_extension_opt_listContext create_extension_opt_list() {
			return getRuleContext(Create_extension_opt_listContext.class,0);
		}
		public Create_extension_opt_itemContext create_extension_opt_item() {
			return getRuleContext(Create_extension_opt_itemContext.class,0);
		}
		public Create_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_extension_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_extension_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_listContext create_extension_opt_list() throws RecognitionException {
		return create_extension_opt_list(0);
	}

	private Create_extension_opt_listContext create_extension_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Create_extension_opt_listContext _localctx = new Create_extension_opt_listContext(_ctx, _parentState);
		Create_extension_opt_listContext _prevctx = _localctx;
		int _startState = 318;
		enterRecursionRule(_localctx, 318, RULE_create_extension_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3764);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,131,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Create_extension_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_create_extension_opt_list);
					setState(3760);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3761);
					create_extension_opt_item();
					}
					} 
				}
				setState(3766);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,131,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Create_extension_opt_itemContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public Create_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_extension_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_extension_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_itemContext create_extension_opt_item() throws RecognitionException {
		Create_extension_opt_itemContext _localctx = new Create_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_create_extension_opt_item);
		try {
			setState(3774);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(3767);
				match(SCHEMA);
				setState(3768);
				name();
				}
				break;
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(3769);
				match(VERSION_P);
				setState(3770);
				nonreservedword_or_sconst();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 3);
				{
				setState(3771);
				match(FROM);
				setState(3772);
				nonreservedword_or_sconst();
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3773);
				match(CASCADE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterextensionstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Alter_extension_opt_listContext alter_extension_opt_list() {
			return getRuleContext(Alter_extension_opt_listContext.class,0);
		}
		public AlterextensionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterextensionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterextensionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterextensionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterextensionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterextensionstmtContext alterextensionstmt() throws RecognitionException {
		AlterextensionstmtContext _localctx = new AlterextensionstmtContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_alterextensionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3776);
			match(ALTER);
			setState(3777);
			match(EXTENSION);
			setState(3778);
			name();
			setState(3779);
			match(UPDATE);
			setState(3780);
			alter_extension_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_extension_opt_listContext extends ParserRuleContext {
		public Alter_extension_opt_listContext alter_extension_opt_list() {
			return getRuleContext(Alter_extension_opt_listContext.class,0);
		}
		public Alter_extension_opt_itemContext alter_extension_opt_item() {
			return getRuleContext(Alter_extension_opt_itemContext.class,0);
		}
		public Alter_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_extension_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_extension_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_listContext alter_extension_opt_list() throws RecognitionException {
		return alter_extension_opt_list(0);
	}

	private Alter_extension_opt_listContext alter_extension_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_extension_opt_listContext _localctx = new Alter_extension_opt_listContext(_ctx, _parentState);
		Alter_extension_opt_listContext _prevctx = _localctx;
		int _startState = 324;
		enterRecursionRule(_localctx, 324, RULE_alter_extension_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3787);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,133,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_extension_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_extension_opt_list);
					setState(3783);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3784);
					alter_extension_opt_item();
					}
					} 
				}
				setState(3789);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,133,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_extension_opt_itemContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Alter_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_extension_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_extension_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_itemContext alter_extension_opt_item() throws RecognitionException {
		Alter_extension_opt_itemContext _localctx = new Alter_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_alter_extension_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3790);
			match(TO);
			setState(3791);
			nonreservedword_or_sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterextensioncontentsstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterextensioncontentsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterextensioncontentsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterextensioncontentsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterextensioncontentsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterextensioncontentsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterextensioncontentsstmtContext alterextensioncontentsstmt() throws RecognitionException {
		AlterextensioncontentsstmtContext _localctx = new AlterextensioncontentsstmtContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_alterextensioncontentsstmt);
		try {
			setState(3897);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3793);
				match(ALTER);
				setState(3794);
				match(EXTENSION);
				setState(3795);
				name();
				setState(3796);
				add_drop();
				setState(3797);
				object_type_name();
				setState(3798);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3800);
				match(ALTER);
				setState(3801);
				match(EXTENSION);
				setState(3802);
				name();
				setState(3803);
				add_drop();
				setState(3804);
				object_type_any_name();
				setState(3805);
				any_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3807);
				match(ALTER);
				setState(3808);
				match(EXTENSION);
				setState(3809);
				name();
				setState(3810);
				add_drop();
				setState(3811);
				match(AGGREGATE);
				setState(3812);
				aggregate_with_argtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3814);
				match(ALTER);
				setState(3815);
				match(EXTENSION);
				setState(3816);
				name();
				setState(3817);
				add_drop();
				setState(3818);
				match(CAST);
				setState(3819);
				match(OPEN_PAREN);
				setState(3820);
				typename();
				setState(3821);
				match(AS);
				setState(3822);
				typename();
				setState(3823);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3825);
				match(ALTER);
				setState(3826);
				match(EXTENSION);
				setState(3827);
				name();
				setState(3828);
				add_drop();
				setState(3829);
				match(DOMAIN_P);
				setState(3830);
				typename();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3832);
				match(ALTER);
				setState(3833);
				match(EXTENSION);
				setState(3834);
				name();
				setState(3835);
				add_drop();
				setState(3836);
				match(FUNCTION);
				setState(3837);
				function_with_argtypes();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3839);
				match(ALTER);
				setState(3840);
				match(EXTENSION);
				setState(3841);
				name();
				setState(3842);
				add_drop();
				setState(3843);
				match(OPERATOR);
				setState(3844);
				operator_with_argtypes();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3846);
				match(ALTER);
				setState(3847);
				match(EXTENSION);
				setState(3848);
				name();
				setState(3849);
				add_drop();
				setState(3850);
				match(OPERATOR);
				setState(3851);
				match(CLASS);
				setState(3852);
				any_name();
				setState(3853);
				match(USING);
				setState(3854);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3856);
				match(ALTER);
				setState(3857);
				match(EXTENSION);
				setState(3858);
				name();
				setState(3859);
				add_drop();
				setState(3860);
				match(OPERATOR);
				setState(3861);
				match(FAMILY);
				setState(3862);
				any_name();
				setState(3863);
				match(USING);
				setState(3864);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3866);
				match(ALTER);
				setState(3867);
				match(EXTENSION);
				setState(3868);
				name();
				setState(3869);
				add_drop();
				setState(3870);
				match(PROCEDURE);
				setState(3871);
				function_with_argtypes();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3873);
				match(ALTER);
				setState(3874);
				match(EXTENSION);
				setState(3875);
				name();
				setState(3876);
				add_drop();
				setState(3877);
				match(ROUTINE);
				setState(3878);
				function_with_argtypes();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3880);
				match(ALTER);
				setState(3881);
				match(EXTENSION);
				setState(3882);
				name();
				setState(3883);
				add_drop();
				setState(3884);
				match(TRANSFORM);
				setState(3885);
				match(FOR);
				setState(3886);
				typename();
				setState(3887);
				match(LANGUAGE);
				setState(3888);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3890);
				match(ALTER);
				setState(3891);
				match(EXTENSION);
				setState(3892);
				name();
				setState(3893);
				add_drop();
				setState(3894);
				match(TYPE_P);
				setState(3895);
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatefdwstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public CreatefdwstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfdwstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefdwstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefdwstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefdwstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefdwstmtContext createfdwstmt() throws RecognitionException {
		CreatefdwstmtContext _localctx = new CreatefdwstmtContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_createfdwstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3899);
			match(CREATE);
			setState(3900);
			match(FOREIGN);
			setState(3901);
			match(DATA_P);
			setState(3902);
			match(WRAPPER);
			setState(3903);
			name();
			setState(3904);
			opt_fdw_options();
			setState(3905);
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fdw_optionContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public Fdw_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFdw_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFdw_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFdw_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionContext fdw_option() throws RecognitionException {
		Fdw_optionContext _localctx = new Fdw_optionContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_fdw_option);
		try {
			setState(3915);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3907);
				match(HANDLER);
				setState(3908);
				handler_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3909);
				match(NO);
				setState(3910);
				match(HANDLER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3911);
				match(VALIDATOR);
				setState(3912);
				handler_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3913);
				match(NO);
				setState(3914);
				match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fdw_optionsContext extends ParserRuleContext {
		public Fdw_optionContext fdw_option() {
			return getRuleContext(Fdw_optionContext.class,0);
		}
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public Fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFdw_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFdw_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionsContext fdw_options() throws RecognitionException {
		return fdw_options(0);
	}

	private Fdw_optionsContext fdw_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Fdw_optionsContext _localctx = new Fdw_optionsContext(_ctx, _parentState);
		Fdw_optionsContext _prevctx = _localctx;
		int _startState = 334;
		enterRecursionRule(_localctx, 334, RULE_fdw_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3918);
			fdw_option();
			}
			_ctx.stop = _input.LT(-1);
			setState(3924);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,136,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Fdw_optionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_fdw_options);
					setState(3920);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3921);
					fdw_option();
					}
					} 
				}
				setState(3926);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,136,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_fdw_optionsContext extends ParserRuleContext {
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public Opt_fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_fdw_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_fdw_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_fdw_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_fdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fdw_optionsContext opt_fdw_options() throws RecognitionException {
		Opt_fdw_optionsContext _localctx = new Opt_fdw_optionsContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_opt_fdw_options);
		try {
			setState(3929);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HANDLER:
			case NO:
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3927);
				fdw_options(0);
				}
				break;
			case SEMI:
			case INTO:
			case OPTIONS:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterfdwstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public AlterfdwstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfdwstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterfdwstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterfdwstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterfdwstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterfdwstmtContext alterfdwstmt() throws RecognitionException {
		AlterfdwstmtContext _localctx = new AlterfdwstmtContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_alterfdwstmt);
		try {
			setState(3946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3931);
				match(ALTER);
				setState(3932);
				match(FOREIGN);
				setState(3933);
				match(DATA_P);
				setState(3934);
				match(WRAPPER);
				setState(3935);
				name();
				setState(3936);
				opt_fdw_options();
				setState(3937);
				alter_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3939);
				match(ALTER);
				setState(3940);
				match(FOREIGN);
				setState(3941);
				match(DATA_P);
				setState(3942);
				match(WRAPPER);
				setState(3943);
				name();
				setState(3944);
				fdw_options(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_generic_optionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Generic_option_listContext generic_option_list() {
			return getRuleContext(Generic_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Create_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_generic_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_generic_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_generic_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_generic_optionsContext create_generic_options() throws RecognitionException {
		Create_generic_optionsContext _localctx = new Create_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_create_generic_options);
		try {
			setState(3954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3948);
				match(OPTIONS);
				setState(3949);
				match(OPEN_PAREN);
				setState(3950);
				generic_option_list(0);
				setState(3951);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_listContext extends ParserRuleContext {
		public Generic_option_elemContext generic_option_elem() {
			return getRuleContext(Generic_option_elemContext.class,0);
		}
		public Generic_option_listContext generic_option_list() {
			return getRuleContext(Generic_option_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_listContext generic_option_list() throws RecognitionException {
		return generic_option_list(0);
	}

	private Generic_option_listContext generic_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Generic_option_listContext _localctx = new Generic_option_listContext(_ctx, _parentState);
		Generic_option_listContext _prevctx = _localctx;
		int _startState = 342;
		enterRecursionRule(_localctx, 342, RULE_generic_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3957);
			generic_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3964);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,140,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Generic_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_generic_option_list);
					setState(3959);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3960);
					match(COMMA);
					setState(3961);
					generic_option_elem();
					}
					} 
				}
				setState(3966);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,140,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_generic_optionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Alter_generic_option_listContext alter_generic_option_list() {
			return getRuleContext(Alter_generic_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alter_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_generic_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_generic_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_optionsContext alter_generic_options() throws RecognitionException {
		Alter_generic_optionsContext _localctx = new Alter_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_alter_generic_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3967);
			match(OPTIONS);
			setState(3968);
			match(OPEN_PAREN);
			setState(3969);
			alter_generic_option_list(0);
			setState(3970);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_generic_option_listContext extends ParserRuleContext {
		public Alter_generic_option_elemContext alter_generic_option_elem() {
			return getRuleContext(Alter_generic_option_elemContext.class,0);
		}
		public Alter_generic_option_listContext alter_generic_option_list() {
			return getRuleContext(Alter_generic_option_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Alter_generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_generic_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_generic_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_generic_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_listContext alter_generic_option_list() throws RecognitionException {
		return alter_generic_option_list(0);
	}

	private Alter_generic_option_listContext alter_generic_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_generic_option_listContext _localctx = new Alter_generic_option_listContext(_ctx, _parentState);
		Alter_generic_option_listContext _prevctx = _localctx;
		int _startState = 346;
		enterRecursionRule(_localctx, 346, RULE_alter_generic_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3973);
			alter_generic_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3980);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,141,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_generic_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_generic_option_list);
					setState(3975);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3976);
					match(COMMA);
					setState(3977);
					alter_generic_option_elem();
					}
					} 
				}
				setState(3982);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,141,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_generic_option_elemContext extends ParserRuleContext {
		public Generic_option_elemContext generic_option_elem() {
			return getRuleContext(Generic_option_elemContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Alter_generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_generic_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_generic_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_generic_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_elemContext alter_generic_option_elem() throws RecognitionException {
		Alter_generic_option_elemContext _localctx = new Alter_generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_alter_generic_option_elem);
		try {
			setState(3990);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3983);
				generic_option_elem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3984);
				match(SET);
				setState(3985);
				generic_option_elem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3986);
				match(ADD_P);
				setState(3987);
				generic_option_elem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3988);
				match(DROP);
				setState(3989);
				generic_option_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_elemContext extends ParserRuleContext {
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Generic_option_argContext generic_option_arg() {
			return getRuleContext(Generic_option_argContext.class,0);
		}
		public Generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_elemContext generic_option_elem() throws RecognitionException {
		Generic_option_elemContext _localctx = new Generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_generic_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3992);
			generic_option_name();
			setState(3993);
			generic_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_nameContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Generic_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_nameContext generic_option_name() throws RecognitionException {
		Generic_option_nameContext _localctx = new Generic_option_nameContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_generic_option_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3995);
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_argContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Generic_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_argContext generic_option_arg() throws RecognitionException {
		Generic_option_argContext _localctx = new Generic_option_argContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_generic_option_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3997);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateforeignserverstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Opt_typeContext opt_type() {
			return getRuleContext(Opt_typeContext.class,0);
		}
		public Opt_foreign_server_versionContext opt_foreign_server_version() {
			return getRuleContext(Opt_foreign_server_versionContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateforeignserverstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createforeignserverstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateforeignserverstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateforeignserverstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateforeignserverstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateforeignserverstmtContext createforeignserverstmt() throws RecognitionException {
		CreateforeignserverstmtContext _localctx = new CreateforeignserverstmtContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_createforeignserverstmt);
		try {
			setState(4024);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3999);
				match(CREATE);
				setState(4000);
				match(SERVER);
				setState(4001);
				name();
				setState(4002);
				opt_type();
				setState(4003);
				opt_foreign_server_version();
				setState(4004);
				match(FOREIGN);
				setState(4005);
				match(DATA_P);
				setState(4006);
				match(WRAPPER);
				setState(4007);
				name();
				setState(4008);
				create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4010);
				match(CREATE);
				setState(4011);
				match(SERVER);
				setState(4012);
				match(IF_P);
				setState(4013);
				match(NOT);
				setState(4014);
				match(EXISTS);
				setState(4015);
				name();
				setState(4016);
				opt_type();
				setState(4017);
				opt_foreign_server_version();
				setState(4018);
				match(FOREIGN);
				setState(4019);
				match(DATA_P);
				setState(4020);
				match(WRAPPER);
				setState(4021);
				name();
				setState(4022);
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_typeContext extends ParserRuleContext {
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_typeContext opt_type() throws RecognitionException {
		Opt_typeContext _localctx = new Opt_typeContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_opt_type);
		try {
			setState(4029);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TYPE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4026);
				match(TYPE_P);
				setState(4027);
				sconst();
				}
				break;
			case FOREIGN:
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreign_server_versionContext extends ParserRuleContext {
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_server_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterForeign_server_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitForeign_server_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitForeign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreign_server_versionContext foreign_server_version() throws RecognitionException {
		Foreign_server_versionContext _localctx = new Foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_foreign_server_version);
		try {
			setState(4035);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4031);
				match(VERSION_P);
				setState(4032);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4033);
				match(VERSION_P);
				setState(4034);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_foreign_server_versionContext extends ParserRuleContext {
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public Opt_foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_foreign_server_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_foreign_server_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_foreign_server_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_foreign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_foreign_server_versionContext opt_foreign_server_version() throws RecognitionException {
		Opt_foreign_server_versionContext _localctx = new Opt_foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_opt_foreign_server_version);
		try {
			setState(4039);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSION_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4037);
				foreign_server_version();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterforeignserverstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public AlterforeignserverstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterforeignserverstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterforeignserverstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterforeignserverstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterforeignserverstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterforeignserverstmtContext alterforeignserverstmt() throws RecognitionException {
		AlterforeignserverstmtContext _localctx = new AlterforeignserverstmtContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_alterforeignserverstmt);
		try {
			setState(4057);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4041);
				match(ALTER);
				setState(4042);
				match(SERVER);
				setState(4043);
				name();
				setState(4044);
				foreign_server_version();
				setState(4045);
				alter_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4047);
				match(ALTER);
				setState(4048);
				match(SERVER);
				setState(4049);
				name();
				setState(4050);
				foreign_server_version();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4052);
				match(ALTER);
				setState(4053);
				match(SERVER);
				setState(4054);
				name();
				setState(4055);
				alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateforeigntablestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public OpttableelementlistContext opttableelementlist() {
			return getRuleContext(OpttableelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext optinherit() {
			return getRuleContext(OptinheritContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public OpttypedtableelementlistContext opttypedtableelementlist() {
			return getRuleContext(OpttypedtableelementlistContext.class,0);
		}
		public PartitionboundspecContext partitionboundspec() {
			return getRuleContext(PartitionboundspecContext.class,0);
		}
		public CreateforeigntablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createforeigntablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateforeigntablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateforeigntablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateforeigntablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateforeigntablestmtContext createforeigntablestmt() throws RecognitionException {
		CreateforeigntablestmtContext _localctx = new CreateforeigntablestmtContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_createforeigntablestmt);
		try {
			setState(4115);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4059);
				match(CREATE);
				setState(4060);
				match(FOREIGN);
				setState(4061);
				match(TABLE);
				setState(4062);
				qualified_name();
				setState(4063);
				match(OPEN_PAREN);
				setState(4064);
				opttableelementlist();
				setState(4065);
				match(CLOSE_PAREN);
				setState(4066);
				optinherit();
				setState(4067);
				match(SERVER);
				setState(4068);
				name();
				setState(4069);
				create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4071);
				match(CREATE);
				setState(4072);
				match(FOREIGN);
				setState(4073);
				match(TABLE);
				setState(4074);
				match(IF_P);
				setState(4075);
				match(NOT);
				setState(4076);
				match(EXISTS);
				setState(4077);
				qualified_name();
				setState(4078);
				match(OPEN_PAREN);
				setState(4079);
				opttableelementlist();
				setState(4080);
				match(CLOSE_PAREN);
				setState(4081);
				optinherit();
				setState(4082);
				match(SERVER);
				setState(4083);
				name();
				setState(4084);
				create_generic_options();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4086);
				match(CREATE);
				setState(4087);
				match(FOREIGN);
				setState(4088);
				match(TABLE);
				setState(4089);
				qualified_name();
				setState(4090);
				match(PARTITION);
				setState(4091);
				match(OF);
				setState(4092);
				qualified_name();
				setState(4093);
				opttypedtableelementlist();
				setState(4094);
				partitionboundspec();
				setState(4095);
				match(SERVER);
				setState(4096);
				name();
				setState(4097);
				create_generic_options();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4099);
				match(CREATE);
				setState(4100);
				match(FOREIGN);
				setState(4101);
				match(TABLE);
				setState(4102);
				match(IF_P);
				setState(4103);
				match(NOT);
				setState(4104);
				match(EXISTS);
				setState(4105);
				qualified_name();
				setState(4106);
				match(PARTITION);
				setState(4107);
				match(OF);
				setState(4108);
				qualified_name();
				setState(4109);
				opttypedtableelementlist();
				setState(4110);
				partitionboundspec();
				setState(4111);
				match(SERVER);
				setState(4112);
				name();
				setState(4113);
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportforeignschemastmtContext extends ParserRuleContext {
		public TerminalNode IMPORT_P() { return getToken(PostgreSQLParser.IMPORT_P, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Import_qualificationContext import_qualification() {
			return getRuleContext(Import_qualificationContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public ImportforeignschemastmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importforeignschemastmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImportforeignschemastmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImportforeignschemastmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImportforeignschemastmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportforeignschemastmtContext importforeignschemastmt() throws RecognitionException {
		ImportforeignschemastmtContext _localctx = new ImportforeignschemastmtContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_importforeignschemastmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4117);
			match(IMPORT_P);
			setState(4118);
			match(FOREIGN);
			setState(4119);
			match(SCHEMA);
			setState(4120);
			name();
			setState(4121);
			import_qualification();
			setState(4122);
			match(FROM);
			setState(4123);
			match(SERVER);
			setState(4124);
			name();
			setState(4125);
			match(INTO);
			setState(4126);
			name();
			setState(4127);
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Import_qualification_typeContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public Import_qualification_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_import_qualification_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImport_qualification_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImport_qualification_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImport_qualification_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Import_qualification_typeContext import_qualification_type() throws RecognitionException {
		Import_qualification_typeContext _localctx = new Import_qualification_typeContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_import_qualification_type);
		try {
			setState(4132);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4129);
				match(LIMIT);
				setState(4130);
				match(TO);
				}
				break;
			case EXCEPT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4131);
				match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Import_qualificationContext extends ParserRuleContext {
		public Import_qualification_typeContext import_qualification_type() {
			return getRuleContext(Import_qualification_typeContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Import_qualificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_import_qualification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImport_qualification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImport_qualification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImport_qualification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Import_qualificationContext import_qualification() throws RecognitionException {
		Import_qualificationContext _localctx = new Import_qualificationContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_import_qualification);
		try {
			setState(4140);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXCEPT:
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4134);
				import_qualification_type();
				setState(4135);
				match(OPEN_PAREN);
				setState(4136);
				relation_expr_list(0);
				setState(4137);
				match(CLOSE_PAREN);
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateusermappingstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateusermappingstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createusermappingstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateusermappingstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateusermappingstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateusermappingstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateusermappingstmtContext createusermappingstmt() throws RecognitionException {
		CreateusermappingstmtContext _localctx = new CreateusermappingstmtContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_createusermappingstmt);
		try {
			setState(4163);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4142);
				match(CREATE);
				setState(4143);
				match(USER);
				setState(4144);
				match(MAPPING);
				setState(4145);
				match(FOR);
				setState(4146);
				auth_ident();
				setState(4147);
				match(SERVER);
				setState(4148);
				name();
				setState(4149);
				create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4151);
				match(CREATE);
				setState(4152);
				match(USER);
				setState(4153);
				match(MAPPING);
				setState(4154);
				match(IF_P);
				setState(4155);
				match(NOT);
				setState(4156);
				match(EXISTS);
				setState(4157);
				match(FOR);
				setState(4158);
				auth_ident();
				setState(4159);
				match(SERVER);
				setState(4160);
				name();
				setState(4161);
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auth_identContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Auth_identContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auth_ident; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAuth_ident(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAuth_ident(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAuth_ident(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auth_identContext auth_ident() throws RecognitionException {
		Auth_identContext _localctx = new Auth_identContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_auth_ident);
		try {
			setState(4167);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FETCH:
			case SESSION_USER:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4165);
				rolespec();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4166);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropusermappingstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropusermappingstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropusermappingstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropusermappingstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropusermappingstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropusermappingstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropusermappingstmtContext dropusermappingstmt() throws RecognitionException {
		DropusermappingstmtContext _localctx = new DropusermappingstmtContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_dropusermappingstmt);
		try {
			setState(4187);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4169);
				match(DROP);
				setState(4170);
				match(USER);
				setState(4171);
				match(MAPPING);
				setState(4172);
				match(FOR);
				setState(4173);
				auth_ident();
				setState(4174);
				match(SERVER);
				setState(4175);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4177);
				match(DROP);
				setState(4178);
				match(USER);
				setState(4179);
				match(MAPPING);
				setState(4180);
				match(IF_P);
				setState(4181);
				match(EXISTS);
				setState(4182);
				match(FOR);
				setState(4183);
				auth_ident();
				setState(4184);
				match(SERVER);
				setState(4185);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterusermappingstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public AlterusermappingstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterusermappingstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterusermappingstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterusermappingstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterusermappingstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterusermappingstmtContext alterusermappingstmt() throws RecognitionException {
		AlterusermappingstmtContext _localctx = new AlterusermappingstmtContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_alterusermappingstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4189);
			match(ALTER);
			setState(4190);
			match(USER);
			setState(4191);
			match(MAPPING);
			setState(4192);
			match(FOR);
			setState(4193);
			auth_ident();
			setState(4194);
			match(SERVER);
			setState(4195);
			name();
			setState(4196);
			alter_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatepolicystmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() {
			return getRuleContext(RowsecuritydefaultpermissiveContext.class,0);
		}
		public RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() {
			return getRuleContext(RowsecuritydefaultforcmdContext.class,0);
		}
		public RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() {
			return getRuleContext(RowsecuritydefaulttoroleContext.class,0);
		}
		public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return getRuleContext(RowsecurityoptionalexprContext.class,0);
		}
		public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return getRuleContext(RowsecurityoptionalwithcheckContext.class,0);
		}
		public CreatepolicystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createpolicystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatepolicystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatepolicystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatepolicystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatepolicystmtContext createpolicystmt() throws RecognitionException {
		CreatepolicystmtContext _localctx = new CreatepolicystmtContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_createpolicystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4198);
			match(CREATE);
			setState(4199);
			match(POLICY);
			setState(4200);
			name();
			setState(4201);
			match(ON);
			setState(4202);
			qualified_name();
			setState(4203);
			rowsecuritydefaultpermissive();
			setState(4204);
			rowsecuritydefaultforcmd();
			setState(4205);
			rowsecuritydefaulttorole();
			setState(4206);
			rowsecurityoptionalexpr();
			setState(4207);
			rowsecurityoptionalwithcheck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterpolicystmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() {
			return getRuleContext(RowsecurityoptionaltoroleContext.class,0);
		}
		public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return getRuleContext(RowsecurityoptionalexprContext.class,0);
		}
		public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return getRuleContext(RowsecurityoptionalwithcheckContext.class,0);
		}
		public AlterpolicystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterpolicystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterpolicystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterpolicystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterpolicystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterpolicystmtContext alterpolicystmt() throws RecognitionException {
		AlterpolicystmtContext _localctx = new AlterpolicystmtContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_alterpolicystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4209);
			match(ALTER);
			setState(4210);
			match(POLICY);
			setState(4211);
			name();
			setState(4212);
			match(ON);
			setState(4213);
			qualified_name();
			setState(4214);
			rowsecurityoptionaltorole();
			setState(4215);
			rowsecurityoptionalexpr();
			setState(4216);
			rowsecurityoptionalwithcheck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecurityoptionalexprContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecurityoptionalexpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecurityoptionalexpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecurityoptionalexpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecurityoptionalexpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecurityoptionalexprContext rowsecurityoptionalexpr() throws RecognitionException {
		RowsecurityoptionalexprContext _localctx = new RowsecurityoptionalexprContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_rowsecurityoptionalexpr);
		try {
			setState(4224);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(4218);
				match(USING);
				setState(4219);
				match(OPEN_PAREN);
				setState(4220);
				a_expr(0);
				setState(4221);
				match(CLOSE_PAREN);
				}
				break;
			case SEMI:
			case INTO:
			case WITH:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecurityoptionalwithcheckContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalwithcheckContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecurityoptionalwithcheck; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecurityoptionalwithcheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecurityoptionalwithcheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecurityoptionalwithcheck(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() throws RecognitionException {
		RowsecurityoptionalwithcheckContext _localctx = new RowsecurityoptionalwithcheckContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_rowsecurityoptionalwithcheck);
		try {
			setState(4233);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(4226);
				match(WITH);
				setState(4227);
				match(CHECK);
				setState(4228);
				match(OPEN_PAREN);
				setState(4229);
				a_expr(0);
				setState(4230);
				match(CLOSE_PAREN);
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecuritydefaulttoroleContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public RowsecuritydefaulttoroleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecuritydefaulttorole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecuritydefaulttorole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecuritydefaulttorole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecuritydefaulttorole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() throws RecognitionException {
		RowsecuritydefaulttoroleContext _localctx = new RowsecuritydefaulttoroleContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_rowsecuritydefaulttorole);
		try {
			setState(4238);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4235);
				match(TO);
				setState(4236);
				role_list(0);
				}
				break;
			case SEMI:
			case INTO:
			case USING:
			case WITH:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecurityoptionaltoroleContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public RowsecurityoptionaltoroleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecurityoptionaltorole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecurityoptionaltorole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecurityoptionaltorole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecurityoptionaltorole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() throws RecognitionException {
		RowsecurityoptionaltoroleContext _localctx = new RowsecurityoptionaltoroleContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_rowsecurityoptionaltorole);
		try {
			setState(4243);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4240);
				match(TO);
				setState(4241);
				role_list(0);
				}
				break;
			case SEMI:
			case INTO:
			case USING:
			case WITH:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecuritydefaultpermissiveContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RowsecuritydefaultpermissiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecuritydefaultpermissive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecuritydefaultpermissive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecuritydefaultpermissive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecuritydefaultpermissive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() throws RecognitionException {
		RowsecuritydefaultpermissiveContext _localctx = new RowsecuritydefaultpermissiveContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_rowsecuritydefaultpermissive);
		try {
			setState(4248);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4245);
				match(AS);
				setState(4246);
				identifier();
				}
				break;
			case SEMI:
			case FOR:
			case INTO:
			case TO:
			case USING:
			case WITH:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecuritydefaultforcmdContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Row_security_cmdContext row_security_cmd() {
			return getRuleContext(Row_security_cmdContext.class,0);
		}
		public RowsecuritydefaultforcmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecuritydefaultforcmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecuritydefaultforcmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecuritydefaultforcmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecuritydefaultforcmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() throws RecognitionException {
		RowsecuritydefaultforcmdContext _localctx = new RowsecuritydefaultforcmdContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_rowsecuritydefaultforcmd);
		try {
			setState(4253);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4250);
				match(FOR);
				setState(4251);
				row_security_cmd();
				}
				break;
			case SEMI:
			case INTO:
			case TO:
			case USING:
			case WITH:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_security_cmdContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public Row_security_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_security_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRow_security_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRow_security_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRow_security_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_security_cmdContext row_security_cmd() throws RecognitionException {
		Row_security_cmdContext _localctx = new Row_security_cmdContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_row_security_cmd);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4255);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateamstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Am_typeContext am_type() {
			return getRuleContext(Am_typeContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public CreateamstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createamstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateamstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateamstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateamstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateamstmtContext createamstmt() throws RecognitionException {
		CreateamstmtContext _localctx = new CreateamstmtContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_createamstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4257);
			match(CREATE);
			setState(4258);
			match(ACCESS);
			setState(4259);
			match(METHOD);
			setState(4260);
			name();
			setState(4261);
			match(TYPE_P);
			setState(4262);
			am_type();
			setState(4263);
			match(HANDLER);
			setState(4264);
			handler_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Am_typeContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Am_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_am_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAm_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAm_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAm_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Am_typeContext am_type() throws RecognitionException {
		Am_typeContext _localctx = new Am_typeContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_am_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4266);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatetrigstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TriggeractiontimeContext triggeractiontime() {
			return getRuleContext(TriggeractiontimeContext.class,0);
		}
		public TriggereventsContext triggerevents() {
			return getRuleContext(TriggereventsContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TriggerreferencingContext triggerreferencing() {
			return getRuleContext(TriggerreferencingContext.class,0);
		}
		public TriggerforspecContext triggerforspec() {
			return getRuleContext(TriggerforspecContext.class,0);
		}
		public TriggerwhenContext triggerwhen() {
			return getRuleContext(TriggerwhenContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public Function_or_procedureContext function_or_procedure() {
			return getRuleContext(Function_or_procedureContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TriggerfuncargsContext triggerfuncargs() {
			return getRuleContext(TriggerfuncargsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public OptconstrfromtableContext optconstrfromtable() {
			return getRuleContext(OptconstrfromtableContext.class,0);
		}
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public CreatetrigstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createtrigstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatetrigstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatetrigstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatetrigstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatetrigstmtContext createtrigstmt() throws RecognitionException {
		CreatetrigstmtContext _localctx = new CreatetrigstmtContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_createtrigstmt);
		try {
			setState(4306);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4268);
				match(CREATE);
				setState(4269);
				match(TRIGGER);
				setState(4270);
				name();
				setState(4271);
				triggeractiontime();
				setState(4272);
				triggerevents(0);
				setState(4273);
				match(ON);
				setState(4274);
				qualified_name();
				setState(4275);
				triggerreferencing();
				setState(4276);
				triggerforspec();
				setState(4277);
				triggerwhen();
				setState(4278);
				match(EXECUTE);
				setState(4279);
				function_or_procedure();
				setState(4280);
				func_name();
				setState(4281);
				match(OPEN_PAREN);
				setState(4282);
				triggerfuncargs(0);
				setState(4283);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4285);
				match(CREATE);
				setState(4286);
				match(CONSTRAINT);
				setState(4287);
				match(TRIGGER);
				setState(4288);
				name();
				setState(4289);
				match(AFTER);
				setState(4290);
				triggerevents(0);
				setState(4291);
				match(ON);
				setState(4292);
				qualified_name();
				setState(4293);
				optconstrfromtable();
				setState(4294);
				constraintattributespec(0);
				setState(4295);
				match(FOR);
				setState(4296);
				match(EACH);
				setState(4297);
				match(ROW);
				setState(4298);
				triggerwhen();
				setState(4299);
				match(EXECUTE);
				setState(4300);
				function_or_procedure();
				setState(4301);
				func_name();
				setState(4302);
				match(OPEN_PAREN);
				setState(4303);
				triggerfuncargs(0);
				setState(4304);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggeractiontimeContext extends ParserRuleContext {
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TriggeractiontimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggeractiontime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggeractiontime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggeractiontime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggeractiontime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggeractiontimeContext triggeractiontime() throws RecognitionException {
		TriggeractiontimeContext _localctx = new TriggeractiontimeContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_triggeractiontime);
		try {
			setState(4312);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4308);
				match(BEFORE);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4309);
				match(AFTER);
				}
				break;
			case INSTEAD:
				enterOuterAlt(_localctx, 3);
				{
				setState(4310);
				match(INSTEAD);
				setState(4311);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggereventsContext extends ParserRuleContext {
		public TriggeroneeventContext triggeroneevent() {
			return getRuleContext(TriggeroneeventContext.class,0);
		}
		public TriggereventsContext triggerevents() {
			return getRuleContext(TriggereventsContext.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TriggereventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerevents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerevents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerevents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerevents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggereventsContext triggerevents() throws RecognitionException {
		return triggerevents(0);
	}

	private TriggereventsContext triggerevents(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TriggereventsContext _localctx = new TriggereventsContext(_ctx, _parentState);
		TriggereventsContext _prevctx = _localctx;
		int _startState = 408;
		enterRecursionRule(_localctx, 408, RULE_triggerevents, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4315);
			triggeroneevent();
			}
			_ctx.stop = _input.LT(-1);
			setState(4322);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,162,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TriggereventsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_triggerevents);
					setState(4317);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4318);
					match(OR);
					setState(4319);
					triggeroneevent();
					}
					} 
				}
				setState(4324);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,162,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TriggeroneeventContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public TriggeroneeventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggeroneevent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggeroneevent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggeroneevent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggeroneevent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggeroneeventContext triggeroneevent() throws RecognitionException {
		TriggeroneeventContext _localctx = new TriggeroneeventContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_triggeroneevent);
		try {
			setState(4332);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4325);
				match(INSERT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4326);
				match(DELETE_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4327);
				match(UPDATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4328);
				match(UPDATE);
				setState(4329);
				match(OF);
				setState(4330);
				columnlist(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4331);
				match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerreferencingContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(PostgreSQLParser.REFERENCING, 0); }
		public TriggertransitionsContext triggertransitions() {
			return getRuleContext(TriggertransitionsContext.class,0);
		}
		public TriggerreferencingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerreferencing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerreferencing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerreferencing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerreferencing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerreferencingContext triggerreferencing() throws RecognitionException {
		TriggerreferencingContext _localctx = new TriggerreferencingContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_triggerreferencing);
		try {
			setState(4337);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFERENCING:
				enterOuterAlt(_localctx, 1);
				{
				setState(4334);
				match(REFERENCING);
				setState(4335);
				triggertransitions(0);
				}
				break;
			case FOR:
			case WHEN:
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggertransitionsContext extends ParserRuleContext {
		public TriggertransitionContext triggertransition() {
			return getRuleContext(TriggertransitionContext.class,0);
		}
		public TriggertransitionsContext triggertransitions() {
			return getRuleContext(TriggertransitionsContext.class,0);
		}
		public TriggertransitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggertransitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggertransitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggertransitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggertransitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggertransitionsContext triggertransitions() throws RecognitionException {
		return triggertransitions(0);
	}

	private TriggertransitionsContext triggertransitions(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TriggertransitionsContext _localctx = new TriggertransitionsContext(_ctx, _parentState);
		TriggertransitionsContext _prevctx = _localctx;
		int _startState = 414;
		enterRecursionRule(_localctx, 414, RULE_triggertransitions, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4340);
			triggertransition();
			}
			_ctx.stop = _input.LT(-1);
			setState(4346);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,165,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TriggertransitionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_triggertransitions);
					setState(4342);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4343);
					triggertransition();
					}
					} 
				}
				setState(4348);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,165,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TriggertransitionContext extends ParserRuleContext {
		public TransitionoldornewContext transitionoldornew() {
			return getRuleContext(TransitionoldornewContext.class,0);
		}
		public TransitionrowortableContext transitionrowortable() {
			return getRuleContext(TransitionrowortableContext.class,0);
		}
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public TransitionrelnameContext transitionrelname() {
			return getRuleContext(TransitionrelnameContext.class,0);
		}
		public TriggertransitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggertransition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggertransition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggertransition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggertransition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggertransitionContext triggertransition() throws RecognitionException {
		TriggertransitionContext _localctx = new TriggertransitionContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_triggertransition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4349);
			transitionoldornew();
			setState(4350);
			transitionrowortable();
			setState(4351);
			opt_as();
			setState(4352);
			transitionrelname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionoldornewContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(PostgreSQLParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(PostgreSQLParser.OLD, 0); }
		public TransitionoldornewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionoldornew; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransitionoldornew(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransitionoldornew(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransitionoldornew(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionoldornewContext transitionoldornew() throws RecognitionException {
		TransitionoldornewContext _localctx = new TransitionoldornewContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_transitionoldornew);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4354);
			_la = _input.LA(1);
			if ( !(_la==NEW || _la==OLD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionrowortableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TransitionrowortableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionrowortable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransitionrowortable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransitionrowortable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransitionrowortable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionrowortableContext transitionrowortable() throws RecognitionException {
		TransitionrowortableContext _localctx = new TransitionrowortableContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_transitionrowortable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4356);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionrelnameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TransitionrelnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionrelname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransitionrelname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransitionrelname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransitionrelname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionrelnameContext transitionrelname() throws RecognitionException {
		TransitionrelnameContext _localctx = new TransitionrelnameContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_transitionrelname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4358);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerforspecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TriggerforopteachContext triggerforopteach() {
			return getRuleContext(TriggerforopteachContext.class,0);
		}
		public TriggerfortypeContext triggerfortype() {
			return getRuleContext(TriggerfortypeContext.class,0);
		}
		public TriggerforspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerforspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerforspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerforspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerforspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerforspecContext triggerforspec() throws RecognitionException {
		TriggerforspecContext _localctx = new TriggerforspecContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_triggerforspec);
		try {
			setState(4365);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4360);
				match(FOR);
				setState(4361);
				triggerforopteach();
				setState(4362);
				triggerfortype();
				}
				break;
			case WHEN:
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerforopteachContext extends ParserRuleContext {
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TriggerforopteachContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerforopteach; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerforopteach(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerforopteach(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerforopteach(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerforopteachContext triggerforopteach() throws RecognitionException {
		TriggerforopteachContext _localctx = new TriggerforopteachContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_triggerforopteach);
		try {
			setState(4369);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(4367);
				match(EACH);
				}
				break;
			case STATEMENT:
			case ROW:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerfortypeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLParser.STATEMENT, 0); }
		public TriggerfortypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerfortype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerfortype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerfortype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerfortype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerfortypeContext triggerfortype() throws RecognitionException {
		TriggerfortypeContext _localctx = new TriggerfortypeContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_triggerfortype);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4371);
			_la = _input.LA(1);
			if ( !(_la==STATEMENT || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerwhenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TriggerwhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerwhen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerwhen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerwhen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerwhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerwhenContext triggerwhen() throws RecognitionException {
		TriggerwhenContext _localctx = new TriggerwhenContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_triggerwhen);
		try {
			setState(4379);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4373);
				match(WHEN);
				setState(4374);
				match(OPEN_PAREN);
				setState(4375);
				a_expr(0);
				setState(4376);
				match(CLOSE_PAREN);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_or_procedureContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public Function_or_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_or_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunction_or_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunction_or_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunction_or_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_or_procedureContext function_or_procedure() throws RecognitionException {
		Function_or_procedureContext _localctx = new Function_or_procedureContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_function_or_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4381);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerfuncargsContext extends ParserRuleContext {
		public TriggerfuncargContext triggerfuncarg() {
			return getRuleContext(TriggerfuncargContext.class,0);
		}
		public TriggerfuncargsContext triggerfuncargs() {
			return getRuleContext(TriggerfuncargsContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TriggerfuncargsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerfuncargs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerfuncargs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerfuncargs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerfuncargs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerfuncargsContext triggerfuncargs() throws RecognitionException {
		return triggerfuncargs(0);
	}

	private TriggerfuncargsContext triggerfuncargs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TriggerfuncargsContext _localctx = new TriggerfuncargsContext(_ctx, _parentState);
		TriggerfuncargsContext _prevctx = _localctx;
		int _startState = 434;
		enterRecursionRule(_localctx, 434, RULE_triggerfuncargs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4386);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(4384);
				triggerfuncarg();
				}
				break;
			case 2:
				{
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4393);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TriggerfuncargsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_triggerfuncargs);
					setState(4388);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4389);
					match(COMMA);
					setState(4390);
					triggerfuncarg();
					}
					} 
				}
				setState(4395);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TriggerfuncargContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TriggerfuncargContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerfuncarg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerfuncarg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerfuncarg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerfuncarg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerfuncargContext triggerfuncarg() throws RecognitionException {
		TriggerfuncargContext _localctx = new TriggerfuncargContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_triggerfuncarg);
		try {
			setState(4400);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Integral:
				enterOuterAlt(_localctx, 1);
				{
				setState(4396);
				iconst();
				}
				break;
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(4397);
				fconst();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 3);
				{
				setState(4398);
				sconst();
				}
				break;
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4399);
				collabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptconstrfromtableContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptconstrfromtableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optconstrfromtable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptconstrfromtable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptconstrfromtable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptconstrfromtable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptconstrfromtableContext optconstrfromtable() throws RecognitionException {
		OptconstrfromtableContext _localctx = new OptconstrfromtableContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_optconstrfromtable);
		try {
			setState(4405);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4402);
				match(FROM);
				setState(4403);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintattributespecContext extends ParserRuleContext {
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public ConstraintattributeElemContext constraintattributeElem() {
			return getRuleContext(ConstraintattributeElemContext.class,0);
		}
		public ConstraintattributespecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintattributespec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintattributespec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintattributespec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintattributespec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintattributespecContext constraintattributespec() throws RecognitionException {
		return constraintattributespec(0);
	}

	private ConstraintattributespecContext constraintattributespec(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ConstraintattributespecContext _localctx = new ConstraintattributespecContext(_ctx, _parentState);
		ConstraintattributespecContext _prevctx = _localctx;
		int _startState = 440;
		enterRecursionRule(_localctx, 440, RULE_constraintattributespec, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(4412);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,173,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConstraintattributespecContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_constraintattributespec);
					setState(4408);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4409);
					constraintattributeElem();
					}
					} 
				}
				setState(4414);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,173,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ConstraintattributeElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public ConstraintattributeElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintattributeElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintattributeElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintattributeElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintattributeElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintattributeElemContext constraintattributeElem() throws RecognitionException {
		ConstraintattributeElemContext _localctx = new ConstraintattributeElemContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_constraintattributeElem);
		try {
			setState(4426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4415);
				match(NOT);
				setState(4416);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4417);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4418);
				match(INITIALLY);
				setState(4419);
				match(IMMEDIATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4420);
				match(INITIALLY);
				setState(4421);
				match(DEFERRED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4422);
				match(NOT);
				setState(4423);
				match(VALID);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4424);
				match(NO);
				setState(4425);
				match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateeventtrigstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public Function_or_procedureContext function_or_procedure() {
			return getRuleContext(Function_or_procedureContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Event_trigger_when_listContext event_trigger_when_list() {
			return getRuleContext(Event_trigger_when_listContext.class,0);
		}
		public CreateeventtrigstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createeventtrigstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateeventtrigstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateeventtrigstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateeventtrigstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateeventtrigstmtContext createeventtrigstmt() throws RecognitionException {
		CreateeventtrigstmtContext _localctx = new CreateeventtrigstmtContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_createeventtrigstmt);
		try {
			setState(4454);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4428);
				match(CREATE);
				setState(4429);
				match(EVENT);
				setState(4430);
				match(TRIGGER);
				setState(4431);
				name();
				setState(4432);
				match(ON);
				setState(4433);
				collabel();
				setState(4434);
				match(EXECUTE);
				setState(4435);
				function_or_procedure();
				setState(4436);
				func_name();
				setState(4437);
				match(OPEN_PAREN);
				setState(4438);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4440);
				match(CREATE);
				setState(4441);
				match(EVENT);
				setState(4442);
				match(TRIGGER);
				setState(4443);
				name();
				setState(4444);
				match(ON);
				setState(4445);
				collabel();
				setState(4446);
				match(WHEN);
				setState(4447);
				event_trigger_when_list(0);
				setState(4448);
				match(EXECUTE);
				setState(4449);
				function_or_procedure();
				setState(4450);
				func_name();
				setState(4451);
				match(OPEN_PAREN);
				setState(4452);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_trigger_when_listContext extends ParserRuleContext {
		public Event_trigger_when_itemContext event_trigger_when_item() {
			return getRuleContext(Event_trigger_when_itemContext.class,0);
		}
		public Event_trigger_when_listContext event_trigger_when_list() {
			return getRuleContext(Event_trigger_when_listContext.class,0);
		}
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public Event_trigger_when_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_trigger_when_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent_trigger_when_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent_trigger_when_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent_trigger_when_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_trigger_when_listContext event_trigger_when_list() throws RecognitionException {
		return event_trigger_when_list(0);
	}

	private Event_trigger_when_listContext event_trigger_when_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Event_trigger_when_listContext _localctx = new Event_trigger_when_listContext(_ctx, _parentState);
		Event_trigger_when_listContext _prevctx = _localctx;
		int _startState = 446;
		enterRecursionRule(_localctx, 446, RULE_event_trigger_when_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4457);
			event_trigger_when_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(4464);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,176,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Event_trigger_when_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_event_trigger_when_list);
					setState(4459);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4460);
					match(AND);
					setState(4461);
					event_trigger_when_item();
					}
					} 
				}
				setState(4466);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,176,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Event_trigger_when_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Event_trigger_value_listContext event_trigger_value_list() {
			return getRuleContext(Event_trigger_value_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Event_trigger_when_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_trigger_when_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent_trigger_when_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent_trigger_when_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent_trigger_when_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_trigger_when_itemContext event_trigger_when_item() throws RecognitionException {
		Event_trigger_when_itemContext _localctx = new Event_trigger_when_itemContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_event_trigger_when_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4467);
			colid();
			setState(4468);
			match(IN_P);
			setState(4469);
			match(OPEN_PAREN);
			setState(4470);
			event_trigger_value_list(0);
			setState(4471);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_trigger_value_listContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Event_trigger_value_listContext event_trigger_value_list() {
			return getRuleContext(Event_trigger_value_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Event_trigger_value_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_trigger_value_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent_trigger_value_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent_trigger_value_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent_trigger_value_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_trigger_value_listContext event_trigger_value_list() throws RecognitionException {
		return event_trigger_value_list(0);
	}

	private Event_trigger_value_listContext event_trigger_value_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Event_trigger_value_listContext _localctx = new Event_trigger_value_listContext(_ctx, _parentState);
		Event_trigger_value_listContext _prevctx = _localctx;
		int _startState = 450;
		enterRecursionRule(_localctx, 450, RULE_event_trigger_value_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4474);
			sconst();
			}
			_ctx.stop = _input.LT(-1);
			setState(4481);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,177,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Event_trigger_value_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_event_trigger_value_list);
					setState(4476);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4477);
					match(COMMA);
					setState(4478);
					sconst();
					}
					} 
				}
				setState(4483);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,177,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AltereventtrigstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Enable_triggerContext enable_trigger() {
			return getRuleContext(Enable_triggerContext.class,0);
		}
		public AltereventtrigstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altereventtrigstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltereventtrigstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltereventtrigstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltereventtrigstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltereventtrigstmtContext altereventtrigstmt() throws RecognitionException {
		AltereventtrigstmtContext _localctx = new AltereventtrigstmtContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_altereventtrigstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4484);
			match(ALTER);
			setState(4485);
			match(EVENT);
			setState(4486);
			match(TRIGGER);
			setState(4487);
			name();
			setState(4488);
			enable_trigger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enable_triggerContext extends ParserRuleContext {
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public Enable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEnable_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEnable_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEnable_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enable_triggerContext enable_trigger() throws RecognitionException {
		Enable_triggerContext _localctx = new Enable_triggerContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_enable_trigger);
		try {
			setState(4496);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4490);
				match(ENABLE_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4491);
				match(ENABLE_P);
				setState(4492);
				match(REPLICA);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4493);
				match(ENABLE_P);
				setState(4494);
				match(ALWAYS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4495);
				match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateassertionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSQLParser.ASSERTION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public CreateassertionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createassertionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateassertionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateassertionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateassertionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateassertionstmtContext createassertionstmt() throws RecognitionException {
		CreateassertionstmtContext _localctx = new CreateassertionstmtContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_createassertionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4498);
			match(CREATE);
			setState(4499);
			match(ASSERTION);
			setState(4500);
			any_name();
			setState(4501);
			match(CHECK);
			setState(4502);
			match(OPEN_PAREN);
			setState(4503);
			a_expr(0);
			setState(4504);
			match(CLOSE_PAREN);
			setState(4505);
			constraintattributespec(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Old_aggr_definitionContext old_aggr_definition() {
			return getRuleContext(Old_aggr_definitionContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public List<Any_operatorContext> any_operator() {
			return getRuleContexts(Any_operatorContext.class);
		}
		public Any_operatorContext any_operator(int i) {
			return getRuleContext(Any_operatorContext.class,i);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public OpttablefuncelementlistContext opttablefuncelementlist() {
			return getRuleContext(OpttablefuncelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode ENUM_P() { return getToken(PostgreSQLParser.ENUM_P, 0); }
		public Opt_enum_val_listContext opt_enum_val_list() {
			return getRuleContext(Opt_enum_val_listContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public DefinestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefinestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefinestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefinestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinestmtContext definestmt() throws RecognitionException {
		DefinestmtContext _localctx = new DefinestmtContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_definestmt);
		int _la;
		try {
			setState(4617);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4507);
				match(CREATE);
				setState(4508);
				opt_or_replace();
				setState(4509);
				match(AGGREGATE);
				setState(4510);
				func_name();
				setState(4511);
				aggr_args();
				setState(4512);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4514);
				match(CREATE);
				setState(4515);
				opt_or_replace();
				setState(4516);
				match(AGGREGATE);
				setState(4517);
				func_name();
				setState(4518);
				old_aggr_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4520);
				match(CREATE);
				setState(4521);
				match(OPERATOR);
				setState(4523); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4522);
					any_operator();
					}
					}
					setState(4525); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << EQUAL) | (1L << AMPERSAND) | (1L << PLUS) | (1L << MINUS) | (1L << SLASH) | (1L << CARET) | (1L << LT) | (1L << GT) | (1L << LESS_LESS) | (1L << GREATER_GREATER) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << NOT_EQUALS) | (1L << NOT_EQUALS_1) | (1L << PERCENT) | (1L << BITWISE_OR) | (1L << BITWISE_XOR) | (1L << BITWISE_NOT) | (1L << SQUARE_ROOT) | (1L << CUBIC_ROOT) | (1L << FACTORIAL) | (1L << PREFIX_FACTORIAL) | (1L << ABSOLUTE) | (1L << TEXT_PATTERN1) | (1L << TEXT_PATTERN2) | (1L << TEXT_PATTERN3) | (1L << TEXT_PATTERN4) | (1L << CONTAINS) | (1L << IS_CONTAINS) | (1L << OVERLAP) | (1L << CONCAT) | (1L << LENGTH) | (1L << CENTER) | (1L << CLOSET_POINT) | (1L << DISTANT) | (1L << EXTEND_RIGHT) | (1L << EXTEND_LEFT) | (1L << IS_STRICTLY_BELOW) | (1L << IS_STRICTLY_ABOVE) | (1L << EXTEND_ABOVE) | (1L << EXTEND_BELOW) | (1L << IS_BELOW) | (1L << IS_ABOVE) | (1L << INTERSECTION) | (1L << IS_HORIZON) | (1L << IS_VERTICAL) | (1L << IS_PERPENDICULAR))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (IS_PARALLEL - 64)) | (1L << (SAME - 64)) | (1L << (AND - 64)) | (1L << (ARRAY - 64)) | (1L << (COLLATE - 64)) | (1L << (COLUMN - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DO - 64)) | (1L << (FETCH - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (TABLE - 128)) | (1L << (IS - 128)) | (1L << (OUTER_P - 128)) | (1L << (OVER - 128)) | (1L << (ABORT_P - 128)) | (1L << (ABSOLUTE_P - 128)) | (1L << (ACCESS - 128)) | (1L << (ACTION - 128)) | (1L << (ADD_P - 128)) | (1L << (ADMIN - 128)) | (1L << (AFTER - 128)) | (1L << (AGGREGATE - 128)) | (1L << (ALSO - 128)) | (1L << (ALTER - 128)) | (1L << (ALWAYS - 128)) | (1L << (ASSERTION - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (AT - 128)) | (1L << (ATTRIBUTE - 128)) | (1L << (BACKWARD - 128)) | (1L << (BEFORE - 128)) | (1L << (BEGIN_P - 128)) | (1L << (BY - 128)) | (1L << (CACHE - 128)) | (1L << (CALLED - 128)) | (1L << (CASCADE - 128)) | (1L << (CASCADED - 128)) | (1L << (CHAIN - 128)) | (1L << (CHARACTERISTICS - 128)) | (1L << (CHECKPOINT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (CLASS - 192)) | (1L << (CLOSE - 192)) | (1L << (CLUSTER - 192)) | (1L << (COMMENT - 192)) | (1L << (COMMENTS - 192)) | (1L << (COMMIT - 192)) | (1L << (COMMITTED - 192)) | (1L << (CONFIGURATION - 192)) | (1L << (CONNECTION - 192)) | (1L << (CONSTRAINTS - 192)) | (1L << (CONTENT_P - 192)) | (1L << (CONTINUE_P - 192)) | (1L << (CONVERSION_P - 192)) | (1L << (COPY - 192)) | (1L << (COST - 192)) | (1L << (CSV - 192)) | (1L << (CURSOR - 192)) | (1L << (CYCLE - 192)) | (1L << (DATA_P - 192)) | (1L << (DATABASE - 192)) | (1L << (DAY_P - 192)) | (1L << (DEALLOCATE - 192)) | (1L << (DECLARE - 192)) | (1L << (DEFAULTS - 192)) | (1L << (DEFERRED - 192)) | (1L << (DEFINER - 192)) | (1L << (DELETE_P - 192)) | (1L << (DELIMITER - 192)) | (1L << (DELIMITERS - 192)) | (1L << (DICTIONARY - 192)) | (1L << (DISABLE_P - 192)) | (1L << (DISCARD - 192)) | (1L << (DOCUMENT_P - 192)) | (1L << (DOMAIN_P - 192)) | (1L << (DOUBLE_P - 192)) | (1L << (DROP - 192)) | (1L << (EACH - 192)) | (1L << (ENABLE_P - 192)) | (1L << (ENCODING - 192)) | (1L << (ENCRYPTED - 192)) | (1L << (ENUM_P - 192)) | (1L << (ESCAPE - 192)) | (1L << (EVENT - 192)) | (1L << (EXCLUDE - 192)) | (1L << (EXCLUDING - 192)) | (1L << (EXCLUSIVE - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXPLAIN - 192)) | (1L << (EXTENSION - 192)) | (1L << (EXTERNAL - 192)) | (1L << (FAMILY - 192)) | (1L << (FIRST_P - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FORCE - 192)) | (1L << (FORWARD - 192)) | (1L << (FUNCTION - 192)) | (1L << (FUNCTIONS - 192)) | (1L << (GLOBAL - 192)) | (1L << (GRANTED - 192)) | (1L << (HANDLER - 192)) | (1L << (HEADER_P - 192)) | (1L << (HOLD - 192)) | (1L << (HOUR_P - 192)) | (1L << (IDENTITY_P - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (IF_P - 256)) | (1L << (IMMEDIATE - 256)) | (1L << (IMMUTABLE - 256)) | (1L << (IMPLICIT_P - 256)) | (1L << (INCLUDING - 256)) | (1L << (INCREMENT - 256)) | (1L << (INDEX - 256)) | (1L << (INDEXES - 256)) | (1L << (INHERIT - 256)) | (1L << (INHERITS - 256)) | (1L << (INLINE_P - 256)) | (1L << (INSENSITIVE - 256)) | (1L << (INSERT - 256)) | (1L << (INSTEAD - 256)) | (1L << (INVOKER - 256)) | (1L << (ISOLATION - 256)) | (1L << (KEY - 256)) | (1L << (LABEL - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE_P - 256)) | (1L << (LAST_P - 256)) | (1L << (LEAKPROOF - 256)) | (1L << (LEVEL - 256)) | (1L << (LISTEN - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCATION - 256)) | (1L << (LOCK_P - 256)) | (1L << (MAPPING - 256)) | (1L << (MATCH - 256)) | (1L << (MATERIALIZED - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MINUTE_P - 256)) | (1L << (MINVALUE - 256)) | (1L << (MODE - 256)) | (1L << (MONTH_P - 256)) | (1L << (MOVE - 256)) | (1L << (NAME_P - 256)) | (1L << (NAMES - 256)) | (1L << (NEXT - 256)) | (1L << (NO - 256)) | (1L << (NOTHING - 256)) | (1L << (NOTIFY - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULLS_P - 256)) | (1L << (OBJECT_P - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OIDS - 256)) | (1L << (OPERATOR - 256)) | (1L << (OPTION - 256)) | (1L << (OPTIONS - 256)) | (1L << (OWNED - 256)) | (1L << (OWNER - 256)) | (1L << (PARSER - 256)) | (1L << (PARTIAL - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PASSWORD - 256)) | (1L << (PLANS - 256)) | (1L << (PRECEDING - 256)) | (1L << (PREPARE - 256)) | (1L << (PREPARED - 256)) | (1L << (PRESERVE - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRIOR - 320)) | (1L << (PRIVILEGES - 320)) | (1L << (PROCEDURAL - 320)) | (1L << (PROCEDURE - 320)) | (1L << (PROGRAM - 320)) | (1L << (QUOTE - 320)) | (1L << (RANGE - 320)) | (1L << (READ - 320)) | (1L << (REASSIGN - 320)) | (1L << (RECHECK - 320)) | (1L << (RECURSIVE - 320)) | (1L << (REF - 320)) | (1L << (REFRESH - 320)) | (1L << (REINDEX - 320)) | (1L << (RELATIVE_P - 320)) | (1L << (RELEASE - 320)) | (1L << (RENAME - 320)) | (1L << (REPEATABLE - 320)) | (1L << (REPLACE - 320)) | (1L << (REPLICA - 320)) | (1L << (RESET - 320)) | (1L << (RESTART - 320)) | (1L << (RESTRICT - 320)) | (1L << (RETURNS - 320)) | (1L << (REVOKE - 320)) | (1L << (ROLE - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROWS - 320)) | (1L << (RULE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCROLL - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND_P - 320)) | (1L << (SECURITY - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENCES - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERVER - 320)) | (1L << (SESSION - 320)) | (1L << (SET - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SIMPLE - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (STABLE - 320)) | (1L << (STANDALONE_P - 320)) | (1L << (START - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATISTICS - 320)) | (1L << (STDIN - 320)) | (1L << (STDOUT - 320)) | (1L << (STORAGE - 320)) | (1L << (STRICT_P - 320)) | (1L << (STRIP_P - 320)) | (1L << (SYSID - 320)) | (1L << (SYSTEM_P - 320)) | (1L << (TABLES - 320)) | (1L << (TABLESPACE - 320)) | (1L << (TEMP - 320)) | (1L << (TEMPLATE - 320)) | (1L << (TEMPORARY - 320)) | (1L << (TEXT_P - 320)) | (1L << (TRANSACTION - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (TRIGGER - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TRUSTED - 384)) | (1L << (TYPE_P - 384)) | (1L << (TYPES_P - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNCOMMITTED - 384)) | (1L << (UNENCRYPTED - 384)) | (1L << (UNKNOWN - 384)) | (1L << (UNLISTEN - 384)) | (1L << (UNLOGGED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (VACUUM - 384)) | (1L << (VALID - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALIDATOR - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION_P - 384)) | (1L << (VIEW - 384)) | (1L << (VOLATILE - 384)) | (1L << (WHITESPACE_P - 384)) | (1L << (WITHOUT - 384)) | (1L << (WORK - 384)) | (1L << (WRAPPER - 384)) | (1L << (WRITE - 384)) | (1L << (XML_P - 384)) | (1L << (YEAR_P - 384)) | (1L << (YES_P - 384)) | (1L << (ZONE - 384)) | (1L << (BETWEEN - 384)) | (1L << (BIGINT - 384)) | (1L << (BIT - 384)) | (1L << (BOOLEAN_P - 384)) | (1L << (CHAR_P - 384)) | (1L << (CHARACTER - 384)) | (1L << (COALESCE - 384)) | (1L << (DEC - 384)) | (1L << (DECIMAL_P - 384)) | (1L << (EXISTS - 384)) | (1L << (EXTRACT - 384)) | (1L << (FLOAT_P - 384)) | (1L << (GREATEST - 384)) | (1L << (INOUT - 384)) | (1L << (INT_P - 384)) | (1L << (INTEGER - 384)) | (1L << (INTERVAL - 384)) | (1L << (LEAST - 384)) | (1L << (NATIONAL - 384)) | (1L << (NCHAR - 384)) | (1L << (NONE - 384)) | (1L << (NULLIF - 384)) | (1L << (NUMERIC - 384)) | (1L << (OVERLAY - 384)) | (1L << (POSITION - 384)) | (1L << (PRECISION - 384)) | (1L << (REAL - 384)) | (1L << (ROW - 384)) | (1L << (SETOF - 384)) | (1L << (SMALLINT - 384)) | (1L << (SUBSTRING - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TREAT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (TRIM - 448)) | (1L << (VALUES - 448)) | (1L << (VARCHAR - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCONCAT - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (CALL - 448)) | (1L << (CURRENT_P - 448)) | (1L << (CATALOG_P - 448)) | (1L << (ATTACH - 448)) | (1L << (DETACH - 448)) | (1L << (EXPRESSION - 448)) | (1L << (GENERATED - 448)) | (1L << (LOGGED - 448)) | (1L << (STORED - 448)) | (1L << (INCLUDE - 448)) | (1L << (ROUTINE - 448)) | (1L << (TRANSFORM - 448)) | (1L << (IMPORT_P - 448)) | (1L << (POLICY - 448)) | (1L << (METHOD - 448)) | (1L << (REFERENCING - 448)) | (1L << (NEW - 448)) | (1L << (OLD - 448)) | (1L << (VALUE_P - 448)) | (1L << (SUBSCRIPTION - 448)) | (1L << (PUBLICATION - 448)) | (1L << (OUT_P - 448)) | (1L << (ROUTINES - 448)) | (1L << (SCHEMAS - 448)) | (1L << (PROCEDURES - 448)) | (1L << (INPUT_P - 448)) | (1L << (SUPPORT - 448)) | (1L << (PARALLEL - 448)) | (1L << (SQL_P - 448)) | (1L << (DEPENDS - 448)) | (1L << (OVERRIDING - 448)) | (1L << (CONFLICT - 448)) | (1L << (SKIP_P - 448)) | (1L << (LOCKED - 448)) | (1L << (TIES - 448)) | (1L << (ROLLUP - 448)) | (1L << (CUBE - 448)) | (1L << (GROUPING - 448)) | (1L << (SETS - 448)) | (1L << (ORDINALITY - 448)) | (1L << (XMLTABLE - 448)) | (1L << (COLUMNS - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (ROWTYPE - 448)) | (1L << (NORMALIZED - 448)) | (1L << (WITHIN - 448)) | (1L << (FILTER - 448)) | (1L << (GROUPS - 448)) | (1L << (OTHERS - 448)) | (1L << (NFC - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (NFD - 512)) | (1L << (NFKC - 512)) | (1L << (NFKD - 512)) | (1L << (UESCAPE - 512)) | (1L << (VIEWS - 512)) | (1L << (NORMALIZE - 512)) | (1L << (DUMP - 512)) | (1L << (PRINT_STRICT_PARAMS - 512)) | (1L << (VARIABLE_CONFLICT - 512)) | (1L << (ERROR - 512)) | (1L << (USE_VARIABLE - 512)) | (1L << (USE_COLUMN - 512)) | (1L << (ALIAS - 512)) | (1L << (CONSTANT - 512)) | (1L << (PERFORM - 512)) | (1L << (GET - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (STACKED - 512)) | (1L << (ELSIF - 512)) | (1L << (REVERSE - 512)) | (1L << (SLICE - 512)) | (1L << (EXIT - 512)) | (1L << (RETURN - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (DEBUG - 512)) | (1L << (LOG - 512)) | (1L << (INFO - 512)) | (1L << (NOTICE - 512)) | (1L << (WARNING - 512)) | (1L << (EXCEPTION - 512)) | (1L << (ASSERT - 512)) | (1L << (OPEN - 512)) | (1L << (Identifier - 512)) | (1L << (QuotedIdentifier - 512)) | (1L << (UnicodeQuotedIdentifier - 512)) | (1L << (PLSQLVARIABLENAME - 512)) | (1L << (PLSQLIDENTIFIER - 512)))) != 0) );
				setState(4527);
				definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4529);
				match(CREATE);
				setState(4530);
				match(TYPE_P);
				setState(4531);
				any_name();
				setState(4532);
				definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4534);
				match(CREATE);
				setState(4535);
				match(TYPE_P);
				setState(4536);
				any_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4537);
				match(CREATE);
				setState(4538);
				match(TYPE_P);
				setState(4539);
				any_name();
				setState(4540);
				match(AS);
				setState(4541);
				match(OPEN_PAREN);
				setState(4542);
				opttablefuncelementlist();
				setState(4543);
				match(CLOSE_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4545);
				match(CREATE);
				setState(4546);
				match(TYPE_P);
				setState(4547);
				any_name();
				setState(4548);
				match(AS);
				setState(4549);
				match(ENUM_P);
				setState(4550);
				match(OPEN_PAREN);
				setState(4551);
				opt_enum_val_list();
				setState(4552);
				match(CLOSE_PAREN);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4554);
				match(CREATE);
				setState(4555);
				match(TYPE_P);
				setState(4556);
				any_name();
				setState(4557);
				match(AS);
				setState(4558);
				match(RANGE);
				setState(4559);
				definition();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4561);
				match(CREATE);
				setState(4562);
				match(TEXT_P);
				setState(4563);
				match(SEARCH);
				setState(4564);
				match(PARSER);
				setState(4565);
				any_name();
				setState(4566);
				definition();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4568);
				match(CREATE);
				setState(4569);
				match(TEXT_P);
				setState(4570);
				match(SEARCH);
				setState(4571);
				match(DICTIONARY);
				setState(4572);
				any_name();
				setState(4573);
				definition();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4575);
				match(CREATE);
				setState(4576);
				match(TEXT_P);
				setState(4577);
				match(SEARCH);
				setState(4578);
				match(TEMPLATE);
				setState(4579);
				any_name();
				setState(4580);
				definition();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4582);
				match(CREATE);
				setState(4583);
				match(TEXT_P);
				setState(4584);
				match(SEARCH);
				setState(4585);
				match(CONFIGURATION);
				setState(4586);
				any_name();
				setState(4587);
				definition();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4589);
				match(CREATE);
				setState(4590);
				match(COLLATION);
				setState(4591);
				any_name();
				setState(4592);
				definition();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4594);
				match(CREATE);
				setState(4595);
				match(COLLATION);
				setState(4596);
				match(IF_P);
				setState(4597);
				match(NOT);
				setState(4598);
				match(EXISTS);
				setState(4599);
				any_name();
				setState(4600);
				definition();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4602);
				match(CREATE);
				setState(4603);
				match(COLLATION);
				setState(4604);
				any_name();
				setState(4605);
				match(FROM);
				setState(4606);
				any_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4608);
				match(CREATE);
				setState(4609);
				match(COLLATION);
				setState(4610);
				match(IF_P);
				setState(4611);
				match(NOT);
				setState(4612);
				match(EXISTS);
				setState(4613);
				any_name();
				setState(4614);
				match(FROM);
				setState(4615);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinitionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Def_listContext def_list() {
			return getRuleContext(Def_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinitionContext definition() throws RecognitionException {
		DefinitionContext _localctx = new DefinitionContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4619);
			match(OPEN_PAREN);
			setState(4620);
			def_list(0);
			setState(4621);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_listContext extends ParserRuleContext {
		public Def_elemContext def_elem() {
			return getRuleContext(Def_elemContext.class,0);
		}
		public Def_listContext def_list() {
			return getRuleContext(Def_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDef_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDef_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDef_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_listContext def_list() throws RecognitionException {
		return def_list(0);
	}

	private Def_listContext def_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Def_listContext _localctx = new Def_listContext(_ctx, _parentState);
		Def_listContext _prevctx = _localctx;
		int _startState = 462;
		enterRecursionRule(_localctx, 462, RULE_def_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4624);
			def_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(4631);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,181,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Def_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_def_list);
					setState(4626);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4627);
					match(COMMA);
					setState(4628);
					def_elem();
					}
					} 
				}
				setState(4633);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,181,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Def_elemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Def_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDef_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDef_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDef_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_elemContext def_elem() throws RecognitionException {
		Def_elemContext _localctx = new Def_elemContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_def_elem);
		try {
			setState(4639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4634);
				collabel();
				setState(4635);
				match(EQUAL);
				setState(4636);
				def_arg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4638);
				collabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_argContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public List<Qual_all_opContext> qual_all_op() {
			return getRuleContexts(Qual_all_opContext.class);
		}
		public Qual_all_opContext qual_all_op(int i) {
			return getRuleContext(Qual_all_opContext.class,i);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Def_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDef_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDef_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDef_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_argContext def_arg() throws RecognitionException {
		Def_argContext _localctx = new Def_argContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_def_arg);
		try {
			int _alt;
			setState(4651);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4641);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4642);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4644); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4643);
						qual_all_op();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4646); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,183,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4648);
				numericonly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4649);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4650);
				match(NONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_definitionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Old_aggr_listContext old_aggr_list() {
			return getRuleContext(Old_aggr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Old_aggr_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOld_aggr_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOld_aggr_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOld_aggr_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_definitionContext old_aggr_definition() throws RecognitionException {
		Old_aggr_definitionContext _localctx = new Old_aggr_definitionContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_old_aggr_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4653);
			match(OPEN_PAREN);
			setState(4654);
			old_aggr_list(0);
			setState(4655);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_listContext extends ParserRuleContext {
		public Old_aggr_elemContext old_aggr_elem() {
			return getRuleContext(Old_aggr_elemContext.class,0);
		}
		public Old_aggr_listContext old_aggr_list() {
			return getRuleContext(Old_aggr_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Old_aggr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOld_aggr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOld_aggr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOld_aggr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_listContext old_aggr_list() throws RecognitionException {
		return old_aggr_list(0);
	}

	private Old_aggr_listContext old_aggr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Old_aggr_listContext _localctx = new Old_aggr_listContext(_ctx, _parentState);
		Old_aggr_listContext _prevctx = _localctx;
		int _startState = 470;
		enterRecursionRule(_localctx, 470, RULE_old_aggr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4658);
			old_aggr_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(4665);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,185,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Old_aggr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_old_aggr_list);
					setState(4660);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4661);
					match(COMMA);
					setState(4662);
					old_aggr_elem();
					}
					} 
				}
				setState(4667);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,185,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Old_aggr_elemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Old_aggr_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOld_aggr_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOld_aggr_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOld_aggr_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_elemContext old_aggr_elem() throws RecognitionException {
		Old_aggr_elemContext _localctx = new Old_aggr_elemContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_old_aggr_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4668);
			identifier();
			setState(4669);
			match(EQUAL);
			setState(4670);
			def_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_enum_val_listContext extends ParserRuleContext {
		public Enum_val_listContext enum_val_list() {
			return getRuleContext(Enum_val_listContext.class,0);
		}
		public Opt_enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_enum_val_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_enum_val_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_enum_val_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_enum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_enum_val_listContext opt_enum_val_list() throws RecognitionException {
		Opt_enum_val_listContext _localctx = new Opt_enum_val_listContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_opt_enum_val_list);
		try {
			setState(4674);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(4672);
				enum_val_list(0);
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enum_val_listContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Enum_val_listContext enum_val_list() {
			return getRuleContext(Enum_val_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_val_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEnum_val_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEnum_val_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEnum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_val_listContext enum_val_list() throws RecognitionException {
		return enum_val_list(0);
	}

	private Enum_val_listContext enum_val_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Enum_val_listContext _localctx = new Enum_val_listContext(_ctx, _parentState);
		Enum_val_listContext _prevctx = _localctx;
		int _startState = 476;
		enterRecursionRule(_localctx, 476, RULE_enum_val_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4677);
			sconst();
			}
			_ctx.stop = _input.LT(-1);
			setState(4684);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,187,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Enum_val_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_enum_val_list);
					setState(4679);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4680);
					match(COMMA);
					setState(4681);
					sconst();
					}
					} 
				}
				setState(4686);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,187,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterenumstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Opt_if_not_existsContext opt_if_not_exists() {
			return getRuleContext(Opt_if_not_existsContext.class,0);
		}
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public AlterenumstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterenumstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterenumstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterenumstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterenumstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterenumstmtContext alterenumstmt() throws RecognitionException {
		AlterenumstmtContext _localctx = new AlterenumstmtContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_alterenumstmt);
		try {
			setState(4724);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4687);
				match(ALTER);
				setState(4688);
				match(TYPE_P);
				setState(4689);
				any_name();
				setState(4690);
				match(ADD_P);
				setState(4691);
				match(VALUE_P);
				setState(4692);
				opt_if_not_exists();
				setState(4693);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4695);
				match(ALTER);
				setState(4696);
				match(TYPE_P);
				setState(4697);
				any_name();
				setState(4698);
				match(ADD_P);
				setState(4699);
				match(VALUE_P);
				setState(4700);
				opt_if_not_exists();
				setState(4701);
				sconst();
				setState(4702);
				match(BEFORE);
				setState(4703);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4705);
				match(ALTER);
				setState(4706);
				match(TYPE_P);
				setState(4707);
				any_name();
				setState(4708);
				match(ADD_P);
				setState(4709);
				match(VALUE_P);
				setState(4710);
				opt_if_not_exists();
				setState(4711);
				sconst();
				setState(4712);
				match(AFTER);
				setState(4713);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4715);
				match(ALTER);
				setState(4716);
				match(TYPE_P);
				setState(4717);
				any_name();
				setState(4718);
				match(RENAME);
				setState(4719);
				match(VALUE_P);
				setState(4720);
				sconst();
				setState(4721);
				match(TO);
				setState(4722);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_if_not_existsContext extends ParserRuleContext {
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_if_not_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_if_not_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_if_not_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_if_not_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_if_not_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_if_not_existsContext opt_if_not_exists() throws RecognitionException {
		Opt_if_not_existsContext _localctx = new Opt_if_not_existsContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_opt_if_not_exists);
		try {
			setState(4730);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IF_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4726);
				match(IF_P);
				setState(4727);
				match(NOT);
				setState(4728);
				match(EXISTS);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateopclassstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_opfamilyContext opt_opfamily() {
			return getRuleContext(Opt_opfamilyContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public CreateopclassstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createopclassstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateopclassstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateopclassstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateopclassstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateopclassstmtContext createopclassstmt() throws RecognitionException {
		CreateopclassstmtContext _localctx = new CreateopclassstmtContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_createopclassstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4732);
			match(CREATE);
			setState(4733);
			match(OPERATOR);
			setState(4734);
			match(CLASS);
			setState(4735);
			any_name();
			setState(4736);
			opt_default();
			setState(4737);
			match(FOR);
			setState(4738);
			match(TYPE_P);
			setState(4739);
			typename();
			setState(4740);
			match(USING);
			setState(4741);
			name();
			setState(4742);
			opt_opfamily();
			setState(4743);
			match(AS);
			setState(4744);
			opclass_item_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_item_listContext extends ParserRuleContext {
		public Opclass_itemContext opclass_item() {
			return getRuleContext(Opclass_itemContext.class,0);
		}
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Opclass_item_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_item_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_item_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_item_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_item_listContext opclass_item_list() throws RecognitionException {
		return opclass_item_list(0);
	}

	private Opclass_item_listContext opclass_item_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opclass_item_listContext _localctx = new Opclass_item_listContext(_ctx, _parentState);
		Opclass_item_listContext _prevctx = _localctx;
		int _startState = 484;
		enterRecursionRule(_localctx, 484, RULE_opclass_item_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4747);
			opclass_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(4754);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opclass_item_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opclass_item_list);
					setState(4749);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4750);
					match(COMMA);
					setState(4751);
					opclass_item();
					}
					} 
				}
				setState(4756);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opclass_itemContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Opclass_purposeContext opclass_purpose() {
			return getRuleContext(Opclass_purposeContext.class,0);
		}
		public Opt_recheckContext opt_recheck() {
			return getRuleContext(Opt_recheckContext.class,0);
		}
		public List<Any_operatorContext> any_operator() {
			return getRuleContexts(Any_operatorContext.class);
		}
		public Any_operatorContext any_operator(int i) {
			return getRuleContext(Any_operatorContext.class,i);
		}
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opclass_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_itemContext opclass_item() throws RecognitionException {
		Opclass_itemContext _localctx = new Opclass_itemContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_opclass_item);
		try {
			int _alt;
			setState(4786);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4757);
				match(OPERATOR);
				setState(4758);
				iconst();
				setState(4760); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4759);
						any_operator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4762); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,191,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(4764);
				opclass_purpose();
				setState(4765);
				opt_recheck();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4767);
				match(OPERATOR);
				setState(4768);
				iconst();
				setState(4769);
				operator_with_argtypes();
				setState(4770);
				opclass_purpose();
				setState(4771);
				opt_recheck();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4773);
				match(FUNCTION);
				setState(4774);
				iconst();
				setState(4775);
				function_with_argtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4777);
				match(FUNCTION);
				setState(4778);
				iconst();
				setState(4779);
				match(OPEN_PAREN);
				setState(4780);
				type_list(0);
				setState(4781);
				match(CLOSE_PAREN);
				setState(4782);
				function_with_argtypes();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4784);
				match(STORAGE);
				setState(4785);
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_defaultContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Opt_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_defaultContext opt_default() throws RecognitionException {
		Opt_defaultContext _localctx = new Opt_defaultContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_opt_default);
		try {
			setState(4790);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4788);
				match(DEFAULT);
				}
				break;
			case FOR:
			case CONVERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_opfamilyContext extends ParserRuleContext {
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_opfamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_opfamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_opfamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_opfamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_opfamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_opfamilyContext opt_opfamily() throws RecognitionException {
		Opt_opfamilyContext _localctx = new Opt_opfamilyContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_opt_opfamily);
		try {
			setState(4795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FAMILY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4792);
				match(FAMILY);
				setState(4793);
				any_name();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_purposeContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opclass_purposeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_purpose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_purpose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_purpose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_purpose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_purposeContext opclass_purpose() throws RecognitionException {
		Opclass_purposeContext _localctx = new Opclass_purposeContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_opclass_purpose);
		try {
			setState(4804);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4797);
				match(FOR);
				setState(4798);
				match(SEARCH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4799);
				match(FOR);
				setState(4800);
				match(ORDER);
				setState(4801);
				match(BY);
				setState(4802);
				any_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_recheckContext extends ParserRuleContext {
		public TerminalNode RECHECK() { return getToken(PostgreSQLParser.RECHECK, 0); }
		public Opt_recheckContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_recheck; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_recheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_recheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_recheck(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_recheckContext opt_recheck() throws RecognitionException {
		Opt_recheckContext _localctx = new Opt_recheckContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_opt_recheck);
		try {
			setState(4808);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4806);
				match(RECHECK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateopfamilystmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateopfamilystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createopfamilystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateopfamilystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateopfamilystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateopfamilystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateopfamilystmtContext createopfamilystmt() throws RecognitionException {
		CreateopfamilystmtContext _localctx = new CreateopfamilystmtContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_createopfamilystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4810);
			match(CREATE);
			setState(4811);
			match(OPERATOR);
			setState(4812);
			match(FAMILY);
			setState(4813);
			any_name();
			setState(4814);
			match(USING);
			setState(4815);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlteropfamilystmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Opclass_drop_listContext opclass_drop_list() {
			return getRuleContext(Opclass_drop_listContext.class,0);
		}
		public AlteropfamilystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteropfamilystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteropfamilystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteropfamilystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteropfamilystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteropfamilystmtContext alteropfamilystmt() throws RecognitionException {
		AlteropfamilystmtContext _localctx = new AlteropfamilystmtContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_alteropfamilystmt);
		try {
			setState(4835);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4817);
				match(ALTER);
				setState(4818);
				match(OPERATOR);
				setState(4819);
				match(FAMILY);
				setState(4820);
				any_name();
				setState(4821);
				match(USING);
				setState(4822);
				name();
				setState(4823);
				match(ADD_P);
				setState(4824);
				opclass_item_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4826);
				match(ALTER);
				setState(4827);
				match(OPERATOR);
				setState(4828);
				match(FAMILY);
				setState(4829);
				any_name();
				setState(4830);
				match(USING);
				setState(4831);
				name();
				setState(4832);
				match(DROP);
				setState(4833);
				opclass_drop_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_drop_listContext extends ParserRuleContext {
		public Opclass_dropContext opclass_drop() {
			return getRuleContext(Opclass_dropContext.class,0);
		}
		public Opclass_drop_listContext opclass_drop_list() {
			return getRuleContext(Opclass_drop_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Opclass_drop_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_drop_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_drop_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_drop_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_drop_listContext opclass_drop_list() throws RecognitionException {
		return opclass_drop_list(0);
	}

	private Opclass_drop_listContext opclass_drop_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opclass_drop_listContext _localctx = new Opclass_drop_listContext(_ctx, _parentState);
		Opclass_drop_listContext _prevctx = _localctx;
		int _startState = 500;
		enterRecursionRule(_localctx, 500, RULE_opclass_drop_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4838);
			opclass_drop();
			}
			_ctx.stop = _input.LT(-1);
			setState(4845);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,198,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opclass_drop_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opclass_drop_list);
					setState(4840);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4841);
					match(COMMA);
					setState(4842);
					opclass_drop();
					}
					} 
				}
				setState(4847);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,198,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opclass_dropContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Opclass_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_dropContext opclass_drop() throws RecognitionException {
		Opclass_dropContext _localctx = new Opclass_dropContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_opclass_drop);
		try {
			setState(4860);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4848);
				match(OPERATOR);
				setState(4849);
				iconst();
				setState(4850);
				match(OPEN_PAREN);
				setState(4851);
				type_list(0);
				setState(4852);
				match(CLOSE_PAREN);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4854);
				match(FUNCTION);
				setState(4855);
				iconst();
				setState(4856);
				match(OPEN_PAREN);
				setState(4857);
				type_list(0);
				setState(4858);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropopclassstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropopclassstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropopclassstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropopclassstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropopclassstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropopclassstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropopclassstmtContext dropopclassstmt() throws RecognitionException {
		DropopclassstmtContext _localctx = new DropopclassstmtContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_dropopclassstmt);
		try {
			setState(4880);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4862);
				match(DROP);
				setState(4863);
				match(OPERATOR);
				setState(4864);
				match(CLASS);
				setState(4865);
				any_name();
				setState(4866);
				match(USING);
				setState(4867);
				name();
				setState(4868);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4870);
				match(DROP);
				setState(4871);
				match(OPERATOR);
				setState(4872);
				match(CLASS);
				setState(4873);
				match(IF_P);
				setState(4874);
				match(EXISTS);
				setState(4875);
				any_name();
				setState(4876);
				match(USING);
				setState(4877);
				name();
				setState(4878);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropopfamilystmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropopfamilystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropopfamilystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropopfamilystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropopfamilystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropopfamilystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropopfamilystmtContext dropopfamilystmt() throws RecognitionException {
		DropopfamilystmtContext _localctx = new DropopfamilystmtContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_dropopfamilystmt);
		try {
			setState(4900);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4882);
				match(DROP);
				setState(4883);
				match(OPERATOR);
				setState(4884);
				match(FAMILY);
				setState(4885);
				any_name();
				setState(4886);
				match(USING);
				setState(4887);
				name();
				setState(4888);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4890);
				match(DROP);
				setState(4891);
				match(OPERATOR);
				setState(4892);
				match(FAMILY);
				setState(4893);
				match(IF_P);
				setState(4894);
				match(EXISTS);
				setState(4895);
				any_name();
				setState(4896);
				match(USING);
				setState(4897);
				name();
				setState(4898);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropownedstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropownedstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropownedstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropownedstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropownedstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropownedstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropownedstmtContext dropownedstmt() throws RecognitionException {
		DropownedstmtContext _localctx = new DropownedstmtContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_dropownedstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4902);
			match(DROP);
			setState(4903);
			match(OWNED);
			setState(4904);
			match(BY);
			setState(4905);
			role_list(0);
			setState(4906);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReassignownedstmtContext extends ParserRuleContext {
		public TerminalNode REASSIGN() { return getToken(PostgreSQLParser.REASSIGN, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public ReassignownedstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reassignownedstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReassignownedstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReassignownedstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReassignownedstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReassignownedstmtContext reassignownedstmt() throws RecognitionException {
		ReassignownedstmtContext _localctx = new ReassignownedstmtContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_reassignownedstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4908);
			match(REASSIGN);
			setState(4909);
			match(OWNED);
			setState(4910);
			match(BY);
			setState(4911);
			role_list(0);
			setState(4912);
			match(TO);
			setState(4913);
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public Drop_type_nameContext drop_type_name() {
			return getRuleContext(Drop_type_nameContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return getRuleContext(Object_type_name_on_any_nameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Type_name_listContext type_name_list() {
			return getRuleContext(Type_name_listContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public DropstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropstmtContext dropstmt() throws RecognitionException {
		DropstmtContext _localctx = new DropstmtContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_dropstmt);
		try {
			setState(4993);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4915);
				match(DROP);
				setState(4916);
				object_type_any_name();
				setState(4917);
				match(IF_P);
				setState(4918);
				match(EXISTS);
				setState(4919);
				any_name_list(0);
				setState(4920);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4922);
				match(DROP);
				setState(4923);
				object_type_any_name();
				setState(4924);
				any_name_list(0);
				setState(4925);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4927);
				match(DROP);
				setState(4928);
				drop_type_name();
				setState(4929);
				match(IF_P);
				setState(4930);
				match(EXISTS);
				setState(4931);
				name_list(0);
				setState(4932);
				opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4934);
				match(DROP);
				setState(4935);
				drop_type_name();
				setState(4936);
				name_list(0);
				setState(4937);
				opt_drop_behavior();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4939);
				match(DROP);
				setState(4940);
				object_type_name_on_any_name();
				setState(4941);
				name();
				setState(4942);
				match(ON);
				setState(4943);
				any_name();
				setState(4944);
				opt_drop_behavior();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4946);
				match(DROP);
				setState(4947);
				object_type_name_on_any_name();
				setState(4948);
				match(IF_P);
				setState(4949);
				match(EXISTS);
				setState(4950);
				name();
				setState(4951);
				match(ON);
				setState(4952);
				any_name();
				setState(4953);
				opt_drop_behavior();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4955);
				match(DROP);
				setState(4956);
				match(TYPE_P);
				setState(4957);
				type_name_list(0);
				setState(4958);
				opt_drop_behavior();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4960);
				match(DROP);
				setState(4961);
				match(TYPE_P);
				setState(4962);
				match(IF_P);
				setState(4963);
				match(EXISTS);
				setState(4964);
				type_name_list(0);
				setState(4965);
				opt_drop_behavior();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4967);
				match(DROP);
				setState(4968);
				match(DOMAIN_P);
				setState(4969);
				type_name_list(0);
				setState(4970);
				opt_drop_behavior();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4972);
				match(DROP);
				setState(4973);
				match(DOMAIN_P);
				setState(4974);
				match(IF_P);
				setState(4975);
				match(EXISTS);
				setState(4976);
				type_name_list(0);
				setState(4977);
				opt_drop_behavior();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4979);
				match(DROP);
				setState(4980);
				match(INDEX);
				setState(4981);
				match(CONCURRENTLY);
				setState(4982);
				any_name_list(0);
				setState(4983);
				opt_drop_behavior();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4985);
				match(DROP);
				setState(4986);
				match(INDEX);
				setState(4987);
				match(CONCURRENTLY);
				setState(4988);
				match(IF_P);
				setState(4989);
				match(EXISTS);
				setState(4990);
				any_name_list(0);
				setState(4991);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_any_nameContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public Object_type_any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_any_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterObject_type_any_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitObject_type_any_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitObject_type_any_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_any_nameContext object_type_any_name() throws RecognitionException {
		Object_type_any_nameContext _localctx = new Object_type_any_nameContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_object_type_any_name);
		try {
			setState(5018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4995);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4996);
				match(SEQUENCE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4997);
				match(VIEW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4998);
				match(MATERIALIZED);
				setState(4999);
				match(VIEW);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5000);
				match(INDEX);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5001);
				match(FOREIGN);
				setState(5002);
				match(TABLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5003);
				match(COLLATION);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5004);
				match(CONVERSION_P);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5005);
				match(STATISTICS);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5006);
				match(TEXT_P);
				setState(5007);
				match(SEARCH);
				setState(5008);
				match(PARSER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5009);
				match(TEXT_P);
				setState(5010);
				match(SEARCH);
				setState(5011);
				match(DICTIONARY);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5012);
				match(TEXT_P);
				setState(5013);
				match(SEARCH);
				setState(5014);
				match(TEMPLATE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5015);
				match(TEXT_P);
				setState(5016);
				match(SEARCH);
				setState(5017);
				match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_nameContext extends ParserRuleContext {
		public Drop_type_nameContext drop_type_name() {
			return getRuleContext(Drop_type_nameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public Object_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterObject_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitObject_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitObject_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_nameContext object_type_name() throws RecognitionException {
		Object_type_nameContext _localctx = new Object_type_nameContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_object_type_name);
		try {
			setState(5025);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOREIGN:
			case ACCESS:
			case EVENT:
			case EXTENSION:
			case LANGUAGE:
			case PROCEDURAL:
			case SCHEMA:
			case SERVER:
			case PUBLICATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(5020);
				drop_type_name();
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5021);
				match(DATABASE);
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5022);
				match(ROLE);
				}
				break;
			case SUBSCRIPTION:
				enterOuterAlt(_localctx, 4);
				{
				setState(5023);
				match(SUBSCRIPTION);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5024);
				match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_type_nameContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public Drop_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_type_nameContext drop_type_name() throws RecognitionException {
		Drop_type_nameContext _localctx = new Drop_type_nameContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_drop_type_name);
		try {
			setState(5041);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5027);
				match(ACCESS);
				setState(5028);
				match(METHOD);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5029);
				match(EVENT);
				setState(5030);
				match(TRIGGER);
				}
				break;
			case EXTENSION:
				enterOuterAlt(_localctx, 3);
				{
				setState(5031);
				match(EXTENSION);
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 4);
				{
				setState(5032);
				match(FOREIGN);
				setState(5033);
				match(DATA_P);
				setState(5034);
				match(WRAPPER);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(5035);
				opt_procedural();
				setState(5036);
				match(LANGUAGE);
				}
				break;
			case PUBLICATION:
				enterOuterAlt(_localctx, 6);
				{
				setState(5038);
				match(PUBLICATION);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 7);
				{
				setState(5039);
				match(SCHEMA);
				}
				break;
			case SERVER:
				enterOuterAlt(_localctx, 8);
				{
				setState(5040);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_name_on_any_nameContext extends ParserRuleContext {
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public Object_type_name_on_any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_name_on_any_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterObject_type_name_on_any_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitObject_type_name_on_any_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitObject_type_name_on_any_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_name_on_any_nameContext object_type_name_on_any_name() throws RecognitionException {
		Object_type_name_on_any_nameContext _localctx = new Object_type_name_on_any_nameContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_object_type_name_on_any_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5043);
			_la = _input.LA(1);
			if ( !(_la==RULE || _la==TRIGGER || _la==POLICY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_name_listContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Any_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_name_listContext any_name_list() throws RecognitionException {
		return any_name_list(0);
	}

	private Any_name_listContext any_name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Any_name_listContext _localctx = new Any_name_listContext(_ctx, _parentState);
		Any_name_listContext _prevctx = _localctx;
		int _startState = 522;
		enterRecursionRule(_localctx, 522, RULE_any_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5046);
			any_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(5053);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,206,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Any_name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_any_name_list);
					setState(5048);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5049);
					match(COMMA);
					setState(5050);
					any_name();
					}
					} 
				}
				setState(5055);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,206,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Any_nameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_nameContext any_name() throws RecognitionException {
		Any_nameContext _localctx = new Any_nameContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_any_name);
		try {
			setState(5060);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5056);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5057);
				colid();
				setState(5058);
				attrs(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttrsContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Attr_nameContext attr_name() {
			return getRuleContext(Attr_nameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAttrs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAttrs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAttrs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrsContext attrs() throws RecognitionException {
		return attrs(0);
	}

	private AttrsContext attrs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AttrsContext _localctx = new AttrsContext(_ctx, _parentState);
		AttrsContext _prevctx = _localctx;
		int _startState = 526;
		enterRecursionRule(_localctx, 526, RULE_attrs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5063);
			match(DOT);
			setState(5064);
			attr_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(5071);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,208,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttrsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_attrs);
					setState(5066);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5067);
					match(DOT);
					setState(5068);
					attr_name();
					}
					} 
				}
				setState(5073);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,208,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Type_name_listContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Type_name_listContext type_name_list() {
			return getRuleContext(Type_name_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Type_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_name_listContext type_name_list() throws RecognitionException {
		return type_name_list(0);
	}

	private Type_name_listContext type_name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Type_name_listContext _localctx = new Type_name_listContext(_ctx, _parentState);
		Type_name_listContext _prevctx = _localctx;
		int _startState = 528;
		enterRecursionRule(_localctx, 528, RULE_type_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5075);
			typename();
			}
			_ctx.stop = _input.LT(-1);
			setState(5082);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,209,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Type_name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_type_name_list);
					setState(5077);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5078);
					match(COMMA);
					setState(5079);
					typename();
					}
					} 
				}
				setState(5084);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,209,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TruncatestmtContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_restart_seqsContext opt_restart_seqs() {
			return getRuleContext(Opt_restart_seqsContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TruncatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncatestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTruncatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTruncatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTruncatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncatestmtContext truncatestmt() throws RecognitionException {
		TruncatestmtContext _localctx = new TruncatestmtContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_truncatestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5085);
			match(TRUNCATE);
			setState(5086);
			opt_table();
			setState(5087);
			relation_expr_list(0);
			setState(5088);
			opt_restart_seqs();
			setState(5089);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_restart_seqsContext extends ParserRuleContext {
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public Opt_restart_seqsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restart_seqs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_restart_seqs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_restart_seqs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_restart_seqs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restart_seqsContext opt_restart_seqs() throws RecognitionException {
		Opt_restart_seqsContext _localctx = new Opt_restart_seqsContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_opt_restart_seqs);
		try {
			setState(5096);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTINUE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(5091);
				match(CONTINUE_P);
				setState(5092);
				match(IDENTITY_P);
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 2);
				{
				setState(5093);
				match(RESTART);
				setState(5094);
				match(IDENTITY_P);
				}
				break;
			case SEMI:
			case INTO:
			case CASCADE:
			case RESTRICT:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentstmtContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PostgreSQLParser.COMMENT, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLParser.ON, i);
		}
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public Comment_textContext comment_text() {
			return getRuleContext(Comment_textContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return getRuleContext(Object_type_name_on_any_nameContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CommentstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommentstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommentstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommentstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentstmtContext commentstmt() throws RecognitionException {
		CommentstmtContext _localctx = new CommentstmtContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_commentstmt);
		try {
			setState(5245);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5098);
				match(COMMENT);
				setState(5099);
				match(ON);
				setState(5100);
				object_type_any_name();
				setState(5101);
				any_name();
				setState(5102);
				match(IS);
				setState(5103);
				comment_text();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5105);
				match(COMMENT);
				setState(5106);
				match(ON);
				setState(5107);
				match(COLUMN);
				setState(5108);
				any_name();
				setState(5109);
				match(IS);
				setState(5110);
				comment_text();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5112);
				match(COMMENT);
				setState(5113);
				match(ON);
				setState(5114);
				object_type_name();
				setState(5115);
				name();
				setState(5116);
				match(IS);
				setState(5117);
				comment_text();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5119);
				match(COMMENT);
				setState(5120);
				match(ON);
				setState(5121);
				match(TYPE_P);
				setState(5122);
				typename();
				setState(5123);
				match(IS);
				setState(5124);
				comment_text();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5126);
				match(COMMENT);
				setState(5127);
				match(ON);
				setState(5128);
				match(DOMAIN_P);
				setState(5129);
				typename();
				setState(5130);
				match(IS);
				setState(5131);
				comment_text();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5133);
				match(COMMENT);
				setState(5134);
				match(ON);
				setState(5135);
				match(AGGREGATE);
				setState(5136);
				aggregate_with_argtypes();
				setState(5137);
				match(IS);
				setState(5138);
				comment_text();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5140);
				match(COMMENT);
				setState(5141);
				match(ON);
				setState(5142);
				match(FUNCTION);
				setState(5143);
				function_with_argtypes();
				setState(5144);
				match(IS);
				setState(5145);
				comment_text();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5147);
				match(COMMENT);
				setState(5148);
				match(ON);
				setState(5149);
				match(OPERATOR);
				setState(5150);
				operator_with_argtypes();
				setState(5151);
				match(IS);
				setState(5152);
				comment_text();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5154);
				match(COMMENT);
				setState(5155);
				match(ON);
				setState(5156);
				match(CONSTRAINT);
				setState(5157);
				name();
				setState(5158);
				match(ON);
				setState(5159);
				any_name();
				setState(5160);
				match(IS);
				setState(5161);
				comment_text();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5163);
				match(COMMENT);
				setState(5164);
				match(ON);
				setState(5165);
				match(CONSTRAINT);
				setState(5166);
				name();
				setState(5167);
				match(ON);
				setState(5168);
				match(DOMAIN_P);
				setState(5169);
				any_name();
				setState(5170);
				match(IS);
				setState(5171);
				comment_text();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5173);
				match(COMMENT);
				setState(5174);
				match(ON);
				setState(5175);
				object_type_name_on_any_name();
				setState(5176);
				name();
				setState(5177);
				match(ON);
				setState(5178);
				any_name();
				setState(5179);
				match(IS);
				setState(5180);
				comment_text();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5182);
				match(COMMENT);
				setState(5183);
				match(ON);
				setState(5184);
				match(PROCEDURE);
				setState(5185);
				function_with_argtypes();
				setState(5186);
				match(IS);
				setState(5187);
				comment_text();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5189);
				match(COMMENT);
				setState(5190);
				match(ON);
				setState(5191);
				match(ROUTINE);
				setState(5192);
				function_with_argtypes();
				setState(5193);
				match(IS);
				setState(5194);
				comment_text();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5196);
				match(COMMENT);
				setState(5197);
				match(ON);
				setState(5198);
				match(TRANSFORM);
				setState(5199);
				match(FOR);
				setState(5200);
				typename();
				setState(5201);
				match(LANGUAGE);
				setState(5202);
				name();
				setState(5203);
				match(IS);
				setState(5204);
				comment_text();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5206);
				match(COMMENT);
				setState(5207);
				match(ON);
				setState(5208);
				match(OPERATOR);
				setState(5209);
				match(CLASS);
				setState(5210);
				any_name();
				setState(5211);
				match(USING);
				setState(5212);
				name();
				setState(5213);
				match(IS);
				setState(5214);
				comment_text();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5216);
				match(COMMENT);
				setState(5217);
				match(ON);
				setState(5218);
				match(OPERATOR);
				setState(5219);
				match(FAMILY);
				setState(5220);
				any_name();
				setState(5221);
				match(USING);
				setState(5222);
				name();
				setState(5223);
				match(IS);
				setState(5224);
				comment_text();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5226);
				match(COMMENT);
				setState(5227);
				match(ON);
				setState(5228);
				match(LARGE_P);
				setState(5229);
				match(OBJECT_P);
				setState(5230);
				numericonly();
				setState(5231);
				match(IS);
				setState(5232);
				comment_text();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5234);
				match(COMMENT);
				setState(5235);
				match(ON);
				setState(5236);
				match(CAST);
				setState(5237);
				match(OPEN_PAREN);
				setState(5238);
				typename();
				setState(5239);
				match(AS);
				setState(5240);
				typename();
				setState(5241);
				match(CLOSE_PAREN);
				setState(5242);
				match(IS);
				setState(5243);
				comment_text();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_textContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Comment_textContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_text; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterComment_text(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitComment_text(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitComment_text(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_textContext comment_text() throws RecognitionException {
		Comment_textContext _localctx = new Comment_textContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_comment_text);
		try {
			setState(5249);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(5247);
				sconst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(5248);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeclabelstmtContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLParser.LABEL, 0); }
		public Opt_providerContext opt_provider() {
			return getRuleContext(Opt_providerContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public Security_labelContext security_label() {
			return getRuleContext(Security_labelContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public SeclabelstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seclabelstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSeclabelstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSeclabelstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSeclabelstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeclabelstmtContext seclabelstmt() throws RecognitionException {
		SeclabelstmtContext _localctx = new SeclabelstmtContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_seclabelstmt);
		try {
			setState(5342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5251);
				match(SECURITY);
				setState(5252);
				match(LABEL);
				setState(5253);
				opt_provider();
				setState(5254);
				match(ON);
				setState(5255);
				object_type_any_name();
				setState(5256);
				any_name();
				setState(5257);
				match(IS);
				setState(5258);
				security_label();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5260);
				match(SECURITY);
				setState(5261);
				match(LABEL);
				setState(5262);
				opt_provider();
				setState(5263);
				match(ON);
				setState(5264);
				match(COLUMN);
				setState(5265);
				any_name();
				setState(5266);
				match(IS);
				setState(5267);
				security_label();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5269);
				match(SECURITY);
				setState(5270);
				match(LABEL);
				setState(5271);
				opt_provider();
				setState(5272);
				match(ON);
				setState(5273);
				object_type_name();
				setState(5274);
				name();
				setState(5275);
				match(IS);
				setState(5276);
				security_label();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5278);
				match(SECURITY);
				setState(5279);
				match(LABEL);
				setState(5280);
				opt_provider();
				setState(5281);
				match(ON);
				setState(5282);
				match(TYPE_P);
				setState(5283);
				typename();
				setState(5284);
				match(IS);
				setState(5285);
				security_label();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5287);
				match(SECURITY);
				setState(5288);
				match(LABEL);
				setState(5289);
				opt_provider();
				setState(5290);
				match(ON);
				setState(5291);
				match(DOMAIN_P);
				setState(5292);
				typename();
				setState(5293);
				match(IS);
				setState(5294);
				security_label();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5296);
				match(SECURITY);
				setState(5297);
				match(LABEL);
				setState(5298);
				opt_provider();
				setState(5299);
				match(ON);
				setState(5300);
				match(AGGREGATE);
				setState(5301);
				aggregate_with_argtypes();
				setState(5302);
				match(IS);
				setState(5303);
				security_label();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5305);
				match(SECURITY);
				setState(5306);
				match(LABEL);
				setState(5307);
				opt_provider();
				setState(5308);
				match(ON);
				setState(5309);
				match(FUNCTION);
				setState(5310);
				function_with_argtypes();
				setState(5311);
				match(IS);
				setState(5312);
				security_label();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5314);
				match(SECURITY);
				setState(5315);
				match(LABEL);
				setState(5316);
				opt_provider();
				setState(5317);
				match(ON);
				setState(5318);
				match(LARGE_P);
				setState(5319);
				match(OBJECT_P);
				setState(5320);
				numericonly();
				setState(5321);
				match(IS);
				setState(5322);
				security_label();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5324);
				match(SECURITY);
				setState(5325);
				match(LABEL);
				setState(5326);
				opt_provider();
				setState(5327);
				match(ON);
				setState(5328);
				match(PROCEDURE);
				setState(5329);
				function_with_argtypes();
				setState(5330);
				match(IS);
				setState(5331);
				security_label();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5333);
				match(SECURITY);
				setState(5334);
				match(LABEL);
				setState(5335);
				opt_provider();
				setState(5336);
				match(ON);
				setState(5337);
				match(ROUTINE);
				setState(5338);
				function_with_argtypes();
				setState(5339);
				match(IS);
				setState(5340);
				security_label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_providerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Opt_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_provider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_providerContext opt_provider() throws RecognitionException {
		Opt_providerContext _localctx = new Opt_providerContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_opt_provider);
		try {
			setState(5347);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5344);
				match(FOR);
				setState(5345);
				nonreservedword_or_sconst();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_labelContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Security_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSecurity_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSecurity_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSecurity_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_labelContext security_label() throws RecognitionException {
		Security_labelContext _localctx = new Security_labelContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_security_label);
		try {
			setState(5351);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(5349);
				sconst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(5350);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchstmtContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public Fetch_argsContext fetch_args() {
			return getRuleContext(Fetch_argsContext.class,0);
		}
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public FetchstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFetchstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFetchstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFetchstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchstmtContext fetchstmt() throws RecognitionException {
		FetchstmtContext _localctx = new FetchstmtContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_fetchstmt);
		try {
			setState(5357);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FETCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5353);
				match(FETCH);
				setState(5354);
				fetch_args();
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5355);
				match(MOVE);
				setState(5356);
				fetch_args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_argsContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public Opt_from_inContext opt_from_in() {
			return getRuleContext(Opt_from_inContext.class,0);
		}
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public Fetch_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFetch_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFetch_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFetch_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_argsContext fetch_args() throws RecognitionException {
		Fetch_argsContext _localctx = new Fetch_argsContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_fetch_args);
		try {
			setState(5425);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5359);
				cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5360);
				from_in();
				setState(5361);
				cursor_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5363);
				match(NEXT);
				setState(5364);
				opt_from_in();
				setState(5365);
				cursor_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5367);
				match(PRIOR);
				setState(5368);
				opt_from_in();
				setState(5369);
				cursor_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5371);
				match(FIRST_P);
				setState(5372);
				opt_from_in();
				setState(5373);
				cursor_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5375);
				match(LAST_P);
				setState(5376);
				opt_from_in();
				setState(5377);
				cursor_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5379);
				match(ABSOLUTE_P);
				setState(5380);
				signediconst();
				setState(5381);
				opt_from_in();
				setState(5382);
				cursor_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5384);
				match(RELATIVE_P);
				setState(5385);
				signediconst();
				setState(5386);
				opt_from_in();
				setState(5387);
				cursor_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5389);
				signediconst();
				setState(5390);
				opt_from_in();
				setState(5391);
				cursor_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5393);
				match(ALL);
				setState(5394);
				opt_from_in();
				setState(5395);
				cursor_name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5397);
				match(FORWARD);
				setState(5398);
				opt_from_in();
				setState(5399);
				cursor_name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5401);
				match(FORWARD);
				setState(5402);
				signediconst();
				setState(5403);
				opt_from_in();
				setState(5404);
				cursor_name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5406);
				match(FORWARD);
				setState(5407);
				match(ALL);
				setState(5408);
				opt_from_in();
				setState(5409);
				cursor_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5411);
				match(BACKWARD);
				setState(5412);
				opt_from_in();
				setState(5413);
				cursor_name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5415);
				match(BACKWARD);
				setState(5416);
				signediconst();
				setState(5417);
				opt_from_in();
				setState(5418);
				cursor_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5420);
				match(BACKWARD);
				setState(5421);
				match(ALL);
				setState(5422);
				opt_from_in();
				setState(5423);
				cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_inContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public From_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_inContext from_in() throws RecognitionException {
		From_inContext _localctx = new From_inContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_from_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5427);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==IN_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_from_inContext extends ParserRuleContext {
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public Opt_from_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_from_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_from_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_from_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_from_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_from_inContext opt_from_in() throws RecognitionException {
		Opt_from_inContext _localctx = new Opt_from_inContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_opt_from_in);
		try {
			setState(5431);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(5429);
				from_in();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantstmtContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public GrantstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantstmtContext grantstmt() throws RecognitionException {
		GrantstmtContext _localctx = new GrantstmtContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_grantstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5433);
			match(GRANT);
			setState(5434);
			privileges();
			setState(5435);
			match(ON);
			setState(5436);
			privilege_target();
			setState(5437);
			match(TO);
			setState(5438);
			grantee_list(0);
			setState(5439);
			opt_grant_grant_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokestmtContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public RevokestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRevokestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRevokestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRevokestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokestmtContext revokestmt() throws RecognitionException {
		RevokestmtContext _localctx = new RevokestmtContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_revokestmt);
		try {
			setState(5460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5441);
				match(REVOKE);
				setState(5442);
				privileges();
				setState(5443);
				match(ON);
				setState(5444);
				privilege_target();
				setState(5445);
				match(FROM);
				setState(5446);
				grantee_list(0);
				setState(5447);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5449);
				match(REVOKE);
				setState(5450);
				match(GRANT);
				setState(5451);
				match(OPTION);
				setState(5452);
				match(FOR);
				setState(5453);
				privileges();
				setState(5454);
				match(ON);
				setState(5455);
				privilege_target();
				setState(5456);
				match(FROM);
				setState(5457);
				grantee_list(0);
				setState(5458);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesContext extends ParserRuleContext {
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesContext privileges() throws RecognitionException {
		PrivilegesContext _localctx = new PrivilegesContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_privileges);
		try {
			setState(5477);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5462);
				privilege_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5463);
				match(ALL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5464);
				match(ALL);
				setState(5465);
				match(PRIVILEGES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5466);
				match(ALL);
				setState(5467);
				match(OPEN_PAREN);
				setState(5468);
				columnlist(0);
				setState(5469);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5471);
				match(ALL);
				setState(5472);
				match(PRIVILEGES);
				setState(5473);
				match(OPEN_PAREN);
				setState(5474);
				columnlist(0);
				setState(5475);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privilege_listContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Privilege_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivilege_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivilege_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivilege_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_listContext privilege_list() throws RecognitionException {
		return privilege_list(0);
	}

	private Privilege_listContext privilege_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Privilege_listContext _localctx = new Privilege_listContext(_ctx, _parentState);
		Privilege_listContext _prevctx = _localctx;
		int _startState = 558;
		enterRecursionRule(_localctx, 558, RULE_privilege_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5480);
			privilege();
			}
			_ctx.stop = _input.LT(-1);
			setState(5487);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Privilege_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_privilege_list);
					setState(5482);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5483);
					match(COMMA);
					setState(5484);
					privilege();
					}
					} 
				}
				setState(5489);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_privilege);
		try {
			setState(5499);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5490);
				match(SELECT);
				setState(5491);
				opt_column_list();
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 2);
				{
				setState(5492);
				match(REFERENCES);
				setState(5493);
				opt_column_list();
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5494);
				match(CREATE);
				setState(5495);
				opt_column_list();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 4);
				{
				setState(5496);
				colid();
				setState(5497);
				opt_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privilege_targetContext extends ParserRuleContext {
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public Numericonly_listContext numericonly_list() {
			return getRuleContext(Numericonly_listContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode PROCEDURES() { return getToken(PostgreSQLParser.PROCEDURES, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public Privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivilege_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivilege_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_targetContext privilege_target() throws RecognitionException {
		Privilege_targetContext _localctx = new Privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_privilege_target);
		try {
			setState(5559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5501);
				qualified_name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5502);
				match(TABLE);
				setState(5503);
				qualified_name_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5504);
				match(SEQUENCE);
				setState(5505);
				qualified_name_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5506);
				match(FOREIGN);
				setState(5507);
				match(DATA_P);
				setState(5508);
				match(WRAPPER);
				setState(5509);
				name_list(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5510);
				match(FOREIGN);
				setState(5511);
				match(SERVER);
				setState(5512);
				name_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5513);
				match(FUNCTION);
				setState(5514);
				function_with_argtypes_list(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5515);
				match(PROCEDURE);
				setState(5516);
				function_with_argtypes_list(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5517);
				match(ROUTINE);
				setState(5518);
				function_with_argtypes_list(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5519);
				match(DATABASE);
				setState(5520);
				name_list(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5521);
				match(DOMAIN_P);
				setState(5522);
				any_name_list(0);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5523);
				match(LANGUAGE);
				setState(5524);
				name_list(0);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5525);
				match(LARGE_P);
				setState(5526);
				match(OBJECT_P);
				setState(5527);
				numericonly_list(0);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5528);
				match(SCHEMA);
				setState(5529);
				name_list(0);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5530);
				match(TABLESPACE);
				setState(5531);
				name_list(0);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5532);
				match(TYPE_P);
				setState(5533);
				any_name_list(0);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5534);
				match(ALL);
				setState(5535);
				match(TABLES);
				setState(5536);
				match(IN_P);
				setState(5537);
				match(SCHEMA);
				setState(5538);
				name_list(0);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5539);
				match(ALL);
				setState(5540);
				match(SEQUENCES);
				setState(5541);
				match(IN_P);
				setState(5542);
				match(SCHEMA);
				setState(5543);
				name_list(0);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5544);
				match(ALL);
				setState(5545);
				match(FUNCTIONS);
				setState(5546);
				match(IN_P);
				setState(5547);
				match(SCHEMA);
				setState(5548);
				name_list(0);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5549);
				match(ALL);
				setState(5550);
				match(PROCEDURES);
				setState(5551);
				match(IN_P);
				setState(5552);
				match(SCHEMA);
				setState(5553);
				name_list(0);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5554);
				match(ALL);
				setState(5555);
				match(ROUTINES);
				setState(5556);
				match(IN_P);
				setState(5557);
				match(SCHEMA);
				setState(5558);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grantee_listContext extends ParserRuleContext {
		public GranteeContext grantee() {
			return getRuleContext(GranteeContext.class,0);
		}
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Grantee_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantee_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantee_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantee_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grantee_listContext grantee_list() throws RecognitionException {
		return grantee_list(0);
	}

	private Grantee_listContext grantee_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Grantee_listContext _localctx = new Grantee_listContext(_ctx, _parentState);
		Grantee_listContext _prevctx = _localctx;
		int _startState = 564;
		enterRecursionRule(_localctx, 564, RULE_grantee_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5562);
			grantee();
			}
			_ctx.stop = _input.LT(-1);
			setState(5569);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,224,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Grantee_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_grantee_list);
					setState(5564);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5565);
					match(COMMA);
					setState(5566);
					grantee();
					}
					} 
				}
				setState(5571);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,224,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class GranteeContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_grantee);
		try {
			setState(5575);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FETCH:
			case SESSION_USER:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5572);
				rolespec();
				}
				break;
			case GROUP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(5573);
				match(GROUP_P);
				setState(5574);
				rolespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_grant_grant_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public Opt_grant_grant_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_grant_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_grant_grant_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_grant_grant_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_grant_grant_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_grant_optionContext opt_grant_grant_option() throws RecognitionException {
		Opt_grant_grant_optionContext _localctx = new Opt_grant_grant_optionContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_opt_grant_grant_option);
		try {
			setState(5581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5577);
				match(WITH);
				setState(5578);
				match(GRANT);
				setState(5579);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantrolestmtContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Opt_grant_admin_optionContext opt_grant_admin_option() {
			return getRuleContext(Opt_grant_admin_optionContext.class,0);
		}
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public GrantrolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantrolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantrolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantrolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantrolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantrolestmtContext grantrolestmt() throws RecognitionException {
		GrantrolestmtContext _localctx = new GrantrolestmtContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_grantrolestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5583);
			match(GRANT);
			setState(5584);
			privilege_list(0);
			setState(5585);
			match(TO);
			setState(5586);
			role_list(0);
			setState(5587);
			opt_grant_admin_option();
			setState(5588);
			opt_granted_by();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokerolestmtContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public RevokerolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokerolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRevokerolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRevokerolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRevokerolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokerolestmtContext revokerolestmt() throws RecognitionException {
		RevokerolestmtContext _localctx = new RevokerolestmtContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_revokerolestmt);
		try {
			setState(5607);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5590);
				match(REVOKE);
				setState(5591);
				privilege_list(0);
				setState(5592);
				match(FROM);
				setState(5593);
				role_list(0);
				setState(5594);
				opt_granted_by();
				setState(5595);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5597);
				match(REVOKE);
				setState(5598);
				match(ADMIN);
				setState(5599);
				match(OPTION);
				setState(5600);
				match(FOR);
				setState(5601);
				privilege_list(0);
				setState(5602);
				match(FROM);
				setState(5603);
				role_list(0);
				setState(5604);
				opt_granted_by();
				setState(5605);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_grant_admin_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public Opt_grant_admin_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_admin_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_grant_admin_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_grant_admin_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_grant_admin_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_admin_optionContext opt_grant_admin_option() throws RecognitionException {
		Opt_grant_admin_optionContext _localctx = new Opt_grant_admin_optionContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_opt_grant_admin_option);
		try {
			setState(5613);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5609);
				match(WITH);
				setState(5610);
				match(ADMIN);
				setState(5611);
				match(OPTION);
				}
				break;
			case SEMI:
			case INTO:
			case GRANTED:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_granted_byContext extends ParserRuleContext {
		public TerminalNode GRANTED() { return getToken(PostgreSQLParser.GRANTED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Opt_granted_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_granted_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_granted_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_granted_by(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_granted_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_granted_byContext opt_granted_by() throws RecognitionException {
		Opt_granted_byContext _localctx = new Opt_granted_byContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_opt_granted_by);
		try {
			setState(5619);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRANTED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5615);
				match(GRANTED);
				setState(5616);
				match(BY);
				setState(5617);
				rolespec();
				}
				break;
			case SEMI:
			case INTO:
			case CASCADE:
			case RESTRICT:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterdefaultprivilegesstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public DefacloptionlistContext defacloptionlist() {
			return getRuleContext(DefacloptionlistContext.class,0);
		}
		public DefaclactionContext defaclaction() {
			return getRuleContext(DefaclactionContext.class,0);
		}
		public AlterdefaultprivilegesstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdefaultprivilegesstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdefaultprivilegesstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdefaultprivilegesstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdefaultprivilegesstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() throws RecognitionException {
		AlterdefaultprivilegesstmtContext _localctx = new AlterdefaultprivilegesstmtContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_alterdefaultprivilegesstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5621);
			match(ALTER);
			setState(5622);
			match(DEFAULT);
			setState(5623);
			match(PRIVILEGES);
			setState(5624);
			defacloptionlist(0);
			setState(5625);
			defaclaction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefacloptionlistContext extends ParserRuleContext {
		public DefacloptionlistContext defacloptionlist() {
			return getRuleContext(DefacloptionlistContext.class,0);
		}
		public DefacloptionContext defacloption() {
			return getRuleContext(DefacloptionContext.class,0);
		}
		public DefacloptionlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacloptionlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefacloptionlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefacloptionlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefacloptionlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefacloptionlistContext defacloptionlist() throws RecognitionException {
		return defacloptionlist(0);
	}

	private DefacloptionlistContext defacloptionlist(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DefacloptionlistContext _localctx = new DefacloptionlistContext(_ctx, _parentState);
		DefacloptionlistContext _prevctx = _localctx;
		int _startState = 580;
		enterRecursionRule(_localctx, 580, RULE_defacloptionlist, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(5632);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,230,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DefacloptionlistContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_defacloptionlist);
					setState(5628);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5629);
					defacloption();
					}
					} 
				}
				setState(5634);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,230,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DefacloptionContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public DefacloptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacloption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefacloption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefacloption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefacloption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefacloptionContext defacloption() throws RecognitionException {
		DefacloptionContext _localctx = new DefacloptionContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_defacloption);
		try {
			setState(5644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5635);
				match(IN_P);
				setState(5636);
				match(SCHEMA);
				setState(5637);
				name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5638);
				match(FOR);
				setState(5639);
				match(ROLE);
				setState(5640);
				role_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5641);
				match(FOR);
				setState(5642);
				match(USER);
				setState(5643);
				role_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaclactionContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Defacl_privilege_targetContext defacl_privilege_target() {
			return getRuleContext(Defacl_privilege_targetContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public DefaclactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaclaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefaclaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefaclaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefaclaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaclactionContext defaclaction() throws RecognitionException {
		DefaclactionContext _localctx = new DefaclactionContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_defaclaction);
		try {
			setState(5673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5646);
				match(GRANT);
				setState(5647);
				privileges();
				setState(5648);
				match(ON);
				setState(5649);
				defacl_privilege_target();
				setState(5650);
				match(TO);
				setState(5651);
				grantee_list(0);
				setState(5652);
				opt_grant_grant_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5654);
				match(REVOKE);
				setState(5655);
				privileges();
				setState(5656);
				match(ON);
				setState(5657);
				defacl_privilege_target();
				setState(5658);
				match(FROM);
				setState(5659);
				grantee_list(0);
				setState(5660);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5662);
				match(REVOKE);
				setState(5663);
				match(GRANT);
				setState(5664);
				match(OPTION);
				setState(5665);
				match(FOR);
				setState(5666);
				privileges();
				setState(5667);
				match(ON);
				setState(5668);
				defacl_privilege_target();
				setState(5669);
				match(FROM);
				setState(5670);
				grantee_list(0);
				setState(5671);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Defacl_privilege_targetContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode TYPES_P() { return getToken(PostgreSQLParser.TYPES_P, 0); }
		public TerminalNode SCHEMAS() { return getToken(PostgreSQLParser.SCHEMAS, 0); }
		public Defacl_privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacl_privilege_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefacl_privilege_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefacl_privilege_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefacl_privilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Defacl_privilege_targetContext defacl_privilege_target() throws RecognitionException {
		Defacl_privilege_targetContext _localctx = new Defacl_privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_defacl_privilege_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5675);
			_la = _input.LA(1);
			if ( !(_la==FUNCTIONS || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (SEQUENCES - 356)) | (1L << (TABLES - 356)) | (1L << (TYPES_P - 356)))) != 0) || _la==ROUTINES || _la==SCHEMAS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_uniqueContext opt_unique() {
			return getRuleContext(Opt_uniqueContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public Opt_index_nameContext opt_index_name() {
			return getRuleContext(Opt_index_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_includeContext opt_include() {
			return getRuleContext(Opt_includeContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IndexstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndexstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndexstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndexstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexstmtContext indexstmt() throws RecognitionException {
		IndexstmtContext _localctx = new IndexstmtContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_indexstmt);
		try {
			setState(5712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5677);
				match(CREATE);
				setState(5678);
				opt_unique();
				setState(5679);
				match(INDEX);
				setState(5680);
				opt_concurrently();
				setState(5681);
				opt_index_name();
				setState(5682);
				match(ON);
				setState(5683);
				relation_expr();
				setState(5684);
				access_method_clause();
				setState(5685);
				match(OPEN_PAREN);
				setState(5686);
				index_params(0);
				setState(5687);
				match(CLOSE_PAREN);
				setState(5688);
				opt_include();
				setState(5689);
				opt_reloptions();
				setState(5690);
				opttablespace();
				setState(5691);
				where_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5693);
				match(CREATE);
				setState(5694);
				opt_unique();
				setState(5695);
				match(INDEX);
				setState(5696);
				opt_concurrently();
				setState(5697);
				match(IF_P);
				setState(5698);
				match(NOT);
				setState(5699);
				match(EXISTS);
				setState(5700);
				name();
				setState(5701);
				match(ON);
				setState(5702);
				relation_expr();
				setState(5703);
				access_method_clause();
				setState(5704);
				match(OPEN_PAREN);
				setState(5705);
				index_params(0);
				setState(5706);
				match(CLOSE_PAREN);
				setState(5707);
				opt_include();
				setState(5708);
				opt_reloptions();
				setState(5709);
				opttablespace();
				setState(5710);
				where_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_uniqueContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public Opt_uniqueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_unique; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_unique(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_unique(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_unique(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_uniqueContext opt_unique() throws RecognitionException {
		Opt_uniqueContext _localctx = new Opt_uniqueContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_opt_unique);
		try {
			setState(5716);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5714);
				match(UNIQUE);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_concurrentlyContext extends ParserRuleContext {
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public Opt_concurrentlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_concurrently; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_concurrently(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_concurrently(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_concurrently(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_concurrentlyContext opt_concurrently() throws RecognitionException {
		Opt_concurrentlyContext _localctx = new Opt_concurrentlyContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_opt_concurrently);
		try {
			setState(5720);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONCURRENTLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5718);
				match(CONCURRENTLY);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case ON:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_index_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_index_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_index_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_index_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_index_nameContext opt_index_name() throws RecognitionException {
		Opt_index_nameContext _localctx = new Opt_index_nameContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_opt_index_name);
		try {
			setState(5724);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5722);
				name();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_method_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Access_method_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_method_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAccess_method_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAccess_method_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAccess_method_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Access_method_clauseContext access_method_clause() throws RecognitionException {
		Access_method_clauseContext _localctx = new Access_method_clauseContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_access_method_clause);
		try {
			setState(5729);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(5726);
				match(USING);
				setState(5727);
				name();
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_paramsContext extends ParserRuleContext {
		public Index_elemContext index_elem() {
			return getRuleContext(Index_elemContext.class,0);
		}
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Index_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_paramsContext index_params() throws RecognitionException {
		return index_params(0);
	}

	private Index_paramsContext index_params(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Index_paramsContext _localctx = new Index_paramsContext(_ctx, _parentState);
		Index_paramsContext _prevctx = _localctx;
		int _startState = 598;
		enterRecursionRule(_localctx, 598, RULE_index_params, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5732);
			index_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(5739);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,238,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Index_paramsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_index_params);
					setState(5734);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5735);
					match(COMMA);
					setState(5736);
					index_elem();
					}
					} 
				}
				setState(5741);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,238,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Index_elem_optionsContext extends ParserRuleContext {
		public Opt_collateContext opt_collate() {
			return getRuleContext(Opt_collateContext.class,0);
		}
		public Opt_classContext opt_class() {
			return getRuleContext(Opt_classContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public Index_elem_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_elem_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_elem_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_elem_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_elem_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_elem_optionsContext index_elem_options() throws RecognitionException {
		Index_elem_optionsContext _localctx = new Index_elem_optionsContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_index_elem_options);
		try {
			setState(5753);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5742);
				opt_collate();
				setState(5743);
				opt_class();
				setState(5744);
				opt_asc_desc();
				setState(5745);
				opt_nulls_order();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5747);
				opt_collate();
				setState(5748);
				any_name();
				setState(5749);
				reloptions();
				setState(5750);
				opt_asc_desc();
				setState(5751);
				opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_elemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Index_elem_optionsContext index_elem_options() {
			return getRuleContext(Index_elem_optionsContext.class,0);
		}
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Index_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_elemContext index_elem() throws RecognitionException {
		Index_elemContext _localctx = new Index_elemContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_index_elem);
		try {
			setState(5766);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5755);
				colid();
				setState(5756);
				index_elem_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5758);
				func_expr_windowless();
				setState(5759);
				index_elem_options();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5761);
				match(OPEN_PAREN);
				setState(5762);
				a_expr(0);
				setState(5763);
				match(CLOSE_PAREN);
				setState(5764);
				index_elem_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_includeContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Index_including_paramsContext index_including_params() {
			return getRuleContext(Index_including_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_includeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_include; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_include(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_include(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_include(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_includeContext opt_include() throws RecognitionException {
		Opt_includeContext _localctx = new Opt_includeContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_opt_include);
		try {
			setState(5774);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5768);
				match(INCLUDE);
				setState(5769);
				match(OPEN_PAREN);
				setState(5770);
				index_including_params(0);
				setState(5771);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_including_paramsContext extends ParserRuleContext {
		public Index_elemContext index_elem() {
			return getRuleContext(Index_elemContext.class,0);
		}
		public Index_including_paramsContext index_including_params() {
			return getRuleContext(Index_including_paramsContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Index_including_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_including_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_including_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_including_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_including_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_including_paramsContext index_including_params() throws RecognitionException {
		return index_including_params(0);
	}

	private Index_including_paramsContext index_including_params(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Index_including_paramsContext _localctx = new Index_including_paramsContext(_ctx, _parentState);
		Index_including_paramsContext _prevctx = _localctx;
		int _startState = 606;
		enterRecursionRule(_localctx, 606, RULE_index_including_params, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5777);
			index_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(5784);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Index_including_paramsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_index_including_params);
					setState(5779);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5780);
					match(COMMA);
					setState(5781);
					index_elem();
					}
					} 
				}
				setState(5786);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_collateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_collate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_collate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collateContext opt_collate() throws RecognitionException {
		Opt_collateContext _localctx = new Opt_collateContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_opt_collate);
		try {
			setState(5790);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5787);
				match(COLLATE);
				setState(5788);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_classContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_class; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_class(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_class(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_classContext opt_class() throws RecognitionException {
		Opt_classContext _localctx = new Opt_classContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_opt_class);
		try {
			setState(5794);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5792);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_asc_descContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(PostgreSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLParser.DESC, 0); }
		public Opt_asc_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_asc_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_asc_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_asc_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_asc_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asc_descContext opt_asc_desc() throws RecognitionException {
		Opt_asc_descContext _localctx = new Opt_asc_descContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_opt_asc_desc);
		try {
			setState(5799);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5796);
				match(ASC);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5797);
				match(DESC);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nulls_orderContext extends ParserRuleContext {
		public TerminalNode NULLS_P() { return getToken(PostgreSQLParser.NULLS_P, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public Opt_nulls_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nulls_order; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_nulls_order(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_nulls_order(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_nulls_order(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nulls_orderContext opt_nulls_order() throws RecognitionException {
		Opt_nulls_orderContext _localctx = new Opt_nulls_orderContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_opt_nulls_order);
		try {
			setState(5806);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5801);
				match(NULLS_P);
				setState(5802);
				match(FIRST_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5803);
				match(NULLS_P);
				setState(5804);
				match(LAST_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatefunctionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_args_with_defaultsContext func_args_with_defaults() {
			return getRuleContext(Func_args_with_defaultsContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public Func_returnContext func_return() {
			return getRuleContext(Func_returnContext.class,0);
		}
		public Createfunc_opt_listContext createfunc_opt_list() {
			return getRuleContext(Createfunc_opt_listContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Table_func_column_listContext table_func_column_list() {
			return getRuleContext(Table_func_column_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public CreatefunctionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunctionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefunctionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefunctionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefunctionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefunctionstmtContext createfunctionstmt() throws RecognitionException {
		CreatefunctionstmtContext _localctx = new CreatefunctionstmtContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_createfunctionstmt);
		try {
			setState(5843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5808);
				match(CREATE);
				setState(5809);
				opt_or_replace();
				setState(5810);
				match(FUNCTION);
				setState(5811);
				func_name();
				setState(5812);
				func_args_with_defaults();
				setState(5813);
				match(RETURNS);
				setState(5814);
				func_return();
				setState(5815);
				createfunc_opt_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5817);
				match(CREATE);
				setState(5818);
				opt_or_replace();
				setState(5819);
				match(FUNCTION);
				setState(5820);
				func_name();
				setState(5821);
				func_args_with_defaults();
				setState(5822);
				match(RETURNS);
				setState(5823);
				match(TABLE);
				setState(5824);
				match(OPEN_PAREN);
				setState(5825);
				table_func_column_list(0);
				setState(5826);
				match(CLOSE_PAREN);
				setState(5827);
				createfunc_opt_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5829);
				match(CREATE);
				setState(5830);
				opt_or_replace();
				setState(5831);
				match(FUNCTION);
				setState(5832);
				func_name();
				setState(5833);
				func_args_with_defaults();
				setState(5834);
				createfunc_opt_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5836);
				match(CREATE);
				setState(5837);
				opt_or_replace();
				setState(5838);
				match(PROCEDURE);
				setState(5839);
				func_name();
				setState(5840);
				func_args_with_defaults();
				setState(5841);
				createfunc_opt_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_or_replaceContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public Opt_or_replaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_or_replace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_or_replace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_or_replace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_or_replace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_or_replaceContext opt_or_replace() throws RecognitionException {
		Opt_or_replaceContext _localctx = new Opt_or_replaceContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_opt_or_replace);
		try {
			setState(5848);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5845);
				match(OR);
				setState(5846);
				match(REPLACE);
				}
				break;
			case AGGREGATE:
			case FUNCTION:
			case LANGUAGE:
			case PROCEDURAL:
			case PROCEDURE:
			case RULE:
			case TRUSTED:
			case TRANSFORM:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_argsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Func_args_listContext func_args_list() {
			return getRuleContext(Func_args_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argsContext func_args() throws RecognitionException {
		Func_argsContext _localctx = new Func_argsContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_func_args);
		try {
			setState(5856);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5850);
				match(OPEN_PAREN);
				setState(5851);
				func_args_list(0);
				setState(5852);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5854);
				match(OPEN_PAREN);
				setState(5855);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_listContext extends ParserRuleContext {
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public Func_args_listContext func_args_list() {
			return getRuleContext(Func_args_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Func_args_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_listContext func_args_list() throws RecognitionException {
		return func_args_list(0);
	}

	private Func_args_listContext func_args_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Func_args_listContext _localctx = new Func_args_listContext(_ctx, _parentState);
		Func_args_listContext _prevctx = _localctx;
		int _startState = 622;
		enterRecursionRule(_localctx, 622, RULE_func_args_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5859);
			func_arg();
			}
			_ctx.stop = _input.LT(-1);
			setState(5866);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,250,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_args_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_func_args_list);
					setState(5861);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5862);
					match(COMMA);
					setState(5863);
					func_arg();
					}
					} 
				}
				setState(5868);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,250,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Function_with_argtypes_listContext extends ParserRuleContext {
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Function_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunction_with_argtypes_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunction_with_argtypes_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunction_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypes_listContext function_with_argtypes_list() throws RecognitionException {
		return function_with_argtypes_list(0);
	}

	private Function_with_argtypes_listContext function_with_argtypes_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Function_with_argtypes_listContext _localctx = new Function_with_argtypes_listContext(_ctx, _parentState);
		Function_with_argtypes_listContext _prevctx = _localctx;
		int _startState = 624;
		enterRecursionRule(_localctx, 624, RULE_function_with_argtypes_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5870);
			function_with_argtypes();
			}
			_ctx.stop = _input.LT(-1);
			setState(5877);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,251,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Function_with_argtypes_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_function_with_argtypes_list);
					setState(5872);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5873);
					match(COMMA);
					setState(5874);
					function_with_argtypes();
					}
					} 
				}
				setState(5879);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,251,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Function_with_argtypesContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Function_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunction_with_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunction_with_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunction_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypesContext function_with_argtypes() throws RecognitionException {
		Function_with_argtypesContext _localctx = new Function_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_function_with_argtypes);
		try {
			setState(5888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5880);
				func_name();
				setState(5881);
				func_args();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5883);
				type_func_name_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5884);
				colid();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5885);
				colid();
				setState(5886);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_with_defaultsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return getRuleContext(Func_args_with_defaults_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_args_with_defaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args_with_defaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args_with_defaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args_with_defaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaultsContext func_args_with_defaults() throws RecognitionException {
		Func_args_with_defaultsContext _localctx = new Func_args_with_defaultsContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_func_args_with_defaults);
		try {
			setState(5896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5890);
				match(OPEN_PAREN);
				setState(5891);
				func_args_with_defaults_list(0);
				setState(5892);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5894);
				match(OPEN_PAREN);
				setState(5895);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_with_defaults_listContext extends ParserRuleContext {
		public Func_arg_with_defaultContext func_arg_with_default() {
			return getRuleContext(Func_arg_with_defaultContext.class,0);
		}
		public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return getRuleContext(Func_args_with_defaults_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Func_args_with_defaults_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args_with_defaults_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args_with_defaults_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args_with_defaults_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaults_listContext func_args_with_defaults_list() throws RecognitionException {
		return func_args_with_defaults_list(0);
	}

	private Func_args_with_defaults_listContext func_args_with_defaults_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Func_args_with_defaults_listContext _localctx = new Func_args_with_defaults_listContext(_ctx, _parentState);
		Func_args_with_defaults_listContext _prevctx = _localctx;
		int _startState = 630;
		enterRecursionRule(_localctx, 630, RULE_func_args_with_defaults_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5899);
			func_arg_with_default();
			}
			_ctx.stop = _input.LT(-1);
			setState(5906);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,254,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_args_with_defaults_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_func_args_with_defaults_list);
					setState(5901);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5902);
					match(COMMA);
					setState(5903);
					func_arg_with_default();
					}
					} 
				}
				setState(5908);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,254,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_argContext extends ParserRuleContext {
		public Arg_classContext arg_class() {
			return getRuleContext(Arg_classContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Func_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argContext func_arg() throws RecognitionException {
		Func_argContext _localctx = new Func_argContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_func_arg);
		try {
			setState(5924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5909);
				arg_class();
				setState(5910);
				param_name();
				setState(5911);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5913);
				param_name();
				setState(5914);
				arg_class();
				setState(5915);
				func_type();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5917);
				param_name();
				setState(5918);
				func_type();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5920);
				arg_class();
				setState(5921);
				func_type();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5923);
				func_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arg_classContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode OUT_P() { return getToken(PostgreSQLParser.OUT_P, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public Arg_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_class; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterArg_class(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitArg_class(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitArg_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arg_classContext arg_class() throws RecognitionException {
		Arg_classContext _localctx = new Arg_classContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_arg_class);
		try {
			setState(5932);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5926);
				match(IN_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5927);
				match(OUT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5928);
				match(INOUT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5929);
				match(IN_P);
				setState(5930);
				match(OUT_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5931);
				match(VARIADIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Param_nameContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public Param_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterParam_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitParam_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitParam_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Param_nameContext param_name() throws RecognitionException {
		Param_nameContext _localctx = new Param_nameContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_param_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5934);
			type_function_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_returnContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Func_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_return(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_returnContext func_return() throws RecognitionException {
		Func_returnContext _localctx = new Func_returnContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_func_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5936);
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_typeContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public Func_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_typeContext func_type() throws RecognitionException {
		Func_typeContext _localctx = new Func_typeContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_func_type);
		try {
			setState(5950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5938);
				typename();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5939);
				type_function_name();
				setState(5940);
				attrs(0);
				setState(5941);
				match(PERCENT);
				setState(5942);
				match(TYPE_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5944);
				match(SETOF);
				setState(5945);
				type_function_name();
				setState(5946);
				attrs(0);
				setState(5947);
				match(PERCENT);
				setState(5948);
				match(TYPE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_arg_with_defaultContext extends ParserRuleContext {
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Func_arg_with_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_with_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg_with_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg_with_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg_with_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_with_defaultContext func_arg_with_default() throws RecognitionException {
		Func_arg_with_defaultContext _localctx = new Func_arg_with_defaultContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_func_arg_with_default);
		try {
			setState(5961);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5952);
				func_arg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5953);
				func_arg();
				setState(5954);
				match(DEFAULT);
				setState(5955);
				a_expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5957);
				func_arg();
				setState(5958);
				match(EQUAL);
				setState(5959);
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggr_argContext extends ParserRuleContext {
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public Aggr_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggr_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggr_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggr_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_argContext aggr_arg() throws RecognitionException {
		Aggr_argContext _localctx = new Aggr_argContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_aggr_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5963);
			func_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggr_argsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<Aggr_args_listContext> aggr_args_list() {
			return getRuleContexts(Aggr_args_listContext.class);
		}
		public Aggr_args_listContext aggr_args_list(int i) {
			return getRuleContext(Aggr_args_listContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Aggr_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggr_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggr_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggr_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_argsContext aggr_args() throws RecognitionException {
		Aggr_argsContext _localctx = new Aggr_argsContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_aggr_args);
		try {
			setState(5985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5965);
				match(OPEN_PAREN);
				setState(5966);
				match(STAR);
				setState(5967);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5968);
				match(OPEN_PAREN);
				setState(5969);
				aggr_args_list(0);
				setState(5970);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5972);
				match(OPEN_PAREN);
				setState(5973);
				match(ORDER);
				setState(5974);
				match(BY);
				setState(5975);
				aggr_args_list(0);
				setState(5976);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5978);
				match(OPEN_PAREN);
				setState(5979);
				aggr_args_list(0);
				setState(5980);
				match(ORDER);
				setState(5981);
				match(BY);
				setState(5982);
				aggr_args_list(0);
				setState(5983);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggr_args_listContext extends ParserRuleContext {
		public Aggr_argContext aggr_arg() {
			return getRuleContext(Aggr_argContext.class,0);
		}
		public Aggr_args_listContext aggr_args_list() {
			return getRuleContext(Aggr_args_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Aggr_args_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_args_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggr_args_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggr_args_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggr_args_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_args_listContext aggr_args_list() throws RecognitionException {
		return aggr_args_list(0);
	}

	private Aggr_args_listContext aggr_args_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Aggr_args_listContext _localctx = new Aggr_args_listContext(_ctx, _parentState);
		Aggr_args_listContext _prevctx = _localctx;
		int _startState = 648;
		enterRecursionRule(_localctx, 648, RULE_aggr_args_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5988);
			aggr_arg();
			}
			_ctx.stop = _input.LT(-1);
			setState(5995);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,260,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Aggr_args_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_aggr_args_list);
					setState(5990);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5991);
					match(COMMA);
					setState(5992);
					aggr_arg();
					}
					} 
				}
				setState(5997);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,260,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Aggregate_with_argtypesContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public Aggregate_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_with_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggregate_with_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggregate_with_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggregate_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_with_argtypesContext aggregate_with_argtypes() throws RecognitionException {
		Aggregate_with_argtypesContext _localctx = new Aggregate_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_aggregate_with_argtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5998);
			func_name();
			setState(5999);
			aggr_args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_with_argtypes_listContext extends ParserRuleContext {
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() {
			return getRuleContext(Aggregate_with_argtypes_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Aggregate_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_with_argtypes_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggregate_with_argtypes_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggregate_with_argtypes_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggregate_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() throws RecognitionException {
		return aggregate_with_argtypes_list(0);
	}

	private Aggregate_with_argtypes_listContext aggregate_with_argtypes_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Aggregate_with_argtypes_listContext _localctx = new Aggregate_with_argtypes_listContext(_ctx, _parentState);
		Aggregate_with_argtypes_listContext _prevctx = _localctx;
		int _startState = 652;
		enterRecursionRule(_localctx, 652, RULE_aggregate_with_argtypes_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6002);
			aggregate_with_argtypes();
			}
			_ctx.stop = _input.LT(-1);
			setState(6009);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,261,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Aggregate_with_argtypes_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_aggregate_with_argtypes_list);
					setState(6004);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6005);
					match(COMMA);
					setState(6006);
					aggregate_with_argtypes();
					}
					} 
				}
				setState(6011);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,261,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Createfunc_opt_listContext extends ParserRuleContext {
		public List<Createfunc_opt_itemContext> createfunc_opt_item() {
			return getRuleContexts(Createfunc_opt_itemContext.class);
		}
		public Createfunc_opt_itemContext createfunc_opt_item(int i) {
			return getRuleContext(Createfunc_opt_itemContext.class,i);
		}
		public Createfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefunc_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefunc_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_listContext createfunc_opt_list() throws RecognitionException {
		Createfunc_opt_listContext _localctx = new Createfunc_opt_listContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_createfunc_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6013); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6012);
				createfunc_opt_item();
				}
				}
				setState(6015); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AS || _la==NOT || _la==WINDOW || _la==CALLED || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (COST - 206)) | (1L << (EXTERNAL - 206)) | (1L << (IMMUTABLE - 206)))) != 0) || _la==LANGUAGE || _la==LEAKPROOF || ((((_la - 340)) & ~0x3f) == 0 && ((1L << (_la - 340)) & ((1L << (RESET - 340)) | (1L << (RETURNS - 340)) | (1L << (ROWS - 340)) | (1L << (SECURITY - 340)) | (1L << (SET - 340)) | (1L << (STABLE - 340)) | (1L << (STRICT_P - 340)))) != 0) || _la==VOLATILE || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & ((1L << (TRANSFORM - 471)) | (1L << (SUPPORT - 471)) | (1L << (PARALLEL - 471)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_func_opt_itemContext extends ParserRuleContext {
		public TerminalNode CALLED() { return getToken(PostgreSQLParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public List<TerminalNode> NULL_P() { return getTokens(PostgreSQLParser.NULL_P); }
		public TerminalNode NULL_P(int i) {
			return getToken(PostgreSQLParser.NULL_P, i);
		}
		public TerminalNode INPUT_P() { return getToken(PostgreSQLParser.INPUT_P, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLParser.IMMUTABLE, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLParser.STABLE, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLParser.VOLATILE, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLParser.INVOKER, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PostgreSQLParser.LEAKPROOF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode COST() { return getToken(PostgreSQLParser.COST, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode SUPPORT() { return getToken(PostgreSQLParser.SUPPORT, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public FunctionsetresetclauseContext functionsetresetclause() {
			return getRuleContext(FunctionsetresetclauseContext.class,0);
		}
		public TerminalNode PARALLEL() { return getToken(PostgreSQLParser.PARALLEL, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Common_func_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_func_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommon_func_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommon_func_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommon_func_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_func_opt_itemContext common_func_opt_item() throws RecognitionException {
		Common_func_opt_itemContext _localctx = new Common_func_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_common_func_opt_item);
		try {
			setState(6052);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6017);
				match(CALLED);
				setState(6018);
				match(ON);
				setState(6019);
				match(NULL_P);
				setState(6020);
				match(INPUT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6021);
				match(RETURNS);
				setState(6022);
				match(NULL_P);
				setState(6023);
				match(ON);
				setState(6024);
				match(NULL_P);
				setState(6025);
				match(INPUT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6026);
				match(STRICT_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6027);
				match(IMMUTABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6028);
				match(STABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6029);
				match(VOLATILE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6030);
				match(EXTERNAL);
				setState(6031);
				match(SECURITY);
				setState(6032);
				match(DEFINER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6033);
				match(EXTERNAL);
				setState(6034);
				match(SECURITY);
				setState(6035);
				match(INVOKER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6036);
				match(SECURITY);
				setState(6037);
				match(DEFINER);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6038);
				match(SECURITY);
				setState(6039);
				match(INVOKER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6040);
				match(LEAKPROOF);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6041);
				match(NOT);
				setState(6042);
				match(LEAKPROOF);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6043);
				match(COST);
				setState(6044);
				numericonly();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6045);
				match(ROWS);
				setState(6046);
				numericonly();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6047);
				match(SUPPORT);
				setState(6048);
				any_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6049);
				functionsetresetclause();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6050);
				match(PARALLEL);
				setState(6051);
				colid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createfunc_opt_itemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Func_asContext func_as() {
			return getRuleContext(Func_asContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public Transform_type_listContext transform_type_list() {
			return getRuleContext(Transform_type_listContext.class,0);
		}
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public Common_func_opt_itemContext common_func_opt_item() {
			return getRuleContext(Common_func_opt_itemContext.class,0);
		}
		public Createfunc_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefunc_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefunc_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefunc_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_itemContext createfunc_opt_item() throws RecognitionException {
		Createfunc_opt_itemContext _localctx = new Createfunc_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_createfunc_opt_item);
		try {
			setState(6062);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(6054);
				match(AS);
				setState(6055);
				func_as();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6056);
				match(LANGUAGE);
				setState(6057);
				nonreservedword_or_sconst();
				}
				break;
			case TRANSFORM:
				enterOuterAlt(_localctx, 3);
				{
				setState(6058);
				match(TRANSFORM);
				setState(6059);
				transform_type_list(0);
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(6060);
				match(WINDOW);
				}
				break;
			case NOT:
			case CALLED:
			case COST:
			case EXTERNAL:
			case IMMUTABLE:
			case LEAKPROOF:
			case RESET:
			case RETURNS:
			case ROWS:
			case SECURITY:
			case SET:
			case STABLE:
			case STRICT_P:
			case VOLATILE:
			case SUPPORT:
			case PARALLEL:
				enterOuterAlt(_localctx, 5);
				{
				setState(6061);
				common_func_opt_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_asContext extends ParserRuleContext {
		public SconstContext def;
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Func_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_asContext func_as() throws RecognitionException {
		Func_asContext _localctx = new Func_asContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_func_as);
		try {
			setState(6071);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6064);
				((Func_asContext)_localctx).def = sconst();

				                    
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6067);
				sconst();
				setState(6068);
				match(COMMA);
				setState(6069);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transform_type_listContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Transform_type_listContext transform_type_list() {
			return getRuleContext(Transform_type_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Transform_type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transform_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransform_type_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransform_type_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransform_type_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transform_type_listContext transform_type_list() throws RecognitionException {
		return transform_type_list(0);
	}

	private Transform_type_listContext transform_type_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Transform_type_listContext _localctx = new Transform_type_listContext(_ctx, _parentState);
		Transform_type_listContext _prevctx = _localctx;
		int _startState = 662;
		enterRecursionRule(_localctx, 662, RULE_transform_type_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6074);
			match(FOR);
			setState(6075);
			match(TYPE_P);
			setState(6076);
			typename();
			}
			_ctx.stop = _input.LT(-1);
			setState(6085);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,266,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Transform_type_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_transform_type_list);
					setState(6078);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6079);
					match(COMMA);
					setState(6080);
					match(FOR);
					setState(6081);
					match(TYPE_P);
					setState(6082);
					typename();
					}
					} 
				}
				setState(6087);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,266,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_definitionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Opt_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_definitionContext opt_definition() throws RecognitionException {
		Opt_definitionContext _localctx = new Opt_definitionContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_opt_definition);
		try {
			setState(6091);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6088);
				match(WITH);
				setState(6089);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_func_columnContext extends ParserRuleContext {
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Table_func_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_func_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_func_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_func_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_columnContext table_func_column() throws RecognitionException {
		Table_func_columnContext _localctx = new Table_func_columnContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_table_func_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6093);
			param_name();
			setState(6094);
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_func_column_listContext extends ParserRuleContext {
		public Table_func_columnContext table_func_column() {
			return getRuleContext(Table_func_columnContext.class,0);
		}
		public Table_func_column_listContext table_func_column_list() {
			return getRuleContext(Table_func_column_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Table_func_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_func_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_func_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_func_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_column_listContext table_func_column_list() throws RecognitionException {
		return table_func_column_list(0);
	}

	private Table_func_column_listContext table_func_column_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Table_func_column_listContext _localctx = new Table_func_column_listContext(_ctx, _parentState);
		Table_func_column_listContext _prevctx = _localctx;
		int _startState = 668;
		enterRecursionRule(_localctx, 668, RULE_table_func_column_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6097);
			table_func_column();
			}
			_ctx.stop = _input.LT(-1);
			setState(6104);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,268,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Table_func_column_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_table_func_column_list);
					setState(6099);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6100);
					match(COMMA);
					setState(6101);
					table_func_column();
					}
					} 
				}
				setState(6106);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,268,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterfunctionstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Alterfunc_opt_listContext alterfunc_opt_list() {
			return getRuleContext(Alterfunc_opt_listContext.class,0);
		}
		public Opt_restrictContext opt_restrict() {
			return getRuleContext(Opt_restrictContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public AlterfunctionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfunctionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterfunctionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterfunctionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterfunctionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterfunctionstmtContext alterfunctionstmt() throws RecognitionException {
		AlterfunctionstmtContext _localctx = new AlterfunctionstmtContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_alterfunctionstmt);
		try {
			setState(6125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6107);
				match(ALTER);
				setState(6108);
				match(FUNCTION);
				setState(6109);
				function_with_argtypes();
				setState(6110);
				alterfunc_opt_list(0);
				setState(6111);
				opt_restrict();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6113);
				match(ALTER);
				setState(6114);
				match(PROCEDURE);
				setState(6115);
				function_with_argtypes();
				setState(6116);
				alterfunc_opt_list(0);
				setState(6117);
				opt_restrict();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6119);
				match(ALTER);
				setState(6120);
				match(ROUTINE);
				setState(6121);
				function_with_argtypes();
				setState(6122);
				alterfunc_opt_list(0);
				setState(6123);
				opt_restrict();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alterfunc_opt_listContext extends ParserRuleContext {
		public Common_func_opt_itemContext common_func_opt_item() {
			return getRuleContext(Common_func_opt_itemContext.class,0);
		}
		public Alterfunc_opt_listContext alterfunc_opt_list() {
			return getRuleContext(Alterfunc_opt_listContext.class,0);
		}
		public Alterfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfunc_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterfunc_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterfunc_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterfunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterfunc_opt_listContext alterfunc_opt_list() throws RecognitionException {
		return alterfunc_opt_list(0);
	}

	private Alterfunc_opt_listContext alterfunc_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alterfunc_opt_listContext _localctx = new Alterfunc_opt_listContext(_ctx, _parentState);
		Alterfunc_opt_listContext _prevctx = _localctx;
		int _startState = 672;
		enterRecursionRule(_localctx, 672, RULE_alterfunc_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6128);
			common_func_opt_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(6134);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,270,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alterfunc_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alterfunc_opt_list);
					setState(6130);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6131);
					common_func_opt_item();
					}
					} 
				}
				setState(6136);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,270,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_restrictContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Opt_restrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restrict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_restrict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_restrict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_restrict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restrictContext opt_restrict() throws RecognitionException {
		Opt_restrictContext _localctx = new Opt_restrictContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_opt_restrict);
		try {
			setState(6139);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6137);
				match(RESTRICT);
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemovefuncstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public RemovefuncstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removefuncstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRemovefuncstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRemovefuncstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRemovefuncstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemovefuncstmtContext removefuncstmt() throws RecognitionException {
		RemovefuncstmtContext _localctx = new RemovefuncstmtContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_removefuncstmt);
		try {
			setState(6177);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6141);
				match(DROP);
				setState(6142);
				match(FUNCTION);
				setState(6143);
				function_with_argtypes_list(0);
				setState(6144);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6146);
				match(DROP);
				setState(6147);
				match(FUNCTION);
				setState(6148);
				match(IF_P);
				setState(6149);
				match(EXISTS);
				setState(6150);
				function_with_argtypes_list(0);
				setState(6151);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6153);
				match(DROP);
				setState(6154);
				match(PROCEDURE);
				setState(6155);
				function_with_argtypes_list(0);
				setState(6156);
				opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6158);
				match(DROP);
				setState(6159);
				match(PROCEDURE);
				setState(6160);
				match(IF_P);
				setState(6161);
				match(EXISTS);
				setState(6162);
				function_with_argtypes_list(0);
				setState(6163);
				opt_drop_behavior();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6165);
				match(DROP);
				setState(6166);
				match(ROUTINE);
				setState(6167);
				function_with_argtypes_list(0);
				setState(6168);
				opt_drop_behavior();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6170);
				match(DROP);
				setState(6171);
				match(ROUTINE);
				setState(6172);
				match(IF_P);
				setState(6173);
				match(EXISTS);
				setState(6174);
				function_with_argtypes_list(0);
				setState(6175);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveaggrstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() {
			return getRuleContext(Aggregate_with_argtypes_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveaggrstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeaggrstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRemoveaggrstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRemoveaggrstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRemoveaggrstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveaggrstmtContext removeaggrstmt() throws RecognitionException {
		RemoveaggrstmtContext _localctx = new RemoveaggrstmtContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_removeaggrstmt);
		try {
			setState(6191);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6179);
				match(DROP);
				setState(6180);
				match(AGGREGATE);
				setState(6181);
				aggregate_with_argtypes_list(0);
				setState(6182);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6184);
				match(DROP);
				setState(6185);
				match(AGGREGATE);
				setState(6186);
				match(IF_P);
				setState(6187);
				match(EXISTS);
				setState(6188);
				aggregate_with_argtypes_list(0);
				setState(6189);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveoperstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypes_listContext operator_with_argtypes_list() {
			return getRuleContext(Operator_with_argtypes_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveoperstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeoperstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRemoveoperstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRemoveoperstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRemoveoperstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveoperstmtContext removeoperstmt() throws RecognitionException {
		RemoveoperstmtContext _localctx = new RemoveoperstmtContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_removeoperstmt);
		try {
			setState(6205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6193);
				match(DROP);
				setState(6194);
				match(OPERATOR);
				setState(6195);
				operator_with_argtypes_list(0);
				setState(6196);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6198);
				match(DROP);
				setState(6199);
				match(OPERATOR);
				setState(6200);
				match(IF_P);
				setState(6201);
				match(EXISTS);
				setState(6202);
				operator_with_argtypes_list(0);
				setState(6203);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Oper_argtypesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Oper_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oper_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOper_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOper_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOper_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Oper_argtypesContext oper_argtypes() throws RecognitionException {
		Oper_argtypesContext _localctx = new Oper_argtypesContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_oper_argtypes);
		try {
			setState(6229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6207);
				match(OPEN_PAREN);
				setState(6208);
				typename();
				setState(6209);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6211);
				match(OPEN_PAREN);
				setState(6212);
				typename();
				setState(6213);
				match(COMMA);
				setState(6214);
				typename();
				setState(6215);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6217);
				match(OPEN_PAREN);
				setState(6218);
				match(NONE);
				setState(6219);
				match(COMMA);
				setState(6220);
				typename();
				setState(6221);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6223);
				match(OPEN_PAREN);
				setState(6224);
				typename();
				setState(6225);
				match(COMMA);
				setState(6226);
				match(NONE);
				setState(6227);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_operatorContext extends ParserRuleContext {
		public All_opContext all_op() {
			return getRuleContext(All_opContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Any_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_operatorContext any_operator() throws RecognitionException {
		Any_operatorContext _localctx = new Any_operatorContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_any_operator);
		try {
			setState(6236);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
			case EQUAL:
			case AMPERSAND:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_LESS:
			case GREATER_GREATER:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case NOT_EQUALS_1:
			case PERCENT:
			case BITWISE_OR:
			case BITWISE_XOR:
			case BITWISE_NOT:
			case SQUARE_ROOT:
			case CUBIC_ROOT:
			case FACTORIAL:
			case PREFIX_FACTORIAL:
			case ABSOLUTE:
			case TEXT_PATTERN1:
			case TEXT_PATTERN2:
			case TEXT_PATTERN3:
			case TEXT_PATTERN4:
			case CONTAINS:
			case IS_CONTAINS:
			case OVERLAP:
			case CONCAT:
			case LENGTH:
			case CENTER:
			case CLOSET_POINT:
			case DISTANT:
			case EXTEND_RIGHT:
			case EXTEND_LEFT:
			case IS_STRICTLY_BELOW:
			case IS_STRICTLY_ABOVE:
			case EXTEND_ABOVE:
			case EXTEND_BELOW:
			case IS_BELOW:
			case IS_ABOVE:
			case INTERSECTION:
			case IS_HORIZON:
			case IS_VERTICAL:
			case IS_PERPENDICULAR:
			case IS_PARALLEL:
			case SAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(6231);
				all_op();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(6232);
				colid();
				setState(6233);
				match(DOT);
				setState(6234);
				any_operator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_with_argtypes_listContext extends ParserRuleContext {
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public Operator_with_argtypes_listContext operator_with_argtypes_list() {
			return getRuleContext(Operator_with_argtypes_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Operator_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_with_argtypes_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_with_argtypes_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_with_argtypes_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_with_argtypes_listContext operator_with_argtypes_list() throws RecognitionException {
		return operator_with_argtypes_list(0);
	}

	private Operator_with_argtypes_listContext operator_with_argtypes_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Operator_with_argtypes_listContext _localctx = new Operator_with_argtypes_listContext(_ctx, _parentState);
		Operator_with_argtypes_listContext _prevctx = _localctx;
		int _startState = 686;
		enterRecursionRule(_localctx, 686, RULE_operator_with_argtypes_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6239);
			operator_with_argtypes();
			}
			_ctx.stop = _input.LT(-1);
			setState(6246);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,277,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Operator_with_argtypes_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_operator_with_argtypes_list);
					setState(6241);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6242);
					match(COMMA);
					setState(6243);
					operator_with_argtypes();
					}
					} 
				}
				setState(6248);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,277,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Operator_with_argtypesContext extends ParserRuleContext {
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public List<Any_operatorContext> any_operator() {
			return getRuleContexts(Any_operatorContext.class);
		}
		public Any_operatorContext any_operator(int i) {
			return getRuleContext(Any_operatorContext.class,i);
		}
		public Operator_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_with_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_with_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_with_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_with_argtypesContext operator_with_argtypes() throws RecognitionException {
		Operator_with_argtypesContext _localctx = new Operator_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_operator_with_argtypes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6250); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6249);
				any_operator();
				}
				}
				setState(6252); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << EQUAL) | (1L << AMPERSAND) | (1L << PLUS) | (1L << MINUS) | (1L << SLASH) | (1L << CARET) | (1L << LT) | (1L << GT) | (1L << LESS_LESS) | (1L << GREATER_GREATER) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << NOT_EQUALS) | (1L << NOT_EQUALS_1) | (1L << PERCENT) | (1L << BITWISE_OR) | (1L << BITWISE_XOR) | (1L << BITWISE_NOT) | (1L << SQUARE_ROOT) | (1L << CUBIC_ROOT) | (1L << FACTORIAL) | (1L << PREFIX_FACTORIAL) | (1L << ABSOLUTE) | (1L << TEXT_PATTERN1) | (1L << TEXT_PATTERN2) | (1L << TEXT_PATTERN3) | (1L << TEXT_PATTERN4) | (1L << CONTAINS) | (1L << IS_CONTAINS) | (1L << OVERLAP) | (1L << CONCAT) | (1L << LENGTH) | (1L << CENTER) | (1L << CLOSET_POINT) | (1L << DISTANT) | (1L << EXTEND_RIGHT) | (1L << EXTEND_LEFT) | (1L << IS_STRICTLY_BELOW) | (1L << IS_STRICTLY_ABOVE) | (1L << EXTEND_ABOVE) | (1L << EXTEND_BELOW) | (1L << IS_BELOW) | (1L << IS_ABOVE) | (1L << INTERSECTION) | (1L << IS_HORIZON) | (1L << IS_VERTICAL) | (1L << IS_PERPENDICULAR))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (IS_PARALLEL - 64)) | (1L << (SAME - 64)) | (1L << (AND - 64)) | (1L << (ARRAY - 64)) | (1L << (COLLATE - 64)) | (1L << (COLUMN - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DO - 64)) | (1L << (FETCH - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (TABLE - 128)) | (1L << (IS - 128)) | (1L << (OUTER_P - 128)) | (1L << (OVER - 128)) | (1L << (ABORT_P - 128)) | (1L << (ABSOLUTE_P - 128)) | (1L << (ACCESS - 128)) | (1L << (ACTION - 128)) | (1L << (ADD_P - 128)) | (1L << (ADMIN - 128)) | (1L << (AFTER - 128)) | (1L << (AGGREGATE - 128)) | (1L << (ALSO - 128)) | (1L << (ALTER - 128)) | (1L << (ALWAYS - 128)) | (1L << (ASSERTION - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (AT - 128)) | (1L << (ATTRIBUTE - 128)) | (1L << (BACKWARD - 128)) | (1L << (BEFORE - 128)) | (1L << (BEGIN_P - 128)) | (1L << (BY - 128)) | (1L << (CACHE - 128)) | (1L << (CALLED - 128)) | (1L << (CASCADE - 128)) | (1L << (CASCADED - 128)) | (1L << (CHAIN - 128)) | (1L << (CHARACTERISTICS - 128)) | (1L << (CHECKPOINT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (CLASS - 192)) | (1L << (CLOSE - 192)) | (1L << (CLUSTER - 192)) | (1L << (COMMENT - 192)) | (1L << (COMMENTS - 192)) | (1L << (COMMIT - 192)) | (1L << (COMMITTED - 192)) | (1L << (CONFIGURATION - 192)) | (1L << (CONNECTION - 192)) | (1L << (CONSTRAINTS - 192)) | (1L << (CONTENT_P - 192)) | (1L << (CONTINUE_P - 192)) | (1L << (CONVERSION_P - 192)) | (1L << (COPY - 192)) | (1L << (COST - 192)) | (1L << (CSV - 192)) | (1L << (CURSOR - 192)) | (1L << (CYCLE - 192)) | (1L << (DATA_P - 192)) | (1L << (DATABASE - 192)) | (1L << (DAY_P - 192)) | (1L << (DEALLOCATE - 192)) | (1L << (DECLARE - 192)) | (1L << (DEFAULTS - 192)) | (1L << (DEFERRED - 192)) | (1L << (DEFINER - 192)) | (1L << (DELETE_P - 192)) | (1L << (DELIMITER - 192)) | (1L << (DELIMITERS - 192)) | (1L << (DICTIONARY - 192)) | (1L << (DISABLE_P - 192)) | (1L << (DISCARD - 192)) | (1L << (DOCUMENT_P - 192)) | (1L << (DOMAIN_P - 192)) | (1L << (DOUBLE_P - 192)) | (1L << (DROP - 192)) | (1L << (EACH - 192)) | (1L << (ENABLE_P - 192)) | (1L << (ENCODING - 192)) | (1L << (ENCRYPTED - 192)) | (1L << (ENUM_P - 192)) | (1L << (ESCAPE - 192)) | (1L << (EVENT - 192)) | (1L << (EXCLUDE - 192)) | (1L << (EXCLUDING - 192)) | (1L << (EXCLUSIVE - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXPLAIN - 192)) | (1L << (EXTENSION - 192)) | (1L << (EXTERNAL - 192)) | (1L << (FAMILY - 192)) | (1L << (FIRST_P - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FORCE - 192)) | (1L << (FORWARD - 192)) | (1L << (FUNCTION - 192)) | (1L << (FUNCTIONS - 192)) | (1L << (GLOBAL - 192)) | (1L << (GRANTED - 192)) | (1L << (HANDLER - 192)) | (1L << (HEADER_P - 192)) | (1L << (HOLD - 192)) | (1L << (HOUR_P - 192)) | (1L << (IDENTITY_P - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (IF_P - 256)) | (1L << (IMMEDIATE - 256)) | (1L << (IMMUTABLE - 256)) | (1L << (IMPLICIT_P - 256)) | (1L << (INCLUDING - 256)) | (1L << (INCREMENT - 256)) | (1L << (INDEX - 256)) | (1L << (INDEXES - 256)) | (1L << (INHERIT - 256)) | (1L << (INHERITS - 256)) | (1L << (INLINE_P - 256)) | (1L << (INSENSITIVE - 256)) | (1L << (INSERT - 256)) | (1L << (INSTEAD - 256)) | (1L << (INVOKER - 256)) | (1L << (ISOLATION - 256)) | (1L << (KEY - 256)) | (1L << (LABEL - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE_P - 256)) | (1L << (LAST_P - 256)) | (1L << (LEAKPROOF - 256)) | (1L << (LEVEL - 256)) | (1L << (LISTEN - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCATION - 256)) | (1L << (LOCK_P - 256)) | (1L << (MAPPING - 256)) | (1L << (MATCH - 256)) | (1L << (MATERIALIZED - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MINUTE_P - 256)) | (1L << (MINVALUE - 256)) | (1L << (MODE - 256)) | (1L << (MONTH_P - 256)) | (1L << (MOVE - 256)) | (1L << (NAME_P - 256)) | (1L << (NAMES - 256)) | (1L << (NEXT - 256)) | (1L << (NO - 256)) | (1L << (NOTHING - 256)) | (1L << (NOTIFY - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULLS_P - 256)) | (1L << (OBJECT_P - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OIDS - 256)) | (1L << (OPERATOR - 256)) | (1L << (OPTION - 256)) | (1L << (OPTIONS - 256)) | (1L << (OWNED - 256)) | (1L << (OWNER - 256)) | (1L << (PARSER - 256)) | (1L << (PARTIAL - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PASSWORD - 256)) | (1L << (PLANS - 256)) | (1L << (PRECEDING - 256)) | (1L << (PREPARE - 256)) | (1L << (PREPARED - 256)) | (1L << (PRESERVE - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRIOR - 320)) | (1L << (PRIVILEGES - 320)) | (1L << (PROCEDURAL - 320)) | (1L << (PROCEDURE - 320)) | (1L << (PROGRAM - 320)) | (1L << (QUOTE - 320)) | (1L << (RANGE - 320)) | (1L << (READ - 320)) | (1L << (REASSIGN - 320)) | (1L << (RECHECK - 320)) | (1L << (RECURSIVE - 320)) | (1L << (REF - 320)) | (1L << (REFRESH - 320)) | (1L << (REINDEX - 320)) | (1L << (RELATIVE_P - 320)) | (1L << (RELEASE - 320)) | (1L << (RENAME - 320)) | (1L << (REPEATABLE - 320)) | (1L << (REPLACE - 320)) | (1L << (REPLICA - 320)) | (1L << (RESET - 320)) | (1L << (RESTART - 320)) | (1L << (RESTRICT - 320)) | (1L << (RETURNS - 320)) | (1L << (REVOKE - 320)) | (1L << (ROLE - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROWS - 320)) | (1L << (RULE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCROLL - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND_P - 320)) | (1L << (SECURITY - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENCES - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERVER - 320)) | (1L << (SESSION - 320)) | (1L << (SET - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SIMPLE - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (STABLE - 320)) | (1L << (STANDALONE_P - 320)) | (1L << (START - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATISTICS - 320)) | (1L << (STDIN - 320)) | (1L << (STDOUT - 320)) | (1L << (STORAGE - 320)) | (1L << (STRICT_P - 320)) | (1L << (STRIP_P - 320)) | (1L << (SYSID - 320)) | (1L << (SYSTEM_P - 320)) | (1L << (TABLES - 320)) | (1L << (TABLESPACE - 320)) | (1L << (TEMP - 320)) | (1L << (TEMPLATE - 320)) | (1L << (TEMPORARY - 320)) | (1L << (TEXT_P - 320)) | (1L << (TRANSACTION - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (TRIGGER - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TRUSTED - 384)) | (1L << (TYPE_P - 384)) | (1L << (TYPES_P - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNCOMMITTED - 384)) | (1L << (UNENCRYPTED - 384)) | (1L << (UNKNOWN - 384)) | (1L << (UNLISTEN - 384)) | (1L << (UNLOGGED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (VACUUM - 384)) | (1L << (VALID - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALIDATOR - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION_P - 384)) | (1L << (VIEW - 384)) | (1L << (VOLATILE - 384)) | (1L << (WHITESPACE_P - 384)) | (1L << (WITHOUT - 384)) | (1L << (WORK - 384)) | (1L << (WRAPPER - 384)) | (1L << (WRITE - 384)) | (1L << (XML_P - 384)) | (1L << (YEAR_P - 384)) | (1L << (YES_P - 384)) | (1L << (ZONE - 384)) | (1L << (BETWEEN - 384)) | (1L << (BIGINT - 384)) | (1L << (BIT - 384)) | (1L << (BOOLEAN_P - 384)) | (1L << (CHAR_P - 384)) | (1L << (CHARACTER - 384)) | (1L << (COALESCE - 384)) | (1L << (DEC - 384)) | (1L << (DECIMAL_P - 384)) | (1L << (EXISTS - 384)) | (1L << (EXTRACT - 384)) | (1L << (FLOAT_P - 384)) | (1L << (GREATEST - 384)) | (1L << (INOUT - 384)) | (1L << (INT_P - 384)) | (1L << (INTEGER - 384)) | (1L << (INTERVAL - 384)) | (1L << (LEAST - 384)) | (1L << (NATIONAL - 384)) | (1L << (NCHAR - 384)) | (1L << (NONE - 384)) | (1L << (NULLIF - 384)) | (1L << (NUMERIC - 384)) | (1L << (OVERLAY - 384)) | (1L << (POSITION - 384)) | (1L << (PRECISION - 384)) | (1L << (REAL - 384)) | (1L << (ROW - 384)) | (1L << (SETOF - 384)) | (1L << (SMALLINT - 384)) | (1L << (SUBSTRING - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TREAT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (TRIM - 448)) | (1L << (VALUES - 448)) | (1L << (VARCHAR - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCONCAT - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (CALL - 448)) | (1L << (CURRENT_P - 448)) | (1L << (CATALOG_P - 448)) | (1L << (ATTACH - 448)) | (1L << (DETACH - 448)) | (1L << (EXPRESSION - 448)) | (1L << (GENERATED - 448)) | (1L << (LOGGED - 448)) | (1L << (STORED - 448)) | (1L << (INCLUDE - 448)) | (1L << (ROUTINE - 448)) | (1L << (TRANSFORM - 448)) | (1L << (IMPORT_P - 448)) | (1L << (POLICY - 448)) | (1L << (METHOD - 448)) | (1L << (REFERENCING - 448)) | (1L << (NEW - 448)) | (1L << (OLD - 448)) | (1L << (VALUE_P - 448)) | (1L << (SUBSCRIPTION - 448)) | (1L << (PUBLICATION - 448)) | (1L << (OUT_P - 448)) | (1L << (ROUTINES - 448)) | (1L << (SCHEMAS - 448)) | (1L << (PROCEDURES - 448)) | (1L << (INPUT_P - 448)) | (1L << (SUPPORT - 448)) | (1L << (PARALLEL - 448)) | (1L << (SQL_P - 448)) | (1L << (DEPENDS - 448)) | (1L << (OVERRIDING - 448)) | (1L << (CONFLICT - 448)) | (1L << (SKIP_P - 448)) | (1L << (LOCKED - 448)) | (1L << (TIES - 448)) | (1L << (ROLLUP - 448)) | (1L << (CUBE - 448)) | (1L << (GROUPING - 448)) | (1L << (SETS - 448)) | (1L << (ORDINALITY - 448)) | (1L << (XMLTABLE - 448)) | (1L << (COLUMNS - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (ROWTYPE - 448)) | (1L << (NORMALIZED - 448)) | (1L << (WITHIN - 448)) | (1L << (FILTER - 448)) | (1L << (GROUPS - 448)) | (1L << (OTHERS - 448)) | (1L << (NFC - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (NFD - 512)) | (1L << (NFKC - 512)) | (1L << (NFKD - 512)) | (1L << (UESCAPE - 512)) | (1L << (VIEWS - 512)) | (1L << (NORMALIZE - 512)) | (1L << (DUMP - 512)) | (1L << (PRINT_STRICT_PARAMS - 512)) | (1L << (VARIABLE_CONFLICT - 512)) | (1L << (ERROR - 512)) | (1L << (USE_VARIABLE - 512)) | (1L << (USE_COLUMN - 512)) | (1L << (ALIAS - 512)) | (1L << (CONSTANT - 512)) | (1L << (PERFORM - 512)) | (1L << (GET - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (STACKED - 512)) | (1L << (ELSIF - 512)) | (1L << (REVERSE - 512)) | (1L << (SLICE - 512)) | (1L << (EXIT - 512)) | (1L << (RETURN - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (DEBUG - 512)) | (1L << (LOG - 512)) | (1L << (INFO - 512)) | (1L << (NOTICE - 512)) | (1L << (WARNING - 512)) | (1L << (EXCEPTION - 512)) | (1L << (ASSERT - 512)) | (1L << (OPEN - 512)) | (1L << (Identifier - 512)) | (1L << (QuotedIdentifier - 512)) | (1L << (UnicodeQuotedIdentifier - 512)) | (1L << (PLSQLVARIABLENAME - 512)) | (1L << (PLSQLIDENTIFIER - 512)))) != 0) );
			setState(6254);
			oper_argtypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DostmtContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public Dostmt_opt_listContext dostmt_opt_list() {
			return getRuleContext(Dostmt_opt_listContext.class,0);
		}
		public DostmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDostmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDostmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDostmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DostmtContext dostmt() throws RecognitionException {
		DostmtContext _localctx = new DostmtContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_dostmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6256);
			match(DO);
			setState(6257);
			dostmt_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dostmt_opt_listContext extends ParserRuleContext {
		public Dostmt_opt_itemContext dostmt_opt_item() {
			return getRuleContext(Dostmt_opt_itemContext.class,0);
		}
		public Dostmt_opt_listContext dostmt_opt_list() {
			return getRuleContext(Dostmt_opt_listContext.class,0);
		}
		public Dostmt_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDostmt_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDostmt_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDostmt_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_listContext dostmt_opt_list() throws RecognitionException {
		return dostmt_opt_list(0);
	}

	private Dostmt_opt_listContext dostmt_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Dostmt_opt_listContext _localctx = new Dostmt_opt_listContext(_ctx, _parentState);
		Dostmt_opt_listContext _prevctx = _localctx;
		int _startState = 692;
		enterRecursionRule(_localctx, 692, RULE_dostmt_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6260);
			dostmt_opt_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(6266);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,279,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Dostmt_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_dostmt_opt_list);
					setState(6262);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6263);
					dostmt_opt_item();
					}
					} 
				}
				setState(6268);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,279,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Dostmt_opt_itemContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Dostmt_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDostmt_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDostmt_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDostmt_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_itemContext dostmt_opt_item() throws RecognitionException {
		Dostmt_opt_itemContext _localctx = new Dostmt_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_dostmt_opt_item);
		try {
			setState(6272);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(6269);
				sconst();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6270);
				match(LANGUAGE);
				setState(6271);
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatecaststmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Cast_contextContext cast_context() {
			return getRuleContext(Cast_contextContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public CreatecaststmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createcaststmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatecaststmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatecaststmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatecaststmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatecaststmtContext createcaststmt() throws RecognitionException {
		CreatecaststmtContext _localctx = new CreatecaststmtContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_createcaststmt);
		try {
			setState(6308);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6274);
				match(CREATE);
				setState(6275);
				match(CAST);
				setState(6276);
				match(OPEN_PAREN);
				setState(6277);
				typename();
				setState(6278);
				match(AS);
				setState(6279);
				typename();
				setState(6280);
				match(CLOSE_PAREN);
				setState(6281);
				match(WITH);
				setState(6282);
				match(FUNCTION);
				setState(6283);
				function_with_argtypes();
				setState(6284);
				cast_context();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6286);
				match(CREATE);
				setState(6287);
				match(CAST);
				setState(6288);
				match(OPEN_PAREN);
				setState(6289);
				typename();
				setState(6290);
				match(AS);
				setState(6291);
				typename();
				setState(6292);
				match(CLOSE_PAREN);
				setState(6293);
				match(WITHOUT);
				setState(6294);
				match(FUNCTION);
				setState(6295);
				cast_context();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6297);
				match(CREATE);
				setState(6298);
				match(CAST);
				setState(6299);
				match(OPEN_PAREN);
				setState(6300);
				typename();
				setState(6301);
				match(AS);
				setState(6302);
				typename();
				setState(6303);
				match(CLOSE_PAREN);
				setState(6304);
				match(WITH);
				setState(6305);
				match(INOUT);
				setState(6306);
				cast_context();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_contextContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(PostgreSQLParser.IMPLICIT_P, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public Cast_contextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_context; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCast_context(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCast_context(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCast_context(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_contextContext cast_context() throws RecognitionException {
		Cast_contextContext _localctx = new Cast_contextContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_cast_context);
		try {
			setState(6315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6310);
				match(AS);
				setState(6311);
				match(IMPLICIT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6312);
				match(AS);
				setState(6313);
				match(ASSIGNMENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropcaststmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public Opt_if_existsContext opt_if_exists() {
			return getRuleContext(Opt_if_existsContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropcaststmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropcaststmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropcaststmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropcaststmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropcaststmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropcaststmtContext dropcaststmt() throws RecognitionException {
		DropcaststmtContext _localctx = new DropcaststmtContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_dropcaststmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6317);
			match(DROP);
			setState(6318);
			match(CAST);
			setState(6319);
			opt_if_exists();
			setState(6320);
			match(OPEN_PAREN);
			setState(6321);
			typename();
			setState(6322);
			match(AS);
			setState(6323);
			typename();
			setState(6324);
			match(CLOSE_PAREN);
			setState(6325);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_if_existsContext extends ParserRuleContext {
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_if_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_if_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_if_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_if_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_if_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_if_existsContext opt_if_exists() throws RecognitionException {
		Opt_if_existsContext _localctx = new Opt_if_existsContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_opt_if_exists);
		try {
			setState(6330);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IF_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(6327);
				match(IF_P);
				setState(6328);
				match(EXISTS);
				}
				break;
			case OPEN_PAREN:
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatetransformstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Transform_element_listContext transform_element_list() {
			return getRuleContext(Transform_element_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CreatetransformstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createtransformstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatetransformstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatetransformstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatetransformstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatetransformstmtContext createtransformstmt() throws RecognitionException {
		CreatetransformstmtContext _localctx = new CreatetransformstmtContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_createtransformstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6332);
			match(CREATE);
			setState(6333);
			opt_or_replace();
			setState(6334);
			match(TRANSFORM);
			setState(6335);
			match(FOR);
			setState(6336);
			typename();
			setState(6337);
			match(LANGUAGE);
			setState(6338);
			name();
			setState(6339);
			match(OPEN_PAREN);
			setState(6340);
			transform_element_list();
			setState(6341);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transform_element_listContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public List<TerminalNode> SQL_P() { return getTokens(PostgreSQLParser.SQL_P); }
		public TerminalNode SQL_P(int i) {
			return getToken(PostgreSQLParser.SQL_P, i);
		}
		public List<TerminalNode> WITH() { return getTokens(PostgreSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PostgreSQLParser.WITH, i);
		}
		public List<TerminalNode> FUNCTION() { return getTokens(PostgreSQLParser.FUNCTION); }
		public TerminalNode FUNCTION(int i) {
			return getToken(PostgreSQLParser.FUNCTION, i);
		}
		public List<Function_with_argtypesContext> function_with_argtypes() {
			return getRuleContexts(Function_with_argtypesContext.class);
		}
		public Function_with_argtypesContext function_with_argtypes(int i) {
			return getRuleContext(Function_with_argtypesContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Transform_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transform_element_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransform_element_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransform_element_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransform_element_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transform_element_listContext transform_element_list() throws RecognitionException {
		Transform_element_listContext _localctx = new Transform_element_listContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_transform_element_list);
		try {
			setState(6377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6343);
				match(FROM);
				setState(6344);
				match(SQL_P);
				setState(6345);
				match(WITH);
				setState(6346);
				match(FUNCTION);
				setState(6347);
				function_with_argtypes();
				setState(6348);
				match(COMMA);
				setState(6349);
				match(TO);
				setState(6350);
				match(SQL_P);
				setState(6351);
				match(WITH);
				setState(6352);
				match(FUNCTION);
				setState(6353);
				function_with_argtypes();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6355);
				match(TO);
				setState(6356);
				match(SQL_P);
				setState(6357);
				match(WITH);
				setState(6358);
				match(FUNCTION);
				setState(6359);
				function_with_argtypes();
				setState(6360);
				match(COMMA);
				setState(6361);
				match(FROM);
				setState(6362);
				match(SQL_P);
				setState(6363);
				match(WITH);
				setState(6364);
				match(FUNCTION);
				setState(6365);
				function_with_argtypes();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6367);
				match(FROM);
				setState(6368);
				match(SQL_P);
				setState(6369);
				match(WITH);
				setState(6370);
				match(FUNCTION);
				setState(6371);
				function_with_argtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6372);
				match(TO);
				setState(6373);
				match(SQL_P);
				setState(6374);
				match(WITH);
				setState(6375);
				match(FUNCTION);
				setState(6376);
				function_with_argtypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DroptransformstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public Opt_if_existsContext opt_if_exists() {
			return getRuleContext(Opt_if_existsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DroptransformstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_droptransformstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDroptransformstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDroptransformstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDroptransformstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DroptransformstmtContext droptransformstmt() throws RecognitionException {
		DroptransformstmtContext _localctx = new DroptransformstmtContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_droptransformstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6379);
			match(DROP);
			setState(6380);
			match(TRANSFORM);
			setState(6381);
			opt_if_exists();
			setState(6382);
			match(FOR);
			setState(6383);
			typename();
			setState(6384);
			match(LANGUAGE);
			setState(6385);
			name();
			setState(6386);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexstmtContext extends ParserRuleContext {
		public TerminalNode REINDEX() { return getToken(PostgreSQLParser.REINDEX, 0); }
		public Reindex_target_typeContext reindex_target_type() {
			return getRuleContext(Reindex_target_typeContext.class,0);
		}
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Reindex_target_multitableContext reindex_target_multitable() {
			return getRuleContext(Reindex_target_multitableContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Reindex_option_listContext reindex_option_list() {
			return getRuleContext(Reindex_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReindexstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindexstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindexstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindexstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexstmtContext reindexstmt() throws RecognitionException {
		ReindexstmtContext _localctx = new ReindexstmtContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_reindexstmt);
		try {
			setState(6414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6388);
				match(REINDEX);
				setState(6389);
				reindex_target_type();
				setState(6390);
				opt_concurrently();
				setState(6391);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6393);
				match(REINDEX);
				setState(6394);
				reindex_target_multitable();
				setState(6395);
				opt_concurrently();
				setState(6396);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6398);
				match(REINDEX);
				setState(6399);
				match(OPEN_PAREN);
				setState(6400);
				reindex_option_list(0);
				setState(6401);
				match(CLOSE_PAREN);
				setState(6402);
				reindex_target_type();
				setState(6403);
				opt_concurrently();
				setState(6404);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6406);
				match(REINDEX);
				setState(6407);
				match(OPEN_PAREN);
				setState(6408);
				reindex_option_list(0);
				setState(6409);
				match(CLOSE_PAREN);
				setState(6410);
				reindex_target_multitable();
				setState(6411);
				opt_concurrently();
				setState(6412);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_target_typeContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Reindex_target_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_target_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_target_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_target_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_target_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_target_typeContext reindex_target_type() throws RecognitionException {
		Reindex_target_typeContext _localctx = new Reindex_target_typeContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_reindex_target_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6416);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_target_multitableContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public Reindex_target_multitableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_target_multitable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_target_multitable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_target_multitable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_target_multitable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_target_multitableContext reindex_target_multitable() throws RecognitionException {
		Reindex_target_multitableContext _localctx = new Reindex_target_multitableContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_reindex_target_multitable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6418);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==SYSTEM_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_option_listContext extends ParserRuleContext {
		public Reindex_option_elemContext reindex_option_elem() {
			return getRuleContext(Reindex_option_elemContext.class,0);
		}
		public Reindex_option_listContext reindex_option_list() {
			return getRuleContext(Reindex_option_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Reindex_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_option_listContext reindex_option_list() throws RecognitionException {
		return reindex_option_list(0);
	}

	private Reindex_option_listContext reindex_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Reindex_option_listContext _localctx = new Reindex_option_listContext(_ctx, _parentState);
		Reindex_option_listContext _prevctx = _localctx;
		int _startState = 716;
		enterRecursionRule(_localctx, 716, RULE_reindex_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6421);
			reindex_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(6428);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,286,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Reindex_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_reindex_option_list);
					setState(6423);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6424);
					match(COMMA);
					setState(6425);
					reindex_option_elem();
					}
					} 
				}
				setState(6430);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,286,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Reindex_option_elemContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public Reindex_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_option_elemContext reindex_option_elem() throws RecognitionException {
		Reindex_option_elemContext _localctx = new Reindex_option_elemContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_reindex_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6431);
			match(VERBOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltertblspcstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public AltertblspcstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertblspcstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertblspcstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertblspcstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertblspcstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertblspcstmtContext altertblspcstmt() throws RecognitionException {
		AltertblspcstmtContext _localctx = new AltertblspcstmtContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_altertblspcstmt);
		try {
			setState(6445);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6433);
				match(ALTER);
				setState(6434);
				match(TABLESPACE);
				setState(6435);
				name();
				setState(6436);
				match(SET);
				setState(6437);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6439);
				match(ALTER);
				setState(6440);
				match(TABLESPACE);
				setState(6441);
				name();
				setState(6442);
				match(RESET);
				setState(6443);
				reloptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenamestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public List<RoleidContext> roleid() {
			return getRuleContexts(RoleidContext.class);
		}
		public RoleidContext roleid(int i) {
			return getRuleContext(RoleidContext.class,i);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public RenamestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renamestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRenamestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRenamestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRenamestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenamestmtContext renamestmt() throws RecognitionException {
		RenamestmtContext _localctx = new RenamestmtContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_renamestmt);
		try {
			setState(6915);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6447);
				match(ALTER);
				setState(6448);
				match(AGGREGATE);
				setState(6449);
				aggregate_with_argtypes();
				setState(6450);
				match(RENAME);
				setState(6451);
				match(TO);
				setState(6452);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6454);
				match(ALTER);
				setState(6455);
				match(COLLATION);
				setState(6456);
				any_name();
				setState(6457);
				match(RENAME);
				setState(6458);
				match(TO);
				setState(6459);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6461);
				match(ALTER);
				setState(6462);
				match(CONVERSION_P);
				setState(6463);
				any_name();
				setState(6464);
				match(RENAME);
				setState(6465);
				match(TO);
				setState(6466);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6468);
				match(ALTER);
				setState(6469);
				match(DATABASE);
				setState(6470);
				name();
				setState(6471);
				match(RENAME);
				setState(6472);
				match(TO);
				setState(6473);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6475);
				match(ALTER);
				setState(6476);
				match(DOMAIN_P);
				setState(6477);
				any_name();
				setState(6478);
				match(RENAME);
				setState(6479);
				match(TO);
				setState(6480);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6482);
				match(ALTER);
				setState(6483);
				match(DOMAIN_P);
				setState(6484);
				any_name();
				setState(6485);
				match(RENAME);
				setState(6486);
				match(CONSTRAINT);
				setState(6487);
				name();
				setState(6488);
				match(TO);
				setState(6489);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6491);
				match(ALTER);
				setState(6492);
				match(FOREIGN);
				setState(6493);
				match(DATA_P);
				setState(6494);
				match(WRAPPER);
				setState(6495);
				name();
				setState(6496);
				match(RENAME);
				setState(6497);
				match(TO);
				setState(6498);
				name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6500);
				match(ALTER);
				setState(6501);
				match(FUNCTION);
				setState(6502);
				function_with_argtypes();
				setState(6503);
				match(RENAME);
				setState(6504);
				match(TO);
				setState(6505);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6507);
				match(ALTER);
				setState(6508);
				match(GROUP_P);
				setState(6509);
				roleid();
				setState(6510);
				match(RENAME);
				setState(6511);
				match(TO);
				setState(6512);
				roleid();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6514);
				match(ALTER);
				setState(6515);
				opt_procedural();
				setState(6516);
				match(LANGUAGE);
				setState(6517);
				name();
				setState(6518);
				match(RENAME);
				setState(6519);
				match(TO);
				setState(6520);
				name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6522);
				match(ALTER);
				setState(6523);
				match(OPERATOR);
				setState(6524);
				match(CLASS);
				setState(6525);
				any_name();
				setState(6526);
				match(USING);
				setState(6527);
				name();
				setState(6528);
				match(RENAME);
				setState(6529);
				match(TO);
				setState(6530);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6532);
				match(ALTER);
				setState(6533);
				match(OPERATOR);
				setState(6534);
				match(FAMILY);
				setState(6535);
				any_name();
				setState(6536);
				match(USING);
				setState(6537);
				name();
				setState(6538);
				match(RENAME);
				setState(6539);
				match(TO);
				setState(6540);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6542);
				match(ALTER);
				setState(6543);
				match(POLICY);
				setState(6544);
				name();
				setState(6545);
				match(ON);
				setState(6546);
				qualified_name();
				setState(6547);
				match(RENAME);
				setState(6548);
				match(TO);
				setState(6549);
				name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6551);
				match(ALTER);
				setState(6552);
				match(POLICY);
				setState(6553);
				match(IF_P);
				setState(6554);
				match(EXISTS);
				setState(6555);
				name();
				setState(6556);
				match(ON);
				setState(6557);
				qualified_name();
				setState(6558);
				match(RENAME);
				setState(6559);
				match(TO);
				setState(6560);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6562);
				match(ALTER);
				setState(6563);
				match(PROCEDURE);
				setState(6564);
				function_with_argtypes();
				setState(6565);
				match(RENAME);
				setState(6566);
				match(TO);
				setState(6567);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6569);
				match(ALTER);
				setState(6570);
				match(PUBLICATION);
				setState(6571);
				name();
				setState(6572);
				match(RENAME);
				setState(6573);
				match(TO);
				setState(6574);
				name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6576);
				match(ALTER);
				setState(6577);
				match(ROUTINE);
				setState(6578);
				function_with_argtypes();
				setState(6579);
				match(RENAME);
				setState(6580);
				match(TO);
				setState(6581);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6583);
				match(ALTER);
				setState(6584);
				match(SCHEMA);
				setState(6585);
				name();
				setState(6586);
				match(RENAME);
				setState(6587);
				match(TO);
				setState(6588);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6590);
				match(ALTER);
				setState(6591);
				match(SERVER);
				setState(6592);
				name();
				setState(6593);
				match(RENAME);
				setState(6594);
				match(TO);
				setState(6595);
				name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6597);
				match(ALTER);
				setState(6598);
				match(SUBSCRIPTION);
				setState(6599);
				name();
				setState(6600);
				match(RENAME);
				setState(6601);
				match(TO);
				setState(6602);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6604);
				match(ALTER);
				setState(6605);
				match(TABLE);
				setState(6606);
				relation_expr();
				setState(6607);
				match(RENAME);
				setState(6608);
				match(TO);
				setState(6609);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6611);
				match(ALTER);
				setState(6612);
				match(TABLE);
				setState(6613);
				match(IF_P);
				setState(6614);
				match(EXISTS);
				setState(6615);
				relation_expr();
				setState(6616);
				match(RENAME);
				setState(6617);
				match(TO);
				setState(6618);
				name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6620);
				match(ALTER);
				setState(6621);
				match(SEQUENCE);
				setState(6622);
				qualified_name();
				setState(6623);
				match(RENAME);
				setState(6624);
				match(TO);
				setState(6625);
				name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6627);
				match(ALTER);
				setState(6628);
				match(SEQUENCE);
				setState(6629);
				match(IF_P);
				setState(6630);
				match(EXISTS);
				setState(6631);
				qualified_name();
				setState(6632);
				match(RENAME);
				setState(6633);
				match(TO);
				setState(6634);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6636);
				match(ALTER);
				setState(6637);
				match(VIEW);
				setState(6638);
				qualified_name();
				setState(6639);
				match(RENAME);
				setState(6640);
				match(TO);
				setState(6641);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6643);
				match(ALTER);
				setState(6644);
				match(VIEW);
				setState(6645);
				match(IF_P);
				setState(6646);
				match(EXISTS);
				setState(6647);
				qualified_name();
				setState(6648);
				match(RENAME);
				setState(6649);
				match(TO);
				setState(6650);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6652);
				match(ALTER);
				setState(6653);
				match(MATERIALIZED);
				setState(6654);
				match(VIEW);
				setState(6655);
				qualified_name();
				setState(6656);
				match(RENAME);
				setState(6657);
				match(TO);
				setState(6658);
				name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6660);
				match(ALTER);
				setState(6661);
				match(MATERIALIZED);
				setState(6662);
				match(VIEW);
				setState(6663);
				match(IF_P);
				setState(6664);
				match(EXISTS);
				setState(6665);
				qualified_name();
				setState(6666);
				match(RENAME);
				setState(6667);
				match(TO);
				setState(6668);
				name();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6670);
				match(ALTER);
				setState(6671);
				match(INDEX);
				setState(6672);
				qualified_name();
				setState(6673);
				match(RENAME);
				setState(6674);
				match(TO);
				setState(6675);
				name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6677);
				match(ALTER);
				setState(6678);
				match(INDEX);
				setState(6679);
				match(IF_P);
				setState(6680);
				match(EXISTS);
				setState(6681);
				qualified_name();
				setState(6682);
				match(RENAME);
				setState(6683);
				match(TO);
				setState(6684);
				name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6686);
				match(ALTER);
				setState(6687);
				match(FOREIGN);
				setState(6688);
				match(TABLE);
				setState(6689);
				relation_expr();
				setState(6690);
				match(RENAME);
				setState(6691);
				match(TO);
				setState(6692);
				name();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6694);
				match(ALTER);
				setState(6695);
				match(FOREIGN);
				setState(6696);
				match(TABLE);
				setState(6697);
				match(IF_P);
				setState(6698);
				match(EXISTS);
				setState(6699);
				relation_expr();
				setState(6700);
				match(RENAME);
				setState(6701);
				match(TO);
				setState(6702);
				name();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6704);
				match(ALTER);
				setState(6705);
				match(TABLE);
				setState(6706);
				relation_expr();
				setState(6707);
				match(RENAME);
				setState(6708);
				opt_column();
				setState(6709);
				name();
				setState(6710);
				match(TO);
				setState(6711);
				name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6713);
				match(ALTER);
				setState(6714);
				match(TABLE);
				setState(6715);
				match(IF_P);
				setState(6716);
				match(EXISTS);
				setState(6717);
				relation_expr();
				setState(6718);
				match(RENAME);
				setState(6719);
				opt_column();
				setState(6720);
				name();
				setState(6721);
				match(TO);
				setState(6722);
				name();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6724);
				match(ALTER);
				setState(6725);
				match(VIEW);
				setState(6726);
				qualified_name();
				setState(6727);
				match(RENAME);
				setState(6728);
				opt_column();
				setState(6729);
				name();
				setState(6730);
				match(TO);
				setState(6731);
				name();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(6733);
				match(ALTER);
				setState(6734);
				match(VIEW);
				setState(6735);
				match(IF_P);
				setState(6736);
				match(EXISTS);
				setState(6737);
				qualified_name();
				setState(6738);
				match(RENAME);
				setState(6739);
				opt_column();
				setState(6740);
				name();
				setState(6741);
				match(TO);
				setState(6742);
				name();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(6744);
				match(ALTER);
				setState(6745);
				match(MATERIALIZED);
				setState(6746);
				match(VIEW);
				setState(6747);
				qualified_name();
				setState(6748);
				match(RENAME);
				setState(6749);
				opt_column();
				setState(6750);
				name();
				setState(6751);
				match(TO);
				setState(6752);
				name();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(6754);
				match(ALTER);
				setState(6755);
				match(MATERIALIZED);
				setState(6756);
				match(VIEW);
				setState(6757);
				match(IF_P);
				setState(6758);
				match(EXISTS);
				setState(6759);
				qualified_name();
				setState(6760);
				match(RENAME);
				setState(6761);
				opt_column();
				setState(6762);
				name();
				setState(6763);
				match(TO);
				setState(6764);
				name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(6766);
				match(ALTER);
				setState(6767);
				match(TABLE);
				setState(6768);
				relation_expr();
				setState(6769);
				match(RENAME);
				setState(6770);
				match(CONSTRAINT);
				setState(6771);
				name();
				setState(6772);
				match(TO);
				setState(6773);
				name();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(6775);
				match(ALTER);
				setState(6776);
				match(TABLE);
				setState(6777);
				match(IF_P);
				setState(6778);
				match(EXISTS);
				setState(6779);
				relation_expr();
				setState(6780);
				match(RENAME);
				setState(6781);
				match(CONSTRAINT);
				setState(6782);
				name();
				setState(6783);
				match(TO);
				setState(6784);
				name();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(6786);
				match(ALTER);
				setState(6787);
				match(FOREIGN);
				setState(6788);
				match(TABLE);
				setState(6789);
				relation_expr();
				setState(6790);
				match(RENAME);
				setState(6791);
				opt_column();
				setState(6792);
				name();
				setState(6793);
				match(TO);
				setState(6794);
				name();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(6796);
				match(ALTER);
				setState(6797);
				match(FOREIGN);
				setState(6798);
				match(TABLE);
				setState(6799);
				match(IF_P);
				setState(6800);
				match(EXISTS);
				setState(6801);
				relation_expr();
				setState(6802);
				match(RENAME);
				setState(6803);
				opt_column();
				setState(6804);
				name();
				setState(6805);
				match(TO);
				setState(6806);
				name();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(6808);
				match(ALTER);
				setState(6809);
				match(RULE);
				setState(6810);
				name();
				setState(6811);
				match(ON);
				setState(6812);
				qualified_name();
				setState(6813);
				match(RENAME);
				setState(6814);
				match(TO);
				setState(6815);
				name();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(6817);
				match(ALTER);
				setState(6818);
				match(TRIGGER);
				setState(6819);
				name();
				setState(6820);
				match(ON);
				setState(6821);
				qualified_name();
				setState(6822);
				match(RENAME);
				setState(6823);
				match(TO);
				setState(6824);
				name();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(6826);
				match(ALTER);
				setState(6827);
				match(EVENT);
				setState(6828);
				match(TRIGGER);
				setState(6829);
				name();
				setState(6830);
				match(RENAME);
				setState(6831);
				match(TO);
				setState(6832);
				name();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(6834);
				match(ALTER);
				setState(6835);
				match(ROLE);
				setState(6836);
				roleid();
				setState(6837);
				match(RENAME);
				setState(6838);
				match(TO);
				setState(6839);
				roleid();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(6841);
				match(ALTER);
				setState(6842);
				match(USER);
				setState(6843);
				roleid();
				setState(6844);
				match(RENAME);
				setState(6845);
				match(TO);
				setState(6846);
				roleid();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(6848);
				match(ALTER);
				setState(6849);
				match(TABLESPACE);
				setState(6850);
				name();
				setState(6851);
				match(RENAME);
				setState(6852);
				match(TO);
				setState(6853);
				name();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(6855);
				match(ALTER);
				setState(6856);
				match(STATISTICS);
				setState(6857);
				any_name();
				setState(6858);
				match(RENAME);
				setState(6859);
				match(TO);
				setState(6860);
				name();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(6862);
				match(ALTER);
				setState(6863);
				match(TEXT_P);
				setState(6864);
				match(SEARCH);
				setState(6865);
				match(PARSER);
				setState(6866);
				any_name();
				setState(6867);
				match(RENAME);
				setState(6868);
				match(TO);
				setState(6869);
				name();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(6871);
				match(ALTER);
				setState(6872);
				match(TEXT_P);
				setState(6873);
				match(SEARCH);
				setState(6874);
				match(DICTIONARY);
				setState(6875);
				any_name();
				setState(6876);
				match(RENAME);
				setState(6877);
				match(TO);
				setState(6878);
				name();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(6880);
				match(ALTER);
				setState(6881);
				match(TEXT_P);
				setState(6882);
				match(SEARCH);
				setState(6883);
				match(TEMPLATE);
				setState(6884);
				any_name();
				setState(6885);
				match(RENAME);
				setState(6886);
				match(TO);
				setState(6887);
				name();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(6889);
				match(ALTER);
				setState(6890);
				match(TEXT_P);
				setState(6891);
				match(SEARCH);
				setState(6892);
				match(CONFIGURATION);
				setState(6893);
				any_name();
				setState(6894);
				match(RENAME);
				setState(6895);
				match(TO);
				setState(6896);
				name();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(6898);
				match(ALTER);
				setState(6899);
				match(TYPE_P);
				setState(6900);
				any_name();
				setState(6901);
				match(RENAME);
				setState(6902);
				match(TO);
				setState(6903);
				name();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(6905);
				match(ALTER);
				setState(6906);
				match(TYPE_P);
				setState(6907);
				any_name();
				setState(6908);
				match(RENAME);
				setState(6909);
				match(ATTRIBUTE);
				setState(6910);
				name();
				setState(6911);
				match(TO);
				setState(6912);
				name();
				setState(6913);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_columnContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public Opt_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_columnContext opt_column() throws RecognitionException {
		Opt_columnContext _localctx = new Opt_columnContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_opt_column);
		try {
			setState(6919);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6917);
				match(COLUMN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_set_dataContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public Opt_set_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_set_data; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_set_data(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_set_data(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_set_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_set_dataContext opt_set_data() throws RecognitionException {
		Opt_set_dataContext _localctx = new Opt_set_dataContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_opt_set_data);
		try {
			setState(6924);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(6921);
				match(SET);
				setState(6922);
				match(DATA_P);
				}
				break;
			case TYPE_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterobjectdependsstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Opt_noContext opt_no() {
			return getRuleContext(Opt_noContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(PostgreSQLParser.DEPENDS, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLParser.ON, i);
		}
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public AlterobjectdependsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterobjectdependsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterobjectdependsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterobjectdependsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterobjectdependsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterobjectdependsstmtContext alterobjectdependsstmt() throws RecognitionException {
		AlterobjectdependsstmtContext _localctx = new AlterobjectdependsstmtContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_alterobjectdependsstmt);
		try {
			setState(6983);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6926);
				match(ALTER);
				setState(6927);
				match(FUNCTION);
				setState(6928);
				function_with_argtypes();
				setState(6929);
				opt_no();
				setState(6930);
				match(DEPENDS);
				setState(6931);
				match(ON);
				setState(6932);
				match(EXTENSION);
				setState(6933);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6935);
				match(ALTER);
				setState(6936);
				match(PROCEDURE);
				setState(6937);
				function_with_argtypes();
				setState(6938);
				opt_no();
				setState(6939);
				match(DEPENDS);
				setState(6940);
				match(ON);
				setState(6941);
				match(EXTENSION);
				setState(6942);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6944);
				match(ALTER);
				setState(6945);
				match(ROUTINE);
				setState(6946);
				function_with_argtypes();
				setState(6947);
				opt_no();
				setState(6948);
				match(DEPENDS);
				setState(6949);
				match(ON);
				setState(6950);
				match(EXTENSION);
				setState(6951);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6953);
				match(ALTER);
				setState(6954);
				match(TRIGGER);
				setState(6955);
				name();
				setState(6956);
				match(ON);
				setState(6957);
				qualified_name();
				setState(6958);
				opt_no();
				setState(6959);
				match(DEPENDS);
				setState(6960);
				match(ON);
				setState(6961);
				match(EXTENSION);
				setState(6962);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6964);
				match(ALTER);
				setState(6965);
				match(MATERIALIZED);
				setState(6966);
				match(VIEW);
				setState(6967);
				qualified_name();
				setState(6968);
				opt_no();
				setState(6969);
				match(DEPENDS);
				setState(6970);
				match(ON);
				setState(6971);
				match(EXTENSION);
				setState(6972);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6974);
				match(ALTER);
				setState(6975);
				match(INDEX);
				setState(6976);
				qualified_name();
				setState(6977);
				opt_no();
				setState(6978);
				match(DEPENDS);
				setState(6979);
				match(ON);
				setState(6980);
				match(EXTENSION);
				setState(6981);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_noContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_noContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_no; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_no(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_no(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_no(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_noContext opt_no() throws RecognitionException {
		Opt_noContext _localctx = new Opt_noContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_opt_no);
		try {
			setState(6987);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(6985);
				match(NO);
				}
				break;
			case DEPENDS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterobjectschemastmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterobjectschemastmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterobjectschemastmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterobjectschemastmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterobjectschemastmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterobjectschemastmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterobjectschemastmtContext alterobjectschemastmt() throws RecognitionException {
		AlterobjectschemastmtContext _localctx = new AlterobjectschemastmtContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_alterobjectschemastmt);
		try {
			setState(7206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6989);
				match(ALTER);
				setState(6990);
				match(AGGREGATE);
				setState(6991);
				aggregate_with_argtypes();
				setState(6992);
				match(SET);
				setState(6993);
				match(SCHEMA);
				setState(6994);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6996);
				match(ALTER);
				setState(6997);
				match(COLLATION);
				setState(6998);
				any_name();
				setState(6999);
				match(SET);
				setState(7000);
				match(SCHEMA);
				setState(7001);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7003);
				match(ALTER);
				setState(7004);
				match(CONVERSION_P);
				setState(7005);
				any_name();
				setState(7006);
				match(SET);
				setState(7007);
				match(SCHEMA);
				setState(7008);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7010);
				match(ALTER);
				setState(7011);
				match(DOMAIN_P);
				setState(7012);
				any_name();
				setState(7013);
				match(SET);
				setState(7014);
				match(SCHEMA);
				setState(7015);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7017);
				match(ALTER);
				setState(7018);
				match(EXTENSION);
				setState(7019);
				name();
				setState(7020);
				match(SET);
				setState(7021);
				match(SCHEMA);
				setState(7022);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7024);
				match(ALTER);
				setState(7025);
				match(FUNCTION);
				setState(7026);
				function_with_argtypes();
				setState(7027);
				match(SET);
				setState(7028);
				match(SCHEMA);
				setState(7029);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7031);
				match(ALTER);
				setState(7032);
				match(OPERATOR);
				setState(7033);
				operator_with_argtypes();
				setState(7034);
				match(SET);
				setState(7035);
				match(SCHEMA);
				setState(7036);
				name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7038);
				match(ALTER);
				setState(7039);
				match(OPERATOR);
				setState(7040);
				match(CLASS);
				setState(7041);
				any_name();
				setState(7042);
				match(USING);
				setState(7043);
				name();
				setState(7044);
				match(SET);
				setState(7045);
				match(SCHEMA);
				setState(7046);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7048);
				match(ALTER);
				setState(7049);
				match(OPERATOR);
				setState(7050);
				match(FAMILY);
				setState(7051);
				any_name();
				setState(7052);
				match(USING);
				setState(7053);
				name();
				setState(7054);
				match(SET);
				setState(7055);
				match(SCHEMA);
				setState(7056);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7058);
				match(ALTER);
				setState(7059);
				match(PROCEDURE);
				setState(7060);
				function_with_argtypes();
				setState(7061);
				match(SET);
				setState(7062);
				match(SCHEMA);
				setState(7063);
				name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7065);
				match(ALTER);
				setState(7066);
				match(ROUTINE);
				setState(7067);
				function_with_argtypes();
				setState(7068);
				match(SET);
				setState(7069);
				match(SCHEMA);
				setState(7070);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7072);
				match(ALTER);
				setState(7073);
				match(TABLE);
				setState(7074);
				relation_expr();
				setState(7075);
				match(SET);
				setState(7076);
				match(SCHEMA);
				setState(7077);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7079);
				match(ALTER);
				setState(7080);
				match(TABLE);
				setState(7081);
				match(IF_P);
				setState(7082);
				match(EXISTS);
				setState(7083);
				relation_expr();
				setState(7084);
				match(SET);
				setState(7085);
				match(SCHEMA);
				setState(7086);
				name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7088);
				match(ALTER);
				setState(7089);
				match(STATISTICS);
				setState(7090);
				any_name();
				setState(7091);
				match(SET);
				setState(7092);
				match(SCHEMA);
				setState(7093);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7095);
				match(ALTER);
				setState(7096);
				match(TEXT_P);
				setState(7097);
				match(SEARCH);
				setState(7098);
				match(PARSER);
				setState(7099);
				any_name();
				setState(7100);
				match(SET);
				setState(7101);
				match(SCHEMA);
				setState(7102);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7104);
				match(ALTER);
				setState(7105);
				match(TEXT_P);
				setState(7106);
				match(SEARCH);
				setState(7107);
				match(DICTIONARY);
				setState(7108);
				any_name();
				setState(7109);
				match(SET);
				setState(7110);
				match(SCHEMA);
				setState(7111);
				name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7113);
				match(ALTER);
				setState(7114);
				match(TEXT_P);
				setState(7115);
				match(SEARCH);
				setState(7116);
				match(TEMPLATE);
				setState(7117);
				any_name();
				setState(7118);
				match(SET);
				setState(7119);
				match(SCHEMA);
				setState(7120);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7122);
				match(ALTER);
				setState(7123);
				match(TEXT_P);
				setState(7124);
				match(SEARCH);
				setState(7125);
				match(CONFIGURATION);
				setState(7126);
				any_name();
				setState(7127);
				match(SET);
				setState(7128);
				match(SCHEMA);
				setState(7129);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7131);
				match(ALTER);
				setState(7132);
				match(SEQUENCE);
				setState(7133);
				qualified_name();
				setState(7134);
				match(SET);
				setState(7135);
				match(SCHEMA);
				setState(7136);
				name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7138);
				match(ALTER);
				setState(7139);
				match(SEQUENCE);
				setState(7140);
				match(IF_P);
				setState(7141);
				match(EXISTS);
				setState(7142);
				qualified_name();
				setState(7143);
				match(SET);
				setState(7144);
				match(SCHEMA);
				setState(7145);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7147);
				match(ALTER);
				setState(7148);
				match(VIEW);
				setState(7149);
				qualified_name();
				setState(7150);
				match(SET);
				setState(7151);
				match(SCHEMA);
				setState(7152);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7154);
				match(ALTER);
				setState(7155);
				match(VIEW);
				setState(7156);
				match(IF_P);
				setState(7157);
				match(EXISTS);
				setState(7158);
				qualified_name();
				setState(7159);
				match(SET);
				setState(7160);
				match(SCHEMA);
				setState(7161);
				name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7163);
				match(ALTER);
				setState(7164);
				match(MATERIALIZED);
				setState(7165);
				match(VIEW);
				setState(7166);
				qualified_name();
				setState(7167);
				match(SET);
				setState(7168);
				match(SCHEMA);
				setState(7169);
				name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7171);
				match(ALTER);
				setState(7172);
				match(MATERIALIZED);
				setState(7173);
				match(VIEW);
				setState(7174);
				match(IF_P);
				setState(7175);
				match(EXISTS);
				setState(7176);
				qualified_name();
				setState(7177);
				match(SET);
				setState(7178);
				match(SCHEMA);
				setState(7179);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7181);
				match(ALTER);
				setState(7182);
				match(FOREIGN);
				setState(7183);
				match(TABLE);
				setState(7184);
				relation_expr();
				setState(7185);
				match(SET);
				setState(7186);
				match(SCHEMA);
				setState(7187);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(7189);
				match(ALTER);
				setState(7190);
				match(FOREIGN);
				setState(7191);
				match(TABLE);
				setState(7192);
				match(IF_P);
				setState(7193);
				match(EXISTS);
				setState(7194);
				relation_expr();
				setState(7195);
				match(SET);
				setState(7196);
				match(SCHEMA);
				setState(7197);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(7199);
				match(ALTER);
				setState(7200);
				match(TYPE_P);
				setState(7201);
				any_name();
				setState(7202);
				match(SET);
				setState(7203);
				match(SCHEMA);
				setState(7204);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlteroperatorstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Operator_def_listContext operator_def_list() {
			return getRuleContext(Operator_def_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AlteroperatorstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroperatorstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteroperatorstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteroperatorstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteroperatorstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteroperatorstmtContext alteroperatorstmt() throws RecognitionException {
		AlteroperatorstmtContext _localctx = new AlteroperatorstmtContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_alteroperatorstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7208);
			match(ALTER);
			setState(7209);
			match(OPERATOR);
			setState(7210);
			operator_with_argtypes();
			setState(7211);
			match(SET);
			setState(7212);
			match(OPEN_PAREN);
			setState(7213);
			operator_def_list(0);
			setState(7214);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_def_listContext extends ParserRuleContext {
		public Operator_def_elemContext operator_def_elem() {
			return getRuleContext(Operator_def_elemContext.class,0);
		}
		public Operator_def_listContext operator_def_list() {
			return getRuleContext(Operator_def_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Operator_def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_def_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_def_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_def_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_def_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_def_listContext operator_def_list() throws RecognitionException {
		return operator_def_list(0);
	}

	private Operator_def_listContext operator_def_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Operator_def_listContext _localctx = new Operator_def_listContext(_ctx, _parentState);
		Operator_def_listContext _prevctx = _localctx;
		int _startState = 736;
		enterRecursionRule(_localctx, 736, RULE_operator_def_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7217);
			operator_def_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(7224);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,294,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Operator_def_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_operator_def_list);
					setState(7219);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7220);
					match(COMMA);
					setState(7221);
					operator_def_elem();
					}
					} 
				}
				setState(7226);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,294,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Operator_def_elemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Operator_def_argContext operator_def_arg() {
			return getRuleContext(Operator_def_argContext.class,0);
		}
		public Operator_def_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_def_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_def_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_def_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_def_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_def_elemContext operator_def_elem() throws RecognitionException {
		Operator_def_elemContext _localctx = new Operator_def_elemContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_operator_def_elem);
		try {
			setState(7235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7227);
				collabel();
				setState(7228);
				match(EQUAL);
				setState(7229);
				match(NONE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7231);
				collabel();
				setState(7232);
				match(EQUAL);
				setState(7233);
				operator_def_arg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_def_argContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public List<Qual_all_opContext> qual_all_op() {
			return getRuleContexts(Qual_all_opContext.class);
		}
		public Qual_all_opContext qual_all_op(int i) {
			return getRuleContext(Qual_all_opContext.class,i);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Operator_def_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_def_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_def_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_def_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_def_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_def_argContext operator_def_arg() throws RecognitionException {
		Operator_def_argContext _localctx = new Operator_def_argContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_operator_def_arg);
		try {
			int _alt;
			setState(7246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7237);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7238);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7240); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7239);
						qual_all_op();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7242); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,296,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7244);
				numericonly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7245);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltertypestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Operator_def_listContext operator_def_list() {
			return getRuleContext(Operator_def_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AltertypestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertypestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertypestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertypestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertypestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertypestmtContext altertypestmt() throws RecognitionException {
		AltertypestmtContext _localctx = new AltertypestmtContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_altertypestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7248);
			match(ALTER);
			setState(7249);
			match(TYPE_P);
			setState(7250);
			any_name();
			setState(7251);
			match(SET);
			setState(7252);
			match(OPEN_PAREN);
			setState(7253);
			operator_def_list(0);
			setState(7254);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterownerstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public AlterownerstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterownerstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterownerstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterownerstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterownerstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterownerstmtContext alterownerstmt() throws RecognitionException {
		AlterownerstmtContext _localctx = new AlterownerstmtContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_alterownerstmt);
		try {
			setState(7439);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7256);
				match(ALTER);
				setState(7257);
				match(AGGREGATE);
				setState(7258);
				aggregate_with_argtypes();
				setState(7259);
				match(OWNER);
				setState(7260);
				match(TO);
				setState(7261);
				rolespec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7263);
				match(ALTER);
				setState(7264);
				match(COLLATION);
				setState(7265);
				any_name();
				setState(7266);
				match(OWNER);
				setState(7267);
				match(TO);
				setState(7268);
				rolespec();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7270);
				match(ALTER);
				setState(7271);
				match(CONVERSION_P);
				setState(7272);
				any_name();
				setState(7273);
				match(OWNER);
				setState(7274);
				match(TO);
				setState(7275);
				rolespec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7277);
				match(ALTER);
				setState(7278);
				match(DATABASE);
				setState(7279);
				name();
				setState(7280);
				match(OWNER);
				setState(7281);
				match(TO);
				setState(7282);
				rolespec();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7284);
				match(ALTER);
				setState(7285);
				match(DOMAIN_P);
				setState(7286);
				any_name();
				setState(7287);
				match(OWNER);
				setState(7288);
				match(TO);
				setState(7289);
				rolespec();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7291);
				match(ALTER);
				setState(7292);
				match(FUNCTION);
				setState(7293);
				function_with_argtypes();
				setState(7294);
				match(OWNER);
				setState(7295);
				match(TO);
				setState(7296);
				rolespec();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7298);
				match(ALTER);
				setState(7299);
				opt_procedural();
				setState(7300);
				match(LANGUAGE);
				setState(7301);
				name();
				setState(7302);
				match(OWNER);
				setState(7303);
				match(TO);
				setState(7304);
				rolespec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7306);
				match(ALTER);
				setState(7307);
				match(LARGE_P);
				setState(7308);
				match(OBJECT_P);
				setState(7309);
				numericonly();
				setState(7310);
				match(OWNER);
				setState(7311);
				match(TO);
				setState(7312);
				rolespec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7314);
				match(ALTER);
				setState(7315);
				match(OPERATOR);
				setState(7316);
				operator_with_argtypes();
				setState(7317);
				match(OWNER);
				setState(7318);
				match(TO);
				setState(7319);
				rolespec();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7321);
				match(ALTER);
				setState(7322);
				match(OPERATOR);
				setState(7323);
				match(CLASS);
				setState(7324);
				any_name();
				setState(7325);
				match(USING);
				setState(7326);
				name();
				setState(7327);
				match(OWNER);
				setState(7328);
				match(TO);
				setState(7329);
				rolespec();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7331);
				match(ALTER);
				setState(7332);
				match(OPERATOR);
				setState(7333);
				match(FAMILY);
				setState(7334);
				any_name();
				setState(7335);
				match(USING);
				setState(7336);
				name();
				setState(7337);
				match(OWNER);
				setState(7338);
				match(TO);
				setState(7339);
				rolespec();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7341);
				match(ALTER);
				setState(7342);
				match(PROCEDURE);
				setState(7343);
				function_with_argtypes();
				setState(7344);
				match(OWNER);
				setState(7345);
				match(TO);
				setState(7346);
				rolespec();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7348);
				match(ALTER);
				setState(7349);
				match(ROUTINE);
				setState(7350);
				function_with_argtypes();
				setState(7351);
				match(OWNER);
				setState(7352);
				match(TO);
				setState(7353);
				rolespec();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7355);
				match(ALTER);
				setState(7356);
				match(SCHEMA);
				setState(7357);
				name();
				setState(7358);
				match(OWNER);
				setState(7359);
				match(TO);
				setState(7360);
				rolespec();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7362);
				match(ALTER);
				setState(7363);
				match(TYPE_P);
				setState(7364);
				any_name();
				setState(7365);
				match(OWNER);
				setState(7366);
				match(TO);
				setState(7367);
				rolespec();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7369);
				match(ALTER);
				setState(7370);
				match(TABLESPACE);
				setState(7371);
				name();
				setState(7372);
				match(OWNER);
				setState(7373);
				match(TO);
				setState(7374);
				rolespec();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7376);
				match(ALTER);
				setState(7377);
				match(STATISTICS);
				setState(7378);
				any_name();
				setState(7379);
				match(OWNER);
				setState(7380);
				match(TO);
				setState(7381);
				rolespec();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7383);
				match(ALTER);
				setState(7384);
				match(TEXT_P);
				setState(7385);
				match(SEARCH);
				setState(7386);
				match(DICTIONARY);
				setState(7387);
				any_name();
				setState(7388);
				match(OWNER);
				setState(7389);
				match(TO);
				setState(7390);
				rolespec();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7392);
				match(ALTER);
				setState(7393);
				match(TEXT_P);
				setState(7394);
				match(SEARCH);
				setState(7395);
				match(CONFIGURATION);
				setState(7396);
				any_name();
				setState(7397);
				match(OWNER);
				setState(7398);
				match(TO);
				setState(7399);
				rolespec();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7401);
				match(ALTER);
				setState(7402);
				match(FOREIGN);
				setState(7403);
				match(DATA_P);
				setState(7404);
				match(WRAPPER);
				setState(7405);
				name();
				setState(7406);
				match(OWNER);
				setState(7407);
				match(TO);
				setState(7408);
				rolespec();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7410);
				match(ALTER);
				setState(7411);
				match(SERVER);
				setState(7412);
				name();
				setState(7413);
				match(OWNER);
				setState(7414);
				match(TO);
				setState(7415);
				rolespec();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7417);
				match(ALTER);
				setState(7418);
				match(EVENT);
				setState(7419);
				match(TRIGGER);
				setState(7420);
				name();
				setState(7421);
				match(OWNER);
				setState(7422);
				match(TO);
				setState(7423);
				rolespec();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7425);
				match(ALTER);
				setState(7426);
				match(PUBLICATION);
				setState(7427);
				name();
				setState(7428);
				match(OWNER);
				setState(7429);
				match(TO);
				setState(7430);
				rolespec();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7432);
				match(ALTER);
				setState(7433);
				match(SUBSCRIPTION);
				setState(7434);
				name();
				setState(7435);
				match(OWNER);
				setState(7436);
				match(TO);
				setState(7437);
				rolespec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatepublicationstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_publication_for_tablesContext opt_publication_for_tables() {
			return getRuleContext(Opt_publication_for_tablesContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public CreatepublicationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createpublicationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatepublicationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatepublicationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatepublicationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatepublicationstmtContext createpublicationstmt() throws RecognitionException {
		CreatepublicationstmtContext _localctx = new CreatepublicationstmtContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_createpublicationstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7441);
			match(CREATE);
			setState(7442);
			match(PUBLICATION);
			setState(7443);
			name();
			setState(7444);
			opt_publication_for_tables();
			setState(7445);
			opt_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_publication_for_tablesContext extends ParserRuleContext {
		public Publication_for_tablesContext publication_for_tables() {
			return getRuleContext(Publication_for_tablesContext.class,0);
		}
		public Opt_publication_for_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_publication_for_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_publication_for_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_publication_for_tables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_publication_for_tables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_publication_for_tablesContext opt_publication_for_tables() throws RecognitionException {
		Opt_publication_for_tablesContext _localctx = new Opt_publication_for_tablesContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_opt_publication_for_tables);
		try {
			setState(7449);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(7447);
				publication_for_tables();
				}
				break;
			case SEMI:
			case INTO:
			case WITH:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Publication_for_tablesContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public Publication_for_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_for_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPublication_for_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPublication_for_tables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPublication_for_tables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Publication_for_tablesContext publication_for_tables() throws RecognitionException {
		Publication_for_tablesContext _localctx = new Publication_for_tablesContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_publication_for_tables);
		try {
			setState(7457);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7451);
				match(FOR);
				setState(7452);
				match(TABLE);
				setState(7453);
				relation_expr_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7454);
				match(FOR);
				setState(7455);
				match(ALL);
				setState(7456);
				match(TABLES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterpublicationstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public AlterpublicationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterpublicationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterpublicationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterpublicationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterpublicationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterpublicationstmtContext alterpublicationstmt() throws RecognitionException {
		AlterpublicationstmtContext _localctx = new AlterpublicationstmtContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_alterpublicationstmt);
		try {
			setState(7486);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7459);
				match(ALTER);
				setState(7460);
				match(PUBLICATION);
				setState(7461);
				name();
				setState(7462);
				match(SET);
				setState(7463);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7465);
				match(ALTER);
				setState(7466);
				match(PUBLICATION);
				setState(7467);
				name();
				setState(7468);
				match(ADD_P);
				setState(7469);
				match(TABLE);
				setState(7470);
				relation_expr_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7472);
				match(ALTER);
				setState(7473);
				match(PUBLICATION);
				setState(7474);
				name();
				setState(7475);
				match(SET);
				setState(7476);
				match(TABLE);
				setState(7477);
				relation_expr_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7479);
				match(ALTER);
				setState(7480);
				match(PUBLICATION);
				setState(7481);
				name();
				setState(7482);
				match(DROP);
				setState(7483);
				match(TABLE);
				setState(7484);
				relation_expr_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatesubscriptionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public Publication_name_listContext publication_name_list() {
			return getRuleContext(Publication_name_listContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public CreatesubscriptionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createsubscriptionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatesubscriptionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatesubscriptionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatesubscriptionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatesubscriptionstmtContext createsubscriptionstmt() throws RecognitionException {
		CreatesubscriptionstmtContext _localctx = new CreatesubscriptionstmtContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_createsubscriptionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7488);
			match(CREATE);
			setState(7489);
			match(SUBSCRIPTION);
			setState(7490);
			name();
			setState(7491);
			match(CONNECTION);
			setState(7492);
			sconst();
			setState(7493);
			match(PUBLICATION);
			setState(7494);
			publication_name_list(0);
			setState(7495);
			opt_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Publication_name_listContext extends ParserRuleContext {
		public Publication_name_itemContext publication_name_item() {
			return getRuleContext(Publication_name_itemContext.class,0);
		}
		public Publication_name_listContext publication_name_list() {
			return getRuleContext(Publication_name_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Publication_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPublication_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPublication_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPublication_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Publication_name_listContext publication_name_list() throws RecognitionException {
		return publication_name_list(0);
	}

	private Publication_name_listContext publication_name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Publication_name_listContext _localctx = new Publication_name_listContext(_ctx, _parentState);
		Publication_name_listContext _prevctx = _localctx;
		int _startState = 756;
		enterRecursionRule(_localctx, 756, RULE_publication_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7498);
			publication_name_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(7505);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,302,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Publication_name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_publication_name_list);
					setState(7500);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7501);
					match(COMMA);
					setState(7502);
					publication_name_item();
					}
					} 
				}
				setState(7507);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,302,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Publication_name_itemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Publication_name_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_name_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPublication_name_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPublication_name_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPublication_name_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Publication_name_itemContext publication_name_item() throws RecognitionException {
		Publication_name_itemContext _localctx = new Publication_name_itemContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_publication_name_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7508);
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltersubscriptionstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public Publication_name_listContext publication_name_list() {
			return getRuleContext(Publication_name_listContext.class,0);
		}
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public AltersubscriptionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altersubscriptionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltersubscriptionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltersubscriptionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltersubscriptionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltersubscriptionstmtContext altersubscriptionstmt() throws RecognitionException {
		AltersubscriptionstmtContext _localctx = new AltersubscriptionstmtContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_altersubscriptionstmt);
		try {
			setState(7547);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7510);
				match(ALTER);
				setState(7511);
				match(SUBSCRIPTION);
				setState(7512);
				name();
				setState(7513);
				match(SET);
				setState(7514);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7516);
				match(ALTER);
				setState(7517);
				match(SUBSCRIPTION);
				setState(7518);
				name();
				setState(7519);
				match(CONNECTION);
				setState(7520);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7522);
				match(ALTER);
				setState(7523);
				match(SUBSCRIPTION);
				setState(7524);
				name();
				setState(7525);
				match(REFRESH);
				setState(7526);
				match(PUBLICATION);
				setState(7527);
				opt_definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7529);
				match(ALTER);
				setState(7530);
				match(SUBSCRIPTION);
				setState(7531);
				name();
				setState(7532);
				match(SET);
				setState(7533);
				match(PUBLICATION);
				setState(7534);
				publication_name_list(0);
				setState(7535);
				opt_definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7537);
				match(ALTER);
				setState(7538);
				match(SUBSCRIPTION);
				setState(7539);
				name();
				setState(7540);
				match(ENABLE_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7542);
				match(ALTER);
				setState(7543);
				match(SUBSCRIPTION);
				setState(7544);
				name();
				setState(7545);
				match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropsubscriptionstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropsubscriptionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropsubscriptionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropsubscriptionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropsubscriptionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropsubscriptionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropsubscriptionstmtContext dropsubscriptionstmt() throws RecognitionException {
		DropsubscriptionstmtContext _localctx = new DropsubscriptionstmtContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_dropsubscriptionstmt);
		try {
			setState(7561);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7549);
				match(DROP);
				setState(7550);
				match(SUBSCRIPTION);
				setState(7551);
				name();
				setState(7552);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7554);
				match(DROP);
				setState(7555);
				match(SUBSCRIPTION);
				setState(7556);
				match(IF_P);
				setState(7557);
				match(EXISTS);
				setState(7558);
				name();
				setState(7559);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RulestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public EventContext event() {
			return getRuleContext(EventContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public Opt_insteadContext opt_instead() {
			return getRuleContext(Opt_insteadContext.class,0);
		}
		public RuleactionlistContext ruleactionlist() {
			return getRuleContext(RuleactionlistContext.class,0);
		}
		public RulestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rulestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRulestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRulestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRulestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RulestmtContext rulestmt() throws RecognitionException {
		RulestmtContext _localctx = new RulestmtContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_rulestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7563);
			match(CREATE);
			setState(7564);
			opt_or_replace();
			setState(7565);
			match(RULE);
			setState(7566);
			name();
			setState(7567);
			match(AS);
			setState(7568);
			match(ON);
			setState(7569);
			event();
			setState(7570);
			match(TO);
			setState(7571);
			qualified_name();
			setState(7572);
			where_clause();
			setState(7573);
			match(DO);
			setState(7574);
			opt_instead();
			setState(7575);
			ruleactionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleactionlistContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public RuleactionstmtContext ruleactionstmt() {
			return getRuleContext(RuleactionstmtContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public RuleactionmultiContext ruleactionmulti() {
			return getRuleContext(RuleactionmultiContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RuleactionlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionlistContext ruleactionlist() throws RecognitionException {
		RuleactionlistContext _localctx = new RuleactionlistContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_ruleactionlist);
		try {
			setState(7583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7577);
				match(NOTHING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7578);
				ruleactionstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7579);
				match(OPEN_PAREN);
				setState(7580);
				ruleactionmulti(0);
				setState(7581);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleactionmultiContext extends ParserRuleContext {
		public RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty() {
			return getRuleContext(RuleactionstmtOrEmptyContext.class,0);
		}
		public RuleactionmultiContext ruleactionmulti() {
			return getRuleContext(RuleactionmultiContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public RuleactionmultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionmulti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionmulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionmulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionmulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionmultiContext ruleactionmulti() throws RecognitionException {
		return ruleactionmulti(0);
	}

	private RuleactionmultiContext ruleactionmulti(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		RuleactionmultiContext _localctx = new RuleactionmultiContext(_ctx, _parentState);
		RuleactionmultiContext _prevctx = _localctx;
		int _startState = 768;
		enterRecursionRule(_localctx, 768, RULE_ruleactionmulti, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7586);
			ruleactionstmtOrEmpty();
			}
			_ctx.stop = _input.LT(-1);
			setState(7593);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,306,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RuleactionmultiContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_ruleactionmulti);
					setState(7588);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(7589);
					match(SEMI);
					setState(7590);
					ruleactionstmtOrEmpty();
					}
					} 
				}
				setState(7595);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,306,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class RuleactionstmtContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public NotifystmtContext notifystmt() {
			return getRuleContext(NotifystmtContext.class,0);
		}
		public RuleactionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionstmtContext ruleactionstmt() throws RecognitionException {
		RuleactionstmtContext _localctx = new RuleactionstmtContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_ruleactionstmt);
		try {
			setState(7601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7596);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7597);
				insertstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7598);
				updatestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7599);
				deletestmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7600);
				notifystmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleactionstmtOrEmptyContext extends ParserRuleContext {
		public RuleactionstmtContext ruleactionstmt() {
			return getRuleContext(RuleactionstmtContext.class,0);
		}
		public RuleactionstmtOrEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionstmtOrEmpty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionstmtOrEmpty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionstmtOrEmpty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionstmtOrEmpty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty() throws RecognitionException {
		RuleactionstmtOrEmptyContext _localctx = new RuleactionstmtOrEmptyContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_ruleactionstmtOrEmpty);
		try {
			setState(7605);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7603);
				ruleactionstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventContext event() throws RecognitionException {
		EventContext _localctx = new EventContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7607);
			_la = _input.LA(1);
			if ( !(_la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_insteadContext extends ParserRuleContext {
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLParser.ALSO, 0); }
		public Opt_insteadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_instead; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_instead(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_instead(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_instead(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_insteadContext opt_instead() throws RecognitionException {
		Opt_insteadContext _localctx = new Opt_insteadContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_opt_instead);
		try {
			setState(7612);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(7609);
				match(INSTEAD);
				}
				break;
			case ALSO:
				enterOuterAlt(_localctx, 2);
				{
				setState(7610);
				match(ALSO);
				}
				break;
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case WITH:
			case DELETE_P:
			case INSERT:
			case NOTHING:
			case NOTIFY:
			case UPDATE:
			case VALUES:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotifystmtContext extends ParserRuleContext {
		public TerminalNode NOTIFY() { return getToken(PostgreSQLParser.NOTIFY, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Notify_payloadContext notify_payload() {
			return getRuleContext(Notify_payloadContext.class,0);
		}
		public NotifystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNotifystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNotifystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNotifystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifystmtContext notifystmt() throws RecognitionException {
		NotifystmtContext _localctx = new NotifystmtContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_notifystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7614);
			match(NOTIFY);
			setState(7615);
			colid();
			setState(7616);
			notify_payload();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Notify_payloadContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Notify_payloadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notify_payload; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNotify_payload(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNotify_payload(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNotify_payload(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Notify_payloadContext notify_payload() throws RecognitionException {
		Notify_payloadContext _localctx = new Notify_payloadContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_notify_payload);
		try {
			setState(7621);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7618);
				match(COMMA);
				setState(7619);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListenstmtContext extends ParserRuleContext {
		public TerminalNode LISTEN() { return getToken(PostgreSQLParser.LISTEN, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public ListenstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listenstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterListenstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitListenstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitListenstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListenstmtContext listenstmt() throws RecognitionException {
		ListenstmtContext _localctx = new ListenstmtContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_listenstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7623);
			match(LISTEN);
			setState(7624);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlistenstmtContext extends ParserRuleContext {
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLParser.UNLISTEN, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public UnlistenstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlistenstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnlistenstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnlistenstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnlistenstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlistenstmtContext unlistenstmt() throws RecognitionException {
		UnlistenstmtContext _localctx = new UnlistenstmtContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_unlistenstmt);
		try {
			setState(7630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7626);
				match(UNLISTEN);
				setState(7627);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7628);
				match(UNLISTEN);
				setState(7629);
				match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionstmtContext extends ParserRuleContext {
		public TerminalNode ABORT_P() { return getToken(PostgreSQLParser.ABORT_P, 0); }
		public Opt_transactionContext opt_transaction() {
			return getRuleContext(Opt_transactionContext.class,0);
		}
		public Opt_transaction_chainContext opt_transaction_chain() {
			return getRuleContext(Opt_transaction_chainContext.class,0);
		}
		public TerminalNode BEGIN_P() { return getToken(PostgreSQLParser.BEGIN_P, 0); }
		public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
			return getRuleContext(Transaction_mode_list_or_emptyContext.class,0);
		}
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode RELEASE() { return getToken(PostgreSQLParser.RELEASE, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode PREPARED() { return getToken(PostgreSQLParser.PREPARED, 0); }
		public TransactionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransactionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransactionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransactionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionstmtContext transactionstmt() throws RecognitionException {
		TransactionstmtContext _localctx = new TransactionstmtContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_transactionstmt);
		try {
			setState(7682);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7632);
				match(ABORT_P);
				setState(7633);
				opt_transaction();
				setState(7634);
				opt_transaction_chain();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7636);
				match(BEGIN_P);
				setState(7637);
				opt_transaction();
				setState(7638);
				transaction_mode_list_or_empty();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7640);
				match(START);
				setState(7641);
				match(TRANSACTION);
				setState(7642);
				transaction_mode_list_or_empty();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7643);
				match(COMMIT);
				setState(7644);
				opt_transaction();
				setState(7645);
				opt_transaction_chain();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7647);
				match(END_P);
				setState(7648);
				opt_transaction();
				setState(7649);
				opt_transaction_chain();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7651);
				match(ROLLBACK);
				setState(7652);
				opt_transaction();
				setState(7653);
				opt_transaction_chain();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7655);
				match(SAVEPOINT);
				setState(7656);
				colid();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7657);
				match(RELEASE);
				setState(7658);
				match(SAVEPOINT);
				setState(7659);
				colid();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7660);
				match(RELEASE);
				setState(7661);
				colid();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7662);
				match(ROLLBACK);
				setState(7663);
				opt_transaction();
				setState(7664);
				match(TO);
				setState(7665);
				match(SAVEPOINT);
				setState(7666);
				colid();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7668);
				match(ROLLBACK);
				setState(7669);
				opt_transaction();
				setState(7670);
				match(TO);
				setState(7671);
				colid();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7673);
				match(PREPARE);
				setState(7674);
				match(TRANSACTION);
				setState(7675);
				sconst();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7676);
				match(COMMIT);
				setState(7677);
				match(PREPARED);
				setState(7678);
				sconst();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7679);
				match(ROLLBACK);
				setState(7680);
				match(PREPARED);
				setState(7681);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_transactionContext extends ParserRuleContext {
		public TerminalNode WORK() { return getToken(PostgreSQLParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public Opt_transactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_transaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_transaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_transaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_transaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_transactionContext opt_transaction() throws RecognitionException {
		Opt_transactionContext _localctx = new Opt_transactionContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_opt_transaction);
		try {
			setState(7687);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WORK:
				enterOuterAlt(_localctx, 1);
				{
				setState(7684);
				match(WORK);
				}
				break;
			case TRANSACTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(7685);
				match(TRANSACTION);
				}
				break;
			case SEMI:
			case AND:
			case DEFERRABLE:
			case INTO:
			case NOT:
			case TO:
			case ISOLATION:
			case READ:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_itemContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public Iso_levelContext iso_level() {
			return getRuleContext(Iso_levelContext.class,0);
		}
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLParser.WRITE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Transaction_mode_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransaction_mode_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransaction_mode_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransaction_mode_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_itemContext transaction_mode_item() throws RecognitionException {
		Transaction_mode_itemContext _localctx = new Transaction_mode_itemContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_transaction_mode_item);
		try {
			setState(7699);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7689);
				match(ISOLATION);
				setState(7690);
				match(LEVEL);
				setState(7691);
				iso_level();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7692);
				match(READ);
				setState(7693);
				match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7694);
				match(READ);
				setState(7695);
				match(WRITE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7696);
				match(DEFERRABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7697);
				match(NOT);
				setState(7698);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_listContext extends ParserRuleContext {
		public Transaction_mode_itemContext transaction_mode_item() {
			return getRuleContext(Transaction_mode_itemContext.class,0);
		}
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Transaction_mode_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransaction_mode_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransaction_mode_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransaction_mode_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_listContext transaction_mode_list() throws RecognitionException {
		return transaction_mode_list(0);
	}

	private Transaction_mode_listContext transaction_mode_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Transaction_mode_listContext _localctx = new Transaction_mode_listContext(_ctx, _parentState);
		Transaction_mode_listContext _prevctx = _localctx;
		int _startState = 792;
		enterRecursionRule(_localctx, 792, RULE_transaction_mode_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7702);
			transaction_mode_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(7711);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7709);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
					case 1:
						{
						_localctx = new Transaction_mode_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_transaction_mode_list);
						setState(7704);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7705);
						match(COMMA);
						setState(7706);
						transaction_mode_item();
						}
						break;
					case 2:
						{
						_localctx = new Transaction_mode_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_transaction_mode_list);
						setState(7707);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7708);
						transaction_mode_item();
						}
						break;
					}
					} 
				}
				setState(7713);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Transaction_mode_list_or_emptyContext extends ParserRuleContext {
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public Transaction_mode_list_or_emptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list_or_empty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransaction_mode_list_or_empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransaction_mode_list_or_empty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransaction_mode_list_or_empty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() throws RecognitionException {
		Transaction_mode_list_or_emptyContext _localctx = new Transaction_mode_list_or_emptyContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_transaction_mode_list_or_empty);
		try {
			setState(7716);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFERRABLE:
			case NOT:
			case ISOLATION:
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(7714);
				transaction_mode_list(0);
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_transaction_chainContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_transaction_chainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_transaction_chain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_transaction_chain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_transaction_chain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_transaction_chain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_transaction_chainContext opt_transaction_chain() throws RecognitionException {
		Opt_transaction_chainContext _localctx = new Opt_transaction_chainContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_opt_transaction_chain);
		try {
			setState(7724);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7718);
				match(AND);
				setState(7719);
				match(CHAIN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7720);
				match(AND);
				setState(7721);
				match(NO);
				setState(7722);
				match(CHAIN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Opt_check_optionContext opt_check_option() {
			return getRuleContext(Opt_check_optionContext.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ViewstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterViewstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitViewstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitViewstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewstmtContext viewstmt() throws RecognitionException {
		ViewstmtContext _localctx = new ViewstmtContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_viewstmt);
		try {
			setState(7776);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7726);
				match(CREATE);
				setState(7727);
				opttemp();
				setState(7728);
				match(VIEW);
				setState(7729);
				qualified_name();
				setState(7730);
				opt_column_list();
				setState(7731);
				opt_reloptions();
				setState(7732);
				match(AS);
				setState(7733);
				selectstmt();
				setState(7734);
				opt_check_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7736);
				match(CREATE);
				setState(7737);
				match(OR);
				setState(7738);
				match(REPLACE);
				setState(7739);
				opttemp();
				setState(7740);
				match(VIEW);
				setState(7741);
				qualified_name();
				setState(7742);
				opt_column_list();
				setState(7743);
				opt_reloptions();
				setState(7744);
				match(AS);
				setState(7745);
				selectstmt();
				setState(7746);
				opt_check_option();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7748);
				match(CREATE);
				setState(7749);
				opttemp();
				setState(7750);
				match(RECURSIVE);
				setState(7751);
				match(VIEW);
				setState(7752);
				qualified_name();
				setState(7753);
				match(OPEN_PAREN);
				setState(7754);
				columnlist(0);
				setState(7755);
				match(CLOSE_PAREN);
				setState(7756);
				opt_reloptions();
				setState(7757);
				match(AS);
				setState(7758);
				selectstmt();
				setState(7759);
				opt_check_option();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7761);
				match(CREATE);
				setState(7762);
				match(OR);
				setState(7763);
				match(REPLACE);
				setState(7764);
				opttemp();
				setState(7765);
				match(RECURSIVE);
				setState(7766);
				match(VIEW);
				setState(7767);
				qualified_name();
				setState(7768);
				match(OPEN_PAREN);
				setState(7769);
				columnlist(0);
				setState(7770);
				match(CLOSE_PAREN);
				setState(7771);
				opt_reloptions();
				setState(7772);
				match(AS);
				setState(7773);
				selectstmt();
				setState(7774);
				opt_check_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_check_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public Opt_check_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_check_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_check_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_check_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_check_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_check_optionContext opt_check_option() throws RecognitionException {
		Opt_check_optionContext _localctx = new Opt_check_optionContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_opt_check_option);
		try {
			setState(7790);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7778);
				match(WITH);
				setState(7779);
				match(CHECK);
				setState(7780);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7781);
				match(WITH);
				setState(7782);
				match(CASCADED);
				setState(7783);
				match(CHECK);
				setState(7784);
				match(OPTION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7785);
				match(WITH);
				setState(7786);
				match(LOCAL);
				setState(7787);
				match(CHECK);
				setState(7788);
				match(OPTION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadstmtContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(PostgreSQLParser.LOAD, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public LoadstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLoadstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLoadstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLoadstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadstmtContext loadstmt() throws RecognitionException {
		LoadstmtContext _localctx = new LoadstmtContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_loadstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7792);
			match(LOAD);
			setState(7793);
			file_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public CreatedbstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedbstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedbstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedbstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbstmtContext createdbstmt() throws RecognitionException {
		CreatedbstmtContext _localctx = new CreatedbstmtContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_createdbstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7795);
			match(CREATE);
			setState(7796);
			match(DATABASE);
			setState(7797);
			name();
			setState(7798);
			opt_with();
			setState(7799);
			createdb_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createdb_opt_listContext extends ParserRuleContext {
		public Createdb_opt_itemsContext createdb_opt_items() {
			return getRuleContext(Createdb_opt_itemsContext.class,0);
		}
		public Createdb_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_listContext createdb_opt_list() throws RecognitionException {
		Createdb_opt_listContext _localctx = new Createdb_opt_listContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_createdb_opt_list);
		try {
			setState(7803);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONNECTION:
			case CONTINUE_P:
			case CURSOR:
			case ENCODING:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case LOCATION:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case OWNER:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TABLESPACE:
			case TEMPLATE:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7801);
				createdb_opt_items(0);
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createdb_opt_itemsContext extends ParserRuleContext {
		public Createdb_opt_itemContext createdb_opt_item() {
			return getRuleContext(Createdb_opt_itemContext.class,0);
		}
		public Createdb_opt_itemsContext createdb_opt_items() {
			return getRuleContext(Createdb_opt_itemsContext.class,0);
		}
		public Createdb_opt_itemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_items; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_items(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_items(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_items(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_itemsContext createdb_opt_items() throws RecognitionException {
		return createdb_opt_items(0);
	}

	private Createdb_opt_itemsContext createdb_opt_items(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Createdb_opt_itemsContext _localctx = new Createdb_opt_itemsContext(_ctx, _parentState);
		Createdb_opt_itemsContext _prevctx = _localctx;
		int _startState = 808;
		enterRecursionRule(_localctx, 808, RULE_createdb_opt_items, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7806);
			createdb_opt_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(7812);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,322,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Createdb_opt_itemsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_createdb_opt_items);
					setState(7808);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7809);
					createdb_opt_item();
					}
					} 
				}
				setState(7814);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,322,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Createdb_opt_itemContext extends ParserRuleContext {
		public Createdb_opt_nameContext createdb_opt_name() {
			return getRuleContext(Createdb_opt_nameContext.class,0);
		}
		public Opt_equalContext opt_equal() {
			return getRuleContext(Opt_equalContext.class,0);
		}
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Createdb_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_itemContext createdb_opt_item() throws RecognitionException {
		Createdb_opt_itemContext _localctx = new Createdb_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_createdb_opt_item);
		try {
			setState(7827);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7815);
				createdb_opt_name();
				setState(7816);
				opt_equal();
				setState(7817);
				signediconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7819);
				createdb_opt_name();
				setState(7820);
				opt_equal();
				setState(7821);
				opt_boolean_or_string();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7823);
				createdb_opt_name();
				setState(7824);
				opt_equal();
				setState(7825);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createdb_opt_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public Createdb_opt_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_nameContext createdb_opt_name() throws RecognitionException {
		Createdb_opt_nameContext _localctx = new Createdb_opt_nameContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_createdb_opt_name);
		try {
			setState(7837);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7829);
				identifier();
				}
				break;
			case CONNECTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(7830);
				match(CONNECTION);
				setState(7831);
				match(LIMIT);
				}
				break;
			case ENCODING:
				enterOuterAlt(_localctx, 3);
				{
				setState(7832);
				match(ENCODING);
				}
				break;
			case LOCATION:
				enterOuterAlt(_localctx, 4);
				{
				setState(7833);
				match(LOCATION);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 5);
				{
				setState(7834);
				match(OWNER);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 6);
				{
				setState(7835);
				match(TABLESPACE);
				}
				break;
			case TEMPLATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(7836);
				match(TEMPLATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_equalContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Opt_equalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_equal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_equal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_equal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_equalContext opt_equal() throws RecognitionException {
		Opt_equalContext _localctx = new Opt_equalContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_opt_equal);
		try {
			setState(7841);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7839);
				match(EQUAL);
				}
				break;
			case PLUS:
			case MINUS:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterdatabasestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public AlterdatabasestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdatabasestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdatabasestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdatabasestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdatabasestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdatabasestmtContext alterdatabasestmt() throws RecognitionException {
		AlterdatabasestmtContext _localctx = new AlterdatabasestmtContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_alterdatabasestmt);
		try {
			setState(7861);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7843);
				match(ALTER);
				setState(7844);
				match(DATABASE);
				setState(7845);
				name();
				setState(7846);
				match(WITH);
				setState(7847);
				createdb_opt_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7849);
				match(ALTER);
				setState(7850);
				match(DATABASE);
				setState(7851);
				name();
				setState(7852);
				createdb_opt_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7854);
				match(ALTER);
				setState(7855);
				match(DATABASE);
				setState(7856);
				name();
				setState(7857);
				match(SET);
				setState(7858);
				match(TABLESPACE);
				setState(7859);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterdatabasesetstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public SetresetclauseContext setresetclause() {
			return getRuleContext(SetresetclauseContext.class,0);
		}
		public AlterdatabasesetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdatabasesetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdatabasesetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdatabasesetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdatabasesetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdatabasesetstmtContext alterdatabasesetstmt() throws RecognitionException {
		AlterdatabasesetstmtContext _localctx = new AlterdatabasesetstmtContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_alterdatabasesetstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7863);
			match(ALTER);
			setState(7864);
			match(DATABASE);
			setState(7865);
			name();
			setState(7866);
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropdbstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Drop_option_listContext drop_option_list() {
			return getRuleContext(Drop_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DropdbstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropdbstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropdbstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropdbstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropdbstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropdbstmtContext dropdbstmt() throws RecognitionException {
		DropdbstmtContext _localctx = new DropdbstmtContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_dropdbstmt);
		try {
			setState(7894);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7868);
				match(DROP);
				setState(7869);
				match(DATABASE);
				setState(7870);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7871);
				match(DROP);
				setState(7872);
				match(DATABASE);
				setState(7873);
				match(IF_P);
				setState(7874);
				match(EXISTS);
				setState(7875);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7876);
				match(DROP);
				setState(7877);
				match(DATABASE);
				setState(7878);
				name();
				setState(7879);
				opt_with();
				setState(7880);
				match(OPEN_PAREN);
				setState(7881);
				drop_option_list(0);
				setState(7882);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7884);
				match(DROP);
				setState(7885);
				match(DATABASE);
				setState(7886);
				match(IF_P);
				setState(7887);
				match(EXISTS);
				setState(7888);
				name();
				setState(7889);
				opt_with();
				setState(7890);
				match(OPEN_PAREN);
				setState(7891);
				drop_option_list(0);
				setState(7892);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_option_listContext extends ParserRuleContext {
		public Drop_optionContext drop_option() {
			return getRuleContext(Drop_optionContext.class,0);
		}
		public Drop_option_listContext drop_option_list() {
			return getRuleContext(Drop_option_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Drop_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_option_listContext drop_option_list() throws RecognitionException {
		return drop_option_list(0);
	}

	private Drop_option_listContext drop_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Drop_option_listContext _localctx = new Drop_option_listContext(_ctx, _parentState);
		Drop_option_listContext _prevctx = _localctx;
		int _startState = 822;
		enterRecursionRule(_localctx, 822, RULE_drop_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7897);
			drop_option();
			}
			_ctx.stop = _input.LT(-1);
			setState(7904);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Drop_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_drop_option_list);
					setState(7899);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7900);
					match(COMMA);
					setState(7901);
					drop_option();
					}
					} 
				}
				setState(7906);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Drop_optionContext extends ParserRuleContext {
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public Drop_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_optionContext drop_option() throws RecognitionException {
		Drop_optionContext _localctx = new Drop_optionContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_drop_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7907);
			match(FORCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltercollationstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public AltercollationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altercollationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltercollationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltercollationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltercollationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltercollationstmtContext altercollationstmt() throws RecognitionException {
		AltercollationstmtContext _localctx = new AltercollationstmtContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_altercollationstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7909);
			match(ALTER);
			setState(7910);
			match(COLLATION);
			setState(7911);
			any_name();
			setState(7912);
			match(REFRESH);
			setState(7913);
			match(VERSION_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltersystemstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Generic_setContext generic_set() {
			return getRuleContext(Generic_setContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public Generic_resetContext generic_reset() {
			return getRuleContext(Generic_resetContext.class,0);
		}
		public AltersystemstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altersystemstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltersystemstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltersystemstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltersystemstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltersystemstmtContext altersystemstmt() throws RecognitionException {
		AltersystemstmtContext _localctx = new AltersystemstmtContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_altersystemstmt);
		try {
			setState(7923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7915);
				match(ALTER);
				setState(7916);
				match(SYSTEM_P);
				setState(7917);
				match(SET);
				setState(7918);
				generic_set();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7919);
				match(ALTER);
				setState(7920);
				match(SYSTEM_P);
				setState(7921);
				match(RESET);
				setState(7922);
				generic_reset();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedomainstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public CreatedomainstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdomainstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedomainstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedomainstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedomainstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedomainstmtContext createdomainstmt() throws RecognitionException {
		CreatedomainstmtContext _localctx = new CreatedomainstmtContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_createdomainstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7925);
			match(CREATE);
			setState(7926);
			match(DOMAIN_P);
			setState(7927);
			any_name();
			setState(7928);
			opt_as();
			setState(7929);
			typename();
			setState(7930);
			colquallist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterdomainstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public AlterdomainstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdomainstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdomainstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdomainstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdomainstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdomainstmtContext alterdomainstmt() throws RecognitionException {
		AlterdomainstmtContext _localctx = new AlterdomainstmtContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_alterdomainstmt);
		try {
			setState(7982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7932);
				match(ALTER);
				setState(7933);
				match(DOMAIN_P);
				setState(7934);
				any_name();
				setState(7935);
				alter_column_default();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7937);
				match(ALTER);
				setState(7938);
				match(DOMAIN_P);
				setState(7939);
				any_name();
				setState(7940);
				match(DROP);
				setState(7941);
				match(NOT);
				setState(7942);
				match(NULL_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7944);
				match(ALTER);
				setState(7945);
				match(DOMAIN_P);
				setState(7946);
				any_name();
				setState(7947);
				match(SET);
				setState(7948);
				match(NOT);
				setState(7949);
				match(NULL_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7951);
				match(ALTER);
				setState(7952);
				match(DOMAIN_P);
				setState(7953);
				any_name();
				setState(7954);
				match(ADD_P);
				setState(7955);
				tableconstraint();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7957);
				match(ALTER);
				setState(7958);
				match(DOMAIN_P);
				setState(7959);
				any_name();
				setState(7960);
				match(DROP);
				setState(7961);
				match(CONSTRAINT);
				setState(7962);
				name();
				setState(7963);
				opt_drop_behavior();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7965);
				match(ALTER);
				setState(7966);
				match(DOMAIN_P);
				setState(7967);
				any_name();
				setState(7968);
				match(DROP);
				setState(7969);
				match(CONSTRAINT);
				setState(7970);
				match(IF_P);
				setState(7971);
				match(EXISTS);
				setState(7972);
				name();
				setState(7973);
				opt_drop_behavior();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7975);
				match(ALTER);
				setState(7976);
				match(DOMAIN_P);
				setState(7977);
				any_name();
				setState(7978);
				match(VALIDATE);
				setState(7979);
				match(CONSTRAINT);
				setState(7980);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_asContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opt_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asContext opt_as() throws RecognitionException {
		Opt_asContext _localctx = new Opt_asContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_opt_as);
		try {
			setState(7986);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(7984);
				match(AS);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltertsdictionarystmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public AltertsdictionarystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertsdictionarystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertsdictionarystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertsdictionarystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertsdictionarystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertsdictionarystmtContext altertsdictionarystmt() throws RecognitionException {
		AltertsdictionarystmtContext _localctx = new AltertsdictionarystmtContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_altertsdictionarystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7988);
			match(ALTER);
			setState(7989);
			match(TEXT_P);
			setState(7990);
			match(SEARCH);
			setState(7991);
			match(DICTIONARY);
			setState(7992);
			any_name();
			setState(7993);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltertsconfigurationstmtContext extends ParserRuleContext {
		public List<TerminalNode> ALTER() { return getTokens(PostgreSQLParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(PostgreSQLParser.ALTER, i);
		}
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Any_withContext any_with() {
			return getRuleContext(Any_withContext.class,0);
		}
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AltertsconfigurationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertsconfigurationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertsconfigurationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertsconfigurationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertsconfigurationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertsconfigurationstmtContext altertsconfigurationstmt() throws RecognitionException {
		AltertsconfigurationstmtContext _localctx = new AltertsconfigurationstmtContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_altertsconfigurationstmt);
		try {
			setState(8067);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7995);
				match(ALTER);
				setState(7996);
				match(TEXT_P);
				setState(7997);
				match(SEARCH);
				setState(7998);
				match(CONFIGURATION);
				setState(7999);
				any_name();
				setState(8000);
				match(ADD_P);
				setState(8001);
				match(MAPPING);
				setState(8002);
				match(FOR);
				setState(8003);
				name_list(0);
				setState(8004);
				any_with();
				setState(8005);
				any_name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8007);
				match(ALTER);
				setState(8008);
				match(TEXT_P);
				setState(8009);
				match(SEARCH);
				setState(8010);
				match(CONFIGURATION);
				setState(8011);
				any_name();
				setState(8012);
				match(ALTER);
				setState(8013);
				match(MAPPING);
				setState(8014);
				match(FOR);
				setState(8015);
				name_list(0);
				setState(8016);
				any_with();
				setState(8017);
				any_name_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8019);
				match(ALTER);
				setState(8020);
				match(TEXT_P);
				setState(8021);
				match(SEARCH);
				setState(8022);
				match(CONFIGURATION);
				setState(8023);
				any_name();
				setState(8024);
				match(ALTER);
				setState(8025);
				match(MAPPING);
				setState(8026);
				match(REPLACE);
				setState(8027);
				any_name();
				setState(8028);
				any_with();
				setState(8029);
				any_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8031);
				match(ALTER);
				setState(8032);
				match(TEXT_P);
				setState(8033);
				match(SEARCH);
				setState(8034);
				match(CONFIGURATION);
				setState(8035);
				any_name();
				setState(8036);
				match(ALTER);
				setState(8037);
				match(MAPPING);
				setState(8038);
				match(FOR);
				setState(8039);
				name_list(0);
				setState(8040);
				match(REPLACE);
				setState(8041);
				any_name();
				setState(8042);
				any_with();
				setState(8043);
				any_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8045);
				match(ALTER);
				setState(8046);
				match(TEXT_P);
				setState(8047);
				match(SEARCH);
				setState(8048);
				match(CONFIGURATION);
				setState(8049);
				any_name();
				setState(8050);
				match(DROP);
				setState(8051);
				match(MAPPING);
				setState(8052);
				match(FOR);
				setState(8053);
				name_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8055);
				match(ALTER);
				setState(8056);
				match(TEXT_P);
				setState(8057);
				match(SEARCH);
				setState(8058);
				match(CONFIGURATION);
				setState(8059);
				any_name();
				setState(8060);
				match(DROP);
				setState(8061);
				match(MAPPING);
				setState(8062);
				match(IF_P);
				setState(8063);
				match(EXISTS);
				setState(8064);
				match(FOR);
				setState(8065);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Any_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_with(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_withContext any_with() throws RecognitionException {
		Any_withContext _localctx = new Any_withContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_any_with);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8069);
			match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateconversionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public CreateconversionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createconversionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateconversionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateconversionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateconversionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateconversionstmtContext createconversionstmt() throws RecognitionException {
		CreateconversionstmtContext _localctx = new CreateconversionstmtContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_createconversionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8071);
			match(CREATE);
			setState(8072);
			opt_default();
			setState(8073);
			match(CONVERSION_P);
			setState(8074);
			any_name();
			setState(8075);
			match(FOR);
			setState(8076);
			sconst();
			setState(8077);
			match(TO);
			setState(8078);
			sconst();
			setState(8079);
			match(FROM);
			setState(8080);
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterstmtContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Cluster_index_specificationContext cluster_index_specification() {
			return getRuleContext(Cluster_index_specificationContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public ClusterstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterClusterstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitClusterstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitClusterstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterstmtContext clusterstmt() throws RecognitionException {
		ClusterstmtContext _localctx = new ClusterstmtContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_clusterstmt);
		try {
			setState(8095);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8082);
				match(CLUSTER);
				setState(8083);
				opt_verbose();
				setState(8084);
				qualified_name();
				setState(8085);
				cluster_index_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8087);
				match(CLUSTER);
				setState(8088);
				opt_verbose();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8089);
				match(CLUSTER);
				setState(8090);
				opt_verbose();
				setState(8091);
				name();
				setState(8092);
				match(ON);
				setState(8093);
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_index_specificationContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Cluster_index_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_index_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCluster_index_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCluster_index_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCluster_index_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cluster_index_specificationContext cluster_index_specification() throws RecognitionException {
		Cluster_index_specificationContext _localctx = new Cluster_index_specificationContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_cluster_index_specification);
		try {
			setState(8100);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(8097);
				match(USING);
				setState(8098);
				name();
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacuumstmtContext extends ParserRuleContext {
		public TerminalNode VACUUM() { return getToken(PostgreSQLParser.VACUUM, 0); }
		public Opt_fullContext opt_full() {
			return getRuleContext(Opt_fullContext.class,0);
		}
		public Opt_freezeContext opt_freeze() {
			return getRuleContext(Opt_freezeContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Opt_analyzeContext opt_analyze() {
			return getRuleContext(Opt_analyzeContext.class,0);
		}
		public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
			return getRuleContext(Opt_vacuum_relation_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Vac_analyze_option_listContext vac_analyze_option_list() {
			return getRuleContext(Vac_analyze_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public VacuumstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuumstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuumstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuumstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuumstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumstmtContext vacuumstmt() throws RecognitionException {
		VacuumstmtContext _localctx = new VacuumstmtContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_vacuumstmt);
		try {
			setState(8115);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8102);
				match(VACUUM);
				setState(8103);
				opt_full();
				setState(8104);
				opt_freeze();
				setState(8105);
				opt_verbose();
				setState(8106);
				opt_analyze();
				setState(8107);
				opt_vacuum_relation_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8109);
				match(VACUUM);
				setState(8110);
				match(OPEN_PAREN);
				setState(8111);
				vac_analyze_option_list(0);
				setState(8112);
				match(CLOSE_PAREN);
				setState(8113);
				opt_vacuum_relation_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzestmtContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
			return getRuleContext(Opt_vacuum_relation_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Vac_analyze_option_listContext vac_analyze_option_list() {
			return getRuleContext(Vac_analyze_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AnalyzestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAnalyzestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAnalyzestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAnalyzestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzestmtContext analyzestmt() throws RecognitionException {
		AnalyzestmtContext _localctx = new AnalyzestmtContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_analyzestmt);
		try {
			setState(8127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8117);
				analyze_keyword();
				setState(8118);
				opt_verbose();
				setState(8119);
				opt_vacuum_relation_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8121);
				analyze_keyword();
				setState(8122);
				match(OPEN_PAREN);
				setState(8123);
				vac_analyze_option_list(0);
				setState(8124);
				match(CLOSE_PAREN);
				setState(8125);
				opt_vacuum_relation_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vac_analyze_option_listContext extends ParserRuleContext {
		public Vac_analyze_option_elemContext vac_analyze_option_elem() {
			return getRuleContext(Vac_analyze_option_elemContext.class,0);
		}
		public Vac_analyze_option_listContext vac_analyze_option_list() {
			return getRuleContext(Vac_analyze_option_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Vac_analyze_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_listContext vac_analyze_option_list() throws RecognitionException {
		return vac_analyze_option_list(0);
	}

	private Vac_analyze_option_listContext vac_analyze_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Vac_analyze_option_listContext _localctx = new Vac_analyze_option_listContext(_ctx, _parentState);
		Vac_analyze_option_listContext _prevctx = _localctx;
		int _startState = 852;
		enterRecursionRule(_localctx, 852, RULE_vac_analyze_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8130);
			vac_analyze_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(8137);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,337,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Vac_analyze_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_vac_analyze_option_list);
					setState(8132);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8133);
					match(COMMA);
					setState(8134);
					vac_analyze_option_elem();
					}
					} 
				}
				setState(8139);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,337,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Analyze_keywordContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public TerminalNode ANALYSE() { return getToken(PostgreSQLParser.ANALYSE, 0); }
		public Analyze_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAnalyze_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAnalyze_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAnalyze_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Analyze_keywordContext analyze_keyword() throws RecognitionException {
		Analyze_keywordContext _localctx = new Analyze_keywordContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_analyze_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8140);
			_la = _input.LA(1);
			if ( !(_la==ANALYSE || _la==ANALYZE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vac_analyze_option_elemContext extends ParserRuleContext {
		public Vac_analyze_option_nameContext vac_analyze_option_name() {
			return getRuleContext(Vac_analyze_option_nameContext.class,0);
		}
		public Vac_analyze_option_argContext vac_analyze_option_arg() {
			return getRuleContext(Vac_analyze_option_argContext.class,0);
		}
		public Vac_analyze_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_elemContext vac_analyze_option_elem() throws RecognitionException {
		Vac_analyze_option_elemContext _localctx = new Vac_analyze_option_elemContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_vac_analyze_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8142);
			vac_analyze_option_name();
			setState(8143);
			vac_analyze_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vac_analyze_option_nameContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Vac_analyze_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_nameContext vac_analyze_option_name() throws RecognitionException {
		Vac_analyze_option_nameContext _localctx = new Vac_analyze_option_nameContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_vac_analyze_option_name);
		try {
			setState(8147);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8145);
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8146);
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vac_analyze_option_argContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Vac_analyze_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_argContext vac_analyze_option_arg() throws RecognitionException {
		Vac_analyze_option_argContext _localctx = new Vac_analyze_option_argContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_vac_analyze_option_arg);
		try {
			setState(8152);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8149);
				opt_boolean_or_string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8150);
				numericonly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_analyzeContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_analyzeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_analyze; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_analyze(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_analyze(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_analyze(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_analyzeContext opt_analyze() throws RecognitionException {
		Opt_analyzeContext _localctx = new Opt_analyzeContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_opt_analyze);
		try {
			setState(8156);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8154);
				analyze_keyword();
				}
				break;
			case SEMI:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case INTO:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_verboseContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public Opt_verboseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_verbose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_verbose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_verbose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_verbose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_verboseContext opt_verbose() throws RecognitionException {
		Opt_verboseContext _localctx = new Opt_verboseContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_opt_verbose);
		try {
			setState(8160);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERBOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8158);
				match(VERBOSE);
				}
				break;
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_fullContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public Opt_fullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_full; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_full(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_full(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_full(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fullContext opt_full() throws RecognitionException {
		Opt_fullContext _localctx = new Opt_fullContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_opt_full);
		try {
			setState(8164);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8162);
				match(FULL);
				}
				break;
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case INTO:
			case TABLE:
			case FREEZE:
			case IS:
			case OUTER_P:
			case OVER:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_freezeContext extends ParserRuleContext {
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public Opt_freezeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_freeze; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_freeze(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_freeze(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_freeze(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_freezeContext opt_freeze() throws RecognitionException {
		Opt_freezeContext _localctx = new Opt_freezeContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_opt_freeze);
		try {
			setState(8168);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FREEZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8166);
				match(FREEZE);
				}
				break;
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case INTO:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_name_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_name_listContext opt_name_list() throws RecognitionException {
		Opt_name_listContext _localctx = new Opt_name_listContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_opt_name_list);
		try {
			setState(8175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8170);
				match(OPEN_PAREN);
				setState(8171);
				name_list(0);
				setState(8172);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vacuum_relationContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public Vacuum_relationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_relation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuum_relation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuum_relation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuum_relation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_relationContext vacuum_relation() throws RecognitionException {
		Vacuum_relationContext _localctx = new Vacuum_relationContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_vacuum_relation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8177);
			qualified_name();
			setState(8178);
			opt_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vacuum_relation_listContext extends ParserRuleContext {
		public Vacuum_relationContext vacuum_relation() {
			return getRuleContext(Vacuum_relationContext.class,0);
		}
		public Vacuum_relation_listContext vacuum_relation_list() {
			return getRuleContext(Vacuum_relation_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Vacuum_relation_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_relation_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuum_relation_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuum_relation_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuum_relation_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_relation_listContext vacuum_relation_list() throws RecognitionException {
		return vacuum_relation_list(0);
	}

	private Vacuum_relation_listContext vacuum_relation_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Vacuum_relation_listContext _localctx = new Vacuum_relation_listContext(_ctx, _parentState);
		Vacuum_relation_listContext _prevctx = _localctx;
		int _startState = 874;
		enterRecursionRule(_localctx, 874, RULE_vacuum_relation_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8181);
			vacuum_relation();
			}
			_ctx.stop = _input.LT(-1);
			setState(8188);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,345,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Vacuum_relation_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_vacuum_relation_list);
					setState(8183);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8184);
					match(COMMA);
					setState(8185);
					vacuum_relation();
					}
					} 
				}
				setState(8190);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,345,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_vacuum_relation_listContext extends ParserRuleContext {
		public Vacuum_relation_listContext vacuum_relation_list() {
			return getRuleContext(Vacuum_relation_listContext.class,0);
		}
		public Opt_vacuum_relation_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_vacuum_relation_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_vacuum_relation_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_vacuum_relation_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_vacuum_relation_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_vacuum_relation_listContext opt_vacuum_relation_list() throws RecognitionException {
		Opt_vacuum_relation_listContext _localctx = new Opt_vacuum_relation_listContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_opt_vacuum_relation_list);
		try {
			setState(8193);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8191);
				vacuum_relation_list(0);
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainstmtContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLParser.EXPLAIN, 0); }
		public ExplainablestmtContext explainablestmt() {
			return getRuleContext(ExplainablestmtContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Explain_option_listContext explain_option_list() {
			return getRuleContext(Explain_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExplainstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplainstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplainstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplainstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainstmtContext explainstmt() throws RecognitionException {
		ExplainstmtContext _localctx = new ExplainstmtContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_explainstmt);
		try {
			setState(8211);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8195);
				match(EXPLAIN);
				setState(8196);
				explainablestmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8197);
				match(EXPLAIN);
				setState(8198);
				analyze_keyword();
				setState(8199);
				opt_verbose();
				setState(8200);
				explainablestmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8202);
				match(EXPLAIN);
				setState(8203);
				match(VERBOSE);
				setState(8204);
				explainablestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8205);
				match(EXPLAIN);
				setState(8206);
				match(OPEN_PAREN);
				setState(8207);
				explain_option_list(0);
				setState(8208);
				match(CLOSE_PAREN);
				setState(8209);
				explainablestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainablestmtContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public DeclarecursorstmtContext declarecursorstmt() {
			return getRuleContext(DeclarecursorstmtContext.class,0);
		}
		public CreateasstmtContext createasstmt() {
			return getRuleContext(CreateasstmtContext.class,0);
		}
		public CreatematviewstmtContext creatematviewstmt() {
			return getRuleContext(CreatematviewstmtContext.class,0);
		}
		public RefreshmatviewstmtContext refreshmatviewstmt() {
			return getRuleContext(RefreshmatviewstmtContext.class,0);
		}
		public ExecutestmtContext executestmt() {
			return getRuleContext(ExecutestmtContext.class,0);
		}
		public ExplainablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplainablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplainablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplainablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainablestmtContext explainablestmt() throws RecognitionException {
		ExplainablestmtContext _localctx = new ExplainablestmtContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_explainablestmt);
		try {
			setState(8222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8213);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8214);
				insertstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8215);
				updatestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8216);
				deletestmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8217);
				declarecursorstmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8218);
				createasstmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8219);
				creatematviewstmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8220);
				refreshmatviewstmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8221);
				executestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_listContext extends ParserRuleContext {
		public Explain_option_elemContext explain_option_elem() {
			return getRuleContext(Explain_option_elemContext.class,0);
		}
		public Explain_option_listContext explain_option_list() {
			return getRuleContext(Explain_option_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Explain_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_listContext explain_option_list() throws RecognitionException {
		return explain_option_list(0);
	}

	private Explain_option_listContext explain_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Explain_option_listContext _localctx = new Explain_option_listContext(_ctx, _parentState);
		Explain_option_listContext _prevctx = _localctx;
		int _startState = 882;
		enterRecursionRule(_localctx, 882, RULE_explain_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8225);
			explain_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(8232);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,349,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Explain_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_explain_option_list);
					setState(8227);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8228);
					match(COMMA);
					setState(8229);
					explain_option_elem();
					}
					} 
				}
				setState(8234);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,349,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Explain_option_elemContext extends ParserRuleContext {
		public Explain_option_nameContext explain_option_name() {
			return getRuleContext(Explain_option_nameContext.class,0);
		}
		public Explain_option_argContext explain_option_arg() {
			return getRuleContext(Explain_option_argContext.class,0);
		}
		public Explain_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_elemContext explain_option_elem() throws RecognitionException {
		Explain_option_elemContext _localctx = new Explain_option_elemContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_explain_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8235);
			explain_option_name();
			setState(8236);
			explain_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_nameContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Explain_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_nameContext explain_option_name() throws RecognitionException {
		Explain_option_nameContext _localctx = new Explain_option_nameContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_explain_option_name);
		try {
			setState(8240);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8238);
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8239);
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_argContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Explain_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_argContext explain_option_arg() throws RecognitionException {
		Explain_option_argContext _localctx = new Explain_option_argContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_explain_option_arg);
		try {
			setState(8245);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8242);
				opt_boolean_or_string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8243);
				numericonly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparestmtContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Prep_type_clauseContext prep_type_clause() {
			return getRuleContext(Prep_type_clauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public PreparablestmtContext preparablestmt() {
			return getRuleContext(PreparablestmtContext.class,0);
		}
		public PreparestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPreparestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPreparestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPreparestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparestmtContext preparestmt() throws RecognitionException {
		PreparestmtContext _localctx = new PreparestmtContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_preparestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8247);
			match(PREPARE);
			setState(8248);
			name();
			setState(8249);
			prep_type_clause();
			setState(8250);
			match(AS);
			setState(8251);
			preparablestmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prep_type_clauseContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Prep_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prep_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrep_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrep_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrep_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prep_type_clauseContext prep_type_clause() throws RecognitionException {
		Prep_type_clauseContext _localctx = new Prep_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_prep_type_clause);
		try {
			setState(8258);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(8253);
				match(OPEN_PAREN);
				setState(8254);
				type_list(0);
				setState(8255);
				match(CLOSE_PAREN);
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparablestmtContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public PreparablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPreparablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPreparablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPreparablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparablestmtContext preparablestmt() throws RecognitionException {
		PreparablestmtContext _localctx = new PreparablestmtContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_preparablestmt);
		try {
			setState(8264);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8260);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8261);
				insertstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8262);
				updatestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8263);
				deletestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecutestmtContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Execute_param_clauseContext execute_param_clause() {
			return getRuleContext(Execute_param_clauseContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public ExecutestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExecutestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExecutestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExecutestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecutestmtContext executestmt() throws RecognitionException {
		ExecutestmtContext _localctx = new ExecutestmtContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_executestmt);
		try {
			setState(8293);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8266);
				match(EXECUTE);
				setState(8267);
				name();
				setState(8268);
				execute_param_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8270);
				match(CREATE);
				setState(8271);
				opttemp();
				setState(8272);
				match(TABLE);
				setState(8273);
				create_as_target();
				setState(8274);
				match(AS);
				setState(8275);
				match(EXECUTE);
				setState(8276);
				name();
				setState(8277);
				execute_param_clause();
				setState(8278);
				opt_with_data();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8280);
				match(CREATE);
				setState(8281);
				opttemp();
				setState(8282);
				match(TABLE);
				setState(8283);
				match(IF_P);
				setState(8284);
				match(NOT);
				setState(8285);
				match(EXISTS);
				setState(8286);
				create_as_target();
				setState(8287);
				match(AS);
				setState(8288);
				match(EXECUTE);
				setState(8289);
				name();
				setState(8290);
				execute_param_clause();
				setState(8291);
				opt_with_data();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_param_clauseContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Execute_param_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_param_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExecute_param_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExecute_param_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExecute_param_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_param_clauseContext execute_param_clause() throws RecognitionException {
		Execute_param_clauseContext _localctx = new Execute_param_clauseContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_execute_param_clause);
		try {
			setState(8300);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(8295);
				match(OPEN_PAREN);
				setState(8296);
				expr_list(0);
				setState(8297);
				match(CLOSE_PAREN);
				}
				break;
			case SEMI:
			case INTO:
			case WITH:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocatestmtContext extends ParserRuleContext {
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLParser.DEALLOCATE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public DeallocatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeallocatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeallocatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeallocatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocatestmtContext deallocatestmt() throws RecognitionException {
		DeallocatestmtContext _localctx = new DeallocatestmtContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_deallocatestmt);
		try {
			setState(8312);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8302);
				match(DEALLOCATE);
				setState(8303);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8304);
				match(DEALLOCATE);
				setState(8305);
				match(PREPARE);
				setState(8306);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8307);
				match(DEALLOCATE);
				setState(8308);
				match(ALL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8309);
				match(DEALLOCATE);
				setState(8310);
				match(PREPARE);
				setState(8311);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertstmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Insert_targetContext insert_target() {
			return getRuleContext(Insert_targetContext.class,0);
		}
		public Insert_restContext insert_rest() {
			return getRuleContext(Insert_restContext.class,0);
		}
		public Opt_on_conflictContext opt_on_conflict() {
			return getRuleContext(Opt_on_conflictContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public InsertstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsertstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsertstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsertstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertstmtContext insertstmt() throws RecognitionException {
		InsertstmtContext _localctx = new InsertstmtContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_insertstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8314);
			opt_with_clause();
			setState(8315);
			match(INSERT);
			setState(8316);
			match(INTO);
			setState(8317);
			insert_target();
			setState(8318);
			insert_rest();
			setState(8319);
			opt_on_conflict();
			setState(8320);
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Insert_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_targetContext insert_target() throws RecognitionException {
		Insert_targetContext _localctx = new Insert_targetContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_insert_target);
		try {
			setState(8327);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8322);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8323);
				qualified_name();
				setState(8324);
				match(AS);
				setState(8325);
				colid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_restContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLParser.OVERRIDING, 0); }
		public Override_kindContext override_kind() {
			return getRuleContext(Override_kindContext.class,0);
		}
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public Insert_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_restContext insert_rest() throws RecognitionException {
		Insert_restContext _localctx = new Insert_restContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_insert_rest);
		try {
			setState(8350);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8329);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8330);
				match(OVERRIDING);
				setState(8331);
				override_kind();
				setState(8332);
				match(VALUE_P);
				setState(8333);
				selectstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8335);
				match(OPEN_PAREN);
				setState(8336);
				insert_column_list(0);
				setState(8337);
				match(CLOSE_PAREN);
				setState(8338);
				selectstmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8340);
				match(OPEN_PAREN);
				setState(8341);
				insert_column_list(0);
				setState(8342);
				match(CLOSE_PAREN);
				setState(8343);
				match(OVERRIDING);
				setState(8344);
				override_kind();
				setState(8345);
				match(VALUE_P);
				setState(8346);
				selectstmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8348);
				match(DEFAULT);
				setState(8349);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Override_kindContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public Override_kindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_override_kind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOverride_kind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOverride_kind(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOverride_kind(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Override_kindContext override_kind() throws RecognitionException {
		Override_kindContext _localctx = new Override_kindContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_override_kind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8352);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==SYSTEM_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_listContext extends ParserRuleContext {
		public Insert_column_itemContext insert_column_item() {
			return getRuleContext(Insert_column_itemContext.class,0);
		}
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Insert_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_listContext insert_column_list() throws RecognitionException {
		return insert_column_list(0);
	}

	private Insert_column_listContext insert_column_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Insert_column_listContext _localctx = new Insert_column_listContext(_ctx, _parentState);
		Insert_column_listContext _prevctx = _localctx;
		int _startState = 910;
		enterRecursionRule(_localctx, 910, RULE_insert_column_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8355);
			insert_column_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(8362);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,359,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Insert_column_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_insert_column_list);
					setState(8357);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8358);
					match(COMMA);
					setState(8359);
					insert_column_item();
					}
					} 
				}
				setState(8364);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,359,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Insert_column_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Insert_column_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_column_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_column_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_column_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_itemContext insert_column_item() throws RecognitionException {
		Insert_column_itemContext _localctx = new Insert_column_itemContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_insert_column_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8365);
			colid();
			setState(8366);
			opt_indirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_on_conflictContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode CONFLICT() { return getToken(PostgreSQLParser.CONFLICT, 0); }
		public Opt_conf_exprContext opt_conf_expr() {
			return getRuleContext(Opt_conf_exprContext.class,0);
		}
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public Opt_on_conflictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_on_conflict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_on_conflict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_on_conflict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_on_conflict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_on_conflictContext opt_on_conflict() throws RecognitionException {
		Opt_on_conflictContext _localctx = new Opt_on_conflictContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_opt_on_conflict);
		try {
			setState(8384);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8368);
				match(ON);
				setState(8369);
				match(CONFLICT);
				setState(8370);
				opt_conf_expr();
				setState(8371);
				match(DO);
				setState(8372);
				match(UPDATE);
				setState(8373);
				match(SET);
				setState(8374);
				set_clause_list(0);
				setState(8375);
				where_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8377);
				match(ON);
				setState(8378);
				match(CONFLICT);
				setState(8379);
				opt_conf_expr();
				setState(8380);
				match(DO);
				setState(8381);
				match(NOTHING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_conf_exprContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_conf_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_conf_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_conf_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_conf_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_conf_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_conf_exprContext opt_conf_expr() throws RecognitionException {
		Opt_conf_exprContext _localctx = new Opt_conf_exprContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_opt_conf_expr);
		try {
			setState(8395);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(8386);
				match(OPEN_PAREN);
				setState(8387);
				index_params(0);
				setState(8388);
				match(CLOSE_PAREN);
				setState(8389);
				where_clause();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8391);
				match(ON);
				setState(8392);
				match(CONSTRAINT);
				setState(8393);
				name();
				}
				break;
			case DO:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Returning_clauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(PostgreSQLParser.RETURNING, 0); }
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReturning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReturning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReturning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Returning_clauseContext returning_clause() throws RecognitionException {
		Returning_clauseContext _localctx = new Returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_returning_clause);
		try {
			setState(8400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8397);
				match(RETURNING);
				setState(8398);
				target_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeletestmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public DeletestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deletestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeletestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeletestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeletestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeletestmtContext deletestmt() throws RecognitionException {
		DeletestmtContext _localctx = new DeletestmtContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_deletestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8402);
			opt_with_clause();
			setState(8403);
			match(DELETE_P);
			setState(8404);
			match(FROM);
			setState(8405);
			relation_expr_opt_alias();
			setState(8406);
			using_clause();
			setState(8407);
			where_or_current_clause();
			setState(8408);
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_using_clause);
		try {
			setState(8413);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8410);
				match(USING);
				setState(8411);
				from_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockstmtContext extends ParserRuleContext {
		public TerminalNode LOCK_P() { return getToken(PostgreSQLParser.LOCK_P, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_lockContext opt_lock() {
			return getRuleContext(Opt_lockContext.class,0);
		}
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public LockstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLockstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLockstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLockstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockstmtContext lockstmt() throws RecognitionException {
		LockstmtContext _localctx = new LockstmtContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_lockstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8415);
			match(LOCK_P);
			setState(8416);
			opt_table();
			setState(8417);
			relation_expr_list(0);
			setState(8418);
			opt_lock();
			setState(8419);
			opt_nowait();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_lockContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Lock_typeContext lock_type() {
			return getRuleContext(Lock_typeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PostgreSQLParser.MODE, 0); }
		public Opt_lockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_lock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_lock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_lock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_lock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_lockContext opt_lock() throws RecognitionException {
		Opt_lockContext _localctx = new Opt_lockContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_opt_lock);
		try {
			setState(8426);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(8421);
				match(IN_P);
				setState(8422);
				lock_type();
				setState(8423);
				match(MODE);
				}
				break;
			case SEMI:
			case INTO:
			case NOWAIT:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_typeContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Lock_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLock_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLock_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLock_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_typeContext lock_type() throws RecognitionException {
		Lock_typeContext _localctx = new Lock_typeContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_lock_type);
		try {
			setState(8444);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8428);
				match(ACCESS);
				setState(8429);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8430);
				match(ROW);
				setState(8431);
				match(SHARE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8432);
				match(ROW);
				setState(8433);
				match(EXCLUSIVE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8434);
				match(SHARE);
				setState(8435);
				match(UPDATE);
				setState(8436);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8437);
				match(SHARE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8438);
				match(SHARE);
				setState(8439);
				match(ROW);
				setState(8440);
				match(EXCLUSIVE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8441);
				match(EXCLUSIVE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8442);
				match(ACCESS);
				setState(8443);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nowaitContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public Opt_nowaitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nowait; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_nowait(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_nowait(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_nowait(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nowaitContext opt_nowait() throws RecognitionException {
		Opt_nowaitContext _localctx = new Opt_nowaitContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_opt_nowait);
		try {
			setState(8448);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOWAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8446);
				match(NOWAIT);
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nowait_or_skipContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public TerminalNode SKIP_P() { return getToken(PostgreSQLParser.SKIP_P, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLParser.LOCKED, 0); }
		public Opt_nowait_or_skipContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nowait_or_skip; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_nowait_or_skip(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_nowait_or_skip(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_nowait_or_skip(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nowait_or_skipContext opt_nowait_or_skip() throws RecognitionException {
		Opt_nowait_or_skipContext _localctx = new Opt_nowait_or_skipContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_opt_nowait_or_skip);
		try {
			setState(8454);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8450);
				match(NOWAIT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8451);
				match(SKIP_P);
				setState(8452);
				match(LOCKED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatestmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public UpdatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUpdatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUpdatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUpdatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdatestmtContext updatestmt() throws RecognitionException {
		UpdatestmtContext _localctx = new UpdatestmtContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_updatestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8456);
			opt_with_clause();
			setState(8457);
			match(UPDATE);
			setState(8458);
			relation_expr_opt_alias();
			setState(8459);
			match(SET);
			setState(8460);
			set_clause_list(0);
			setState(8461);
			from_clause();
			setState(8462);
			where_or_current_clause();
			setState(8463);
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_clause_listContext extends ParserRuleContext {
		public Set_clauseContext set_clause() {
			return getRuleContext(Set_clauseContext.class,0);
		}
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Set_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_clause_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clause_listContext set_clause_list() throws RecognitionException {
		return set_clause_list(0);
	}

	private Set_clause_listContext set_clause_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Set_clause_listContext _localctx = new Set_clause_listContext(_ctx, _parentState);
		Set_clause_listContext _prevctx = _localctx;
		int _startState = 936;
		enterRecursionRule(_localctx, 936, RULE_set_clause_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8466);
			set_clause();
			}
			_ctx.stop = _input.LT(-1);
			setState(8473);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,368,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Set_clause_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_set_clause_list);
					setState(8468);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8469);
					match(COMMA);
					setState(8470);
					set_clause();
					}
					} 
				}
				setState(8475);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,368,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Set_clauseContext extends ParserRuleContext {
		public Set_targetContext set_target() {
			return getRuleContext(Set_targetContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Set_target_listContext set_target_list() {
			return getRuleContext(Set_target_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clauseContext set_clause() throws RecognitionException {
		Set_clauseContext _localctx = new Set_clauseContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_set_clause);
		try {
			setState(8486);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8476);
				set_target();
				setState(8477);
				match(EQUAL);
				setState(8478);
				a_expr(0);
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(8480);
				match(OPEN_PAREN);
				setState(8481);
				set_target_list(0);
				setState(8482);
				match(CLOSE_PAREN);
				setState(8483);
				match(EQUAL);
				setState(8484);
				a_expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_targetContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_targetContext set_target() throws RecognitionException {
		Set_targetContext _localctx = new Set_targetContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_set_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8488);
			colid();
			setState(8489);
			opt_indirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_target_listContext extends ParserRuleContext {
		public Set_targetContext set_target() {
			return getRuleContext(Set_targetContext.class,0);
		}
		public Set_target_listContext set_target_list() {
			return getRuleContext(Set_target_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Set_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_target_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_target_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_target_listContext set_target_list() throws RecognitionException {
		return set_target_list(0);
	}

	private Set_target_listContext set_target_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Set_target_listContext _localctx = new Set_target_listContext(_ctx, _parentState);
		Set_target_listContext _prevctx = _localctx;
		int _startState = 942;
		enterRecursionRule(_localctx, 942, RULE_set_target_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8492);
			set_target();
			}
			_ctx.stop = _input.LT(-1);
			setState(8499);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,370,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Set_target_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_set_target_list);
					setState(8494);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8495);
					match(COMMA);
					setState(8496);
					set_target();
					}
					} 
				}
				setState(8501);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,370,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DeclarecursorstmtContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Cursor_optionsContext cursor_options() {
			return getRuleContext(Cursor_optionsContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public Opt_holdContext opt_hold() {
			return getRuleContext(Opt_holdContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public DeclarecursorstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declarecursorstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeclarecursorstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeclarecursorstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeclarecursorstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclarecursorstmtContext declarecursorstmt() throws RecognitionException {
		DeclarecursorstmtContext _localctx = new DeclarecursorstmtContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_declarecursorstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8502);
			match(DECLARE);
			setState(8503);
			cursor_name();
			setState(8504);
			cursor_options(0);
			setState(8505);
			match(CURSOR);
			setState(8506);
			opt_hold();
			setState(8507);
			match(FOR);
			setState(8508);
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_cursor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8510);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_optionsContext extends ParserRuleContext {
		public Cursor_optionsContext cursor_options() {
			return getRuleContext(Cursor_optionsContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PostgreSQLParser.INSENSITIVE, 0); }
		public Cursor_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCursor_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCursor_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCursor_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_optionsContext cursor_options() throws RecognitionException {
		return cursor_options(0);
	}

	private Cursor_optionsContext cursor_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Cursor_optionsContext _localctx = new Cursor_optionsContext(_ctx, _parentState);
		Cursor_optionsContext _prevctx = _localctx;
		int _startState = 948;
		enterRecursionRule(_localctx, 948, RULE_cursor_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(8524);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,372,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(8522);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
					case 1:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(8513);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(8514);
						match(NO);
						setState(8515);
						match(SCROLL);
						}
						break;
					case 2:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(8516);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(8517);
						match(SCROLL);
						}
						break;
					case 3:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(8518);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(8519);
						match(BINARY);
						}
						break;
					case 4:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(8520);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(8521);
						match(INSENSITIVE);
						}
						break;
					}
					} 
				}
				setState(8526);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,372,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_holdContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLParser.HOLD, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public Opt_holdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_hold; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_hold(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_hold(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_hold(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_holdContext opt_hold() throws RecognitionException {
		Opt_holdContext _localctx = new Opt_holdContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_opt_hold);
		try {
			setState(8532);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(8528);
				match(WITH);
				setState(8529);
				match(HOLD);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(8530);
				match(WITHOUT);
				setState(8531);
				match(HOLD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectstmtContext extends ParserRuleContext {
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public SelectstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelectstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelectstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelectstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectstmtContext selectstmt() throws RecognitionException {
		SelectstmtContext _localctx = new SelectstmtContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_selectstmt);
		try {
			setState(8536);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8534);
				select_no_parens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8535);
				select_with_parens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_with_parensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Select_with_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_with_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_with_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_with_parens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_with_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_with_parensContext select_with_parens() throws RecognitionException {
		Select_with_parensContext _localctx = new Select_with_parensContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_select_with_parens);
		try {
			setState(8546);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8538);
				match(OPEN_PAREN);
				setState(8539);
				select_no_parens();
				setState(8540);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8542);
				match(OPEN_PAREN);
				setState(8543);
				select_with_parens();
				setState(8544);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_no_parensContext extends ParserRuleContext {
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Opt_select_limitContext opt_select_limit() {
			return getRuleContext(Opt_select_limitContext.class,0);
		}
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Opt_for_locking_clauseContext opt_for_locking_clause() {
			return getRuleContext(Opt_for_locking_clauseContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Select_no_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_no_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_no_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_no_parens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_no_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_no_parensContext select_no_parens() throws RecognitionException {
		Select_no_parensContext _localctx = new Select_no_parensContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_select_no_parens);
		try {
			setState(8581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8548);
				simple_select(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8549);
				select_clause();
				setState(8550);
				sort_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8552);
				select_clause();
				setState(8553);
				opt_sort_clause();
				setState(8554);
				for_locking_clause();
				setState(8555);
				opt_select_limit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8557);
				select_clause();
				setState(8558);
				opt_sort_clause();
				setState(8559);
				select_limit();
				setState(8560);
				opt_for_locking_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8562);
				with_clause();
				setState(8563);
				select_clause();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8565);
				with_clause();
				setState(8566);
				select_clause();
				setState(8567);
				sort_clause();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8569);
				with_clause();
				setState(8570);
				select_clause();
				setState(8571);
				opt_sort_clause();
				setState(8572);
				for_locking_clause();
				setState(8573);
				opt_select_limit();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8575);
				with_clause();
				setState(8576);
				select_clause();
				setState(8577);
				opt_sort_clause();
				setState(8578);
				select_limit();
				setState(8579);
				opt_for_locking_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_clauseContext extends ParserRuleContext {
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_select_clause);
		try {
			setState(8585);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8583);
				simple_select(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8584);
				select_with_parens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_selectContext extends ParserRuleContext {
		public Simple_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_select; }
	 
		public Simple_selectContext() { }
		public void copyFrom(Simple_selectContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Simple_select_valuesContext extends Simple_selectContext {
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Simple_select_valuesContext(Simple_selectContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSimple_select_values(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSimple_select_values(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSimple_select_values(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Simple_select_selectContext extends Simple_selectContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public Opt_all_clauseContext opt_all_clause() {
			return getRuleContext(Opt_all_clauseContext.class,0);
		}
		public List<Into_clauseContext> into_clause() {
			return getRuleContexts(Into_clauseContext.class);
		}
		public Into_clauseContext into_clause(int i) {
			return getRuleContext(Into_clauseContext.class,i);
		}
		public Opt_target_listContext opt_target_list() {
			return getRuleContext(Opt_target_listContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_clauseContext group_clause() {
			return getRuleContext(Group_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public Distinct_clauseContext distinct_clause() {
			return getRuleContext(Distinct_clauseContext.class,0);
		}
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Simple_select_selectContext(Simple_selectContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSimple_select_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSimple_select_select(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSimple_select_select(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Simple_select_tableContext extends Simple_selectContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Simple_select_tableContext(Simple_selectContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSimple_select_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSimple_select_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSimple_select_table(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Simple_select_union_except_intersectContext extends Simple_selectContext {
		public List<Select_with_parensContext> select_with_parens() {
			return getRuleContexts(Select_with_parensContext.class);
		}
		public Select_with_parensContext select_with_parens(int i) {
			return getRuleContext(Select_with_parensContext.class,i);
		}
		public Set_operator_with_all_or_distinctContext set_operator_with_all_or_distinct() {
			return getRuleContext(Set_operator_with_all_or_distinctContext.class,0);
		}
		public List<Simple_selectContext> simple_select() {
			return getRuleContexts(Simple_selectContext.class);
		}
		public Simple_selectContext simple_select(int i) {
			return getRuleContext(Simple_selectContext.class,i);
		}
		public Simple_select_union_except_intersectContext(Simple_selectContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSimple_select_union_except_intersect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSimple_select_union_except_intersect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSimple_select_union_except_intersect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_selectContext simple_select() throws RecognitionException {
		return simple_select(0);
	}

	private Simple_selectContext simple_select(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Simple_selectContext _localctx = new Simple_selectContext(_ctx, _parentState);
		Simple_selectContext _prevctx = _localctx;
		int _startState = 960;
		enterRecursionRule(_localctx, 960, RULE_simple_select, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				_localctx = new Simple_select_selectContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(8588);
				match(SELECT);
				setState(8589);
				opt_all_clause();
				setState(8590);
				into_clause();
				setState(8591);
				opt_target_list();
				setState(8592);
				into_clause();
				setState(8593);
				from_clause();
				setState(8594);
				where_clause();
				setState(8595);
				group_clause();
				setState(8596);
				having_clause();
				setState(8597);
				window_clause();
				}
				break;
			case 2:
				{
				_localctx = new Simple_select_selectContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(8599);
				match(SELECT);
				setState(8600);
				distinct_clause();
				setState(8601);
				target_list();
				setState(8602);
				into_clause();
				setState(8603);
				from_clause();
				setState(8604);
				where_clause();
				setState(8605);
				group_clause();
				setState(8606);
				having_clause();
				setState(8607);
				window_clause();
				}
				break;
			case 3:
				{
				_localctx = new Simple_select_valuesContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(8609);
				values_clause(0);
				}
				break;
			case 4:
				{
				_localctx = new Simple_select_tableContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(8610);
				match(TABLE);
				setState(8611);
				relation_expr();
				}
				break;
			case 5:
				{
				_localctx = new Simple_select_union_except_intersectContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(8612);
				select_with_parens();
				setState(8613);
				set_operator_with_all_or_distinct();
				setState(8616);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					setState(8614);
					simple_select(0);
					}
					break;
				case 2:
					{
					setState(8615);
					select_with_parens();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(8628);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,381,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Simple_select_union_except_intersectContext(new Simple_selectContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_simple_select);
					setState(8620);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8621);
					set_operator_with_all_or_distinct();
					setState(8624);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
					case 1:
						{
						setState(8622);
						simple_select(0);
						}
						break;
					case 2:
						{
						setState(8623);
						select_with_parens();
						}
						break;
					}
					}
					} 
				}
				setState(8630);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,381,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Set_operatorContext extends ParserRuleContext {
		public Set_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_operator; }
	 
		public Set_operatorContext() { }
		public void copyFrom(Set_operatorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IntersectContext extends Set_operatorContext {
		public TerminalNode INTERSECT() { return getToken(PostgreSQLParser.INTERSECT, 0); }
		public IntersectContext(Set_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIntersect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIntersect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIntersect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExceptContext extends Set_operatorContext {
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public ExceptContext(Set_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExcept(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExcept(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExcept(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnionContext extends Set_operatorContext {
		public TerminalNode UNION() { return getToken(PostgreSQLParser.UNION, 0); }
		public UnionContext(Set_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_operatorContext set_operator() throws RecognitionException {
		Set_operatorContext _localctx = new Set_operatorContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_set_operator);
		try {
			setState(8634);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				_localctx = new UnionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(8631);
				match(UNION);
				}
				break;
			case INTERSECT:
				_localctx = new IntersectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(8632);
				match(INTERSECT);
				}
				break;
			case EXCEPT:
				_localctx = new ExceptContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(8633);
				match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_operator_with_all_or_distinctContext extends ParserRuleContext {
		public Set_operatorContext set_operator() {
			return getRuleContext(Set_operatorContext.class,0);
		}
		public All_or_distinctContext all_or_distinct() {
			return getRuleContext(All_or_distinctContext.class,0);
		}
		public Set_operator_with_all_or_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_operator_with_all_or_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_operator_with_all_or_distinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_operator_with_all_or_distinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_operator_with_all_or_distinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_operator_with_all_or_distinctContext set_operator_with_all_or_distinct() throws RecognitionException {
		Set_operator_with_all_or_distinctContext _localctx = new Set_operator_with_all_or_distinctContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_set_operator_with_all_or_distinct);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8636);
			set_operator();
			setState(8637);
			all_or_distinct();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Cte_listContext cte_list() {
			return getRuleContext(Cte_listContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWith_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWith_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWith_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_clauseContext with_clause() throws RecognitionException {
		With_clauseContext _localctx = new With_clauseContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_with_clause);
		try {
			setState(8644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8639);
				match(WITH);
				setState(8640);
				cte_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8641);
				match(WITH);
				setState(8642);
				match(RECURSIVE);
				setState(8643);
				cte_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cte_listContext extends ParserRuleContext {
		public Common_table_exprContext common_table_expr() {
			return getRuleContext(Common_table_exprContext.class,0);
		}
		public Cte_listContext cte_list() {
			return getRuleContext(Cte_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Cte_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cte_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCte_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCte_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCte_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cte_listContext cte_list() throws RecognitionException {
		return cte_list(0);
	}

	private Cte_listContext cte_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Cte_listContext _localctx = new Cte_listContext(_ctx, _parentState);
		Cte_listContext _prevctx = _localctx;
		int _startState = 968;
		enterRecursionRule(_localctx, 968, RULE_cte_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8647);
			common_table_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(8654);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,384,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Cte_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_cte_list);
					setState(8649);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8650);
					match(COMMA);
					setState(8651);
					common_table_expr();
					}
					} 
				}
				setState(8656);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,384,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Common_table_exprContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opt_materializedContext opt_materialized() {
			return getRuleContext(Opt_materializedContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public PreparablestmtContext preparablestmt() {
			return getRuleContext(PreparablestmtContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Common_table_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommon_table_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommon_table_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommon_table_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_table_exprContext common_table_expr() throws RecognitionException {
		Common_table_exprContext _localctx = new Common_table_exprContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_common_table_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8657);
			name();
			setState(8658);
			opt_name_list();
			setState(8659);
			match(AS);
			setState(8660);
			opt_materialized();
			setState(8661);
			match(OPEN_PAREN);
			setState(8662);
			preparablestmt();
			setState(8663);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_materializedContext extends ParserRuleContext {
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Opt_materializedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_materialized; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_materialized(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_materialized(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_materialized(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_materializedContext opt_materialized() throws RecognitionException {
		Opt_materializedContext _localctx = new Opt_materializedContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_opt_materialized);
		try {
			setState(8669);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATERIALIZED:
				enterOuterAlt(_localctx, 1);
				{
				setState(8665);
				match(MATERIALIZED);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8666);
				match(NOT);
				setState(8667);
				match(MATERIALIZED);
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_with_clauseContext extends ParserRuleContext {
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Opt_with_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_with_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_with_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_with_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_clauseContext opt_with_clause() throws RecognitionException {
		Opt_with_clauseContext _localctx = new Opt_with_clauseContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_opt_with_clause);
		try {
			setState(8673);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(8671);
				with_clause();
				}
				break;
			case DELETE_P:
			case INSERT:
			case UPDATE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Opt_strictContext opt_strict() {
			return getRuleContext(Opt_strictContext.class,0);
		}
		public OpttempTableNameContext opttempTableName() {
			return getRuleContext(OpttempTableNameContext.class,0);
		}
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_into_clause);
		try {
			setState(8682);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8675);
				match(INTO);
				setState(8676);
				opt_strict();
				setState(8677);
				opttempTableName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8679);
				match(INTO);
				setState(8680);
				into_target();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_strictContext extends ParserRuleContext {
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public Opt_strictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_strict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_strict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_strict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_strict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_strictContext opt_strict() throws RecognitionException {
		Opt_strictContext _localctx = new Opt_strictContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_opt_strict);
		try {
			setState(8686);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8685);
				match(STRICT_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttempTableNameContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public OpttempTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttempTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttempTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttempTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttempTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttempTableNameContext opttempTableName() throws RecognitionException {
		OpttempTableNameContext _localctx = new OpttempTableNameContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_opttempTableName);
		try {
			setState(8723);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8688);
				match(TEMPORARY);
				setState(8689);
				opt_table();
				setState(8690);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8692);
				match(TEMP);
				setState(8693);
				opt_table();
				setState(8694);
				qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8696);
				match(LOCAL);
				setState(8697);
				match(TEMPORARY);
				setState(8698);
				opt_table();
				setState(8699);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8701);
				match(LOCAL);
				setState(8702);
				match(TEMP);
				setState(8703);
				opt_table();
				setState(8704);
				qualified_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8706);
				match(GLOBAL);
				setState(8707);
				match(TEMPORARY);
				setState(8708);
				opt_table();
				setState(8709);
				qualified_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8711);
				match(GLOBAL);
				setState(8712);
				match(TEMP);
				setState(8713);
				opt_table();
				setState(8714);
				qualified_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8716);
				match(UNLOGGED);
				setState(8717);
				opt_table();
				setState(8718);
				qualified_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8720);
				match(TABLE);
				setState(8721);
				qualified_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8722);
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_tableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Opt_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_tableContext opt_table() throws RecognitionException {
		Opt_tableContext _localctx = new Opt_tableContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_opt_table);
		try {
			setState(8727);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8725);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_or_distinctContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public All_or_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_or_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAll_or_distinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAll_or_distinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAll_or_distinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_or_distinctContext all_or_distinct() throws RecognitionException {
		All_or_distinctContext _localctx = new All_or_distinctContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_all_or_distinct);
		try {
			setState(8732);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8729);
				match(ALL);
				}
				break;
			case DISTINCT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8730);
				match(DISTINCT);
				}
				break;
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Distinct_clauseContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Distinct_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinct_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDistinct_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDistinct_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDistinct_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Distinct_clauseContext distinct_clause() throws RecognitionException {
		Distinct_clauseContext _localctx = new Distinct_clauseContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_distinct_clause);
		try {
			setState(8741);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8734);
				match(DISTINCT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8735);
				match(DISTINCT);
				setState(8736);
				match(ON);
				setState(8737);
				match(OPEN_PAREN);
				setState(8738);
				expr_list(0);
				setState(8739);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_all_clauseContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Opt_all_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_all_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_all_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_all_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_all_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_all_clauseContext opt_all_clause() throws RecognitionException {
		Opt_all_clauseContext _localctx = new Opt_all_clauseContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_opt_all_clause);
		try {
			setState(8745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8743);
				match(ALL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_sort_clauseContext extends ParserRuleContext {
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Opt_sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_sort_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_sort_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_sort_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_sort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_sort_clauseContext opt_sort_clause() throws RecognitionException {
		Opt_sort_clauseContext _localctx = new Opt_sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_opt_sort_clause);
		try {
			setState(8749);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8747);
				sort_clause();
				}
				break;
			case CLOSE_PAREN:
			case FETCH:
			case FOR:
			case LIMIT:
			case OFFSET:
			case RANGE:
			case ROWS:
			case GROUPS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Sortby_listContext sortby_list() {
			return getRuleContext(Sortby_listContext.class,0);
		}
		public Sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSort_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSort_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_clauseContext sort_clause() throws RecognitionException {
		Sort_clauseContext _localctx = new Sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_sort_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8751);
			match(ORDER);
			setState(8752);
			match(BY);
			setState(8753);
			sortby_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sortby_listContext extends ParserRuleContext {
		public List<SortbyContext> sortby() {
			return getRuleContexts(SortbyContext.class);
		}
		public SortbyContext sortby(int i) {
			return getRuleContext(SortbyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Sortby_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSortby_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSortby_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSortby_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sortby_listContext sortby_list() throws RecognitionException {
		Sortby_listContext _localctx = new Sortby_listContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_sortby_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8755);
			sortby();
			setState(8760);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,395,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8756);
					match(COMMA);
					setState(8757);
					sortby();
					}
					} 
				}
				setState(8762);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,395,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortbyContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public Text_patternsContext text_patterns() {
			return getRuleContext(Text_patternsContext.class,0);
		}
		public Qual_all_opContext qual_all_op() {
			return getRuleContext(Qual_all_opContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSortby(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSortby(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSortby(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyContext sortby() throws RecognitionException {
		SortbyContext _localctx = new SortbyContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_sortby);
		try {
			setState(8775);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8763);
				a_expr(0);
				setState(8764);
				match(USING);
				setState(8767);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
				case 1:
					{
					setState(8765);
					text_patterns();
					}
					break;
				case 2:
					{
					setState(8766);
					qual_all_op();
					}
					break;
				}
				setState(8769);
				opt_nulls_order();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8771);
				a_expr(0);
				setState(8772);
				opt_asc_desc();
				setState(8773);
				opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_limitContext extends ParserRuleContext {
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_limit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limitContext select_limit() throws RecognitionException {
		Select_limitContext _localctx = new Select_limitContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_select_limit);
		try {
			setState(8785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8777);
				limit_clause();
				setState(8778);
				offset_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8780);
				offset_clause();
				setState(8781);
				limit_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8783);
				limit_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8784);
				offset_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_select_limitContext extends ParserRuleContext {
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Opt_select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_select_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_select_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_select_limit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_select_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_select_limitContext opt_select_limit() throws RecognitionException {
		Opt_select_limitContext _localctx = new Opt_select_limitContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_opt_select_limit);
		try {
			setState(8789);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8787);
				select_limit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public Select_limit_valueContext select_limit_value() {
			return getRuleContext(Select_limit_valueContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public First_or_nextContext first_or_next() {
			return getRuleContext(First_or_nextContext.class,0);
		}
		public Select_fetch_first_valueContext select_fetch_first_value() {
			return getRuleContext(Select_fetch_first_valueContext.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLimit_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_limit_clause);
		try {
			setState(8822);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8791);
				match(LIMIT);
				setState(8792);
				select_limit_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8793);
				match(LIMIT);
				setState(8794);
				select_limit_value();
				setState(8795);
				match(COMMA);
				setState(8796);
				select_offset_value();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8798);
				match(FETCH);
				setState(8799);
				first_or_next();
				setState(8800);
				select_fetch_first_value();
				setState(8801);
				row_or_rows();
				setState(8802);
				match(ONLY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8804);
				match(FETCH);
				setState(8805);
				first_or_next();
				setState(8806);
				select_fetch_first_value();
				setState(8807);
				row_or_rows();
				setState(8808);
				match(WITH);
				setState(8809);
				match(TIES);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8811);
				match(FETCH);
				setState(8812);
				first_or_next();
				setState(8813);
				row_or_rows();
				setState(8814);
				match(ONLY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8816);
				match(FETCH);
				setState(8817);
				first_or_next();
				setState(8818);
				row_or_rows();
				setState(8819);
				match(WITH);
				setState(8820);
				match(TIES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Offset_clauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(PostgreSQLParser.OFFSET, 0); }
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public Select_fetch_first_valueContext select_fetch_first_value() {
			return getRuleContext(Select_fetch_first_valueContext.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOffset_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOffset_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOffset_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Offset_clauseContext offset_clause() throws RecognitionException {
		Offset_clauseContext _localctx = new Offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_offset_clause);
		try {
			setState(8830);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8824);
				match(OFFSET);
				setState(8825);
				select_offset_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8826);
				match(OFFSET);
				setState(8827);
				select_fetch_first_value();
				setState(8828);
				row_or_rows();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_limit_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Select_limit_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_limit_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_limit_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_limit_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limit_valueContext select_limit_value() throws RecognitionException {
		Select_limit_valueContext _localctx = new Select_limit_valueContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_select_limit_value);
		try {
			setState(8834);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case STAR:
			case EQUAL:
			case AMPERSAND:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case NOT_EQUALS_1:
			case PERCENT:
			case PARAM:
			case BITWISE_OR:
			case BITWISE_XOR:
			case BITWISE_NOT:
			case SQUARE_ROOT:
			case CUBIC_ROOT:
			case FACTORIAL:
			case PREFIX_FACTORIAL:
			case ABSOLUTE:
			case TEXT_PATTERN1:
			case TEXT_PATTERN2:
			case TEXT_PATTERN3:
			case TEXT_PATTERN4:
			case LENGTH:
			case CENTER:
			case CLOSET_POINT:
			case DISTANT:
			case EXTEND_RIGHT:
			case EXTEND_LEFT:
			case IS_STRICTLY_BELOW:
			case IS_STRICTLY_ABOVE:
			case EXTEND_ABOVE:
			case EXTEND_BELOW:
			case IS_BELOW:
			case IS_ABOVE:
			case INTERSECTION:
			case IS_HORIZON:
			case IS_VERTICAL:
			case IS_PERPENDICULAR:
			case IS_PARALLEL:
			case SAME:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(8832);
				a_expr(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8833);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_offset_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Select_offset_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_offset_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_offset_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_offset_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_offset_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_offset_valueContext select_offset_value() throws RecognitionException {
		Select_offset_valueContext _localctx = new Select_offset_valueContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_select_offset_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8836);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_fetch_first_valueContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public I_or_f_constContext i_or_f_const() {
			return getRuleContext(I_or_f_constContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public Select_fetch_first_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_fetch_first_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_fetch_first_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_fetch_first_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_fetch_first_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_fetch_first_valueContext select_fetch_first_value() throws RecognitionException {
		Select_fetch_first_valueContext _localctx = new Select_fetch_first_valueContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_select_fetch_first_value);
		try {
			setState(8843);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PARAM:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(8838);
				c_expr();
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(8839);
				match(PLUS);
				setState(8840);
				i_or_f_const();
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(8841);
				match(MINUS);
				setState(8842);
				i_or_f_const();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class I_or_f_constContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public I_or_f_constContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_i_or_f_const; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterI_or_f_const(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitI_or_f_const(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitI_or_f_const(this);
			else return visitor.visitChildren(this);
		}
	}

	public final I_or_f_constContext i_or_f_const() throws RecognitionException {
		I_or_f_constContext _localctx = new I_or_f_constContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_i_or_f_const);
		try {
			setState(8847);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Integral:
				enterOuterAlt(_localctx, 1);
				{
				setState(8845);
				iconst();
				}
				break;
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(8846);
				fconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_rowsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public Row_or_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_rows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRow_or_rows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRow_or_rows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRow_or_rows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_or_rowsContext row_or_rows() throws RecognitionException {
		Row_or_rowsContext _localctx = new Row_or_rowsContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_row_or_rows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8849);
			_la = _input.LA(1);
			if ( !(_la==ROWS || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_or_nextContext extends ParserRuleContext {
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public First_or_nextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_or_next; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFirst_or_next(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFirst_or_next(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFirst_or_next(this);
			else return visitor.visitChildren(this);
		}
	}

	public final First_or_nextContext first_or_next() throws RecognitionException {
		First_or_nextContext _localctx = new First_or_nextContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_first_or_next);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8851);
			_la = _input.LA(1);
			if ( !(_la==FIRST_P || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Group_by_listContext group_by_list() {
			return getRuleContext(Group_by_listContext.class,0);
		}
		public Group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGroup_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGroup_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGroup_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_clauseContext group_clause() throws RecognitionException {
		Group_clauseContext _localctx = new Group_clauseContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_group_clause);
		try {
			setState(8857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8853);
				match(GROUP_P);
				setState(8854);
				match(BY);
				setState(8855);
				group_by_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_listContext extends ParserRuleContext {
		public Group_by_itemContext group_by_item() {
			return getRuleContext(Group_by_itemContext.class,0);
		}
		public Group_by_listContext group_by_list() {
			return getRuleContext(Group_by_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Group_by_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGroup_by_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGroup_by_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGroup_by_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_listContext group_by_list() throws RecognitionException {
		return group_by_list(0);
	}

	private Group_by_listContext group_by_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Group_by_listContext _localctx = new Group_by_listContext(_ctx, _parentState);
		Group_by_listContext _prevctx = _localctx;
		int _startState = 1020;
		enterRecursionRule(_localctx, 1020, RULE_group_by_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8860);
			group_by_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(8867);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,406,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Group_by_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_group_by_list);
					setState(8862);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8863);
					match(COMMA);
					setState(8864);
					group_by_item();
					}
					} 
				}
				setState(8869);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,406,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Group_by_itemContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Empty_grouping_setContext empty_grouping_set() {
			return getRuleContext(Empty_grouping_setContext.class,0);
		}
		public Cube_clauseContext cube_clause() {
			return getRuleContext(Cube_clauseContext.class,0);
		}
		public Rollup_clauseContext rollup_clause() {
			return getRuleContext(Rollup_clauseContext.class,0);
		}
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGroup_by_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGroup_by_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGroup_by_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_itemContext group_by_item() throws RecognitionException {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_group_by_item);
		try {
			setState(8875);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8870);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8871);
				empty_grouping_set();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8872);
				cube_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8873);
				rollup_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8874);
				grouping_sets_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_grouping_setContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Empty_grouping_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_grouping_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEmpty_grouping_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEmpty_grouping_set(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEmpty_grouping_set(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Empty_grouping_setContext empty_grouping_set() throws RecognitionException {
		Empty_grouping_setContext _localctx = new Empty_grouping_setContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_empty_grouping_set);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8877);
			match(OPEN_PAREN);
			setState(8878);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_clauseContext extends ParserRuleContext {
		public TerminalNode ROLLUP() { return getToken(PostgreSQLParser.ROLLUP, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Rollup_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRollup_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRollup_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRollup_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollup_clauseContext rollup_clause() throws RecognitionException {
		Rollup_clauseContext _localctx = new Rollup_clauseContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_rollup_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8880);
			match(ROLLUP);
			setState(8881);
			match(OPEN_PAREN);
			setState(8882);
			expr_list(0);
			setState(8883);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cube_clauseContext extends ParserRuleContext {
		public TerminalNode CUBE() { return getToken(PostgreSQLParser.CUBE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCube_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCube_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cube_clauseContext cube_clause() throws RecognitionException {
		Cube_clauseContext _localctx = new Cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_cube_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8885);
			match(CUBE);
			setState(8886);
			match(OPEN_PAREN);
			setState(8887);
			expr_list(0);
			setState(8888);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLParser.SETS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Group_by_listContext group_by_list() {
			return getRuleContext(Group_by_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrouping_sets_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrouping_sets_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_grouping_sets_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8890);
			match(GROUPING);
			setState(8891);
			match(SETS);
			setState(8892);
			match(OPEN_PAREN);
			setState(8893);
			group_by_list(0);
			setState(8894);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PostgreSQLParser.HAVING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_having_clause);
		try {
			setState(8899);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8896);
				match(HAVING);
				setState(8897);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_clauseContext extends ParserRuleContext {
		public For_locking_itemsContext for_locking_items() {
			return getRuleContext(For_locking_itemsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public For_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_clauseContext for_locking_clause() throws RecognitionException {
		For_locking_clauseContext _localctx = new For_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_for_locking_clause);
		try {
			setState(8905);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8901);
				for_locking_items(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8902);
				match(FOR);
				setState(8903);
				match(READ);
				setState(8904);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_for_locking_clauseContext extends ParserRuleContext {
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Opt_for_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_for_locking_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_for_locking_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_for_locking_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_for_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_for_locking_clauseContext opt_for_locking_clause() throws RecognitionException {
		Opt_for_locking_clauseContext _localctx = new Opt_for_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_opt_for_locking_clause);
		try {
			setState(8909);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8907);
				for_locking_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_itemsContext extends ParserRuleContext {
		public For_locking_itemContext for_locking_item() {
			return getRuleContext(For_locking_itemContext.class,0);
		}
		public For_locking_itemsContext for_locking_items() {
			return getRuleContext(For_locking_itemsContext.class,0);
		}
		public For_locking_itemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_items; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_items(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_items(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_items(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemsContext for_locking_items() throws RecognitionException {
		return for_locking_items(0);
	}

	private For_locking_itemsContext for_locking_items(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		For_locking_itemsContext _localctx = new For_locking_itemsContext(_ctx, _parentState);
		For_locking_itemsContext _prevctx = _localctx;
		int _startState = 1038;
		enterRecursionRule(_localctx, 1038, RULE_for_locking_items, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8912);
			for_locking_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(8918);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,411,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new For_locking_itemsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_for_locking_items);
					setState(8914);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8915);
					for_locking_item();
					}
					} 
				}
				setState(8920);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,411,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class For_locking_itemContext extends ParserRuleContext {
		public For_locking_strengthContext for_locking_strength() {
			return getRuleContext(For_locking_strengthContext.class,0);
		}
		public Locked_rels_listContext locked_rels_list() {
			return getRuleContext(Locked_rels_listContext.class,0);
		}
		public Opt_nowait_or_skipContext opt_nowait_or_skip() {
			return getRuleContext(Opt_nowait_or_skipContext.class,0);
		}
		public For_locking_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemContext for_locking_item() throws RecognitionException {
		For_locking_itemContext _localctx = new For_locking_itemContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_for_locking_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8921);
			for_locking_strength();
			setState(8922);
			locked_rels_list();
			setState(8923);
			opt_nowait_or_skip();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_strengthContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public For_locking_strengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_strength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_strength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_strength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_strength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_strengthContext for_locking_strength() throws RecognitionException {
		For_locking_strengthContext _localctx = new For_locking_strengthContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_for_locking_strength);
		try {
			setState(8936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8925);
				match(FOR);
				setState(8926);
				match(UPDATE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8927);
				match(FOR);
				setState(8928);
				match(NO);
				setState(8929);
				match(KEY);
				setState(8930);
				match(UPDATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8931);
				match(FOR);
				setState(8932);
				match(SHARE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8933);
				match(FOR);
				setState(8934);
				match(KEY);
				setState(8935);
				match(SHARE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Locked_rels_listContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Locked_rels_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locked_rels_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLocked_rels_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLocked_rels_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLocked_rels_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Locked_rels_listContext locked_rels_list() throws RecognitionException {
		Locked_rels_listContext _localctx = new Locked_rels_listContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_locked_rels_list);
		try {
			setState(8941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8938);
				match(OF);
				setState(8939);
				qualified_name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitValues_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		return values_clause(0);
	}

	private Values_clauseContext values_clause(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, _parentState);
		Values_clauseContext _prevctx = _localctx;
		int _startState = 1046;
		enterRecursionRule(_localctx, 1046, RULE_values_clause, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8944);
			match(VALUES);
			setState(8945);
			match(OPEN_PAREN);
			setState(8946);
			expr_list(0);
			setState(8947);
			match(CLOSE_PAREN);
			}
			_ctx.stop = _input.LT(-1);
			setState(8957);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,414,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Values_clauseContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_values_clause);
					setState(8949);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8950);
					match(COMMA);
					setState(8951);
					match(OPEN_PAREN);
					setState(8952);
					expr_list(0);
					setState(8953);
					match(CLOSE_PAREN);
					}
					} 
				}
				setState(8959);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,414,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_from_clause);
		try {
			setState(8963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8960);
				match(FROM);
				setState(8961);
				from_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_listContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public From_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_listContext from_list() throws RecognitionException {
		From_listContext _localctx = new From_listContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_from_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8965);
			table_ref(0);
			setState(8970);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,416,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8966);
					match(COMMA);
					setState(8967);
					table_ref(0);
					}
					} 
				}
				setState(8972);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,416,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
	 
		public Table_refContext() { }
		public void copyFrom(Table_refContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Table_ref_simpleContext extends Table_refContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Opt_alias_clauseContext opt_alias_clause() {
			return getRuleContext(Opt_alias_clauseContext.class,0);
		}
		public Tablesample_clauseContext tablesample_clause() {
			return getRuleContext(Tablesample_clauseContext.class,0);
		}
		public Func_tableContext func_table() {
			return getRuleContext(Func_tableContext.class,0);
		}
		public Func_alias_clauseContext func_alias_clause() {
			return getRuleContext(Func_alias_clauseContext.class,0);
		}
		public TerminalNode LATERAL_P() { return getToken(PostgreSQLParser.LATERAL_P, 0); }
		public XmltableContext xmltable() {
			return getRuleContext(XmltableContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Table_ref_simpleContext(Table_refContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_ref_simple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_ref_simple(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_ref_simple(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Table_ref_joined_tablesContext extends Table_refContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_alias_clauseContext opt_alias_clause() {
			return getRuleContext(Opt_alias_clauseContext.class,0);
		}
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(PostgreSQLParser.CROSS, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSQLParser.JOIN, 0); }
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public Join_qualContext join_qual() {
			return getRuleContext(Join_qualContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(PostgreSQLParser.NATURAL, 0); }
		public Table_ref_joined_tablesContext(Table_refContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_ref_joined_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_ref_joined_tables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_ref_joined_tables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		return table_ref(0);
	}

	private Table_refContext table_ref(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Table_refContext _localctx = new Table_refContext(_ctx, _parentState);
		Table_refContext _prevctx = _localctx;
		int _startState = 1052;
		enterRecursionRule(_localctx, 1052, RULE_table_ref, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9040);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(8974);
				relation_expr();
				setState(8975);
				opt_alias_clause();
				}
				break;
			case 2:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(8977);
				relation_expr();
				setState(8978);
				opt_alias_clause();
				setState(8979);
				tablesample_clause();
				}
				break;
			case 3:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(8981);
				func_table();
				setState(8982);
				func_alias_clause();
				}
				break;
			case 4:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(8984);
				match(LATERAL_P);
				setState(8985);
				func_table();
				setState(8986);
				func_alias_clause();
				}
				break;
			case 5:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(8988);
				xmltable();
				setState(8989);
				opt_alias_clause();
				}
				break;
			case 6:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(8991);
				match(LATERAL_P);
				setState(8992);
				xmltable();
				setState(8993);
				opt_alias_clause();
				}
				break;
			case 7:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(8995);
				select_with_parens();
				setState(8996);
				opt_alias_clause();
				}
				break;
			case 8:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(8998);
				match(LATERAL_P);
				setState(8999);
				select_with_parens();
				setState(9000);
				opt_alias_clause();
				}
				break;
			case 9:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(9002);
				match(OPEN_PAREN);
				setState(9003);
				table_ref(0);
				setState(9004);
				match(CLOSE_PAREN);
				setState(9005);
				opt_alias_clause();
				}
				break;
			case 10:
				{
				_localctx = new Table_ref_joined_tablesContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(9007);
				match(OPEN_PAREN);
				setState(9035);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
				case 1:
					{
					setState(9008);
					table_ref(0);
					setState(9009);
					match(CROSS);
					setState(9010);
					match(JOIN);
					setState(9011);
					table_ref(0);
					}
					break;
				case 2:
					{
					setState(9013);
					table_ref(0);
					setState(9014);
					join_type();
					setState(9015);
					match(JOIN);
					setState(9016);
					table_ref(0);
					setState(9017);
					join_qual();
					}
					break;
				case 3:
					{
					setState(9019);
					table_ref(0);
					setState(9020);
					match(JOIN);
					setState(9021);
					table_ref(0);
					setState(9022);
					join_qual();
					}
					break;
				case 4:
					{
					setState(9024);
					table_ref(0);
					setState(9025);
					match(NATURAL);
					setState(9026);
					join_type();
					setState(9027);
					match(JOIN);
					setState(9028);
					table_ref(0);
					}
					break;
				case 5:
					{
					setState(9030);
					table_ref(0);
					setState(9031);
					match(NATURAL);
					setState(9032);
					match(JOIN);
					setState(9033);
					table_ref(0);
					}
					break;
				}
				setState(9037);
				match(CLOSE_PAREN);
				setState(9038);
				opt_alias_clause();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(9069);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,420,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(9067);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
					case 1:
						{
						_localctx = new Table_ref_joined_tablesContext(new Table_refContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_table_ref);
						setState(9042);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(9043);
						match(CROSS);
						setState(9044);
						match(JOIN);
						setState(9045);
						table_ref(8);
						}
						break;
					case 2:
						{
						_localctx = new Table_ref_joined_tablesContext(new Table_refContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_table_ref);
						setState(9046);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(9047);
						match(NATURAL);
						setState(9048);
						join_type();
						setState(9049);
						match(JOIN);
						setState(9050);
						table_ref(5);
						}
						break;
					case 3:
						{
						_localctx = new Table_ref_joined_tablesContext(new Table_refContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_table_ref);
						setState(9052);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(9053);
						match(NATURAL);
						setState(9054);
						match(JOIN);
						setState(9055);
						table_ref(4);
						}
						break;
					case 4:
						{
						_localctx = new Table_ref_joined_tablesContext(new Table_refContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_table_ref);
						setState(9056);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(9057);
						join_type();
						setState(9058);
						match(JOIN);
						setState(9059);
						table_ref(0);
						setState(9060);
						join_qual();
						}
						break;
					case 5:
						{
						_localctx = new Table_ref_joined_tablesContext(new Table_refContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_table_ref);
						setState(9062);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(9063);
						match(JOIN);
						setState(9064);
						table_ref(0);
						setState(9065);
						join_qual();
						}
						break;
					}
					} 
				}
				setState(9071);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,420,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alias_clauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlias_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlias_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_clauseContext alias_clause() throws RecognitionException {
		Alias_clauseContext _localctx = new Alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_alias_clause);
		try {
			setState(9086);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9072);
				match(AS);
				setState(9073);
				colid();
				setState(9074);
				match(OPEN_PAREN);
				setState(9075);
				name_list(0);
				setState(9076);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9078);
				match(AS);
				setState(9079);
				colid();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9080);
				colid();
				setState(9081);
				match(OPEN_PAREN);
				setState(9082);
				name_list(0);
				setState(9083);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9085);
				colid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_alias_clauseContext extends ParserRuleContext {
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public Opt_alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_alias_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_alias_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_alias_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_alias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_alias_clauseContext opt_alias_clause() throws RecognitionException {
		Opt_alias_clauseContext _localctx = new Opt_alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_opt_alias_clause);
		try {
			setState(9090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9088);
				alias_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_alias_clauseContext extends ParserRuleContext {
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Func_alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_alias_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_alias_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_alias_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_alias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_alias_clauseContext func_alias_clause() throws RecognitionException {
		Func_alias_clauseContext _localctx = new Func_alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_func_alias_clause);
		try {
			setState(9110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9092);
				alias_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9093);
				match(AS);
				setState(9094);
				match(OPEN_PAREN);
				setState(9095);
				tablefuncelementlist(0);
				setState(9096);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9098);
				match(AS);
				setState(9099);
				colid();
				setState(9100);
				match(OPEN_PAREN);
				setState(9101);
				tablefuncelementlist(0);
				setState(9102);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9104);
				colid();
				setState(9105);
				match(OPEN_PAREN);
				setState(9106);
				tablefuncelementlist(0);
				setState(9107);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public Join_outerContext join_outer() {
			return getRuleContext(Join_outerContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public TerminalNode INNER_P() { return getToken(PostgreSQLParser.INNER_P, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitJoin_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitJoin_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_join_type);
		try {
			setState(9119);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9112);
				match(FULL);
				setState(9113);
				join_outer();
				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9114);
				match(LEFT);
				setState(9115);
				join_outer();
				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 3);
				{
				setState(9116);
				match(RIGHT);
				setState(9117);
				join_outer();
				}
				break;
			case INNER_P:
				enterOuterAlt(_localctx, 4);
				{
				setState(9118);
				match(INNER_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_outerContext extends ParserRuleContext {
		public TerminalNode OUTER_P() { return getToken(PostgreSQLParser.OUTER_P, 0); }
		public Join_outerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_outer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterJoin_outer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitJoin_outer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitJoin_outer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_outerContext join_outer() throws RecognitionException {
		Join_outerContext _localctx = new Join_outerContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_join_outer);
		try {
			setState(9123);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OUTER_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(9121);
				match(OUTER_P);
				}
				break;
			case JOIN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_qualContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Join_qualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_qual; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterJoin_qual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitJoin_qual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitJoin_qual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_qualContext join_qual() throws RecognitionException {
		Join_qualContext _localctx = new Join_qualContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_join_qual);
		try {
			setState(9132);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(9125);
				match(USING);
				setState(9126);
				match(OPEN_PAREN);
				setState(9127);
				name_list(0);
				setState(9128);
				match(CLOSE_PAREN);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(9130);
				match(ON);
				setState(9131);
				a_expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_exprContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Relation_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRelation_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRelation_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRelation_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_exprContext relation_expr() throws RecognitionException {
		Relation_exprContext _localctx = new Relation_exprContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_relation_expr);
		try {
			setState(9145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9134);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9135);
				qualified_name();
				setState(9136);
				match(STAR);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9138);
				match(ONLY);
				setState(9139);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9140);
				match(ONLY);
				setState(9141);
				match(OPEN_PAREN);
				setState(9142);
				qualified_name();
				setState(9143);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_expr_listContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Relation_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRelation_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRelation_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRelation_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_listContext relation_expr_list() throws RecognitionException {
		return relation_expr_list(0);
	}

	private Relation_expr_listContext relation_expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Relation_expr_listContext _localctx = new Relation_expr_listContext(_ctx, _parentState);
		Relation_expr_listContext _prevctx = _localctx;
		int _startState = 1068;
		enterRecursionRule(_localctx, 1068, RULE_relation_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9148);
			relation_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(9155);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,428,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relation_expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_relation_expr_list);
					setState(9150);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(9151);
					match(COMMA);
					setState(9152);
					relation_expr();
					}
					} 
				}
				setState(9157);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,428,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Relation_expr_opt_aliasContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Relation_expr_opt_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_opt_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRelation_expr_opt_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRelation_expr_opt_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRelation_expr_opt_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_opt_aliasContext relation_expr_opt_alias() throws RecognitionException {
		Relation_expr_opt_aliasContext _localctx = new Relation_expr_opt_aliasContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_relation_expr_opt_alias);
		try {
			setState(9166);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9158);
				relation_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9159);
				relation_expr();
				setState(9160);
				colid();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9162);
				relation_expr();
				setState(9163);
				match(AS);
				setState(9164);
				colid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tablesample_clauseContext extends ParserRuleContext {
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLParser.TABLESAMPLE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_repeatable_clauseContext opt_repeatable_clause() {
			return getRuleContext(Opt_repeatable_clauseContext.class,0);
		}
		public Tablesample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablesample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablesample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablesample_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablesample_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tablesample_clauseContext tablesample_clause() throws RecognitionException {
		Tablesample_clauseContext _localctx = new Tablesample_clauseContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_tablesample_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9168);
			match(TABLESAMPLE);
			setState(9169);
			func_name();
			setState(9170);
			match(OPEN_PAREN);
			setState(9171);
			expr_list(0);
			setState(9172);
			match(CLOSE_PAREN);
			setState(9173);
			opt_repeatable_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_repeatable_clauseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_repeatable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_repeatable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_repeatable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_repeatable_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_repeatable_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_repeatable_clauseContext opt_repeatable_clause() throws RecognitionException {
		Opt_repeatable_clauseContext _localctx = new Opt_repeatable_clauseContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_opt_repeatable_clause);
		try {
			setState(9181);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9175);
				match(REPEATABLE);
				setState(9176);
				match(OPEN_PAREN);
				setState(9177);
				a_expr(0);
				setState(9178);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_tableContext extends ParserRuleContext {
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public Opt_ordinalityContext opt_ordinality() {
			return getRuleContext(Opt_ordinalityContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Rowsfrom_listContext rowsfrom_list() {
			return getRuleContext(Rowsfrom_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_tableContext func_table() throws RecognitionException {
		Func_tableContext _localctx = new Func_tableContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_func_table);
		try {
			setState(9193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9183);
				func_expr_windowless();
				setState(9184);
				opt_ordinality();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9186);
				match(ROWS);
				setState(9187);
				match(FROM);
				setState(9188);
				match(OPEN_PAREN);
				setState(9189);
				rowsfrom_list(0);
				setState(9190);
				match(CLOSE_PAREN);
				setState(9191);
				opt_ordinality();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowsfrom_itemContext extends ParserRuleContext {
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public Opt_col_def_listContext opt_col_def_list() {
			return getRuleContext(Opt_col_def_listContext.class,0);
		}
		public Rowsfrom_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsfrom_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsfrom_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsfrom_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsfrom_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowsfrom_itemContext rowsfrom_item() throws RecognitionException {
		Rowsfrom_itemContext _localctx = new Rowsfrom_itemContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_rowsfrom_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9195);
			func_expr_windowless();
			setState(9196);
			opt_col_def_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowsfrom_listContext extends ParserRuleContext {
		public Rowsfrom_itemContext rowsfrom_item() {
			return getRuleContext(Rowsfrom_itemContext.class,0);
		}
		public Rowsfrom_listContext rowsfrom_list() {
			return getRuleContext(Rowsfrom_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Rowsfrom_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsfrom_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsfrom_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsfrom_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsfrom_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowsfrom_listContext rowsfrom_list() throws RecognitionException {
		return rowsfrom_list(0);
	}

	private Rowsfrom_listContext rowsfrom_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Rowsfrom_listContext _localctx = new Rowsfrom_listContext(_ctx, _parentState);
		Rowsfrom_listContext _prevctx = _localctx;
		int _startState = 1080;
		enterRecursionRule(_localctx, 1080, RULE_rowsfrom_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9199);
			rowsfrom_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(9206);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,432,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Rowsfrom_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_rowsfrom_list);
					setState(9201);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(9202);
					match(COMMA);
					setState(9203);
					rowsfrom_item();
					}
					} 
				}
				setState(9208);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,432,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_col_def_listContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_col_def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_col_def_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_col_def_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_col_def_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_col_def_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_col_def_listContext opt_col_def_list() throws RecognitionException {
		Opt_col_def_listContext _localctx = new Opt_col_def_listContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_opt_col_def_list);
		try {
			setState(9215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9209);
				match(AS);
				setState(9210);
				match(OPEN_PAREN);
				setState(9211);
				tablefuncelementlist(0);
				setState(9212);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_ordinalityContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public Opt_ordinalityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_ordinality; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_ordinality(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_ordinality(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_ordinality(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_ordinalityContext opt_ordinality() throws RecognitionException {
		Opt_ordinalityContext _localctx = new Opt_ordinalityContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_opt_ordinality);
		try {
			setState(9220);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9217);
				match(WITH);
				setState(9218);
				match(ORDINALITY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_where_clause);
		try {
			setState(9225);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9222);
				match(WHERE);
				setState(9223);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_or_current_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Where_or_current_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_or_current_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhere_or_current_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhere_or_current_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhere_or_current_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_or_current_clauseContext where_or_current_clause() throws RecognitionException {
		Where_or_current_clauseContext _localctx = new Where_or_current_clauseContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_where_or_current_clause);
		try {
			setState(9234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9227);
				match(WHERE);
				setState(9228);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9229);
				match(WHERE);
				setState(9230);
				match(CURRENT_P);
				setState(9231);
				match(OF);
				setState(9232);
				cursor_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttablefuncelementlistContext extends ParserRuleContext {
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public OpttablefuncelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttablefuncelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttablefuncelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttablefuncelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttablefuncelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttablefuncelementlistContext opttablefuncelementlist() throws RecognitionException {
		OpttablefuncelementlistContext _localctx = new OpttablefuncelementlistContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_opttablefuncelementlist);
		try {
			setState(9238);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(9236);
				tablefuncelementlist(0);
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablefuncelementlistContext extends ParserRuleContext {
		public TablefuncelementContext tablefuncelement() {
			return getRuleContext(TablefuncelementContext.class,0);
		}
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TablefuncelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablefuncelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablefuncelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablefuncelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablefuncelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablefuncelementlistContext tablefuncelementlist() throws RecognitionException {
		return tablefuncelementlist(0);
	}

	private TablefuncelementlistContext tablefuncelementlist(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TablefuncelementlistContext _localctx = new TablefuncelementlistContext(_ctx, _parentState);
		TablefuncelementlistContext _prevctx = _localctx;
		int _startState = 1092;
		enterRecursionRule(_localctx, 1092, RULE_tablefuncelementlist, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9241);
			tablefuncelement();
			}
			_ctx.stop = _input.LT(-1);
			setState(9248);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,438,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TablefuncelementlistContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tablefuncelementlist);
					setState(9243);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(9244);
					match(COMMA);
					setState(9245);
					tablefuncelement();
					}
					} 
				}
				setState(9250);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,438,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TablefuncelementContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public TablefuncelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablefuncelement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablefuncelement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablefuncelement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablefuncelement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablefuncelementContext tablefuncelement() throws RecognitionException {
		TablefuncelementContext _localctx = new TablefuncelementContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_tablefuncelement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9251);
			colid();
			setState(9252);
			typename();
			setState(9253);
			opt_collate_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmltableContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(PostgreSQLParser.XMLTABLE, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Xmlexists_argumentContext xmlexists_argument() {
			return getRuleContext(Xmlexists_argumentContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(PostgreSQLParser.COLUMNS, 0); }
		public Xmltable_column_listContext xmltable_column_list() {
			return getRuleContext(Xmltable_column_listContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		public Xml_namespace_listContext xml_namespace_list() {
			return getRuleContext(Xml_namespace_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public XmltableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmltableContext xmltable() throws RecognitionException {
		XmltableContext _localctx = new XmltableContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_xmltable);
		try {
			setState(9276);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9255);
				match(XMLTABLE);
				setState(9256);
				match(OPEN_PAREN);
				setState(9257);
				c_expr();
				setState(9258);
				xmlexists_argument();
				setState(9259);
				match(COLUMNS);
				setState(9260);
				xmltable_column_list(0);
				setState(9261);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9263);
				match(XMLTABLE);
				setState(9264);
				match(OPEN_PAREN);
				setState(9265);
				match(XMLNAMESPACES);
				setState(9266);
				match(OPEN_PAREN);
				setState(9267);
				xml_namespace_list(0);
				setState(9268);
				match(CLOSE_PAREN);
				setState(9269);
				match(COMMA);
				setState(9270);
				c_expr();
				setState(9271);
				xmlexists_argument();
				setState(9272);
				match(COLUMNS);
				setState(9273);
				xmltable_column_list(0);
				setState(9274);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltable_column_listContext extends ParserRuleContext {
		public Xmltable_column_elContext xmltable_column_el() {
			return getRuleContext(Xmltable_column_elContext.class,0);
		}
		public Xmltable_column_listContext xmltable_column_list() {
			return getRuleContext(Xmltable_column_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Xmltable_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_listContext xmltable_column_list() throws RecognitionException {
		return xmltable_column_list(0);
	}

	private Xmltable_column_listContext xmltable_column_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Xmltable_column_listContext _localctx = new Xmltable_column_listContext(_ctx, _parentState);
		Xmltable_column_listContext _prevctx = _localctx;
		int _startState = 1098;
		enterRecursionRule(_localctx, 1098, RULE_xmltable_column_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9279);
			xmltable_column_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(9286);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,440,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Xmltable_column_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_xmltable_column_list);
					setState(9281);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(9282);
					match(COMMA);
					setState(9283);
					xmltable_column_el();
					}
					} 
				}
				setState(9288);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,440,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Xmltable_column_elContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Xmltable_column_option_listContext xmltable_column_option_list() {
			return getRuleContext(Xmltable_column_option_listContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public Xmltable_column_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_elContext xmltable_column_el() throws RecognitionException {
		Xmltable_column_elContext _localctx = new Xmltable_column_elContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_xmltable_column_el);
		try {
			setState(9300);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9289);
				colid();
				setState(9290);
				typename();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9292);
				colid();
				setState(9293);
				typename();
				setState(9294);
				xmltable_column_option_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9296);
				colid();
				setState(9297);
				match(FOR);
				setState(9298);
				match(ORDINALITY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltable_column_option_listContext extends ParserRuleContext {
		public Xmltable_column_option_elContext xmltable_column_option_el() {
			return getRuleContext(Xmltable_column_option_elContext.class,0);
		}
		public Xmltable_column_option_listContext xmltable_column_option_list() {
			return getRuleContext(Xmltable_column_option_listContext.class,0);
		}
		public Xmltable_column_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_option_listContext xmltable_column_option_list() throws RecognitionException {
		return xmltable_column_option_list(0);
	}

	private Xmltable_column_option_listContext xmltable_column_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Xmltable_column_option_listContext _localctx = new Xmltable_column_option_listContext(_ctx, _parentState);
		Xmltable_column_option_listContext _prevctx = _localctx;
		int _startState = 1102;
		enterRecursionRule(_localctx, 1102, RULE_xmltable_column_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9303);
			xmltable_column_option_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(9309);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,442,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Xmltable_column_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_xmltable_column_option_list);
					setState(9305);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(9306);
					xmltable_column_option_el();
					}
					} 
				}
				setState(9311);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,442,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Xmltable_column_option_elContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Xmltable_column_option_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_option_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_option_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_option_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_option_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_option_elContext xmltable_column_option_el() throws RecognitionException {
		Xmltable_column_option_elContext _localctx = new Xmltable_column_option_elContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_xmltable_column_option_el);
		try {
			setState(9320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9312);
				identifier();
				setState(9313);
				b_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9315);
				match(DEFAULT);
				setState(9316);
				b_expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9317);
				match(NOT);
				setState(9318);
				match(NULL_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9319);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespace_listContext extends ParserRuleContext {
		public Xml_namespace_elContext xml_namespace_el() {
			return getRuleContext(Xml_namespace_elContext.class,0);
		}
		public Xml_namespace_listContext xml_namespace_list() {
			return getRuleContext(Xml_namespace_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Xml_namespace_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespace_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_namespace_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_namespace_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_namespace_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespace_listContext xml_namespace_list() throws RecognitionException {
		return xml_namespace_list(0);
	}

	private Xml_namespace_listContext xml_namespace_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Xml_namespace_listContext _localctx = new Xml_namespace_listContext(_ctx, _parentState);
		Xml_namespace_listContext _prevctx = _localctx;
		int _startState = 1106;
		enterRecursionRule(_localctx, 1106, RULE_xml_namespace_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9323);
			xml_namespace_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(9330);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,444,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Xml_namespace_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_xml_namespace_list);
					setState(9325);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(9326);
					match(COMMA);
					setState(9327);
					xml_namespace_el();
					}
					} 
				}
				setState(9332);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,444,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Xml_namespace_elContext extends ParserRuleContext {
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Xml_namespace_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespace_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_namespace_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_namespace_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_namespace_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespace_elContext xml_namespace_el() throws RecognitionException {
		Xml_namespace_elContext _localctx = new Xml_namespace_elContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_xml_namespace_el);
		try {
			setState(9339);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9333);
				b_expr(0);
				setState(9334);
				match(AS);
				setState(9335);
				collabel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9337);
				match(DEFAULT);
				setState(9338);
				b_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypenameContext extends ParserRuleContext {
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public Opt_array_boundsContext opt_array_bounds() {
			return getRuleContext(Opt_array_boundsContext.class,0);
		}
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode ROWTYPE() { return getToken(PostgreSQLParser.ROWTYPE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypenameContext typename() throws RecognitionException {
		TypenameContext _localctx = new TypenameContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_typename);
		try {
			setState(9376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9341);
				simpletypename();
				setState(9342);
				opt_array_bounds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9344);
				match(SETOF);
				setState(9345);
				simpletypename();
				setState(9346);
				opt_array_bounds(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9348);
				simpletypename();
				setState(9349);
				match(ARRAY);
				setState(9350);
				match(OPEN_BRACKET);
				setState(9351);
				iconst();
				setState(9352);
				match(CLOSE_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9354);
				match(SETOF);
				setState(9355);
				simpletypename();
				setState(9356);
				match(ARRAY);
				setState(9357);
				match(OPEN_BRACKET);
				setState(9358);
				iconst();
				setState(9359);
				match(CLOSE_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9361);
				simpletypename();
				setState(9362);
				match(ARRAY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9364);
				match(SETOF);
				setState(9365);
				simpletypename();
				setState(9366);
				match(ARRAY);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9368);
				qualified_name();
				setState(9369);
				match(PERCENT);
				setState(9370);
				match(ROWTYPE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9372);
				qualified_name();
				setState(9373);
				match(PERCENT);
				setState(9374);
				match(TYPE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_array_boundsContext extends ParserRuleContext {
		public Opt_array_boundsContext opt_array_bounds() {
			return getRuleContext(Opt_array_boundsContext.class,0);
		}
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Opt_array_boundsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_array_bounds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_array_bounds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_array_bounds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_array_bounds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_array_boundsContext opt_array_bounds() throws RecognitionException {
		return opt_array_bounds(0);
	}

	private Opt_array_boundsContext opt_array_bounds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_array_boundsContext _localctx = new Opt_array_boundsContext(_ctx, _parentState);
		Opt_array_boundsContext _prevctx = _localctx;
		int _startState = 1112;
		enterRecursionRule(_localctx, 1112, RULE_opt_array_bounds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(9389);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,448,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(9387);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
					case 1:
						{
						_localctx = new Opt_array_boundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_opt_array_bounds);
						setState(9379);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(9380);
						match(OPEN_BRACKET);
						setState(9381);
						match(CLOSE_BRACKET);
						}
						break;
					case 2:
						{
						_localctx = new Opt_array_boundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_opt_array_bounds);
						setState(9382);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(9383);
						match(OPEN_BRACKET);
						setState(9384);
						iconst();
						setState(9385);
						match(CLOSE_BRACKET);
						}
						break;
					}
					} 
				}
				setState(9391);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,448,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SimpletypenameContext extends ParserRuleContext {
		public GenerictypeContext generictype() {
			return getRuleContext(GenerictypeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public ConstdatetimeContext constdatetime() {
			return getRuleContext(ConstdatetimeContext.class,0);
		}
		public ConstintervalContext constinterval() {
			return getRuleContext(ConstintervalContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public SimpletypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpletypename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSimpletypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSimpletypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSimpletypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpletypenameContext simpletypename() throws RecognitionException {
		SimpletypenameContext _localctx = new SimpletypenameContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_simpletypename);
		try {
			setState(9405);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9392);
				generictype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9393);
				numeric();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9394);
				bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9395);
				character();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9396);
				constdatetime();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9397);
				constinterval();
				setState(9398);
				opt_interval();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9400);
				constinterval();
				setState(9401);
				match(OPEN_PAREN);
				setState(9402);
				iconst();
				setState(9403);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConsttypenameContext extends ParserRuleContext {
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public ConstbitContext constbit() {
			return getRuleContext(ConstbitContext.class,0);
		}
		public ConstcharacterContext constcharacter() {
			return getRuleContext(ConstcharacterContext.class,0);
		}
		public ConstdatetimeContext constdatetime() {
			return getRuleContext(ConstdatetimeContext.class,0);
		}
		public ConsttypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_consttypename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConsttypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConsttypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConsttypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConsttypenameContext consttypename() throws RecognitionException {
		ConsttypenameContext _localctx = new ConsttypenameContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_consttypename);
		try {
			setState(9411);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_P:
			case BIGINT:
			case BOOLEAN_P:
			case DEC:
			case DECIMAL_P:
			case FLOAT_P:
			case INT_P:
			case INTEGER:
			case NUMERIC:
			case REAL:
			case SMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(9407);
				numeric();
				}
				break;
			case BIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9408);
				constbit();
				}
				break;
			case CHAR_P:
			case CHARACTER:
			case NATIONAL:
			case NCHAR:
			case VARCHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(9409);
				constcharacter();
				}
				break;
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(9410);
				constdatetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenerictypeContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public GenerictypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generictype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGenerictype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGenerictype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGenerictype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenerictypeContext generictype() throws RecognitionException {
		GenerictypeContext _localctx = new GenerictypeContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_generictype);
		try {
			setState(9420);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9413);
				type_function_name();
				setState(9414);
				opt_type_modifiers();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9416);
				type_function_name();
				setState(9417);
				attrs(0);
				setState(9418);
				opt_type_modifiers();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_type_modifiersContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_type_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_type_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_type_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_type_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_type_modifiersContext opt_type_modifiers() throws RecognitionException {
		Opt_type_modifiersContext _localctx = new Opt_type_modifiersContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_opt_type_modifiers);
		try {
			setState(9427);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9422);
				match(OPEN_PAREN);
				setState(9423);
				expr_list(0);
				setState(9424);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode INT_P() { return getToken(PostgreSQLParser.INT_P, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLParser.REAL, 0); }
		public TerminalNode FLOAT_P() { return getToken(PostgreSQLParser.FLOAT_P, 0); }
		public Opt_floatContext opt_float() {
			return getRuleContext(Opt_floatContext.class,0);
		}
		public TerminalNode DOUBLE_P() { return getToken(PostgreSQLParser.DOUBLE_P, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLParser.PRECISION, 0); }
		public TerminalNode DECIMAL_P() { return getToken(PostgreSQLParser.DECIMAL_P, 0); }
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public TerminalNode DEC() { return getToken(PostgreSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLParser.NUMERIC, 0); }
		public TerminalNode BOOLEAN_P() { return getToken(PostgreSQLParser.BOOLEAN_P, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_numeric);
		try {
			setState(9445);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(9429);
				match(INT_P);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(9430);
				match(INTEGER);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(9431);
				match(SMALLINT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(9432);
				match(BIGINT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(9433);
				match(REAL);
				}
				break;
			case FLOAT_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(9434);
				match(FLOAT_P);
				setState(9435);
				opt_float();
				}
				break;
			case DOUBLE_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(9436);
				match(DOUBLE_P);
				setState(9437);
				match(PRECISION);
				}
				break;
			case DECIMAL_P:
				enterOuterAlt(_localctx, 8);
				{
				setState(9438);
				match(DECIMAL_P);
				setState(9439);
				opt_type_modifiers();
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 9);
				{
				setState(9440);
				match(DEC);
				setState(9441);
				opt_type_modifiers();
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 10);
				{
				setState(9442);
				match(NUMERIC);
				setState(9443);
				opt_type_modifiers();
				}
				break;
			case BOOLEAN_P:
				enterOuterAlt(_localctx, 11);
				{
				setState(9444);
				match(BOOLEAN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_floatContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_floatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_float; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_float(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_float(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_float(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_floatContext opt_float() throws RecognitionException {
		Opt_floatContext _localctx = new Opt_floatContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_opt_float);
		try {
			setState(9452);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9447);
				match(OPEN_PAREN);
				setState(9448);
				iconst();
				setState(9449);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitContext extends ParserRuleContext {
		public BitwithlengthContext bitwithlength() {
			return getRuleContext(BitwithlengthContext.class,0);
		}
		public BitwithoutlengthContext bitwithoutlength() {
			return getRuleContext(BitwithoutlengthContext.class,0);
		}
		public BitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitContext bit() throws RecognitionException {
		BitContext _localctx = new BitContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_bit);
		try {
			setState(9456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9454);
				bitwithlength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9455);
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstbitContext extends ParserRuleContext {
		public BitwithlengthContext bitwithlength() {
			return getRuleContext(BitwithlengthContext.class,0);
		}
		public BitwithoutlengthContext bitwithoutlength() {
			return getRuleContext(BitwithoutlengthContext.class,0);
		}
		public ConstbitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constbit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstbit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstbit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstbit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstbitContext constbit() throws RecognitionException {
		ConstbitContext _localctx = new ConstbitContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_constbit);
		try {
			setState(9460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9458);
				bitwithlength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9459);
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitwithlengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PostgreSQLParser.BIT, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public BitwithlengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitwithlength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBitwithlength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBitwithlength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBitwithlength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitwithlengthContext bitwithlength() throws RecognitionException {
		BitwithlengthContext _localctx = new BitwithlengthContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_bitwithlength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9462);
			match(BIT);
			setState(9463);
			opt_varying();
			setState(9464);
			match(OPEN_PAREN);
			setState(9465);
			expr_list(0);
			setState(9466);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitwithoutlengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PostgreSQLParser.BIT, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public BitwithoutlengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitwithoutlength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBitwithoutlength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBitwithoutlength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBitwithoutlength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitwithoutlengthContext bitwithoutlength() throws RecognitionException {
		BitwithoutlengthContext _localctx = new BitwithoutlengthContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_bitwithoutlength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9468);
			match(BIT);
			setState(9469);
			opt_varying();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterContext extends ParserRuleContext {
		public CharacterWithLengthContext characterWithLength() {
			return getRuleContext(CharacterWithLengthContext.class,0);
		}
		public CharacterWithoutLengthContext characterWithoutLength() {
			return getRuleContext(CharacterWithoutLengthContext.class,0);
		}
		public CharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterContext character() throws RecognitionException {
		CharacterContext _localctx = new CharacterContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_character);
		try {
			setState(9473);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9471);
				characterWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9472);
				characterWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstcharacterContext extends ParserRuleContext {
		public CharacterWithLengthContext characterWithLength() {
			return getRuleContext(CharacterWithLengthContext.class,0);
		}
		public CharacterWithoutLengthContext characterWithoutLength() {
			return getRuleContext(CharacterWithoutLengthContext.class,0);
		}
		public ConstcharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constcharacter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstcharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstcharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstcharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstcharacterContext constcharacter() throws RecognitionException {
		ConstcharacterContext _localctx = new ConstcharacterContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_constcharacter);
		try {
			setState(9477);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9475);
				characterWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9476);
				characterWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithLengthContext extends ParserRuleContext {
		public Character_cContext character_c() {
			return getRuleContext(Character_cContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CharacterWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCharacterWithLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCharacterWithLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCharacterWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithLengthContext characterWithLength() throws RecognitionException {
		CharacterWithLengthContext _localctx = new CharacterWithLengthContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_characterWithLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9479);
			character_c();
			setState(9480);
			match(OPEN_PAREN);
			setState(9481);
			iconst();
			setState(9482);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithoutLengthContext extends ParserRuleContext {
		public Character_cContext character_c() {
			return getRuleContext(Character_cContext.class,0);
		}
		public CharacterWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithoutLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCharacterWithoutLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCharacterWithoutLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCharacterWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithoutLengthContext characterWithoutLength() throws RecognitionException {
		CharacterWithoutLengthContext _localctx = new CharacterWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_characterWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9484);
			character_c();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_cContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(PostgreSQLParser.CHARACTER, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public TerminalNode CHAR_P() { return getToken(PostgreSQLParser.CHAR_P, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLParser.VARCHAR, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLParser.NCHAR, 0); }
		public Character_cContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_c; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCharacter_c(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCharacter_c(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCharacter_c(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_cContext character_c() throws RecognitionException {
		Character_cContext _localctx = new Character_cContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_character_c);
		try {
			setState(9499);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9486);
				match(CHARACTER);
				setState(9487);
				opt_varying();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9488);
				match(CHAR_P);
				setState(9489);
				opt_varying();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9490);
				match(VARCHAR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9491);
				match(NATIONAL);
				setState(9492);
				match(CHARACTER);
				setState(9493);
				opt_varying();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9494);
				match(NATIONAL);
				setState(9495);
				match(CHAR_P);
				setState(9496);
				opt_varying();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9497);
				match(NCHAR);
				setState(9498);
				opt_varying();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_varyingContext extends ParserRuleContext {
		public TerminalNode VARYING() { return getToken(PostgreSQLParser.VARYING, 0); }
		public Opt_varyingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_varying; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_varying(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_varying(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_varying(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_varyingContext opt_varying() throws RecognitionException {
		Opt_varyingContext _localctx = new Opt_varyingContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_opt_varying);
		try {
			setState(9503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9501);
				match(VARYING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstdatetimeContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLParser.TIMESTAMP, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_timezoneContext opt_timezone() {
			return getRuleContext(Opt_timezoneContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public ConstdatetimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constdatetime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstdatetime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstdatetime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstdatetime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstdatetimeContext constdatetime() throws RecognitionException {
		ConstdatetimeContext _localctx = new ConstdatetimeContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_constdatetime);
		try {
			setState(9521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9505);
				match(TIMESTAMP);
				setState(9506);
				match(OPEN_PAREN);
				setState(9507);
				iconst();
				setState(9508);
				match(CLOSE_PAREN);
				setState(9509);
				opt_timezone();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9511);
				match(TIMESTAMP);
				setState(9512);
				opt_timezone();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9513);
				match(TIME);
				setState(9514);
				match(OPEN_PAREN);
				setState(9515);
				iconst();
				setState(9516);
				match(CLOSE_PAREN);
				setState(9517);
				opt_timezone();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9519);
				match(TIME);
				setState(9520);
				opt_timezone();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstintervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public ConstintervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constinterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstinterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstinterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstinterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstintervalContext constinterval() throws RecognitionException {
		ConstintervalContext _localctx = new ConstintervalContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_constinterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9523);
			match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_timezoneContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public Opt_timezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_timezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_timezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_timezone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_timezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_timezoneContext opt_timezone() throws RecognitionException {
		Opt_timezoneContext _localctx = new Opt_timezoneContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_opt_timezone);
		try {
			setState(9532);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9525);
				match(WITH);
				setState(9526);
				match(TIME);
				setState(9527);
				match(ZONE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9528);
				match(WITHOUT);
				setState(9529);
				match(TIME);
				setState(9530);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_intervalContext extends ParserRuleContext {
		public TerminalNode YEAR_P() { return getToken(PostgreSQLParser.YEAR_P, 0); }
		public TerminalNode MONTH_P() { return getToken(PostgreSQLParser.MONTH_P, 0); }
		public TerminalNode DAY_P() { return getToken(PostgreSQLParser.DAY_P, 0); }
		public TerminalNode HOUR_P() { return getToken(PostgreSQLParser.HOUR_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(PostgreSQLParser.MINUTE_P, 0); }
		public Interval_secondContext interval_second() {
			return getRuleContext(Interval_secondContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Opt_intervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_interval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_interval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_interval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_intervalContext opt_interval() throws RecognitionException {
		Opt_intervalContext _localctx = new Opt_intervalContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_opt_interval);
		try {
			setState(9562);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9534);
				match(YEAR_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9535);
				match(MONTH_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9536);
				match(DAY_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9537);
				match(HOUR_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9538);
				match(MINUTE_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9539);
				interval_second();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9540);
				match(YEAR_P);
				setState(9541);
				match(TO);
				setState(9542);
				match(MONTH_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9543);
				match(DAY_P);
				setState(9544);
				match(TO);
				setState(9545);
				match(HOUR_P);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9546);
				match(DAY_P);
				setState(9547);
				match(TO);
				setState(9548);
				match(MINUTE_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9549);
				match(DAY_P);
				setState(9550);
				match(TO);
				setState(9551);
				interval_second();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9552);
				match(HOUR_P);
				setState(9553);
				match(TO);
				setState(9554);
				match(MINUTE_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9555);
				match(HOUR_P);
				setState(9556);
				match(TO);
				setState(9557);
				interval_second();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9558);
				match(MINUTE_P);
				setState(9559);
				match(TO);
				setState(9560);
				interval_second();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_secondContext extends ParserRuleContext {
		public TerminalNode SECOND_P() { return getToken(PostgreSQLParser.SECOND_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Interval_secondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_second; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInterval_second(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInterval_second(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInterval_second(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_secondContext interval_second() throws RecognitionException {
		Interval_secondContext _localctx = new Interval_secondContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_interval_second);
		try {
			setState(9570);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9564);
				match(SECOND_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9565);
				match(SECOND_P);
				setState(9566);
				match(OPEN_PAREN);
				setState(9567);
				iconst();
				setState(9568);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_escapeContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_escapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_escape; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_escape(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_escape(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_escape(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_escapeContext opt_escape() throws RecognitionException {
		Opt_escapeContext _localctx = new Opt_escapeContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_opt_escape);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9572);
			match(ESCAPE);
			setState(9573);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_exprContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public Qual_opContext qual_op() {
			return getRuleContext(Qual_opContext.class,0);
		}
		public List<RowContext> row() {
			return getRuleContexts(RowContext.class);
		}
		public RowContext row(int i) {
			return getRuleContext(RowContext.class,i);
		}
		public TerminalNode OVERLAPS() { return getToken(PostgreSQLParser.OVERLAPS, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Not_laContext not_la() {
			return getRuleContext(Not_laContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode AT() { return getToken(PostgreSQLParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode SLASH() { return getToken(PostgreSQLParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode QUESTION() { return getToken(PostgreSQLParser.QUESTION, 0); }
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public Opt_asymmetricContext opt_asymmetric() {
			return getRuleContext(Opt_asymmetricContext.class,0);
		}
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PostgreSQLParser.SYMMETRIC, 0); }
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public TerminalNode CONTAINS() { return getToken(PostgreSQLParser.CONTAINS, 0); }
		public TerminalNode IS_CONTAINS() { return getToken(PostgreSQLParser.IS_CONTAINS, 0); }
		public TerminalNode OVERLAP() { return getToken(PostgreSQLParser.OVERLAP, 0); }
		public TerminalNode CONCAT() { return getToken(PostgreSQLParser.CONCAT, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode LESS_LESS() { return getToken(PostgreSQLParser.LESS_LESS, 0); }
		public TerminalNode GREATER_GREATER() { return getToken(PostgreSQLParser.GREATER_GREATER, 0); }
		public TerminalNode TYPECAST() { return getToken(PostgreSQLParser.TYPECAST, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public Opt_escapeContext opt_escape() {
			return getRuleContext(Opt_escapeContext.class,0);
		}
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode ISNULL() { return getToken(PostgreSQLParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(PostgreSQLParser.NOTNULL, 0); }
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLParser.UNKNOWN, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLParser.NORMALIZED, 0); }
		public Unicode_normal_formContext unicode_normal_form() {
			return getRuleContext(Unicode_normal_formContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public In_exprContext in_expr() {
			return getRuleContext(In_exprContext.class,0);
		}
		public Subquery_OpContext subquery_Op() {
			return getRuleContext(Subquery_OpContext.class,0);
		}
		public Sub_typeContext sub_type() {
			return getRuleContext(Sub_typeContext.class,0);
		}
		public A_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_exprContext a_expr() throws RecognitionException {
		return a_expr(0);
	}

	private A_exprContext a_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		A_exprContext _localctx = new A_exprContext(_ctx, _parentState);
		A_exprContext _prevctx = _localctx;
		int _startState = 1158;
		enterRecursionRule(_localctx, 1158, RULE_a_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				{
				setState(9576);
				c_expr();
				}
				break;
			case 2:
				{
				setState(9577);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9578);
				a_expr(50);
				}
				break;
			case 3:
				{
				setState(9579);
				qual_op();
				setState(9580);
				a_expr(46);
				}
				break;
			case 4:
				{
				setState(9582);
				row();
				setState(9583);
				match(OVERLAPS);
				setState(9584);
				row();
				}
				break;
			case 5:
				{
				setState(9586);
				match(NOT);
				setState(9587);
				a_expr(13);
				}
				break;
			case 6:
				{
				setState(9588);
				not_la();
				setState(9589);
				a_expr(12);
				}
				break;
			case 7:
				{
				setState(9591);
				match(UNIQUE);
				setState(9592);
				select_with_parens();
				}
				break;
			case 8:
				{
				setState(9593);
				match(DEFAULT);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(9810);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,473,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(9808);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
					case 1:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9596);
						if (!(precpred(_ctx, 51))) throw new FailedPredicateException(this, "precpred(_ctx, 51)");
						setState(9597);
						match(AT);
						setState(9598);
						match(TIME);
						setState(9599);
						match(ZONE);
						setState(9600);
						a_expr(52);
						}
						break;
					case 2:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9601);
						if (!(precpred(_ctx, 49))) throw new FailedPredicateException(this, "precpred(_ctx, 49)");
						setState(9602);
						match(CARET);
						setState(9603);
						a_expr(50);
						}
						break;
					case 3:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9604);
						if (!(precpred(_ctx, 48))) throw new FailedPredicateException(this, "precpred(_ctx, 48)");
						setState(9605);
						_la = _input.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << QUESTION) | (1L << PLUS) | (1L << MINUS) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9606);
						a_expr(49);
						}
						break;
					case 4:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9607);
						if (!(precpred(_ctx, 47))) throw new FailedPredicateException(this, "precpred(_ctx, 47)");
						setState(9608);
						qual_op();
						setState(9609);
						a_expr(48);
						}
						break;
					case 5:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9611);
						if (!(precpred(_ctx, 39))) throw new FailedPredicateException(this, "precpred(_ctx, 39)");
						setState(9612);
						match(BETWEEN);
						setState(9613);
						opt_asymmetric();
						setState(9614);
						b_expr(0);
						setState(9615);
						match(AND);
						setState(9616);
						a_expr(40);
						}
						break;
					case 6:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9618);
						if (!(precpred(_ctx, 38))) throw new FailedPredicateException(this, "precpred(_ctx, 38)");
						setState(9619);
						not_la();
						setState(9620);
						match(BETWEEN);
						setState(9621);
						opt_asymmetric();
						setState(9622);
						b_expr(0);
						setState(9623);
						match(AND);
						setState(9624);
						a_expr(39);
						}
						break;
					case 7:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9626);
						if (!(precpred(_ctx, 37))) throw new FailedPredicateException(this, "precpred(_ctx, 37)");
						setState(9627);
						match(BETWEEN);
						setState(9628);
						match(SYMMETRIC);
						setState(9629);
						b_expr(0);
						setState(9630);
						match(AND);
						setState(9631);
						a_expr(38);
						}
						break;
					case 8:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9633);
						if (!(precpred(_ctx, 36))) throw new FailedPredicateException(this, "precpred(_ctx, 36)");
						setState(9634);
						not_la();
						setState(9635);
						match(BETWEEN);
						setState(9636);
						match(SYMMETRIC);
						setState(9637);
						b_expr(0);
						setState(9638);
						match(AND);
						setState(9639);
						a_expr(37);
						}
						break;
					case 9:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9641);
						if (!(precpred(_ctx, 35))) throw new FailedPredicateException(this, "precpred(_ctx, 35)");
						setState(9642);
						_la = _input.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << LT) | (1L << GT) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << NOT_EQUALS) | (1L << CONTAINS) | (1L << IS_CONTAINS) | (1L << OVERLAP) | (1L << CONCAT))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9643);
						a_expr(36);
						}
						break;
					case 10:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9644);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(9645);
						match(IS);
						setState(9646);
						match(DISTINCT);
						setState(9647);
						match(FROM);
						setState(9648);
						a_expr(24);
						}
						break;
					case 11:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9649);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(9650);
						match(IS);
						setState(9651);
						match(NOT);
						setState(9652);
						match(DISTINCT);
						setState(9653);
						match(FROM);
						setState(9654);
						a_expr(23);
						}
						break;
					case 12:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9655);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(9656);
						match(AND);
						setState(9657);
						a_expr(12);
						}
						break;
					case 13:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9658);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(9659);
						match(OR);
						setState(9660);
						a_expr(11);
						}
						break;
					case 14:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9661);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(9662);
						match(LESS_LESS);
						setState(9663);
						a_expr(10);
						}
						break;
					case 15:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9664);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(9665);
						match(GREATER_GREATER);
						setState(9666);
						a_expr(9);
						}
						break;
					case 16:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9667);
						if (!(precpred(_ctx, 53))) throw new FailedPredicateException(this, "precpred(_ctx, 53)");
						setState(9668);
						match(TYPECAST);
						setState(9669);
						typename();
						}
						break;
					case 17:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9670);
						if (!(precpred(_ctx, 52))) throw new FailedPredicateException(this, "precpred(_ctx, 52)");
						setState(9671);
						match(COLLATE);
						setState(9672);
						any_name();
						}
						break;
					case 18:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9673);
						if (!(precpred(_ctx, 45))) throw new FailedPredicateException(this, "precpred(_ctx, 45)");
						setState(9674);
						match(LIKE);
						setState(9675);
						a_expr(0);
						setState(9677);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
						case 1:
							{
							setState(9676);
							opt_escape();
							}
							break;
						}
						}
						break;
					case 19:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9679);
						if (!(precpred(_ctx, 44))) throw new FailedPredicateException(this, "precpred(_ctx, 44)");
						setState(9680);
						not_la();
						setState(9681);
						match(LIKE);
						setState(9682);
						a_expr(0);
						setState(9684);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
						case 1:
							{
							setState(9683);
							opt_escape();
							}
							break;
						}
						}
						break;
					case 20:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9686);
						if (!(precpred(_ctx, 43))) throw new FailedPredicateException(this, "precpred(_ctx, 43)");
						setState(9687);
						match(ILIKE);
						setState(9688);
						a_expr(0);
						setState(9690);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
						case 1:
							{
							setState(9689);
							opt_escape();
							}
							break;
						}
						}
						break;
					case 21:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9692);
						if (!(precpred(_ctx, 42))) throw new FailedPredicateException(this, "precpred(_ctx, 42)");
						setState(9693);
						not_la();
						setState(9694);
						match(ILIKE);
						setState(9695);
						a_expr(0);
						setState(9697);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
						case 1:
							{
							setState(9696);
							opt_escape();
							}
							break;
						}
						}
						break;
					case 22:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9699);
						if (!(precpred(_ctx, 41))) throw new FailedPredicateException(this, "precpred(_ctx, 41)");
						setState(9700);
						match(SIMILAR);
						setState(9701);
						match(TO);
						setState(9702);
						a_expr(0);
						setState(9704);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
						case 1:
							{
							setState(9703);
							opt_escape();
							}
							break;
						}
						}
						break;
					case 23:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9706);
						if (!(precpred(_ctx, 40))) throw new FailedPredicateException(this, "precpred(_ctx, 40)");
						setState(9707);
						not_la();
						setState(9708);
						match(SIMILAR);
						setState(9709);
						match(TO);
						setState(9710);
						a_expr(0);
						setState(9712);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
						case 1:
							{
							setState(9711);
							opt_escape();
							}
							break;
						}
						}
						break;
					case 24:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9714);
						if (!(precpred(_ctx, 34))) throw new FailedPredicateException(this, "precpred(_ctx, 34)");
						setState(9715);
						match(IS);
						setState(9716);
						match(NULL_P);
						}
						break;
					case 25:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9717);
						if (!(precpred(_ctx, 33))) throw new FailedPredicateException(this, "precpred(_ctx, 33)");
						setState(9718);
						match(ISNULL);
						}
						break;
					case 26:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9719);
						if (!(precpred(_ctx, 32))) throw new FailedPredicateException(this, "precpred(_ctx, 32)");
						setState(9720);
						match(IS);
						setState(9721);
						match(NOT);
						setState(9722);
						match(NULL_P);
						}
						break;
					case 27:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9723);
						if (!(precpred(_ctx, 31))) throw new FailedPredicateException(this, "precpred(_ctx, 31)");
						setState(9724);
						match(NOTNULL);
						}
						break;
					case 28:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9725);
						if (!(precpred(_ctx, 29))) throw new FailedPredicateException(this, "precpred(_ctx, 29)");
						setState(9726);
						match(IS);
						setState(9727);
						match(TRUE_P);
						}
						break;
					case 29:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9728);
						if (!(precpred(_ctx, 28))) throw new FailedPredicateException(this, "precpred(_ctx, 28)");
						setState(9729);
						match(IS);
						setState(9730);
						match(NOT);
						setState(9731);
						match(TRUE_P);
						}
						break;
					case 30:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9732);
						if (!(precpred(_ctx, 27))) throw new FailedPredicateException(this, "precpred(_ctx, 27)");
						setState(9733);
						match(IS);
						setState(9734);
						match(FALSE_P);
						}
						break;
					case 31:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9735);
						if (!(precpred(_ctx, 26))) throw new FailedPredicateException(this, "precpred(_ctx, 26)");
						setState(9736);
						match(IS);
						setState(9737);
						match(NOT);
						setState(9738);
						match(FALSE_P);
						}
						break;
					case 32:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9739);
						if (!(precpred(_ctx, 25))) throw new FailedPredicateException(this, "precpred(_ctx, 25)");
						setState(9740);
						match(IS);
						setState(9741);
						match(UNKNOWN);
						}
						break;
					case 33:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9742);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(9743);
						match(IS);
						setState(9744);
						match(NOT);
						setState(9745);
						match(UNKNOWN);
						}
						break;
					case 34:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9746);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(9747);
						match(IS);
						setState(9748);
						match(OF);
						setState(9749);
						match(OPEN_PAREN);
						setState(9750);
						type_list(0);
						setState(9751);
						match(CLOSE_PAREN);
						}
						break;
					case 35:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9753);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(9754);
						match(IS);
						setState(9755);
						match(NOT);
						setState(9756);
						match(OF);
						setState(9757);
						match(OPEN_PAREN);
						setState(9758);
						type_list(0);
						setState(9759);
						match(CLOSE_PAREN);
						}
						break;
					case 36:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9761);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(9762);
						match(IS);
						setState(9763);
						match(DOCUMENT_P);
						}
						break;
					case 37:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9764);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(9765);
						match(IS);
						setState(9766);
						match(NOT);
						setState(9767);
						match(DOCUMENT_P);
						}
						break;
					case 38:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9768);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(9769);
						match(IS);
						setState(9770);
						match(NORMALIZED);
						}
						break;
					case 39:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9771);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(9772);
						match(IS);
						setState(9773);
						unicode_normal_form();
						setState(9774);
						match(NORMALIZED);
						}
						break;
					case 40:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9776);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(9777);
						match(IS);
						setState(9778);
						match(NOT);
						setState(9779);
						match(NORMALIZED);
						}
						break;
					case 41:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9780);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(9781);
						match(IS);
						setState(9782);
						match(NOT);
						setState(9783);
						unicode_normal_form();
						setState(9784);
						match(NORMALIZED);
						}
						break;
					case 42:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9786);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(9787);
						qual_op();
						}
						break;
					case 43:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9788);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(9789);
						match(IN_P);
						setState(9790);
						in_expr();
						}
						break;
					case 44:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9791);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(9792);
						not_la();
						setState(9793);
						match(IN_P);
						setState(9794);
						in_expr();
						}
						break;
					case 45:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9796);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(9797);
						subquery_Op();
						setState(9798);
						sub_type();
						setState(9799);
						select_with_parens();
						}
						break;
					case 46:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(9801);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(9802);
						subquery_Op();
						setState(9803);
						sub_type();
						setState(9804);
						match(OPEN_PAREN);
						setState(9805);
						a_expr(0);
						setState(9806);
						match(CLOSE_PAREN);
						}
						break;
					}
					} 
				}
				setState(9812);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,473,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Not_laContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Not_laContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_la; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNot_la(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNot_la(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNot_la(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Not_laContext not_la() throws RecognitionException {
		Not_laContext _localctx = new Not_laContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_not_la);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9813);
			match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class B_exprContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public Qual_opContext qual_op() {
			return getRuleContext(Qual_opContext.class,0);
		}
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode SLASH() { return getToken(PostgreSQLParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode TYPECAST() { return getToken(PostgreSQLParser.TYPECAST, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public B_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_b_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterB_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitB_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitB_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final B_exprContext b_expr() throws RecognitionException {
		return b_expr(0);
	}

	private B_exprContext b_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		B_exprContext _localctx = new B_exprContext(_ctx, _parentState);
		B_exprContext _prevctx = _localctx;
		int _startState = 1162;
		enterRecursionRule(_localctx, 1162, RULE_b_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9822);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				{
				setState(9816);
				c_expr();
				}
				break;
			case 2:
				{
				setState(9817);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9818);
				b_expr(14);
				}
				break;
			case 3:
				{
				setState(9819);
				qual_op();
				setState(9820);
				b_expr(8);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(9880);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(9878);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
					case 1:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9824);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(9825);
						match(CARET);
						setState(9826);
						b_expr(14);
						}
						break;
					case 2:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9827);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(9828);
						_la = _input.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9829);
						b_expr(13);
						}
						break;
					case 3:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9830);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(9831);
						_la = _input.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9832);
						b_expr(12);
						}
						break;
					case 4:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9833);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(9834);
						qual_op();
						setState(9835);
						b_expr(11);
						}
						break;
					case 5:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9837);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(9838);
						_la = _input.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << LT) | (1L << GT) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << NOT_EQUALS))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9839);
						b_expr(10);
						}
						break;
					case 6:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9840);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(9841);
						match(IS);
						setState(9842);
						match(DISTINCT);
						setState(9843);
						match(FROM);
						setState(9844);
						b_expr(7);
						}
						break;
					case 7:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9845);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(9846);
						match(IS);
						setState(9847);
						match(NOT);
						setState(9848);
						match(DISTINCT);
						setState(9849);
						match(FROM);
						setState(9850);
						b_expr(6);
						}
						break;
					case 8:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9851);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(9852);
						match(TYPECAST);
						setState(9853);
						typename();
						}
						break;
					case 9:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9854);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(9855);
						qual_op();
						}
						break;
					case 10:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9856);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(9857);
						match(IS);
						setState(9858);
						match(OF);
						setState(9859);
						match(OPEN_PAREN);
						setState(9860);
						type_list(0);
						setState(9861);
						match(CLOSE_PAREN);
						}
						break;
					case 11:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9863);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(9864);
						match(IS);
						setState(9865);
						match(NOT);
						setState(9866);
						match(OF);
						setState(9867);
						match(OPEN_PAREN);
						setState(9868);
						type_list(0);
						setState(9869);
						match(CLOSE_PAREN);
						}
						break;
					case 12:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9871);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(9872);
						match(IS);
						setState(9873);
						match(DOCUMENT_P);
						}
						break;
					case 13:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9874);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(9875);
						match(IS);
						setState(9876);
						match(NOT);
						setState(9877);
						match(DOCUMENT_P);
						}
						break;
					}
					} 
				}
				setState(9882);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class C_exprContext extends ParserRuleContext {
		public C_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_expr; }
	 
		public C_exprContext() { }
		public void copyFrom(C_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class C_expr_existsContext extends C_exprContext {
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public C_expr_existsContext(C_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterC_expr_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitC_expr_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitC_expr_exists(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class C_expr_caseContext extends C_exprContext {
		public Case_exprContext case_expr() {
			return getRuleContext(Case_exprContext.class,0);
		}
		public C_expr_caseContext(C_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterC_expr_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitC_expr_case(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitC_expr_case(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class C_expr_exprContext extends C_exprContext {
		public A_exprContext a_expr_in_parens;
		public ColumnrefContext columnref() {
			return getRuleContext(ColumnrefContext.class,0);
		}
		public AexprconstContext aexprconst() {
			return getRuleContext(AexprconstContext.class,0);
		}
		public PlsqlvariablenameContext plsqlvariablename() {
			return getRuleContext(PlsqlvariablenameContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public Array_exprContext array_expr() {
			return getRuleContext(Array_exprContext.class,0);
		}
		public Explicit_rowContext explicit_row() {
			return getRuleContext(Explicit_rowContext.class,0);
		}
		public Implicit_rowContext implicit_row() {
			return getRuleContext(Implicit_rowContext.class,0);
		}
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public C_expr_exprContext(C_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterC_expr_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitC_expr_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitC_expr_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_exprContext c_expr() throws RecognitionException {
		C_exprContext _localctx = new C_exprContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_c_expr);
		try {
			setState(9912);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9883);
				columnref();
				}
				break;
			case 2:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(9884);
				aexprconst();
				}
				break;
			case 3:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(9885);
				plsqlvariablename();
				}
				break;
			case 4:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(9886);
				match(PARAM);
				setState(9887);
				opt_indirection(0);
				}
				break;
			case 5:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(9888);
				match(OPEN_PAREN);
				setState(9889);
				((C_expr_exprContext)_localctx).a_expr_in_parens = a_expr(0);
				setState(9890);
				match(CLOSE_PAREN);
				setState(9891);
				opt_indirection(0);
				}
				break;
			case 6:
				_localctx = new C_expr_caseContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(9893);
				case_expr();
				}
				break;
			case 7:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(9894);
				func_expr();
				}
				break;
			case 8:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(9895);
				select_with_parens();
				setState(9897);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
				case 1:
					{
					setState(9896);
					indirection(0);
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new C_expr_existsContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(9899);
				match(EXISTS);
				setState(9900);
				select_with_parens();
				}
				break;
			case 10:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(9901);
				match(ARRAY);
				setState(9902);
				select_with_parens();
				}
				break;
			case 11:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(9903);
				match(ARRAY);
				setState(9904);
				array_expr();
				}
				break;
			case 12:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(9905);
				explicit_row();
				}
				break;
			case 13:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(9906);
				implicit_row();
				}
				break;
			case 14:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(9907);
				match(GROUPING);
				setState(9908);
				match(OPEN_PAREN);
				setState(9909);
				expr_list(0);
				setState(9910);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlsqlvariablenameContext extends ParserRuleContext {
		public TerminalNode PLSQLVARIABLENAME() { return getToken(PostgreSQLParser.PLSQLVARIABLENAME, 0); }
		public PlsqlvariablenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlvariablename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlvariablename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlvariablename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlvariablename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlvariablenameContext plsqlvariablename() throws RecognitionException {
		PlsqlvariablenameContext _localctx = new PlsqlvariablenameContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_plsqlvariablename);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9914);
			match(PLSQLVARIABLENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_applicationContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public Func_arg_exprContext func_arg_expr() {
			return getRuleContext(Func_arg_exprContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public Func_applicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_application; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_application(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_application(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_application(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_applicationContext func_application() throws RecognitionException {
		Func_applicationContext _localctx = new Func_applicationContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_func_application);
		try {
			setState(9961);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9916);
				func_name();
				setState(9917);
				match(OPEN_PAREN);
				setState(9918);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9920);
				func_name();
				setState(9921);
				match(OPEN_PAREN);
				setState(9922);
				func_arg_list(0);
				setState(9923);
				opt_sort_clause();
				setState(9924);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9926);
				func_name();
				setState(9927);
				match(OPEN_PAREN);
				setState(9928);
				match(VARIADIC);
				setState(9929);
				func_arg_expr();
				setState(9930);
				opt_sort_clause();
				setState(9931);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9933);
				func_name();
				setState(9934);
				match(OPEN_PAREN);
				setState(9935);
				func_arg_list(0);
				setState(9936);
				match(COMMA);
				setState(9937);
				match(VARIADIC);
				setState(9938);
				func_arg_expr();
				setState(9939);
				opt_sort_clause();
				setState(9940);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9942);
				func_name();
				setState(9943);
				match(OPEN_PAREN);
				setState(9944);
				match(ALL);
				setState(9945);
				func_arg_list(0);
				setState(9946);
				opt_sort_clause();
				setState(9947);
				match(CLOSE_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9949);
				func_name();
				setState(9950);
				match(OPEN_PAREN);
				setState(9951);
				match(DISTINCT);
				setState(9952);
				func_arg_list(0);
				setState(9953);
				opt_sort_clause();
				setState(9954);
				match(CLOSE_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9956);
				func_name();
				setState(9957);
				match(OPEN_PAREN);
				setState(9958);
				match(STAR);
				setState(9959);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_exprContext extends ParserRuleContext {
		public Func_applicationContext func_application() {
			return getRuleContext(Func_applicationContext.class,0);
		}
		public Within_group_clauseContext within_group_clause() {
			return getRuleContext(Within_group_clauseContext.class,0);
		}
		public Filter_clauseContext filter_clause() {
			return getRuleContext(Filter_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return getRuleContext(Func_expr_common_subexprContext.class,0);
		}
		public Func_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_exprContext func_expr() throws RecognitionException {
		Func_exprContext _localctx = new Func_exprContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_func_expr);
		try {
			setState(9969);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9963);
				func_application();
				setState(9964);
				within_group_clause();
				setState(9965);
				filter_clause();
				setState(9966);
				over_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9968);
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_expr_windowlessContext extends ParserRuleContext {
		public Func_applicationContext func_application() {
			return getRuleContext(Func_applicationContext.class,0);
		}
		public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return getRuleContext(Func_expr_common_subexprContext.class,0);
		}
		public Func_expr_windowlessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr_windowless; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_expr_windowless(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_expr_windowless(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_expr_windowless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_expr_windowlessContext func_expr_windowless() throws RecognitionException {
		Func_expr_windowlessContext _localctx = new Func_expr_windowlessContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_func_expr_windowless);
		try {
			setState(9973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9971);
				func_application();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9972);
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_expr_common_subexprContext extends ParserRuleContext {
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLParser.CURRENT_TIME, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(PostgreSQLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public TerminalNode EXTRACT() { return getToken(PostgreSQLParser.EXTRACT, 0); }
		public Extract_listContext extract_list() {
			return getRuleContext(Extract_listContext.class,0);
		}
		public TerminalNode NORMALIZE() { return getToken(PostgreSQLParser.NORMALIZE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Unicode_normal_formContext unicode_normal_form() {
			return getRuleContext(Unicode_normal_formContext.class,0);
		}
		public TerminalNode OVERLAY() { return getToken(PostgreSQLParser.OVERLAY, 0); }
		public Overlay_listContext overlay_list() {
			return getRuleContext(Overlay_listContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(PostgreSQLParser.POSITION, 0); }
		public Position_listContext position_list() {
			return getRuleContext(Position_listContext.class,0);
		}
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLParser.SUBSTRING, 0); }
		public Substr_listContext substr_list() {
			return getRuleContext(Substr_listContext.class,0);
		}
		public TerminalNode TREAT() { return getToken(PostgreSQLParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLParser.TRIM, 0); }
		public TerminalNode BOTH() { return getToken(PostgreSQLParser.BOTH, 0); }
		public Trim_listContext trim_list() {
			return getRuleContext(Trim_listContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(PostgreSQLParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PostgreSQLParser.TRAILING, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLParser.NULLIF, 0); }
		public TerminalNode COALESCE() { return getToken(PostgreSQLParser.COALESCE, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode GREATEST() { return getToken(PostgreSQLParser.GREATEST, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLParser.LEAST, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PostgreSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PostgreSQLParser.XMLELEMENT, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Xml_attributesContext xml_attributes() {
			return getRuleContext(Xml_attributesContext.class,0);
		}
		public TerminalNode XMLEXISTS() { return getToken(PostgreSQLParser.XMLEXISTS, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Xmlexists_argumentContext xmlexists_argument() {
			return getRuleContext(Xmlexists_argumentContext.class,0);
		}
		public TerminalNode XMLFOREST() { return getToken(PostgreSQLParser.XMLFOREST, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(PostgreSQLParser.XMLPARSE, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public Xml_whitespace_optionContext xml_whitespace_option() {
			return getRuleContext(Xml_whitespace_optionContext.class,0);
		}
		public TerminalNode XMLPI() { return getToken(PostgreSQLParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PostgreSQLParser.XMLROOT, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public Xml_root_versionContext xml_root_version() {
			return getRuleContext(Xml_root_versionContext.class,0);
		}
		public Opt_xml_root_standaloneContext opt_xml_root_standalone() {
			return getRuleContext(Opt_xml_root_standaloneContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public Func_expr_common_subexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr_common_subexpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_expr_common_subexpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_expr_common_subexpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_expr_common_subexpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_expr_common_subexprContext func_expr_common_subexpr() throws RecognitionException {
		Func_expr_common_subexprContext _localctx = new Func_expr_common_subexprContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_func_expr_common_subexpr);
		int _la;
		try {
			setState(10193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9975);
				match(COLLATION);
				setState(9976);
				match(FOR);
				setState(9977);
				match(OPEN_PAREN);
				setState(9978);
				a_expr(0);
				setState(9979);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9981);
				match(CURRENT_DATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9982);
				match(CURRENT_TIME);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9983);
				match(CURRENT_TIME);
				setState(9984);
				match(OPEN_PAREN);
				setState(9985);
				iconst();
				setState(9986);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9988);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9989);
				match(CURRENT_TIMESTAMP);
				setState(9990);
				match(OPEN_PAREN);
				setState(9991);
				iconst();
				setState(9992);
				match(CLOSE_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9994);
				match(LOCALTIME);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9995);
				match(LOCALTIME);
				setState(9996);
				match(OPEN_PAREN);
				setState(9997);
				iconst();
				setState(9998);
				match(CLOSE_PAREN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10000);
				match(LOCALTIMESTAMP);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10001);
				match(LOCALTIMESTAMP);
				setState(10002);
				match(OPEN_PAREN);
				setState(10003);
				iconst();
				setState(10004);
				match(CLOSE_PAREN);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10006);
				match(CURRENT_ROLE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(10007);
				match(CURRENT_USER);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(10008);
				match(SESSION_USER);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(10009);
				match(USER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(10010);
				match(CURRENT_CATALOG);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(10011);
				match(CURRENT_SCHEMA);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(10012);
				match(CAST);
				setState(10013);
				match(OPEN_PAREN);
				setState(10014);
				a_expr(0);
				setState(10015);
				match(AS);
				setState(10016);
				typename();
				setState(10019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(10017);
					match(COLLATE);
					setState(10018);
					a_expr(0);
					}
				}

				setState(10021);
				match(CLOSE_PAREN);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(10023);
				match(EXTRACT);
				setState(10024);
				match(OPEN_PAREN);
				setState(10025);
				extract_list();
				setState(10026);
				match(CLOSE_PAREN);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(10028);
				match(NORMALIZE);
				setState(10029);
				match(OPEN_PAREN);
				setState(10030);
				a_expr(0);
				setState(10031);
				match(CLOSE_PAREN);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(10033);
				match(NORMALIZE);
				setState(10034);
				match(OPEN_PAREN);
				setState(10035);
				a_expr(0);
				setState(10036);
				match(COMMA);
				setState(10037);
				unicode_normal_form();
				setState(10038);
				match(CLOSE_PAREN);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(10040);
				match(OVERLAY);
				setState(10041);
				match(OPEN_PAREN);
				setState(10042);
				overlay_list();
				setState(10043);
				match(CLOSE_PAREN);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(10045);
				match(POSITION);
				setState(10046);
				match(OPEN_PAREN);
				setState(10047);
				position_list();
				setState(10048);
				match(CLOSE_PAREN);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(10050);
				match(SUBSTRING);
				setState(10051);
				match(OPEN_PAREN);
				setState(10052);
				substr_list();
				setState(10053);
				match(CLOSE_PAREN);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(10055);
				match(TREAT);
				setState(10056);
				match(OPEN_PAREN);
				setState(10057);
				a_expr(0);
				setState(10058);
				match(AS);
				setState(10059);
				typename();
				setState(10060);
				match(CLOSE_PAREN);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(10062);
				match(TRIM);
				setState(10063);
				match(OPEN_PAREN);
				setState(10064);
				match(BOTH);
				setState(10065);
				trim_list();
				setState(10066);
				match(CLOSE_PAREN);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(10068);
				match(TRIM);
				setState(10069);
				match(OPEN_PAREN);
				setState(10070);
				match(LEADING);
				setState(10071);
				trim_list();
				setState(10072);
				match(CLOSE_PAREN);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(10074);
				match(TRIM);
				setState(10075);
				match(OPEN_PAREN);
				setState(10076);
				match(TRAILING);
				setState(10077);
				trim_list();
				setState(10078);
				match(CLOSE_PAREN);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(10080);
				match(TRIM);
				setState(10081);
				match(OPEN_PAREN);
				setState(10082);
				trim_list();
				setState(10083);
				match(CLOSE_PAREN);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(10085);
				match(NULLIF);
				setState(10086);
				match(OPEN_PAREN);
				setState(10087);
				a_expr(0);
				setState(10088);
				match(COMMA);
				setState(10089);
				a_expr(0);
				setState(10090);
				match(CLOSE_PAREN);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(10092);
				match(COALESCE);
				setState(10093);
				match(OPEN_PAREN);
				setState(10094);
				expr_list(0);
				setState(10095);
				match(CLOSE_PAREN);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(10097);
				match(GREATEST);
				setState(10098);
				match(OPEN_PAREN);
				setState(10099);
				expr_list(0);
				setState(10100);
				match(CLOSE_PAREN);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(10102);
				match(LEAST);
				setState(10103);
				match(OPEN_PAREN);
				setState(10104);
				expr_list(0);
				setState(10105);
				match(CLOSE_PAREN);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(10107);
				match(XMLCONCAT);
				setState(10108);
				match(OPEN_PAREN);
				setState(10109);
				expr_list(0);
				setState(10110);
				match(CLOSE_PAREN);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(10112);
				match(XMLELEMENT);
				setState(10113);
				match(OPEN_PAREN);
				setState(10114);
				match(NAME_P);
				setState(10115);
				collabel();
				setState(10116);
				match(CLOSE_PAREN);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(10118);
				match(XMLELEMENT);
				setState(10119);
				match(OPEN_PAREN);
				setState(10120);
				match(NAME_P);
				setState(10121);
				collabel();
				setState(10122);
				match(COMMA);
				setState(10123);
				xml_attributes();
				setState(10124);
				match(CLOSE_PAREN);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(10126);
				match(XMLELEMENT);
				setState(10127);
				match(OPEN_PAREN);
				setState(10128);
				match(NAME_P);
				setState(10129);
				collabel();
				setState(10130);
				match(COMMA);
				setState(10131);
				expr_list(0);
				setState(10132);
				match(CLOSE_PAREN);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(10134);
				match(XMLELEMENT);
				setState(10135);
				match(OPEN_PAREN);
				setState(10136);
				match(NAME_P);
				setState(10137);
				collabel();
				setState(10138);
				match(COMMA);
				setState(10139);
				xml_attributes();
				setState(10140);
				match(COMMA);
				setState(10141);
				expr_list(0);
				setState(10142);
				match(CLOSE_PAREN);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(10144);
				match(XMLEXISTS);
				setState(10145);
				match(OPEN_PAREN);
				setState(10146);
				c_expr();
				setState(10147);
				xmlexists_argument();
				setState(10148);
				match(CLOSE_PAREN);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(10150);
				match(XMLFOREST);
				setState(10151);
				match(OPEN_PAREN);
				setState(10152);
				xml_attribute_list(0);
				setState(10153);
				match(CLOSE_PAREN);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(10155);
				match(XMLPARSE);
				setState(10156);
				match(OPEN_PAREN);
				setState(10157);
				document_or_content();
				setState(10158);
				a_expr(0);
				setState(10159);
				xml_whitespace_option();
				setState(10160);
				match(CLOSE_PAREN);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(10162);
				match(XMLPI);
				setState(10163);
				match(OPEN_PAREN);
				setState(10164);
				match(NAME_P);
				setState(10165);
				collabel();
				setState(10166);
				match(CLOSE_PAREN);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(10168);
				match(XMLPI);
				setState(10169);
				match(OPEN_PAREN);
				setState(10170);
				match(NAME_P);
				setState(10171);
				collabel();
				setState(10172);
				match(COMMA);
				setState(10173);
				a_expr(0);
				setState(10174);
				match(CLOSE_PAREN);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(10176);
				match(XMLROOT);
				setState(10177);
				match(OPEN_PAREN);
				setState(10178);
				match(XML_P);
				setState(10179);
				a_expr(0);
				setState(10180);
				match(COMMA);
				setState(10181);
				xml_root_version();
				setState(10182);
				opt_xml_root_standalone();
				setState(10183);
				match(CLOSE_PAREN);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(10185);
				match(XMLSERIALIZE);
				setState(10186);
				match(OPEN_PAREN);
				setState(10187);
				document_or_content();
				setState(10188);
				a_expr(0);
				setState(10189);
				match(AS);
				setState(10190);
				simpletypename();
				setState(10191);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_root_versionContext extends ParserRuleContext {
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_root_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_root_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_root_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_root_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_root_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_root_versionContext xml_root_version() throws RecognitionException {
		Xml_root_versionContext _localctx = new Xml_root_versionContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_xml_root_version);
		try {
			setState(10200);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10195);
				match(VERSION_P);
				setState(10196);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10197);
				match(VERSION_P);
				setState(10198);
				match(NO);
				setState(10199);
				match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_xml_root_standaloneContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode STANDALONE_P() { return getToken(PostgreSQLParser.STANDALONE_P, 0); }
		public TerminalNode YES_P() { return getToken(PostgreSQLParser.YES_P, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Opt_xml_root_standaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_xml_root_standalone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_xml_root_standalone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_xml_root_standalone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_xml_root_standalone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_xml_root_standaloneContext opt_xml_root_standalone() throws RecognitionException {
		Opt_xml_root_standaloneContext _localctx = new Opt_xml_root_standaloneContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_opt_xml_root_standalone);
		try {
			setState(10213);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10202);
				match(COMMA);
				setState(10203);
				match(STANDALONE_P);
				setState(10204);
				match(YES_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10205);
				match(COMMA);
				setState(10206);
				match(STANDALONE_P);
				setState(10207);
				match(NO);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10208);
				match(COMMA);
				setState(10209);
				match(STANDALONE_P);
				setState(10210);
				match(NO);
				setState(10211);
				match(VALUE_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributesContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Xml_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_attributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_attributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_attributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributesContext xml_attributes() throws RecognitionException {
		Xml_attributesContext _localctx = new Xml_attributesContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_xml_attributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10215);
			match(XMLATTRIBUTES);
			setState(10216);
			match(OPEN_PAREN);
			setState(10217);
			xml_attribute_list(0);
			setState(10218);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attribute_listContext extends ParserRuleContext {
		public Xml_attribute_elContext xml_attribute_el() {
			return getRuleContext(Xml_attribute_elContext.class,0);
		}
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Xml_attribute_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_attribute_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_attribute_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_attribute_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_listContext xml_attribute_list() throws RecognitionException {
		return xml_attribute_list(0);
	}

	private Xml_attribute_listContext xml_attribute_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Xml_attribute_listContext _localctx = new Xml_attribute_listContext(_ctx, _parentState);
		Xml_attribute_listContext _prevctx = _localctx;
		int _startState = 1182;
		enterRecursionRule(_localctx, 1182, RULE_xml_attribute_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(10221);
			xml_attribute_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(10228);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,486,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Xml_attribute_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_xml_attribute_list);
					setState(10223);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10224);
					match(COMMA);
					setState(10225);
					xml_attribute_el();
					}
					} 
				}
				setState(10230);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,486,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Xml_attribute_elContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Xml_attribute_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_attribute_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_attribute_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_attribute_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_elContext xml_attribute_el() throws RecognitionException {
		Xml_attribute_elContext _localctx = new Xml_attribute_elContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_xml_attribute_el);
		try {
			setState(10236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10231);
				a_expr(0);
				setState(10232);
				match(AS);
				setState(10233);
				collabel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10235);
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Document_or_contentContext extends ParserRuleContext {
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode CONTENT_P() { return getToken(PostgreSQLParser.CONTENT_P, 0); }
		public Document_or_contentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_document_or_content; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDocument_or_content(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDocument_or_content(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDocument_or_content(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Document_or_contentContext document_or_content() throws RecognitionException {
		Document_or_contentContext _localctx = new Document_or_contentContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_document_or_content);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10238);
			_la = _input.LA(1);
			if ( !(_la==CONTENT_P || _la==DOCUMENT_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_whitespace_optionContext extends ParserRuleContext {
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(PostgreSQLParser.WHITESPACE_P, 0); }
		public TerminalNode STRIP_P() { return getToken(PostgreSQLParser.STRIP_P, 0); }
		public Xml_whitespace_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_whitespace_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_whitespace_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_whitespace_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_whitespace_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_whitespace_optionContext xml_whitespace_option() throws RecognitionException {
		Xml_whitespace_optionContext _localctx = new Xml_whitespace_optionContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_xml_whitespace_option);
		try {
			setState(10245);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRESERVE:
				enterOuterAlt(_localctx, 1);
				{
				setState(10240);
				match(PRESERVE);
				setState(10241);
				match(WHITESPACE_P);
				}
				break;
			case STRIP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(10242);
				match(STRIP_P);
				setState(10243);
				match(WHITESPACE_P);
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlexists_argumentContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PostgreSQLParser.PASSING, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<Xml_passing_mechContext> xml_passing_mech() {
			return getRuleContexts(Xml_passing_mechContext.class);
		}
		public Xml_passing_mechContext xml_passing_mech(int i) {
			return getRuleContext(Xml_passing_mechContext.class,i);
		}
		public Xmlexists_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlexists_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmlexists_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmlexists_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmlexists_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlexists_argumentContext xmlexists_argument() throws RecognitionException {
		Xmlexists_argumentContext _localctx = new Xmlexists_argumentContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_xmlexists_argument);
		try {
			setState(10262);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10247);
				match(PASSING);
				setState(10248);
				c_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10249);
				match(PASSING);
				setState(10250);
				c_expr();
				setState(10251);
				xml_passing_mech();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10253);
				match(PASSING);
				setState(10254);
				xml_passing_mech();
				setState(10255);
				c_expr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10257);
				match(PASSING);
				setState(10258);
				xml_passing_mech();
				setState(10259);
				c_expr();
				setState(10260);
				xml_passing_mech();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_mechContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLParser.REF, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_passing_mechContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_mech; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_passing_mech(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_passing_mech(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_passing_mech(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_passing_mechContext xml_passing_mech() throws RecognitionException {
		Xml_passing_mechContext _localctx = new Xml_passing_mechContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_xml_passing_mech);
		try {
			setState(10268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10264);
				match(BY);
				setState(10265);
				match(REF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10266);
				match(BY);
				setState(10267);
				match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_group_clauseContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(PostgreSQLParser.WITHIN, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Within_group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_group_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWithin_group_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWithin_group_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWithin_group_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_group_clauseContext within_group_clause() throws RecognitionException {
		Within_group_clauseContext _localctx = new Within_group_clauseContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_within_group_clause);
		try {
			setState(10277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10270);
				match(WITHIN);
				setState(10271);
				match(GROUP_P);
				setState(10272);
				match(OPEN_PAREN);
				setState(10273);
				sort_clause();
				setState(10274);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Filter_clauseContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(PostgreSQLParser.FILTER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filter_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFilter_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFilter_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFilter_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Filter_clauseContext filter_clause() throws RecognitionException {
		Filter_clauseContext _localctx = new Filter_clauseContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_filter_clause);
		try {
			setState(10286);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10279);
				match(FILTER);
				setState(10280);
				match(OPEN_PAREN);
				setState(10281);
				match(WHERE);
				setState(10282);
				a_expr(0);
				setState(10283);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_clauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public Window_definition_listContext window_definition_list() {
			return getRuleContext(Window_definition_listContext.class,0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_clauseContext window_clause() throws RecognitionException {
		Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_window_clause);
		try {
			setState(10291);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10288);
				match(WINDOW);
				setState(10289);
				window_definition_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_definition_listContext extends ParserRuleContext {
		public Window_definitionContext window_definition() {
			return getRuleContext(Window_definitionContext.class,0);
		}
		public Window_definition_listContext window_definition_list() {
			return getRuleContext(Window_definition_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Window_definition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_definition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_definition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_definition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definition_listContext window_definition_list() throws RecognitionException {
		return window_definition_list(0);
	}

	private Window_definition_listContext window_definition_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Window_definition_listContext _localctx = new Window_definition_listContext(_ctx, _parentState);
		Window_definition_listContext _prevctx = _localctx;
		int _startState = 1200;
		enterRecursionRule(_localctx, 1200, RULE_window_definition_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(10294);
			window_definition();
			}
			_ctx.stop = _input.LT(-1);
			setState(10301);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,494,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Window_definition_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_window_definition_list);
					setState(10296);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10297);
					match(COMMA);
					setState(10298);
					window_definition();
					}
					} 
				}
				setState(10303);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,494,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Window_definitionContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definitionContext window_definition() throws RecognitionException {
		Window_definitionContext _localctx = new Window_definitionContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_window_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10304);
			colid();
			setState(10305);
			match(AS);
			setState(10306);
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PostgreSQLParser.OVER, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 1204, RULE_over_clause);
		try {
			setState(10313);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10308);
				match(OVER);
				setState(10309);
				window_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10310);
				match(OVER);
				setState(10311);
				colid();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_specificationContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Opt_existing_window_nameContext opt_existing_window_name() {
			return getRuleContext(Opt_existing_window_nameContext.class,0);
		}
		public Opt_partition_clauseContext opt_partition_clause() {
			return getRuleContext(Opt_partition_clauseContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public Opt_frame_clauseContext opt_frame_clause() {
			return getRuleContext(Opt_frame_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Window_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_specificationContext window_specification() throws RecognitionException {
		Window_specificationContext _localctx = new Window_specificationContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_window_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10315);
			match(OPEN_PAREN);
			setState(10316);
			opt_existing_window_name();
			setState(10317);
			opt_partition_clause();
			setState(10318);
			opt_sort_clause();
			setState(10319);
			opt_frame_clause();
			setState(10320);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_existing_window_nameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_existing_window_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_existing_window_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_existing_window_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_existing_window_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_existing_window_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_existing_window_nameContext opt_existing_window_name() throws RecognitionException {
		Opt_existing_window_nameContext _localctx = new Opt_existing_window_nameContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_opt_existing_window_name);
		try {
			setState(10324);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10322);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_partition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_partition_clauseContext opt_partition_clause() throws RecognitionException {
		Opt_partition_clauseContext _localctx = new Opt_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_opt_partition_clause);
		try {
			setState(10330);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARTITION:
				enterOuterAlt(_localctx, 1);
				{
				setState(10326);
				match(PARTITION);
				setState(10327);
				match(BY);
				setState(10328);
				expr_list(0);
				}
				break;
			case CLOSE_PAREN:
			case ORDER:
			case RANGE:
			case ROWS:
			case GROUPS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_frame_clauseContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public Frame_extentContext frame_extent() {
			return getRuleContext(Frame_extentContext.class,0);
		}
		public Opt_window_exclusion_clauseContext opt_window_exclusion_clause() {
			return getRuleContext(Opt_window_exclusion_clauseContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode GROUPS() { return getToken(PostgreSQLParser.GROUPS, 0); }
		public Opt_frame_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_frame_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_frame_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_frame_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_frame_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_frame_clauseContext opt_frame_clause() throws RecognitionException {
		Opt_frame_clauseContext _localctx = new Opt_frame_clauseContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_opt_frame_clause);
		try {
			setState(10345);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RANGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(10332);
				match(RANGE);
				setState(10333);
				frame_extent();
				setState(10334);
				opt_window_exclusion_clause();
				}
				break;
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				setState(10336);
				match(ROWS);
				setState(10337);
				frame_extent();
				setState(10338);
				opt_window_exclusion_clause();
				}
				break;
			case GROUPS:
				enterOuterAlt(_localctx, 3);
				{
				setState(10340);
				match(GROUPS);
				setState(10341);
				frame_extent();
				setState(10342);
				opt_window_exclusion_clause();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_extentContext extends ParserRuleContext {
		public List<Frame_boundContext> frame_bound() {
			return getRuleContexts(Frame_boundContext.class);
		}
		public Frame_boundContext frame_bound(int i) {
			return getRuleContext(Frame_boundContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public Frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_extent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame_extent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame_extent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame_extent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_extentContext frame_extent() throws RecognitionException {
		Frame_extentContext _localctx = new Frame_extentContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_frame_extent);
		try {
			setState(10353);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10347);
				frame_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10348);
				match(BETWEEN);
				setState(10349);
				frame_bound();
				setState(10350);
				match(AND);
				setState(10351);
				frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_boundContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLParser.FOLLOWING, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_boundContext frame_bound() throws RecognitionException {
		Frame_boundContext _localctx = new Frame_boundContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_frame_bound);
		try {
			setState(10367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10355);
				match(UNBOUNDED);
				setState(10356);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10357);
				match(UNBOUNDED);
				setState(10358);
				match(FOLLOWING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10359);
				match(CURRENT_P);
				setState(10360);
				match(ROW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10361);
				a_expr(0);
				setState(10362);
				match(PRECEDING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10364);
				a_expr(0);
				setState(10365);
				match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_window_exclusion_clauseContext extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLParser.OTHERS, 0); }
		public Opt_window_exclusion_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_window_exclusion_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_window_exclusion_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_window_exclusion_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_window_exclusion_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_window_exclusion_clauseContext opt_window_exclusion_clause() throws RecognitionException {
		Opt_window_exclusion_clauseContext _localctx = new Opt_window_exclusion_clauseContext(_ctx, getState());
		enterRule(_localctx, 1218, RULE_opt_window_exclusion_clause);
		try {
			setState(10380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10369);
				match(EXCLUDE);
				setState(10370);
				match(CURRENT_P);
				setState(10371);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10372);
				match(EXCLUDE);
				setState(10373);
				match(GROUP_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10374);
				match(EXCLUDE);
				setState(10375);
				match(TIES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10376);
				match(EXCLUDE);
				setState(10377);
				match(NO);
				setState(10378);
				match(OTHERS);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public RowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowContext row() throws RecognitionException {
		RowContext _localctx = new RowContext(_ctx, getState());
		enterRule(_localctx, 1220, RULE_row);
		try {
			setState(10396);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10382);
				match(ROW);
				setState(10383);
				match(OPEN_PAREN);
				setState(10384);
				expr_list(0);
				setState(10385);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10387);
				match(ROW);
				setState(10388);
				match(OPEN_PAREN);
				setState(10389);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10390);
				match(OPEN_PAREN);
				setState(10391);
				expr_list(0);
				setState(10392);
				match(COMMA);
				setState(10393);
				a_expr(0);
				setState(10394);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explicit_rowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Explicit_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplicit_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplicit_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplicit_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explicit_rowContext explicit_row() throws RecognitionException {
		Explicit_rowContext _localctx = new Explicit_rowContext(_ctx, getState());
		enterRule(_localctx, 1222, RULE_explicit_row);
		try {
			setState(10406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10398);
				match(ROW);
				setState(10399);
				match(OPEN_PAREN);
				setState(10400);
				expr_list(0);
				setState(10401);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10403);
				match(ROW);
				setState(10404);
				match(OPEN_PAREN);
				setState(10405);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implicit_rowContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Implicit_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicit_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImplicit_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImplicit_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImplicit_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implicit_rowContext implicit_row() throws RecognitionException {
		Implicit_rowContext _localctx = new Implicit_rowContext(_ctx, getState());
		enterRule(_localctx, 1224, RULE_implicit_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10408);
			match(OPEN_PAREN);
			setState(10409);
			expr_list(0);
			setState(10410);
			match(COMMA);
			setState(10411);
			a_expr(0);
			setState(10412);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sub_typeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(PostgreSQLParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Sub_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sub_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSub_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSub_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSub_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sub_typeContext sub_type() throws RecognitionException {
		Sub_typeContext _localctx = new Sub_typeContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_sub_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10414);
			_la = _input.LA(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ALL - 66)) | (1L << (ANY - 66)) | (1L << (SOME - 66)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_opContext extends ParserRuleContext {
		public MathopContext mathop() {
			return getRuleContext(MathopContext.class,0);
		}
		public TerminalNode AMPERSAND() { return getToken(PostgreSQLParser.AMPERSAND, 0); }
		public TerminalNode OVERLAP() { return getToken(PostgreSQLParser.OVERLAP, 0); }
		public TerminalNode CONTAINS() { return getToken(PostgreSQLParser.CONTAINS, 0); }
		public TerminalNode IS_CONTAINS() { return getToken(PostgreSQLParser.IS_CONTAINS, 0); }
		public TerminalNode CONCAT() { return getToken(PostgreSQLParser.CONCAT, 0); }
		public Geometric_operatorsContext geometric_operators() {
			return getRuleContext(Geometric_operatorsContext.class,0);
		}
		public Text_patternsContext text_patterns() {
			return getRuleContext(Text_patternsContext.class,0);
		}
		public All_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAll_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAll_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAll_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_opContext all_op() throws RecognitionException {
		All_opContext _localctx = new All_opContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_all_op);
		try {
			setState(10424);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_LESS:
			case GREATER_GREATER:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case NOT_EQUALS_1:
			case PERCENT:
			case BITWISE_OR:
			case BITWISE_XOR:
			case BITWISE_NOT:
			case SQUARE_ROOT:
			case CUBIC_ROOT:
			case FACTORIAL:
			case PREFIX_FACTORIAL:
			case ABSOLUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(10416);
				mathop();
				}
				break;
			case AMPERSAND:
				enterOuterAlt(_localctx, 2);
				{
				setState(10417);
				match(AMPERSAND);
				}
				break;
			case OVERLAP:
				enterOuterAlt(_localctx, 3);
				{
				setState(10418);
				match(OVERLAP);
				}
				break;
			case CONTAINS:
				enterOuterAlt(_localctx, 4);
				{
				setState(10419);
				match(CONTAINS);
				}
				break;
			case IS_CONTAINS:
				enterOuterAlt(_localctx, 5);
				{
				setState(10420);
				match(IS_CONTAINS);
				}
				break;
			case CONCAT:
				enterOuterAlt(_localctx, 6);
				{
				setState(10421);
				match(CONCAT);
				}
				break;
			case LENGTH:
			case CENTER:
			case CLOSET_POINT:
			case DISTANT:
			case EXTEND_RIGHT:
			case EXTEND_LEFT:
			case IS_STRICTLY_BELOW:
			case IS_STRICTLY_ABOVE:
			case EXTEND_ABOVE:
			case EXTEND_BELOW:
			case IS_BELOW:
			case IS_ABOVE:
			case INTERSECTION:
			case IS_HORIZON:
			case IS_VERTICAL:
			case IS_PERPENDICULAR:
			case IS_PARALLEL:
			case SAME:
				enterOuterAlt(_localctx, 7);
				{
				setState(10422);
				geometric_operators();
				}
				break;
			case TEXT_PATTERN1:
			case TEXT_PATTERN2:
			case TEXT_PATTERN3:
			case TEXT_PATTERN4:
				enterOuterAlt(_localctx, 8);
				{
				setState(10423);
				text_patterns();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Text_patternsContext extends ParserRuleContext {
		public TerminalNode TEXT_PATTERN1() { return getToken(PostgreSQLParser.TEXT_PATTERN1, 0); }
		public TerminalNode TEXT_PATTERN2() { return getToken(PostgreSQLParser.TEXT_PATTERN2, 0); }
		public TerminalNode TEXT_PATTERN3() { return getToken(PostgreSQLParser.TEXT_PATTERN3, 0); }
		public TerminalNode TEXT_PATTERN4() { return getToken(PostgreSQLParser.TEXT_PATTERN4, 0); }
		public Text_patternsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_text_patterns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterText_patterns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitText_patterns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitText_patterns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Text_patternsContext text_patterns() throws RecognitionException {
		Text_patternsContext _localctx = new Text_patternsContext(_ctx, getState());
		enterRule(_localctx, 1230, RULE_text_patterns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10426);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT_PATTERN1) | (1L << TEXT_PATTERN2) | (1L << TEXT_PATTERN3) | (1L << TEXT_PATTERN4))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Geometric_operatorsContext extends ParserRuleContext {
		public TerminalNode LENGTH() { return getToken(PostgreSQLParser.LENGTH, 0); }
		public TerminalNode CENTER() { return getToken(PostgreSQLParser.CENTER, 0); }
		public TerminalNode CLOSET_POINT() { return getToken(PostgreSQLParser.CLOSET_POINT, 0); }
		public TerminalNode DISTANT() { return getToken(PostgreSQLParser.DISTANT, 0); }
		public TerminalNode EXTEND_RIGHT() { return getToken(PostgreSQLParser.EXTEND_RIGHT, 0); }
		public TerminalNode EXTEND_LEFT() { return getToken(PostgreSQLParser.EXTEND_LEFT, 0); }
		public TerminalNode IS_STRICTLY_BELOW() { return getToken(PostgreSQLParser.IS_STRICTLY_BELOW, 0); }
		public TerminalNode IS_STRICTLY_ABOVE() { return getToken(PostgreSQLParser.IS_STRICTLY_ABOVE, 0); }
		public TerminalNode EXTEND_ABOVE() { return getToken(PostgreSQLParser.EXTEND_ABOVE, 0); }
		public TerminalNode EXTEND_BELOW() { return getToken(PostgreSQLParser.EXTEND_BELOW, 0); }
		public TerminalNode IS_BELOW() { return getToken(PostgreSQLParser.IS_BELOW, 0); }
		public TerminalNode IS_ABOVE() { return getToken(PostgreSQLParser.IS_ABOVE, 0); }
		public TerminalNode INTERSECTION() { return getToken(PostgreSQLParser.INTERSECTION, 0); }
		public TerminalNode IS_HORIZON() { return getToken(PostgreSQLParser.IS_HORIZON, 0); }
		public TerminalNode IS_VERTICAL() { return getToken(PostgreSQLParser.IS_VERTICAL, 0); }
		public TerminalNode IS_PERPENDICULAR() { return getToken(PostgreSQLParser.IS_PERPENDICULAR, 0); }
		public TerminalNode IS_PARALLEL() { return getToken(PostgreSQLParser.IS_PARALLEL, 0); }
		public TerminalNode SAME() { return getToken(PostgreSQLParser.SAME, 0); }
		public Geometric_operatorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_geometric_operators; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeometric_operators(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeometric_operators(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeometric_operators(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Geometric_operatorsContext geometric_operators() throws RecognitionException {
		Geometric_operatorsContext _localctx = new Geometric_operatorsContext(_ctx, getState());
		enterRule(_localctx, 1232, RULE_geometric_operators);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10428);
			_la = _input.LA(1);
			if ( !(((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (LENGTH - 48)) | (1L << (CENTER - 48)) | (1L << (CLOSET_POINT - 48)) | (1L << (DISTANT - 48)) | (1L << (EXTEND_RIGHT - 48)) | (1L << (EXTEND_LEFT - 48)) | (1L << (IS_STRICTLY_BELOW - 48)) | (1L << (IS_STRICTLY_ABOVE - 48)) | (1L << (EXTEND_ABOVE - 48)) | (1L << (EXTEND_BELOW - 48)) | (1L << (IS_BELOW - 48)) | (1L << (IS_ABOVE - 48)) | (1L << (INTERSECTION - 48)) | (1L << (IS_HORIZON - 48)) | (1L << (IS_VERTICAL - 48)) | (1L << (IS_PERPENDICULAR - 48)) | (1L << (IS_PARALLEL - 48)) | (1L << (SAME - 48)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathopContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode SLASH() { return getToken(PostgreSQLParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public TerminalNode NOT_EQUALS_1() { return getToken(PostgreSQLParser.NOT_EQUALS_1, 0); }
		public TerminalNode BITWISE_OR() { return getToken(PostgreSQLParser.BITWISE_OR, 0); }
		public TerminalNode BITWISE_XOR() { return getToken(PostgreSQLParser.BITWISE_XOR, 0); }
		public TerminalNode BITWISE_NOT() { return getToken(PostgreSQLParser.BITWISE_NOT, 0); }
		public TerminalNode SQUARE_ROOT() { return getToken(PostgreSQLParser.SQUARE_ROOT, 0); }
		public TerminalNode CUBIC_ROOT() { return getToken(PostgreSQLParser.CUBIC_ROOT, 0); }
		public TerminalNode FACTORIAL() { return getToken(PostgreSQLParser.FACTORIAL, 0); }
		public TerminalNode PREFIX_FACTORIAL() { return getToken(PostgreSQLParser.PREFIX_FACTORIAL, 0); }
		public TerminalNode ABSOLUTE() { return getToken(PostgreSQLParser.ABSOLUTE, 0); }
		public TerminalNode LESS_LESS() { return getToken(PostgreSQLParser.LESS_LESS, 0); }
		public TerminalNode GREATER_GREATER() { return getToken(PostgreSQLParser.GREATER_GREATER, 0); }
		public MathopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMathop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMathop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMathop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathopContext mathop() throws RecognitionException {
		MathopContext _localctx = new MathopContext(_ctx, getState());
		enterRule(_localctx, 1234, RULE_mathop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10430);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << EQUAL) | (1L << PLUS) | (1L << MINUS) | (1L << SLASH) | (1L << CARET) | (1L << LT) | (1L << GT) | (1L << LESS_LESS) | (1L << GREATER_GREATER) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << NOT_EQUALS) | (1L << NOT_EQUALS_1) | (1L << PERCENT) | (1L << BITWISE_OR) | (1L << BITWISE_XOR) | (1L << BITWISE_NOT) | (1L << SQUARE_ROOT) | (1L << CUBIC_ROOT) | (1L << FACTORIAL) | (1L << PREFIX_FACTORIAL) | (1L << ABSOLUTE))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qual_opContext extends ParserRuleContext {
		public OperatorContext operator() {
			return getRuleContext(OperatorContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQual_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQual_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQual_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_opContext qual_op() throws RecognitionException {
		Qual_opContext _localctx = new Qual_opContext(_ctx, getState());
		enterRule(_localctx, 1236, RULE_qual_op);
		try {
			setState(10438);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
			case EQUAL:
			case AMPERSAND:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case NOT_EQUALS_1:
			case PERCENT:
			case BITWISE_OR:
			case BITWISE_XOR:
			case BITWISE_NOT:
			case SQUARE_ROOT:
			case CUBIC_ROOT:
			case FACTORIAL:
			case PREFIX_FACTORIAL:
			case ABSOLUTE:
			case TEXT_PATTERN1:
			case TEXT_PATTERN2:
			case TEXT_PATTERN3:
			case TEXT_PATTERN4:
			case LENGTH:
			case CENTER:
			case CLOSET_POINT:
			case DISTANT:
			case EXTEND_RIGHT:
			case EXTEND_LEFT:
			case IS_STRICTLY_BELOW:
			case IS_STRICTLY_ABOVE:
			case EXTEND_ABOVE:
			case EXTEND_BELOW:
			case IS_BELOW:
			case IS_ABOVE:
			case INTERSECTION:
			case IS_HORIZON:
			case IS_VERTICAL:
			case IS_PERPENDICULAR:
			case IS_PARALLEL:
			case SAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(10432);
				operator();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(10433);
				match(OPERATOR);
				setState(10434);
				match(OPEN_PAREN);
				setState(10435);
				any_operator();
				setState(10436);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qual_all_opContext extends ParserRuleContext {
		public All_opContext all_op() {
			return getRuleContext(All_opContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_all_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_all_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQual_all_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQual_all_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQual_all_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_all_opContext qual_all_op() throws RecognitionException {
		Qual_all_opContext _localctx = new Qual_all_opContext(_ctx, getState());
		enterRule(_localctx, 1238, RULE_qual_all_op);
		try {
			setState(10446);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
			case EQUAL:
			case AMPERSAND:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_LESS:
			case GREATER_GREATER:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case NOT_EQUALS_1:
			case PERCENT:
			case BITWISE_OR:
			case BITWISE_XOR:
			case BITWISE_NOT:
			case SQUARE_ROOT:
			case CUBIC_ROOT:
			case FACTORIAL:
			case PREFIX_FACTORIAL:
			case ABSOLUTE:
			case TEXT_PATTERN1:
			case TEXT_PATTERN2:
			case TEXT_PATTERN3:
			case TEXT_PATTERN4:
			case CONTAINS:
			case IS_CONTAINS:
			case OVERLAP:
			case CONCAT:
			case LENGTH:
			case CENTER:
			case CLOSET_POINT:
			case DISTANT:
			case EXTEND_RIGHT:
			case EXTEND_LEFT:
			case IS_STRICTLY_BELOW:
			case IS_STRICTLY_ABOVE:
			case EXTEND_ABOVE:
			case EXTEND_BELOW:
			case IS_BELOW:
			case IS_ABOVE:
			case INTERSECTION:
			case IS_HORIZON:
			case IS_VERTICAL:
			case IS_PERPENDICULAR:
			case IS_PARALLEL:
			case SAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(10440);
				all_op();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(10441);
				match(OPERATOR);
				setState(10442);
				match(OPEN_PAREN);
				setState(10443);
				any_operator();
				setState(10444);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_OpContext extends ParserRuleContext {
		public All_opContext all_op() {
			return getRuleContext(All_opContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public Subquery_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_Op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSubquery_Op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSubquery_Op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSubquery_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_OpContext subquery_Op() throws RecognitionException {
		Subquery_OpContext _localctx = new Subquery_OpContext(_ctx, getState());
		enterRule(_localctx, 1240, RULE_subquery_Op);
		try {
			setState(10460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10448);
				all_op();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10449);
				match(OPERATOR);
				setState(10450);
				match(OPEN_PAREN);
				setState(10451);
				any_operator();
				setState(10452);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10454);
				match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10455);
				match(NOT);
				setState(10456);
				match(LIKE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10457);
				match(ILIKE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10458);
				match(NOT);
				setState(10459);
				match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_listContext expr_list() throws RecognitionException {
		return expr_list(0);
	}

	private Expr_listContext expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Expr_listContext _localctx = new Expr_listContext(_ctx, _parentState);
		Expr_listContext _prevctx = _localctx;
		int _startState = 1242;
		enterRecursionRule(_localctx, 1242, RULE_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(10463);
			a_expr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(10470);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,508,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_expr_list);
					setState(10465);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10466);
					match(COMMA);
					setState(10467);
					a_expr(0);
					}
					} 
				}
				setState(10472);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,508,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_arg_listContext extends ParserRuleContext {
		public Func_arg_exprContext func_arg_expr() {
			return getRuleContext(Func_arg_exprContext.class,0);
		}
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Func_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_listContext func_arg_list() throws RecognitionException {
		return func_arg_list(0);
	}

	private Func_arg_listContext func_arg_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Func_arg_listContext _localctx = new Func_arg_listContext(_ctx, _parentState);
		Func_arg_listContext _prevctx = _localctx;
		int _startState = 1244;
		enterRecursionRule(_localctx, 1244, RULE_func_arg_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(10474);
			func_arg_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(10481);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,509,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_arg_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_func_arg_list);
					setState(10476);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10477);
					match(COMMA);
					setState(10478);
					func_arg_expr();
					}
					} 
				}
				setState(10483);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,509,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_arg_exprContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public TerminalNode COLON_EQUALS() { return getToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public TerminalNode EQUALS_GREATER() { return getToken(PostgreSQLParser.EQUALS_GREATER, 0); }
		public Func_arg_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_exprContext func_arg_expr() throws RecognitionException {
		Func_arg_exprContext _localctx = new Func_arg_exprContext(_ctx, getState());
		enterRule(_localctx, 1246, RULE_func_arg_expr);
		try {
			setState(10493);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10484);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10485);
				param_name();
				setState(10486);
				match(COLON_EQUALS);
				setState(10487);
				a_expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10489);
				param_name();
				setState(10490);
				match(EQUALS_GREATER);
				setState(10491);
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_listContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_listContext type_list() throws RecognitionException {
		return type_list(0);
	}

	private Type_listContext type_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Type_listContext _localctx = new Type_listContext(_ctx, _parentState);
		Type_listContext _prevctx = _localctx;
		int _startState = 1248;
		enterRecursionRule(_localctx, 1248, RULE_type_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(10496);
			typename();
			}
			_ctx.stop = _input.LT(-1);
			setState(10503);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,511,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Type_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_type_list);
					setState(10498);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10499);
					match(COMMA);
					setState(10500);
					typename();
					}
					} 
				}
				setState(10505);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,511,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Array_exprContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public Array_expr_listContext array_expr_list() {
			return getRuleContext(Array_expr_listContext.class,0);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterArray_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitArray_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitArray_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_exprContext array_expr() throws RecognitionException {
		Array_exprContext _localctx = new Array_exprContext(_ctx, getState());
		enterRule(_localctx, 1250, RULE_array_expr);
		try {
			setState(10516);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10506);
				match(OPEN_BRACKET);
				setState(10507);
				expr_list(0);
				setState(10508);
				match(CLOSE_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10510);
				match(OPEN_BRACKET);
				setState(10511);
				array_expr_list(0);
				setState(10512);
				match(CLOSE_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10514);
				match(OPEN_BRACKET);
				setState(10515);
				match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_expr_listContext extends ParserRuleContext {
		public Array_exprContext array_expr() {
			return getRuleContext(Array_exprContext.class,0);
		}
		public Array_expr_listContext array_expr_list() {
			return getRuleContext(Array_expr_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Array_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterArray_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitArray_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitArray_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_expr_listContext array_expr_list() throws RecognitionException {
		return array_expr_list(0);
	}

	private Array_expr_listContext array_expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Array_expr_listContext _localctx = new Array_expr_listContext(_ctx, _parentState);
		Array_expr_listContext _prevctx = _localctx;
		int _startState = 1252;
		enterRecursionRule(_localctx, 1252, RULE_array_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(10519);
			array_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(10526);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,513,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Array_expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_array_expr_list);
					setState(10521);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10522);
					match(COMMA);
					setState(10523);
					array_expr();
					}
					} 
				}
				setState(10528);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,513,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Extract_listContext extends ParserRuleContext {
		public Extract_argContext extract_arg() {
			return getRuleContext(Extract_argContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Extract_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExtract_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExtract_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExtract_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_listContext extract_list() throws RecognitionException {
		Extract_listContext _localctx = new Extract_listContext(_ctx, getState());
		enterRule(_localctx, 1254, RULE_extract_list);
		try {
			setState(10534);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case DAY_P:
			case FIRST_P:
			case FORWARD:
			case HOUR_P:
			case INSERT:
			case LAST_P:
			case MINUTE_P:
			case MONTH_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SECOND_P:
			case SET:
			case TYPE_P:
			case YEAR_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(10529);
				extract_arg();
				setState(10530);
				match(FROM);
				setState(10531);
				a_expr(0);
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_argContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode YEAR_P() { return getToken(PostgreSQLParser.YEAR_P, 0); }
		public TerminalNode MONTH_P() { return getToken(PostgreSQLParser.MONTH_P, 0); }
		public TerminalNode DAY_P() { return getToken(PostgreSQLParser.DAY_P, 0); }
		public TerminalNode HOUR_P() { return getToken(PostgreSQLParser.HOUR_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(PostgreSQLParser.MINUTE_P, 0); }
		public TerminalNode SECOND_P() { return getToken(PostgreSQLParser.SECOND_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Extract_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExtract_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExtract_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExtract_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_argContext extract_arg() throws RecognitionException {
		Extract_argContext _localctx = new Extract_argContext(_ctx, getState());
		enterRule(_localctx, 1256, RULE_extract_arg);
		try {
			setState(10544);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(10536);
				identifier();
				}
				break;
			case YEAR_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(10537);
				match(YEAR_P);
				}
				break;
			case MONTH_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(10538);
				match(MONTH_P);
				}
				break;
			case DAY_P:
				enterOuterAlt(_localctx, 4);
				{
				setState(10539);
				match(DAY_P);
				}
				break;
			case HOUR_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(10540);
				match(HOUR_P);
				}
				break;
			case MINUTE_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(10541);
				match(MINUTE_P);
				}
				break;
			case SECOND_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(10542);
				match(SECOND_P);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 8);
				{
				setState(10543);
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unicode_normal_formContext extends ParserRuleContext {
		public TerminalNode NFC() { return getToken(PostgreSQLParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(PostgreSQLParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(PostgreSQLParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(PostgreSQLParser.NFKD, 0); }
		public Unicode_normal_formContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicode_normal_form; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnicode_normal_form(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnicode_normal_form(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnicode_normal_form(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unicode_normal_formContext unicode_normal_form() throws RecognitionException {
		Unicode_normal_formContext _localctx = new Unicode_normal_formContext(_ctx, getState());
		enterRule(_localctx, 1258, RULE_unicode_normal_form);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10546);
			_la = _input.LA(1);
			if ( !(((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (NFC - 511)) | (1L << (NFD - 511)) | (1L << (NFKC - 511)) | (1L << (NFKD - 511)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlay_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode PLACING() { return getToken(PostgreSQLParser.PLACING, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Overlay_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlay_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOverlay_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOverlay_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOverlay_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overlay_listContext overlay_list() throws RecognitionException {
		Overlay_listContext _localctx = new Overlay_listContext(_ctx, getState());
		enterRule(_localctx, 1260, RULE_overlay_list);
		try {
			setState(10562);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10548);
				a_expr(0);
				setState(10549);
				match(PLACING);
				setState(10550);
				a_expr(0);
				setState(10551);
				match(FROM);
				setState(10552);
				a_expr(0);
				setState(10553);
				match(FOR);
				setState(10554);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10556);
				a_expr(0);
				setState(10557);
				match(PLACING);
				setState(10558);
				a_expr(0);
				setState(10559);
				match(FROM);
				setState(10560);
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Position_listContext extends ParserRuleContext {
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Position_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_position_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPosition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPosition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPosition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Position_listContext position_list() throws RecognitionException {
		Position_listContext _localctx = new Position_listContext(_ctx, getState());
		enterRule(_localctx, 1262, RULE_position_list);
		try {
			setState(10569);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case STAR:
			case EQUAL:
			case AMPERSAND:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case NOT_EQUALS_1:
			case PERCENT:
			case PARAM:
			case BITWISE_OR:
			case BITWISE_XOR:
			case BITWISE_NOT:
			case SQUARE_ROOT:
			case CUBIC_ROOT:
			case FACTORIAL:
			case PREFIX_FACTORIAL:
			case ABSOLUTE:
			case TEXT_PATTERN1:
			case TEXT_PATTERN2:
			case TEXT_PATTERN3:
			case TEXT_PATTERN4:
			case LENGTH:
			case CENTER:
			case CLOSET_POINT:
			case DISTANT:
			case EXTEND_RIGHT:
			case EXTEND_LEFT:
			case IS_STRICTLY_BELOW:
			case IS_STRICTLY_ABOVE:
			case EXTEND_ABOVE:
			case EXTEND_BELOW:
			case IS_BELOW:
			case IS_ABOVE:
			case INTERSECTION:
			case IS_HORIZON:
			case IS_VERTICAL:
			case IS_PERPENDICULAR:
			case IS_PARALLEL:
			case SAME:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(10564);
				b_expr(0);
				setState(10565);
				match(IN_P);
				setState(10566);
				b_expr(0);
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Substr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSubstr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSubstr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSubstr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_listContext substr_list() throws RecognitionException {
		Substr_listContext _localctx = new Substr_listContext(_ctx, getState());
		enterRule(_localctx, 1264, RULE_substr_list);
		try {
			setState(10599);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10571);
				a_expr(0);
				setState(10572);
				match(FROM);
				setState(10573);
				a_expr(0);
				setState(10574);
				match(FOR);
				setState(10575);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10577);
				a_expr(0);
				setState(10578);
				match(FOR);
				setState(10579);
				a_expr(0);
				setState(10580);
				match(FROM);
				setState(10581);
				a_expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10583);
				a_expr(0);
				setState(10584);
				match(FROM);
				setState(10585);
				a_expr(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10587);
				a_expr(0);
				setState(10588);
				match(FOR);
				setState(10589);
				a_expr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10591);
				a_expr(0);
				setState(10592);
				match(SIMILAR);
				setState(10593);
				a_expr(0);
				setState(10594);
				match(ESCAPE);
				setState(10595);
				a_expr(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10597);
				expr_list(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Trim_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTrim_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTrim_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTrim_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_listContext trim_list() throws RecognitionException {
		Trim_listContext _localctx = new Trim_listContext(_ctx, getState());
		enterRule(_localctx, 1266, RULE_trim_list);
		try {
			setState(10608);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10601);
				a_expr(0);
				setState(10602);
				match(FROM);
				setState(10603);
				expr_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10605);
				match(FROM);
				setState(10606);
				expr_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10607);
				expr_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_exprContext extends ParserRuleContext {
		public In_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_expr; }
	 
		public In_exprContext() { }
		public void copyFrom(In_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class In_expr_listContext extends In_exprContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public In_expr_listContext(In_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIn_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIn_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIn_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class In_expr_selectContext extends In_exprContext {
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public In_expr_selectContext(In_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIn_expr_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIn_expr_select(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIn_expr_select(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_exprContext in_expr() throws RecognitionException {
		In_exprContext _localctx = new In_exprContext(_ctx, getState());
		enterRule(_localctx, 1268, RULE_in_expr);
		try {
			setState(10615);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				_localctx = new In_expr_selectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(10610);
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new In_expr_listContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(10611);
				match(OPEN_PAREN);
				setState(10612);
				expr_list(0);
				setState(10613);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_exprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(PostgreSQLParser.CASE, 0); }
		public Case_argContext case_arg() {
			return getRuleContext(Case_argContext.class,0);
		}
		public When_clause_listContext when_clause_list() {
			return getRuleContext(When_clause_listContext.class,0);
		}
		public Case_defaultContext case_default() {
			return getRuleContext(Case_defaultContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public Case_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_exprContext case_expr() throws RecognitionException {
		Case_exprContext _localctx = new Case_exprContext(_ctx, getState());
		enterRule(_localctx, 1270, RULE_case_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10617);
			match(CASE);
			setState(10618);
			case_arg();
			setState(10619);
			when_clause_list(0);
			setState(10620);
			case_default();
			setState(10621);
			match(END_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_clause_listContext extends ParserRuleContext {
		public When_clauseContext when_clause() {
			return getRuleContext(When_clauseContext.class,0);
		}
		public When_clause_listContext when_clause_list() {
			return getRuleContext(When_clause_listContext.class,0);
		}
		public When_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhen_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhen_clause_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhen_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clause_listContext when_clause_list() throws RecognitionException {
		return when_clause_list(0);
	}

	private When_clause_listContext when_clause_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		When_clause_listContext _localctx = new When_clause_listContext(_ctx, _parentState);
		When_clause_listContext _prevctx = _localctx;
		int _startState = 1272;
		enterRecursionRule(_localctx, 1272, RULE_when_clause_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(10624);
			when_clause();
			}
			_ctx.stop = _input.LT(-1);
			setState(10630);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,521,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new When_clause_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_when_clause_list);
					setState(10626);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10627);
					when_clause();
					}
					} 
				}
				setState(10632);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,521,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class When_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public When_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhen_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhen_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhen_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clauseContext when_clause() throws RecognitionException {
		When_clauseContext _localctx = new When_clauseContext(_ctx, getState());
		enterRule(_localctx, 1274, RULE_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10633);
			match(WHEN);
			setState(10634);
			a_expr(0);
			setState(10635);
			match(THEN);
			setState(10636);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_defaultContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_defaultContext case_default() throws RecognitionException {
		Case_defaultContext _localctx = new Case_defaultContext(_ctx, getState());
		enterRule(_localctx, 1276, RULE_case_default);
		try {
			setState(10641);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ELSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(10638);
				match(ELSE);
				setState(10639);
				a_expr(0);
				}
				break;
			case END_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_argContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_argContext case_arg() throws RecognitionException {
		Case_argContext _localctx = new Case_argContext(_ctx, getState());
		enterRule(_localctx, 1278, RULE_case_arg);
		try {
			setState(10645);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case STAR:
			case EQUAL:
			case AMPERSAND:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case NOT_EQUALS_1:
			case PERCENT:
			case PARAM:
			case BITWISE_OR:
			case BITWISE_XOR:
			case BITWISE_NOT:
			case SQUARE_ROOT:
			case CUBIC_ROOT:
			case FACTORIAL:
			case PREFIX_FACTORIAL:
			case ABSOLUTE:
			case TEXT_PATTERN1:
			case TEXT_PATTERN2:
			case TEXT_PATTERN3:
			case TEXT_PATTERN4:
			case LENGTH:
			case CENTER:
			case CLOSET_POINT:
			case DISTANT:
			case EXTEND_RIGHT:
			case EXTEND_LEFT:
			case IS_STRICTLY_BELOW:
			case IS_STRICTLY_ABOVE:
			case EXTEND_ABOVE:
			case EXTEND_BELOW:
			case IS_BELOW:
			case IS_ABOVE:
			case INTERSECTION:
			case IS_HORIZON:
			case IS_VERTICAL:
			case IS_PERPENDICULAR:
			case IS_PARALLEL:
			case SAME:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(10643);
				a_expr(0);
				}
				break;
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnrefContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnrefContext columnref() throws RecognitionException {
		ColumnrefContext _localctx = new ColumnrefContext(_ctx, getState());
		enterRule(_localctx, 1280, RULE_columnref);
		try {
			setState(10651);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10647);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10648);
				colid();
				setState(10649);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indirection_elContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Attr_nameContext attr_name() {
			return getRuleContext(Attr_nameContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public List<Opt_slice_boundContext> opt_slice_bound() {
			return getRuleContexts(Opt_slice_boundContext.class);
		}
		public Opt_slice_boundContext opt_slice_bound(int i) {
			return getRuleContext(Opt_slice_boundContext.class,i);
		}
		public TerminalNode COLON() { return getToken(PostgreSQLParser.COLON, 0); }
		public Indirection_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndirection_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndirection_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndirection_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indirection_elContext indirection_el() throws RecognitionException {
		Indirection_elContext _localctx = new Indirection_elContext(_ctx, getState());
		enterRule(_localctx, 1282, RULE_indirection_el);
		try {
			setState(10667);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10653);
				match(DOT);
				setState(10654);
				attr_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10655);
				match(DOT);
				setState(10656);
				match(STAR);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10657);
				match(OPEN_BRACKET);
				setState(10658);
				a_expr(0);
				setState(10659);
				match(CLOSE_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10661);
				match(OPEN_BRACKET);
				setState(10662);
				opt_slice_bound();
				setState(10663);
				match(COLON);
				setState(10664);
				opt_slice_bound();
				setState(10665);
				match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_slice_boundContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_slice_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_slice_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_slice_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_slice_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_slice_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_slice_boundContext opt_slice_bound() throws RecognitionException {
		Opt_slice_boundContext _localctx = new Opt_slice_boundContext(_ctx, getState());
		enterRule(_localctx, 1284, RULE_opt_slice_bound);
		try {
			setState(10671);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case STAR:
			case EQUAL:
			case AMPERSAND:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case NOT_EQUALS_1:
			case PERCENT:
			case PARAM:
			case BITWISE_OR:
			case BITWISE_XOR:
			case BITWISE_NOT:
			case SQUARE_ROOT:
			case CUBIC_ROOT:
			case FACTORIAL:
			case PREFIX_FACTORIAL:
			case ABSOLUTE:
			case TEXT_PATTERN1:
			case TEXT_PATTERN2:
			case TEXT_PATTERN3:
			case TEXT_PATTERN4:
			case LENGTH:
			case CENTER:
			case CLOSET_POINT:
			case DISTANT:
			case EXTEND_RIGHT:
			case EXTEND_LEFT:
			case IS_STRICTLY_BELOW:
			case IS_STRICTLY_ABOVE:
			case EXTEND_ABOVE:
			case EXTEND_BELOW:
			case IS_BELOW:
			case IS_ABOVE:
			case INTERSECTION:
			case IS_HORIZON:
			case IS_VERTICAL:
			case IS_PERPENDICULAR:
			case IS_PARALLEL:
			case SAME:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(10669);
				a_expr(0);
				}
				break;
			case CLOSE_BRACKET:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionContext extends ParserRuleContext {
		public Indirection_elContext indirection_el() {
			return getRuleContext(Indirection_elContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionContext indirection() throws RecognitionException {
		return indirection(0);
	}

	private IndirectionContext indirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IndirectionContext _localctx = new IndirectionContext(_ctx, _parentState);
		IndirectionContext _prevctx = _localctx;
		int _startState = 1286;
		enterRecursionRule(_localctx, 1286, RULE_indirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(10674);
			indirection_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(10680);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,527,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IndirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_indirection);
					setState(10676);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10677);
					indirection_el();
					}
					} 
				}
				setState(10682);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,527,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_indirectionContext extends ParserRuleContext {
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Indirection_elContext indirection_el() {
			return getRuleContext(Indirection_elContext.class,0);
		}
		public Opt_indirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_indirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_indirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_indirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_indirectionContext opt_indirection() throws RecognitionException {
		return opt_indirection(0);
	}

	private Opt_indirectionContext opt_indirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_indirectionContext _localctx = new Opt_indirectionContext(_ctx, _parentState);
		Opt_indirectionContext _prevctx = _localctx;
		int _startState = 1288;
		enterRecursionRule(_localctx, 1288, RULE_opt_indirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(10688);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,528,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_indirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opt_indirection);
					setState(10684);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10685);
					indirection_el();
					}
					} 
				}
				setState(10690);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,528,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_asymmetricContext extends ParserRuleContext {
		public TerminalNode ASYMMETRIC() { return getToken(PostgreSQLParser.ASYMMETRIC, 0); }
		public Opt_asymmetricContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_asymmetric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_asymmetric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_asymmetric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_asymmetric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asymmetricContext opt_asymmetric() throws RecognitionException {
		Opt_asymmetricContext _localctx = new Opt_asymmetricContext(_ctx, getState());
		enterRule(_localctx, 1290, RULE_opt_asymmetric);
		try {
			setState(10693);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(10691);
				match(ASYMMETRIC);
				}
				break;
			case OPEN_PAREN:
			case STAR:
			case EQUAL:
			case AMPERSAND:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case NOT_EQUALS_1:
			case PERCENT:
			case PARAM:
			case BITWISE_OR:
			case BITWISE_XOR:
			case BITWISE_NOT:
			case SQUARE_ROOT:
			case CUBIC_ROOT:
			case FACTORIAL:
			case PREFIX_FACTORIAL:
			case ABSOLUTE:
			case TEXT_PATTERN1:
			case TEXT_PATTERN2:
			case TEXT_PATTERN3:
			case TEXT_PATTERN4:
			case LENGTH:
			case CENTER:
			case CLOSET_POINT:
			case DISTANT:
			case EXTEND_RIGHT:
			case EXTEND_LEFT:
			case IS_STRICTLY_BELOW:
			case IS_STRICTLY_ABOVE:
			case EXTEND_ABOVE:
			case EXTEND_BELOW:
			case IS_BELOW:
			case IS_ABOVE:
			case INTERSECTION:
			case IS_HORIZON:
			case IS_VERTICAL:
			case IS_PERPENDICULAR:
			case IS_PARALLEL:
			case SAME:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_target_listContext extends ParserRuleContext {
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Opt_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_target_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_target_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_target_listContext opt_target_list() throws RecognitionException {
		Opt_target_listContext _localctx = new Opt_target_listContext(_ctx, getState());
		enterRule(_localctx, 1292, RULE_opt_target_list);
		try {
			setState(10697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10695);
				target_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_listContext extends ParserRuleContext {
		public List<Target_elContext> target_el() {
			return getRuleContexts(Target_elContext.class);
		}
		public Target_elContext target_el(int i) {
			return getRuleContext(Target_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTarget_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTarget_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTarget_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_listContext target_list() throws RecognitionException {
		Target_listContext _localctx = new Target_listContext(_ctx, getState());
		enterRule(_localctx, 1294, RULE_target_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10699);
			target_el();
			setState(10704);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,531,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(10700);
					match(COMMA);
					setState(10701);
					target_el();
					}
					} 
				}
				setState(10706);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,531,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_elContext extends ParserRuleContext {
		public Target_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_el; }
	 
		public Target_elContext() { }
		public void copyFrom(Target_elContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Target_labelContext extends Target_elContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Target_labelContext(Target_elContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTarget_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTarget_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTarget_label(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Target_starContext extends Target_elContext {
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public Target_starContext(Target_elContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTarget_star(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTarget_star(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTarget_star(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_elContext target_el() throws RecognitionException {
		Target_elContext _localctx = new Target_elContext(_ctx, getState());
		enterRule(_localctx, 1296, RULE_target_el);
		try {
			setState(10715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
			case 1:
				_localctx = new Target_labelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(10707);
				a_expr(0);
				setState(10712);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
				case 1:
					{
					setState(10708);
					match(AS);
					setState(10709);
					collabel();
					}
					break;
				case 2:
					{
					setState(10710);
					identifier();
					}
					break;
				case 3:
					{
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new Target_starContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(10714);
				match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_name_listContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Qualified_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQualified_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQualified_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQualified_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_name_listContext qualified_name_list() throws RecognitionException {
		return qualified_name_list(0);
	}

	private Qualified_name_listContext qualified_name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Qualified_name_listContext _localctx = new Qualified_name_listContext(_ctx, _parentState);
		Qualified_name_listContext _prevctx = _localctx;
		int _startState = 1298;
		enterRecursionRule(_localctx, 1298, RULE_qualified_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(10718);
			qualified_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(10725);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,534,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Qualified_name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_qualified_name_list);
					setState(10720);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10721);
					match(COMMA);
					setState(10722);
					qualified_name();
					}
					} 
				}
				setState(10727);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,534,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Qualified_nameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQualified_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQualified_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQualified_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_nameContext qualified_name() throws RecognitionException {
		Qualified_nameContext _localctx = new Qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 1300, RULE_qualified_name);
		try {
			setState(10732);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10728);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10729);
				colid();
				setState(10730);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Name_listContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterName_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitName_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitName_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Name_listContext name_list() throws RecognitionException {
		return name_list(0);
	}

	private Name_listContext name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Name_listContext _localctx = new Name_listContext(_ctx, _parentState);
		Name_listContext _prevctx = _localctx;
		int _startState = 1302;
		enterRecursionRule(_localctx, 1302, RULE_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(10735);
			name();
			}
			_ctx.stop = _input.LT(-1);
			setState(10742);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,536,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_name_list);
					setState(10737);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10738);
					match(COMMA);
					setState(10739);
					name();
					}
					} 
				}
				setState(10744);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,536,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class NameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 1304, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10745);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attr_nameContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Attr_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attr_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAttr_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAttr_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAttr_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attr_nameContext attr_name() throws RecognitionException {
		Attr_nameContext _localctx = new Attr_nameContext(_ctx, getState());
		enterRule(_localctx, 1306, RULE_attr_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10747);
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_nameContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public File_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFile_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFile_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFile_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_nameContext file_name() throws RecognitionException {
		File_nameContext _localctx = new File_nameContext(_ctx, getState());
		enterRule(_localctx, 1308, RULE_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10749);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_nameContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Func_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_nameContext func_name() throws RecognitionException {
		Func_nameContext _localctx = new Func_nameContext(_ctx, getState());
		enterRule(_localctx, 1310, RULE_func_name);
		try {
			setState(10755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10751);
				type_function_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10752);
				colid();
				setState(10753);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AexprconstContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public BconstContext bconst() {
			return getRuleContext(BconstContext.class,0);
		}
		public XconstContext xconst() {
			return getRuleContext(XconstContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConsttypenameContext consttypename() {
			return getRuleContext(ConsttypenameContext.class,0);
		}
		public ConstintervalContext constinterval() {
			return getRuleContext(ConstintervalContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public AexprconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aexprconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAexprconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAexprconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAexprconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AexprconstContext aexprconst() throws RecognitionException {
		AexprconstContext _localctx = new AexprconstContext(_ctx, getState());
		enterRule(_localctx, 1312, RULE_aexprconst);
		try {
			setState(10788);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10757);
				iconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10758);
				fconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10759);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10760);
				bconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10761);
				xconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10762);
				func_name();
				setState(10763);
				sconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10765);
				func_name();
				setState(10766);
				match(OPEN_PAREN);
				setState(10767);
				func_arg_list(0);
				setState(10768);
				opt_sort_clause();
				setState(10769);
				match(CLOSE_PAREN);
				setState(10770);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10772);
				consttypename();
				setState(10773);
				sconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10775);
				constinterval();
				setState(10776);
				sconst();
				setState(10777);
				opt_interval();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10779);
				constinterval();
				setState(10780);
				match(OPEN_PAREN);
				setState(10781);
				iconst();
				setState(10782);
				match(CLOSE_PAREN);
				setState(10783);
				sconst();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10785);
				match(TRUE_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(10786);
				match(FALSE_P);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(10787);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XconstContext extends ParserRuleContext {
		public TerminalNode HexadecimalStringConstant() { return getToken(PostgreSQLParser.HexadecimalStringConstant, 0); }
		public XconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XconstContext xconst() throws RecognitionException {
		XconstContext _localctx = new XconstContext(_ctx, getState());
		enterRule(_localctx, 1314, RULE_xconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10790);
			match(HexadecimalStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BconstContext extends ParserRuleContext {
		public TerminalNode BinaryStringConstant() { return getToken(PostgreSQLParser.BinaryStringConstant, 0); }
		public BconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BconstContext bconst() throws RecognitionException {
		BconstContext _localctx = new BconstContext(_ctx, getState());
		enterRule(_localctx, 1316, RULE_bconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10792);
			match(BinaryStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FconstContext extends ParserRuleContext {
		public TerminalNode Numeric() { return getToken(PostgreSQLParser.Numeric, 0); }
		public FconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FconstContext fconst() throws RecognitionException {
		FconstContext _localctx = new FconstContext(_ctx, getState());
		enterRule(_localctx, 1318, RULE_fconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10794);
			match(Numeric);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IconstContext extends ParserRuleContext {
		public TerminalNode Integral() { return getToken(PostgreSQLParser.Integral, 0); }
		public IconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IconstContext iconst() throws RecognitionException {
		IconstContext _localctx = new IconstContext(_ctx, getState());
		enterRule(_localctx, 1320, RULE_iconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10796);
			match(Integral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SconstContext extends ParserRuleContext {
		public AnysconstContext anysconst() {
			return getRuleContext(AnysconstContext.class,0);
		}
		public Opt_uescapeContext opt_uescape() {
			return getRuleContext(Opt_uescapeContext.class,0);
		}
		public SconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SconstContext sconst() throws RecognitionException {
		SconstContext _localctx = new SconstContext(_ctx, getState());
		enterRule(_localctx, 1322, RULE_sconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10798);
			anysconst();
			setState(10799);
			opt_uescape();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnysconstContext extends ParserRuleContext {
		public List<TerminalNode> StringConstant() { return getTokens(PostgreSQLParser.StringConstant); }
		public TerminalNode StringConstant(int i) {
			return getToken(PostgreSQLParser.StringConstant, i);
		}
		public TerminalNode UnicodeEscapeStringConstant() { return getToken(PostgreSQLParser.UnicodeEscapeStringConstant, 0); }
		public TerminalNode BeginDollarStringConstant() { return getToken(PostgreSQLParser.BeginDollarStringConstant, 0); }
		public TerminalNode EndDollarStringConstant() { return getToken(PostgreSQLParser.EndDollarStringConstant, 0); }
		public List<TerminalNode> DollarText() { return getTokens(PostgreSQLParser.DollarText); }
		public TerminalNode DollarText(int i) {
			return getToken(PostgreSQLParser.DollarText, i);
		}
		public TerminalNode EscapeStringConstant() { return getToken(PostgreSQLParser.EscapeStringConstant, 0); }
		public AnysconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anysconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAnysconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAnysconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAnysconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnysconstContext anysconst() throws RecognitionException {
		AnysconstContext _localctx = new AnysconstContext(_ctx, getState());
		enterRule(_localctx, 1324, RULE_anysconst);
		int _la;
		try {
			int _alt;
			setState(10816);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(10802); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(10801);
						match(StringConstant);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(10804); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,539,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case UnicodeEscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(10806);
				match(UnicodeEscapeStringConstant);
				}
				break;
			case BeginDollarStringConstant:
				enterOuterAlt(_localctx, 3);
				{
				setState(10807);
				match(BeginDollarStringConstant);
				setState(10811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DollarText) {
					{
					{
					setState(10808);
					match(DollarText);
					}
					}
					setState(10813);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(10814);
				match(EndDollarStringConstant);
				}
				break;
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 4);
				{
				setState(10815);
				match(EscapeStringConstant);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_uescapeContext extends ParserRuleContext {
		public TerminalNode UESCAPE() { return getToken(PostgreSQLParser.UESCAPE, 0); }
		public AnysconstContext anysconst() {
			return getRuleContext(AnysconstContext.class,0);
		}
		public Opt_uescapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_uescape; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_uescape(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_uescape(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_uescape(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_uescapeContext opt_uescape() throws RecognitionException {
		Opt_uescapeContext _localctx = new Opt_uescapeContext(_ctx, getState());
		enterRule(_localctx, 1326, RULE_opt_uescape);
		try {
			setState(10821);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10818);
				match(UESCAPE);
				setState(10819);
				anysconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignediconstContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public SignediconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signediconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSignediconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSignediconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSignediconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignediconstContext signediconst() throws RecognitionException {
		SignediconstContext _localctx = new SignediconstContext(_ctx, getState());
		enterRule(_localctx, 1328, RULE_signediconst);
		try {
			setState(10828);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Integral:
				enterOuterAlt(_localctx, 1);
				{
				setState(10823);
				iconst();
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(10824);
				match(PLUS);
				setState(10825);
				iconst();
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(10826);
				match(MINUS);
				setState(10827);
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleidContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public RoleidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRoleid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRoleid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRoleid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleidContext roleid() throws RecognitionException {
		RoleidContext _localctx = new RoleidContext(_ctx, getState());
		enterRule(_localctx, 1330, RULE_roleid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10830);
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RolespecContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public RolespecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rolespec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRolespec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRolespec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRolespec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RolespecContext rolespec() throws RecognitionException {
		RolespecContext _localctx = new RolespecContext(_ctx, getState());
		enterRule(_localctx, 1332, RULE_rolespec);
		try {
			setState(10835);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(10832);
				nonreservedword();
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(10833);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(10834);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_listContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Role_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRole_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRole_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRole_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Role_listContext role_list() throws RecognitionException {
		return role_list(0);
	}

	private Role_listContext role_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Role_listContext _localctx = new Role_listContext(_ctx, _parentState);
		Role_listContext _prevctx = _localctx;
		int _startState = 1334;
		enterRecursionRule(_localctx, 1334, RULE_role_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(10838);
			rolespec();
			}
			_ctx.stop = _input.LT(-1);
			setState(10845);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,545,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Role_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_role_list);
					setState(10840);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10841);
					match(COMMA);
					setState(10842);
					rolespec();
					}
					} 
				}
				setState(10847);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,545,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ColidContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public ColidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColidContext colid() throws RecognitionException {
		ColidContext _localctx = new ColidContext(_ctx, getState());
		enterRule(_localctx, 1336, RULE_colid);
		try {
			setState(10852);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10848);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10849);
				unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10850);
				col_name_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10851);
				plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public Type_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_nameContext type_function_name() throws RecognitionException {
		Type_function_nameContext _localctx = new Type_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1338, RULE_type_function_name);
		try {
			setState(10858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10854);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10855);
				unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10856);
				plsql_unreserved_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10857);
				type_func_name_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonreservedwordContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public NonreservedwordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonreservedword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNonreservedword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNonreservedword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNonreservedword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonreservedwordContext nonreservedword() throws RecognitionException {
		NonreservedwordContext _localctx = new NonreservedwordContext(_ctx, getState());
		enterRule(_localctx, 1340, RULE_nonreservedword);
		try {
			setState(10864);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10860);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10861);
				unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10862);
				col_name_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10863);
				type_func_name_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollabelContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public CollabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCollabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCollabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCollabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollabelContext collabel() throws RecognitionException {
		CollabelContext _localctx = new CollabelContext(_ctx, getState());
		enterRule(_localctx, 1342, RULE_collabel);
		try {
			setState(10872);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10866);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10867);
				plsql_unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10868);
				unreserved_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10869);
				col_name_keyword();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10870);
				type_func_name_keyword();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10871);
				reserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode Identifier() { return getToken(PostgreSQLParser.Identifier, 0); }
		public Opt_uescapeContext opt_uescape() {
			return getRuleContext(Opt_uescapeContext.class,0);
		}
		public TerminalNode QuotedIdentifier() { return getToken(PostgreSQLParser.QuotedIdentifier, 0); }
		public TerminalNode UnicodeQuotedIdentifier() { return getToken(PostgreSQLParser.UnicodeQuotedIdentifier, 0); }
		public PlsqlvariablenameContext plsqlvariablename() {
			return getRuleContext(PlsqlvariablenameContext.class,0);
		}
		public PlsqlidentifierContext plsqlidentifier() {
			return getRuleContext(PlsqlidentifierContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 1344, RULE_identifier);
		try {
			setState(10881);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(10874);
				match(Identifier);
				setState(10875);
				opt_uescape();
				}
				break;
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(10876);
				match(QuotedIdentifier);
				}
				break;
			case UnicodeQuotedIdentifier:
				enterOuterAlt(_localctx, 3);
				{
				setState(10877);
				match(UnicodeQuotedIdentifier);
				}
				break;
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(10878);
				plsqlvariablename();
				}
				break;
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 5);
				{
				setState(10879);
				plsqlidentifier();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
				enterOuterAlt(_localctx, 6);
				{
				setState(10880);
				plsql_unreserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlsqlidentifierContext extends ParserRuleContext {
		public TerminalNode PLSQLIDENTIFIER() { return getToken(PostgreSQLParser.PLSQLIDENTIFIER, 0); }
		public PlsqlidentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlidentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlidentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlidentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlidentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlidentifierContext plsqlidentifier() throws RecognitionException {
		PlsqlidentifierContext _localctx = new PlsqlidentifierContext(_ctx, getState());
		enterRule(_localctx, 1346, RULE_plsqlidentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10883);
			match(PLSQLIDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unreserved_keywordContext extends ParserRuleContext {
		public TerminalNode ABORT_P() { return getToken(PostgreSQLParser.ABORT_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLParser.ACTION, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSQLParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(PostgreSQLParser.AT, 0); }
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode BEGIN_P() { return getToken(PostgreSQLParser.BEGIN_P, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSQLParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(PostgreSQLParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLParser.CASCADED, 0); }
		public TerminalNode CATALOG_P() { return getToken(PostgreSQLParser.CATALOG_P, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public TerminalNode COLUMNS() { return getToken(PostgreSQLParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PostgreSQLParser.COMMENT, 0); }
		public TerminalNode COMMENTS() { return getToken(PostgreSQLParser.COMMENTS, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLParser.COMMITTED, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode CONFLICT() { return getToken(PostgreSQLParser.CONFLICT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public TerminalNode CONTENT_P() { return getToken(PostgreSQLParser.CONTENT_P, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode COPY() { return getToken(PostgreSQLParser.COPY, 0); }
		public TerminalNode COST() { return getToken(PostgreSQLParser.COST, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(PostgreSQLParser.CUBE, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSQLParser.CYCLE, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DAY_P() { return getToken(PostgreSQLParser.DAY_P, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLParser.DEALLOCATE, 0); }
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLParser.DEFINER, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLParser.DELIMITERS, 0); }
		public TerminalNode DEPENDS() { return getToken(PostgreSQLParser.DEPENDS, 0); }
		public TerminalNode DETACH() { return getToken(PostgreSQLParser.DETACH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public TerminalNode DISCARD() { return getToken(PostgreSQLParser.DISCARD, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode DOUBLE_P() { return getToken(PostgreSQLParser.DOUBLE_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLParser.ENCRYPTED, 0); }
		public TerminalNode ENUM_P() { return getToken(PostgreSQLParser.ENUM_P, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(PostgreSQLParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLParser.EXPLAIN, 0); }
		public TerminalNode EXPRESSION() { return getToken(PostgreSQLParser.EXPRESSION, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLParser.EXTERNAL, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode FILTER() { return getToken(PostgreSQLParser.FILTER, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode GRANTED() { return getToken(PostgreSQLParser.GRANTED, 0); }
		public TerminalNode GROUPS() { return getToken(PostgreSQLParser.GROUPS, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public TerminalNode HEADER_P() { return getToken(PostgreSQLParser.HEADER_P, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLParser.HOLD, 0); }
		public TerminalNode HOUR_P() { return getToken(PostgreSQLParser.HOUR_P, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLParser.IMMUTABLE, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(PostgreSQLParser.IMPLICIT_P, 0); }
		public TerminalNode IMPORT_P() { return getToken(PostgreSQLParser.IMPORT_P, 0); }
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PostgreSQLParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLParser.INDEXES, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public TerminalNode INHERITS() { return getToken(PostgreSQLParser.INHERITS, 0); }
		public TerminalNode INLINE_P() { return getToken(PostgreSQLParser.INLINE_P, 0); }
		public TerminalNode INPUT_P() { return getToken(PostgreSQLParser.INPUT_P, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PostgreSQLParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PostgreSQLParser.LEAKPROOF, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(PostgreSQLParser.LISTEN, 0); }
		public TerminalNode LOAD() { return getToken(PostgreSQLParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public TerminalNode LOCK_P() { return getToken(PostgreSQLParser.LOCK_P, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLParser.LOCKED, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLParser.LOGGED, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode MATCH() { return getToken(PostgreSQLParser.MATCH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLParser.MAXVALUE, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public TerminalNode MINUTE_P() { return getToken(PostgreSQLParser.MINUTE_P, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLParser.MINVALUE, 0); }
		public TerminalNode MODE() { return getToken(PostgreSQLParser.MODE, 0); }
		public TerminalNode MONTH_P() { return getToken(PostgreSQLParser.MONTH_P, 0); }
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLParser.NAMES, 0); }
		public TerminalNode NEW() { return getToken(PostgreSQLParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode NFC() { return getToken(PostgreSQLParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(PostgreSQLParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(PostgreSQLParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(PostgreSQLParser.NFKD, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLParser.NORMALIZED, 0); }
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(PostgreSQLParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public TerminalNode NULLS_P() { return getToken(PostgreSQLParser.NULLS_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OFF() { return getToken(PostgreSQLParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(PostgreSQLParser.OLD, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLParser.OTHERS, 0); }
		public TerminalNode OVER() { return getToken(PostgreSQLParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLParser.OVERRIDING, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode PARALLEL() { return getToken(PostgreSQLParser.PARALLEL, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PostgreSQLParser.PASSING, 0); }
		public TerminalNode PASSWORD() { return getToken(PostgreSQLParser.PASSWORD, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLParser.PLANS, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public TerminalNode PREPARED() { return getToken(PostgreSQLParser.PREPARED, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode PROCEDURES() { return getToken(PostgreSQLParser.PROCEDURES, 0); }
		public TerminalNode PROGRAM() { return getToken(PostgreSQLParser.PROGRAM, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode REASSIGN() { return getToken(PostgreSQLParser.REASSIGN, 0); }
		public TerminalNode RECHECK() { return getToken(PostgreSQLParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLParser.REF, 0); }
		public TerminalNode REFERENCING() { return getToken(PostgreSQLParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode REINDEX() { return getToken(PostgreSQLParser.REINDEX, 0); }
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode RELEASE() { return getToken(PostgreSQLParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PostgreSQLParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(PostgreSQLParser.SCHEMAS, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode SECOND_P() { return getToken(PostgreSQLParser.SECOND_P, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(PostgreSQLParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLParser.SIMPLE, 0); }
		public TerminalNode SKIP_P() { return getToken(PostgreSQLParser.SKIP_P, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLParser.SNAPSHOT, 0); }
		public TerminalNode SQL_P() { return getToken(PostgreSQLParser.SQL_P, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLParser.STABLE, 0); }
		public TerminalNode STANDALONE_P() { return getToken(PostgreSQLParser.STANDALONE_P, 0); }
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLParser.STATEMENT, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode STDIN() { return getToken(PostgreSQLParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode STORED() { return getToken(PostgreSQLParser.STORED, 0); }
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public TerminalNode STRIP_P() { return getToken(PostgreSQLParser.STRIP_P, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode SUPPORT() { return getToken(PostgreSQLParser.SUPPORT, 0); }
		public TerminalNode SYSID() { return getToken(PostgreSQLParser.SYSID, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSQLParser.TRUSTED, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode TYPES_P() { return getToken(PostgreSQLParser.TYPES_P, 0); }
		public TerminalNode UESCAPE() { return getToken(PostgreSQLParser.UESCAPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLParser.UNCOMMITTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLParser.UNLISTEN, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode VACUUM() { return getToken(PostgreSQLParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSQLParser.VARYING, 0); }
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(PostgreSQLParser.VIEWS, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLParser.VOLATILE, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(PostgreSQLParser.WHITESPACE_P, 0); }
		public TerminalNode WITHIN() { return getToken(PostgreSQLParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLParser.WRITE, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public TerminalNode YEAR_P() { return getToken(PostgreSQLParser.YEAR_P, 0); }
		public TerminalNode YES_P() { return getToken(PostgreSQLParser.YES_P, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public Unreserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnreserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnreserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnreserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unreserved_keywordContext unreserved_keyword() throws RecognitionException {
		Unreserved_keywordContext _localctx = new Unreserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1348, RULE_unreserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10885);
			_la = _input.LA(1);
			if ( !(((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (OVER - 160)) | (1L << (ABORT_P - 160)) | (1L << (ABSOLUTE_P - 160)) | (1L << (ACCESS - 160)) | (1L << (ACTION - 160)) | (1L << (ADD_P - 160)) | (1L << (ADMIN - 160)) | (1L << (AFTER - 160)) | (1L << (AGGREGATE - 160)) | (1L << (ALSO - 160)) | (1L << (ALTER - 160)) | (1L << (ALWAYS - 160)) | (1L << (ASSERTION - 160)) | (1L << (ASSIGNMENT - 160)) | (1L << (AT - 160)) | (1L << (ATTRIBUTE - 160)) | (1L << (BACKWARD - 160)) | (1L << (BEFORE - 160)) | (1L << (BEGIN_P - 160)) | (1L << (BY - 160)) | (1L << (CACHE - 160)) | (1L << (CALLED - 160)) | (1L << (CASCADE - 160)) | (1L << (CASCADED - 160)) | (1L << (CHAIN - 160)) | (1L << (CHARACTERISTICS - 160)) | (1L << (CHECKPOINT - 160)) | (1L << (CLASS - 160)) | (1L << (CLOSE - 160)) | (1L << (CLUSTER - 160)) | (1L << (COMMENT - 160)) | (1L << (COMMENTS - 160)) | (1L << (COMMIT - 160)) | (1L << (COMMITTED - 160)) | (1L << (CONFIGURATION - 160)) | (1L << (CONNECTION - 160)) | (1L << (CONSTRAINTS - 160)) | (1L << (CONTENT_P - 160)) | (1L << (CONTINUE_P - 160)) | (1L << (CONVERSION_P - 160)) | (1L << (COPY - 160)) | (1L << (COST - 160)) | (1L << (CSV - 160)) | (1L << (CURSOR - 160)) | (1L << (CYCLE - 160)) | (1L << (DATA_P - 160)) | (1L << (DATABASE - 160)) | (1L << (DAY_P - 160)) | (1L << (DEALLOCATE - 160)) | (1L << (DECLARE - 160)) | (1L << (DEFAULTS - 160)) | (1L << (DEFERRED - 160)) | (1L << (DEFINER - 160)) | (1L << (DELETE_P - 160)) | (1L << (DELIMITER - 160)) | (1L << (DELIMITERS - 160)) | (1L << (DICTIONARY - 160)) | (1L << (DISABLE_P - 160)) | (1L << (DISCARD - 160)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (DOCUMENT_P - 224)) | (1L << (DOMAIN_P - 224)) | (1L << (DOUBLE_P - 224)) | (1L << (DROP - 224)) | (1L << (EACH - 224)) | (1L << (ENABLE_P - 224)) | (1L << (ENCODING - 224)) | (1L << (ENCRYPTED - 224)) | (1L << (ENUM_P - 224)) | (1L << (ESCAPE - 224)) | (1L << (EVENT - 224)) | (1L << (EXCLUDE - 224)) | (1L << (EXCLUDING - 224)) | (1L << (EXCLUSIVE - 224)) | (1L << (EXECUTE - 224)) | (1L << (EXPLAIN - 224)) | (1L << (EXTENSION - 224)) | (1L << (EXTERNAL - 224)) | (1L << (FAMILY - 224)) | (1L << (FIRST_P - 224)) | (1L << (FOLLOWING - 224)) | (1L << (FORCE - 224)) | (1L << (FORWARD - 224)) | (1L << (FUNCTION - 224)) | (1L << (FUNCTIONS - 224)) | (1L << (GLOBAL - 224)) | (1L << (GRANTED - 224)) | (1L << (HANDLER - 224)) | (1L << (HEADER_P - 224)) | (1L << (HOLD - 224)) | (1L << (HOUR_P - 224)) | (1L << (IDENTITY_P - 224)) | (1L << (IF_P - 224)) | (1L << (IMMEDIATE - 224)) | (1L << (IMMUTABLE - 224)) | (1L << (IMPLICIT_P - 224)) | (1L << (INCLUDING - 224)) | (1L << (INCREMENT - 224)) | (1L << (INDEX - 224)) | (1L << (INDEXES - 224)) | (1L << (INHERIT - 224)) | (1L << (INHERITS - 224)) | (1L << (INLINE_P - 224)) | (1L << (INSENSITIVE - 224)) | (1L << (INSERT - 224)) | (1L << (INSTEAD - 224)) | (1L << (INVOKER - 224)) | (1L << (ISOLATION - 224)) | (1L << (KEY - 224)) | (1L << (LABEL - 224)) | (1L << (LANGUAGE - 224)) | (1L << (LARGE_P - 224)) | (1L << (LAST_P - 224)) | (1L << (LEAKPROOF - 224)) | (1L << (LEVEL - 224)) | (1L << (LISTEN - 224)) | (1L << (LOAD - 224)) | (1L << (LOCAL - 224)) | (1L << (LOCATION - 224)) | (1L << (LOCK_P - 224)) | (1L << (MAPPING - 224)) | (1L << (MATCH - 224)) | (1L << (MATERIALIZED - 224)) | (1L << (MAXVALUE - 224)))) != 0) || ((((_la - 288)) & ~0x3f) == 0 && ((1L << (_la - 288)) & ((1L << (MINUTE_P - 288)) | (1L << (MINVALUE - 288)) | (1L << (MODE - 288)) | (1L << (MONTH_P - 288)) | (1L << (MOVE - 288)) | (1L << (NAME_P - 288)) | (1L << (NAMES - 288)) | (1L << (NEXT - 288)) | (1L << (NO - 288)) | (1L << (NOTHING - 288)) | (1L << (NOTIFY - 288)) | (1L << (NOWAIT - 288)) | (1L << (NULLS_P - 288)) | (1L << (OBJECT_P - 288)) | (1L << (OF - 288)) | (1L << (OFF - 288)) | (1L << (OIDS - 288)) | (1L << (OPERATOR - 288)) | (1L << (OPTION - 288)) | (1L << (OPTIONS - 288)) | (1L << (OWNED - 288)) | (1L << (OWNER - 288)) | (1L << (PARSER - 288)) | (1L << (PARTIAL - 288)) | (1L << (PARTITION - 288)) | (1L << (PASSING - 288)) | (1L << (PASSWORD - 288)) | (1L << (PLANS - 288)) | (1L << (PRECEDING - 288)) | (1L << (PREPARE - 288)) | (1L << (PREPARED - 288)) | (1L << (PRESERVE - 288)) | (1L << (PRIOR - 288)) | (1L << (PRIVILEGES - 288)) | (1L << (PROCEDURAL - 288)) | (1L << (PROCEDURE - 288)) | (1L << (PROGRAM - 288)) | (1L << (QUOTE - 288)) | (1L << (RANGE - 288)) | (1L << (READ - 288)) | (1L << (REASSIGN - 288)) | (1L << (RECHECK - 288)) | (1L << (RECURSIVE - 288)) | (1L << (REF - 288)) | (1L << (REFRESH - 288)) | (1L << (REINDEX - 288)) | (1L << (RELATIVE_P - 288)) | (1L << (RELEASE - 288)) | (1L << (RENAME - 288)) | (1L << (REPEATABLE - 288)) | (1L << (REPLACE - 288)) | (1L << (REPLICA - 288)) | (1L << (RESET - 288)) | (1L << (RESTART - 288)) | (1L << (RESTRICT - 288)) | (1L << (RETURNS - 288)) | (1L << (REVOKE - 288)) | (1L << (ROLE - 288)) | (1L << (ROLLBACK - 288)) | (1L << (ROWS - 288)) | (1L << (RULE - 288)) | (1L << (SAVEPOINT - 288)) | (1L << (SCHEMA - 288)) | (1L << (SCROLL - 288)))) != 0) || ((((_la - 352)) & ~0x3f) == 0 && ((1L << (_la - 352)) & ((1L << (SEARCH - 352)) | (1L << (SECOND_P - 352)) | (1L << (SECURITY - 352)) | (1L << (SEQUENCE - 352)) | (1L << (SEQUENCES - 352)) | (1L << (SERIALIZABLE - 352)) | (1L << (SERVER - 352)) | (1L << (SESSION - 352)) | (1L << (SET - 352)) | (1L << (SHARE - 352)) | (1L << (SHOW - 352)) | (1L << (SIMPLE - 352)) | (1L << (SNAPSHOT - 352)) | (1L << (STABLE - 352)) | (1L << (STANDALONE_P - 352)) | (1L << (START - 352)) | (1L << (STATEMENT - 352)) | (1L << (STATISTICS - 352)) | (1L << (STDIN - 352)) | (1L << (STDOUT - 352)) | (1L << (STORAGE - 352)) | (1L << (STRICT_P - 352)) | (1L << (STRIP_P - 352)) | (1L << (SYSID - 352)) | (1L << (SYSTEM_P - 352)) | (1L << (TABLES - 352)) | (1L << (TABLESPACE - 352)) | (1L << (TEMP - 352)) | (1L << (TEMPLATE - 352)) | (1L << (TEMPORARY - 352)) | (1L << (TEXT_P - 352)) | (1L << (TRANSACTION - 352)) | (1L << (TRIGGER - 352)) | (1L << (TRUNCATE - 352)) | (1L << (TRUSTED - 352)) | (1L << (TYPE_P - 352)) | (1L << (TYPES_P - 352)) | (1L << (UNBOUNDED - 352)) | (1L << (UNCOMMITTED - 352)) | (1L << (UNENCRYPTED - 352)) | (1L << (UNKNOWN - 352)) | (1L << (UNLISTEN - 352)) | (1L << (UNLOGGED - 352)) | (1L << (UNTIL - 352)) | (1L << (UPDATE - 352)) | (1L << (VACUUM - 352)) | (1L << (VALID - 352)) | (1L << (VALIDATE - 352)) | (1L << (VALIDATOR - 352)) | (1L << (VARYING - 352)) | (1L << (VERSION_P - 352)) | (1L << (VIEW - 352)) | (1L << (VOLATILE - 352)) | (1L << (WHITESPACE_P - 352)) | (1L << (WITHOUT - 352)) | (1L << (WORK - 352)) | (1L << (WRAPPER - 352)) | (1L << (WRITE - 352)) | (1L << (XML_P - 352)) | (1L << (YEAR_P - 352)) | (1L << (YES_P - 352)) | (1L << (ZONE - 352)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (CALL - 460)) | (1L << (CURRENT_P - 460)) | (1L << (CATALOG_P - 460)) | (1L << (ATTACH - 460)) | (1L << (DETACH - 460)) | (1L << (EXPRESSION - 460)) | (1L << (GENERATED - 460)) | (1L << (LOGGED - 460)) | (1L << (STORED - 460)) | (1L << (INCLUDE - 460)) | (1L << (ROUTINE - 460)) | (1L << (TRANSFORM - 460)) | (1L << (IMPORT_P - 460)) | (1L << (POLICY - 460)) | (1L << (METHOD - 460)) | (1L << (REFERENCING - 460)) | (1L << (NEW - 460)) | (1L << (OLD - 460)) | (1L << (VALUE_P - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (PUBLICATION - 460)) | (1L << (ROUTINES - 460)) | (1L << (SCHEMAS - 460)) | (1L << (PROCEDURES - 460)) | (1L << (INPUT_P - 460)) | (1L << (SUPPORT - 460)) | (1L << (PARALLEL - 460)) | (1L << (SQL_P - 460)) | (1L << (DEPENDS - 460)) | (1L << (OVERRIDING - 460)) | (1L << (CONFLICT - 460)) | (1L << (SKIP_P - 460)) | (1L << (LOCKED - 460)) | (1L << (TIES - 460)) | (1L << (ROLLUP - 460)) | (1L << (CUBE - 460)) | (1L << (SETS - 460)) | (1L << (ORDINALITY - 460)) | (1L << (COLUMNS - 460)) | (1L << (NORMALIZED - 460)) | (1L << (WITHIN - 460)) | (1L << (FILTER - 460)) | (1L << (GROUPS - 460)) | (1L << (OTHERS - 460)) | (1L << (NFC - 460)) | (1L << (NFD - 460)) | (1L << (NFKC - 460)) | (1L << (NFKD - 460)) | (1L << (UESCAPE - 460)) | (1L << (VIEWS - 460)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Col_name_keywordContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLParser.BIGINT, 0); }
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public TerminalNode BOOLEAN_P() { return getToken(PostgreSQLParser.BOOLEAN_P, 0); }
		public TerminalNode CHAR_P() { return getToken(PostgreSQLParser.CHAR_P, 0); }
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public TerminalNode COALESCE() { return getToken(PostgreSQLParser.COALESCE, 0); }
		public TerminalNode DEC() { return getToken(PostgreSQLParser.DEC, 0); }
		public TerminalNode DECIMAL_P() { return getToken(PostgreSQLParser.DECIMAL_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode EXTRACT() { return getToken(PostgreSQLParser.EXTRACT, 0); }
		public TerminalNode FLOAT_P() { return getToken(PostgreSQLParser.FLOAT_P, 0); }
		public TerminalNode GREATEST() { return getToken(PostgreSQLParser.GREATEST, 0); }
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public TerminalNode INT_P() { return getToken(PostgreSQLParser.INT_P, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLParser.LEAST, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLParser.NCHAR, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public TerminalNode NORMALIZE() { return getToken(PostgreSQLParser.NORMALIZE, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLParser.NULLIF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode OUT_P() { return getToken(PostgreSQLParser.OUT_P, 0); }
		public TerminalNode OVERLAY() { return getToken(PostgreSQLParser.OVERLAY, 0); }
		public TerminalNode POSITION() { return getToken(PostgreSQLParser.POSITION, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLParser.PRECISION, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLParser.REAL, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLParser.SMALLINT, 0); }
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLParser.SUBSTRING, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLParser.TIMESTAMP, 0); }
		public TerminalNode TREAT() { return getToken(PostgreSQLParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLParser.TRIM, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLParser.VARCHAR, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PostgreSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PostgreSQLParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PostgreSQLParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PostgreSQLParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PostgreSQLParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PostgreSQLParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PostgreSQLParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PostgreSQLParser.XMLTABLE, 0); }
		public Col_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_col_name_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCol_name_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCol_name_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCol_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Col_name_keywordContext col_name_keyword() throws RecognitionException {
		Col_name_keywordContext _localctx = new Col_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1350, RULE_col_name_keyword);
		try {
			setState(10938);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10887);
				match(BETWEEN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10888);
				match(BIGINT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10889);
				bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10890);
				match(BOOLEAN_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10891);
				match(CHAR_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10892);
				character();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10893);
				match(COALESCE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10894);
				match(DEC);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10895);
				match(DECIMAL_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10896);
				match(EXISTS);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10897);
				match(EXTRACT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(10898);
				match(FLOAT_P);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(10899);
				match(GREATEST);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(10900);
				match(GROUPING);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(10901);
				match(INOUT);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(10902);
				match(INT_P);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(10903);
				match(INTEGER);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(10904);
				match(INTERVAL);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(10905);
				match(LEAST);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(10906);
				match(NATIONAL);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(10907);
				match(NCHAR);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(10908);
				match(NONE);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(10909);
				match(NORMALIZE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(10910);
				match(NULLIF);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(10911);
				numeric();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(10912);
				match(OUT_P);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(10913);
				match(OVERLAY);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(10914);
				match(POSITION);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(10915);
				match(PRECISION);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(10916);
				match(REAL);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(10917);
				match(ROW);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(10918);
				match(SETOF);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(10919);
				match(SMALLINT);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(10920);
				match(SUBSTRING);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(10921);
				match(TIME);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(10922);
				match(TIMESTAMP);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(10923);
				match(TREAT);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(10924);
				match(TRIM);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(10925);
				match(VALUES);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(10926);
				match(VARCHAR);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(10927);
				match(XMLATTRIBUTES);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(10928);
				match(XMLCONCAT);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(10929);
				match(XMLELEMENT);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(10930);
				match(XMLEXISTS);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(10931);
				match(XMLFOREST);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(10932);
				match(XMLNAMESPACES);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(10933);
				match(XMLPARSE);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(10934);
				match(XMLPI);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(10935);
				match(XMLROOT);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(10936);
				match(XMLSERIALIZE);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(10937);
				match(XMLTABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_func_name_keywordContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public TerminalNode CROSS() { return getToken(PostgreSQLParser.CROSS, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public TerminalNode INNER_P() { return getToken(PostgreSQLParser.INNER_P, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode ISNULL() { return getToken(PostgreSQLParser.ISNULL, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSQLParser.JOIN, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode NATURAL() { return getToken(PostgreSQLParser.NATURAL, 0); }
		public TerminalNode NOTNULL() { return getToken(PostgreSQLParser.NOTNULL, 0); }
		public TerminalNode OUTER_P() { return getToken(PostgreSQLParser.OUTER_P, 0); }
		public TerminalNode OVERLAPS() { return getToken(PostgreSQLParser.OVERLAPS, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLParser.TABLESAMPLE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public Type_func_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_func_name_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_func_name_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_func_name_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_func_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_func_name_keywordContext type_func_name_keyword() throws RecognitionException {
		Type_func_name_keywordContext _localctx = new Type_func_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1352, RULE_type_func_name_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10940);
			_la = _input.LA(1);
			if ( !(((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (AUTHORIZATION - 142)) | (1L << (BINARY - 142)) | (1L << (COLLATION - 142)) | (1L << (CONCURRENTLY - 142)) | (1L << (CROSS - 142)) | (1L << (CURRENT_SCHEMA - 142)) | (1L << (FREEZE - 142)) | (1L << (FULL - 142)) | (1L << (ILIKE - 142)) | (1L << (INNER_P - 142)) | (1L << (IS - 142)) | (1L << (ISNULL - 142)) | (1L << (JOIN - 142)) | (1L << (LEFT - 142)) | (1L << (LIKE - 142)) | (1L << (NATURAL - 142)) | (1L << (NOTNULL - 142)) | (1L << (OUTER_P - 142)) | (1L << (OVERLAPS - 142)) | (1L << (RIGHT - 142)) | (1L << (SIMILAR - 142)) | (1L << (VERBOSE - 142)))) != 0) || _la==TABLESAMPLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reserved_keywordContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode ANALYSE() { return getToken(PostgreSQLParser.ANALYSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode ANY() { return getToken(PostgreSQLParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode ASC() { return getToken(PostgreSQLParser.ASC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(PostgreSQLParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(PostgreSQLParser.BOTH, 0); }
		public TerminalNode CASE() { return getToken(PostgreSQLParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLParser.DESC, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode HAVING() { return getToken(PostgreSQLParser.HAVING, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode INTERSECT() { return getToken(PostgreSQLParser.INTERSECT, 0); }
		public TerminalNode LATERAL_P() { return getToken(PostgreSQLParser.LATERAL_P, 0); }
		public TerminalNode LEADING() { return getToken(PostgreSQLParser.LEADING, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode LOCALTIME() { return getToken(PostgreSQLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode OFFSET() { return getToken(PostgreSQLParser.OFFSET, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode PLACING() { return getToken(PostgreSQLParser.PLACING, 0); }
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public TerminalNode RETURNING() { return getToken(PostgreSQLParser.RETURNING, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLParser.SOME, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PostgreSQLParser.SYMMETRIC, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode TRAILING() { return getToken(PostgreSQLParser.TRAILING, 0); }
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode UNION() { return getToken(PostgreSQLParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Reserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reserved_keywordContext reserved_keyword() throws RecognitionException {
		Reserved_keywordContext _localctx = new Reserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1354, RULE_reserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10942);
			_la = _input.LA(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ALL - 66)) | (1L << (ANALYSE - 66)) | (1L << (ANALYZE - 66)) | (1L << (AND - 66)) | (1L << (ANY - 66)) | (1L << (ARRAY - 66)) | (1L << (AS - 66)) | (1L << (ASC - 66)) | (1L << (ASYMMETRIC - 66)) | (1L << (BOTH - 66)) | (1L << (CASE - 66)) | (1L << (CAST - 66)) | (1L << (CHECK - 66)) | (1L << (COLLATE - 66)) | (1L << (COLUMN - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CREATE - 66)) | (1L << (CURRENT_CATALOG - 66)) | (1L << (CURRENT_DATE - 66)) | (1L << (CURRENT_ROLE - 66)) | (1L << (CURRENT_TIME - 66)) | (1L << (CURRENT_TIMESTAMP - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (DEFAULT - 66)) | (1L << (DEFERRABLE - 66)) | (1L << (DESC - 66)) | (1L << (DISTINCT - 66)) | (1L << (DO - 66)) | (1L << (ELSE - 66)) | (1L << (EXCEPT - 66)) | (1L << (FALSE_P - 66)) | (1L << (FETCH - 66)) | (1L << (FOR - 66)) | (1L << (FOREIGN - 66)) | (1L << (FROM - 66)) | (1L << (GRANT - 66)) | (1L << (GROUP_P - 66)) | (1L << (HAVING - 66)) | (1L << (IN_P - 66)) | (1L << (INITIALLY - 66)) | (1L << (INTERSECT - 66)) | (1L << (LATERAL_P - 66)) | (1L << (LEADING - 66)) | (1L << (LIMIT - 66)) | (1L << (LOCALTIME - 66)) | (1L << (LOCALTIMESTAMP - 66)) | (1L << (NOT - 66)) | (1L << (NULL_P - 66)) | (1L << (OFFSET - 66)) | (1L << (ON - 66)) | (1L << (ONLY - 66)) | (1L << (OR - 66)) | (1L << (ORDER - 66)) | (1L << (PLACING - 66)) | (1L << (PRIMARY - 66)) | (1L << (REFERENCES - 66)) | (1L << (RETURNING - 66)) | (1L << (SELECT - 66)) | (1L << (SESSION_USER - 66)) | (1L << (SOME - 66)) | (1L << (SYMMETRIC - 66)) | (1L << (TABLE - 66)) | (1L << (THEN - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TO - 130)) | (1L << (TRAILING - 130)) | (1L << (TRUE_P - 130)) | (1L << (UNION - 130)) | (1L << (UNIQUE - 130)) | (1L << (USER - 130)) | (1L << (USING - 130)) | (1L << (VARIADIC - 130)) | (1L << (WHEN - 130)) | (1L << (WHERE - 130)) | (1L << (WINDOW - 130)) | (1L << (WITH - 130)))) != 0) || _la==END_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pl_functionContext extends ParserRuleContext {
		public Comp_optionsContext comp_options() {
			return getRuleContext(Comp_optionsContext.class,0);
		}
		public Pl_blockContext pl_block() {
			return getRuleContext(Pl_blockContext.class,0);
		}
		public Opt_semiContext opt_semi() {
			return getRuleContext(Opt_semiContext.class,0);
		}
		public Pl_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pl_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPl_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPl_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPl_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pl_functionContext pl_function() throws RecognitionException {
		Pl_functionContext _localctx = new Pl_functionContext(_ctx, getState());
		enterRule(_localctx, 1356, RULE_pl_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10944);
			comp_options(0);
			setState(10945);
			pl_block();
			setState(10946);
			opt_semi();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comp_optionsContext extends ParserRuleContext {
		public Comp_optionsContext comp_options() {
			return getRuleContext(Comp_optionsContext.class,0);
		}
		public Comp_optionContext comp_option() {
			return getRuleContext(Comp_optionContext.class,0);
		}
		public Comp_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterComp_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitComp_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitComp_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comp_optionsContext comp_options() throws RecognitionException {
		return comp_options(0);
	}

	private Comp_optionsContext comp_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Comp_optionsContext _localctx = new Comp_optionsContext(_ctx, _parentState);
		Comp_optionsContext _prevctx = _localctx;
		int _startState = 1358;
		enterRecursionRule(_localctx, 1358, RULE_comp_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(10953);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,552,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Comp_optionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_comp_options);
					setState(10949);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10950);
					comp_option();
					}
					} 
				}
				setState(10955);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,552,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Comp_optionContext extends ParserRuleContext {
		public SharpContext sharp() {
			return getRuleContext(SharpContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode DUMP() { return getToken(PostgreSQLParser.DUMP, 0); }
		public TerminalNode PRINT_STRICT_PARAMS() { return getToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0); }
		public Option_valueContext option_value() {
			return getRuleContext(Option_valueContext.class,0);
		}
		public TerminalNode VARIABLE_CONFLICT() { return getToken(PostgreSQLParser.VARIABLE_CONFLICT, 0); }
		public TerminalNode ERROR() { return getToken(PostgreSQLParser.ERROR, 0); }
		public TerminalNode USE_VARIABLE() { return getToken(PostgreSQLParser.USE_VARIABLE, 0); }
		public TerminalNode USE_COLUMN() { return getToken(PostgreSQLParser.USE_COLUMN, 0); }
		public Comp_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterComp_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitComp_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitComp_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comp_optionContext comp_option() throws RecognitionException {
		Comp_optionContext _localctx = new Comp_optionContext(_ctx, getState());
		enterRule(_localctx, 1360, RULE_comp_option);
		try {
			setState(10976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10956);
				sharp();
				setState(10957);
				match(OPTION);
				setState(10958);
				match(DUMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10960);
				sharp();
				setState(10961);
				match(PRINT_STRICT_PARAMS);
				setState(10962);
				option_value();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10964);
				sharp();
				setState(10965);
				match(VARIABLE_CONFLICT);
				setState(10966);
				match(ERROR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10968);
				sharp();
				setState(10969);
				match(VARIABLE_CONFLICT);
				setState(10970);
				match(USE_VARIABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10972);
				sharp();
				setState(10973);
				match(VARIABLE_CONFLICT);
				setState(10974);
				match(USE_COLUMN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode SLASH() { return getToken(PostgreSQLParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public TerminalNode NOT_EQUALS_1() { return getToken(PostgreSQLParser.NOT_EQUALS_1, 0); }
		public TerminalNode BITWISE_OR() { return getToken(PostgreSQLParser.BITWISE_OR, 0); }
		public TerminalNode BITWISE_XOR() { return getToken(PostgreSQLParser.BITWISE_XOR, 0); }
		public TerminalNode BITWISE_NOT() { return getToken(PostgreSQLParser.BITWISE_NOT, 0); }
		public TerminalNode SQUARE_ROOT() { return getToken(PostgreSQLParser.SQUARE_ROOT, 0); }
		public TerminalNode CUBIC_ROOT() { return getToken(PostgreSQLParser.CUBIC_ROOT, 0); }
		public TerminalNode FACTORIAL() { return getToken(PostgreSQLParser.FACTORIAL, 0); }
		public TerminalNode PREFIX_FACTORIAL() { return getToken(PostgreSQLParser.PREFIX_FACTORIAL, 0); }
		public TerminalNode ABSOLUTE() { return getToken(PostgreSQLParser.ABSOLUTE, 0); }
		public TerminalNode AMPERSAND() { return getToken(PostgreSQLParser.AMPERSAND, 0); }
		public Text_patternsContext text_patterns() {
			return getRuleContext(Text_patternsContext.class,0);
		}
		public Geometric_operatorsContext geometric_operators() {
			return getRuleContext(Geometric_operatorsContext.class,0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorContext operator() throws RecognitionException {
		OperatorContext _localctx = new OperatorContext(_ctx, getState());
		enterRule(_localctx, 1362, RULE_operator);
		try {
			setState(11004);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10978);
				match(PLUS);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10979);
				match(MINUS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10980);
				match(STAR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10981);
				match(SLASH);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10982);
				match(PERCENT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10983);
				match(CARET);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10984);
				match(LT);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10985);
				match(GT);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10986);
				match(EQUAL);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10987);
				match(LESS_EQUALS);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10988);
				match(GREATER_EQUALS);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(10989);
				match(NOT_EQUALS);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(10990);
				match(PERCENT);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(10991);
				match(NOT_EQUALS);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(10992);
				match(NOT_EQUALS_1);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(10993);
				match(BITWISE_OR);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(10994);
				match(BITWISE_XOR);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(10995);
				match(BITWISE_NOT);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(10996);
				match(SQUARE_ROOT);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(10997);
				match(CUBIC_ROOT);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(10998);
				match(FACTORIAL);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(10999);
				match(PREFIX_FACTORIAL);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(11000);
				match(ABSOLUTE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(11001);
				match(AMPERSAND);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(11002);
				text_patterns();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(11003);
				geometric_operators();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SharpContext extends ParserRuleContext {
		public OperatorContext operator() {
			return getRuleContext(OperatorContext.class,0);
		}
		public SharpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sharp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSharp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSharp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSharp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SharpContext sharp() throws RecognitionException {
		SharpContext _localctx = new SharpContext(_ctx, getState());
		enterRule(_localctx, 1364, RULE_sharp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11006);
			operator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Option_valueContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Option_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOption_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOption_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOption_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Option_valueContext option_value() throws RecognitionException {
		Option_valueContext _localctx = new Option_valueContext(_ctx, getState());
		enterRule(_localctx, 1366, RULE_option_value);
		try {
			setState(11012);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11008);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11009);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11010);
				plsql_unreserved_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11011);
				unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_semiContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Opt_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_semiContext opt_semi() throws RecognitionException {
		Opt_semiContext _localctx = new Opt_semiContext(_ctx, getState());
		enterRule(_localctx, 1368, RULE_opt_semi);
		try {
			setState(11016);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				setState(11015);
				match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pl_blockContext extends ParserRuleContext {
		public Decl_sectContext decl_sect() {
			return getRuleContext(Decl_sectContext.class,0);
		}
		public TerminalNode BEGIN_P() { return getToken(PostgreSQLParser.BEGIN_P, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Exception_sectContext exception_sect() {
			return getRuleContext(Exception_sectContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public Pl_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pl_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPl_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPl_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPl_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pl_blockContext pl_block() throws RecognitionException {
		Pl_blockContext _localctx = new Pl_blockContext(_ctx, getState());
		enterRule(_localctx, 1370, RULE_pl_block);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11018);
			decl_sect();
			setState(11019);
			match(BEGIN_P);
			setState(11020);
			proc_sect(0);
			setState(11021);
			exception_sect();
			setState(11022);
			match(END_P);
			setState(11023);
			opt_label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_sectContext extends ParserRuleContext {
		public Opt_block_labelContext opt_block_label() {
			return getRuleContext(Opt_block_labelContext.class,0);
		}
		public Decl_startContext decl_start() {
			return getRuleContext(Decl_startContext.class,0);
		}
		public Decl_stmtsContext decl_stmts() {
			return getRuleContext(Decl_stmtsContext.class,0);
		}
		public Decl_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_sect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_sect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_sect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_sectContext decl_sect() throws RecognitionException {
		Decl_sectContext _localctx = new Decl_sectContext(_ctx, getState());
		enterRule(_localctx, 1372, RULE_decl_sect);
		try {
			setState(11033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11025);
				opt_block_label();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11026);
				opt_block_label();
				setState(11027);
				decl_start();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11029);
				opt_block_label();
				setState(11030);
				decl_start();
				setState(11031);
				decl_stmts(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_startContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public Decl_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_startContext decl_start() throws RecognitionException {
		Decl_startContext _localctx = new Decl_startContext(_ctx, getState());
		enterRule(_localctx, 1374, RULE_decl_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11035);
			match(DECLARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_stmtsContext extends ParserRuleContext {
		public Decl_stmtContext decl_stmt() {
			return getRuleContext(Decl_stmtContext.class,0);
		}
		public Decl_stmtsContext decl_stmts() {
			return getRuleContext(Decl_stmtsContext.class,0);
		}
		public Decl_stmtsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_stmts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_stmts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_stmts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_stmts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_stmtsContext decl_stmts() throws RecognitionException {
		return decl_stmts(0);
	}

	private Decl_stmtsContext decl_stmts(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Decl_stmtsContext _localctx = new Decl_stmtsContext(_ctx, _parentState);
		Decl_stmtsContext _prevctx = _localctx;
		int _startState = 1376;
		enterRecursionRule(_localctx, 1376, RULE_decl_stmts, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(11038);
			decl_stmt();
			}
			_ctx.stop = _input.LT(-1);
			setState(11044);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,558,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Decl_stmtsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_decl_stmts);
					setState(11040);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(11041);
					decl_stmt();
					}
					} 
				}
				setState(11046);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,558,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Label_declContext extends ParserRuleContext {
		public TerminalNode LESS_LESS() { return getToken(PostgreSQLParser.LESS_LESS, 0); }
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode GREATER_GREATER() { return getToken(PostgreSQLParser.GREATER_GREATER, 0); }
		public Label_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLabel_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLabel_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLabel_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_declContext label_decl() throws RecognitionException {
		Label_declContext _localctx = new Label_declContext(_ctx, getState());
		enterRule(_localctx, 1378, RULE_label_decl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11047);
			match(LESS_LESS);
			setState(11048);
			any_identifier();
			setState(11049);
			match(GREATER_GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_stmtContext extends ParserRuleContext {
		public Decl_statementContext decl_statement() {
			return getRuleContext(Decl_statementContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public Label_declContext label_decl() {
			return getRuleContext(Label_declContext.class,0);
		}
		public Decl_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_stmtContext decl_stmt() throws RecognitionException {
		Decl_stmtContext _localctx = new Decl_stmtContext(_ctx, getState());
		enterRule(_localctx, 1380, RULE_decl_stmt);
		try {
			setState(11054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11051);
				decl_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11052);
				match(DECLARE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11053);
				label_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_statementContext extends ParserRuleContext {
		public Decl_varnameContext decl_varname() {
			return getRuleContext(Decl_varnameContext.class,0);
		}
		public TerminalNode ALIAS() { return getToken(PostgreSQLParser.ALIAS, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Decl_aliasitemContext decl_aliasitem() {
			return getRuleContext(Decl_aliasitemContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Decl_constContext decl_const() {
			return getRuleContext(Decl_constContext.class,0);
		}
		public Decl_datatypeContext decl_datatype() {
			return getRuleContext(Decl_datatypeContext.class,0);
		}
		public Decl_collateContext decl_collate() {
			return getRuleContext(Decl_collateContext.class,0);
		}
		public Decl_notnullContext decl_notnull() {
			return getRuleContext(Decl_notnullContext.class,0);
		}
		public Decl_defvalContext decl_defval() {
			return getRuleContext(Decl_defvalContext.class,0);
		}
		public Opt_scrollableContext opt_scrollable() {
			return getRuleContext(Opt_scrollableContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public Decl_cursor_argsContext decl_cursor_args() {
			return getRuleContext(Decl_cursor_argsContext.class,0);
		}
		public Decl_is_forContext decl_is_for() {
			return getRuleContext(Decl_is_forContext.class,0);
		}
		public Decl_cursor_queryContext decl_cursor_query() {
			return getRuleContext(Decl_cursor_queryContext.class,0);
		}
		public Decl_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_statementContext decl_statement() throws RecognitionException {
		Decl_statementContext _localctx = new Decl_statementContext(_ctx, getState());
		enterRule(_localctx, 1382, RULE_decl_statement);
		try {
			setState(11078);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11056);
				decl_varname();
				setState(11057);
				match(ALIAS);
				setState(11058);
				match(FOR);
				setState(11059);
				decl_aliasitem();
				setState(11060);
				match(SEMI);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11062);
				decl_varname();
				setState(11063);
				decl_const();
				setState(11064);
				decl_datatype();
				setState(11065);
				decl_collate();
				setState(11066);
				decl_notnull();
				setState(11067);
				decl_defval();
				setState(11068);
				match(SEMI);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11070);
				decl_varname();
				setState(11071);
				opt_scrollable();
				setState(11072);
				match(CURSOR);
				setState(11073);
				decl_cursor_args();
				setState(11074);
				decl_is_for();
				setState(11075);
				decl_cursor_query();
				setState(11076);
				match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_scrollableContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public Opt_scrollableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_scrollable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_scrollable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_scrollable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_scrollable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_scrollableContext opt_scrollable() throws RecognitionException {
		Opt_scrollableContext _localctx = new Opt_scrollableContext(_ctx, getState());
		enterRule(_localctx, 1384, RULE_opt_scrollable);
		try {
			setState(11084);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURSOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(11081);
				match(NO);
				setState(11082);
				match(SCROLL);
				}
				break;
			case SCROLL:
				enterOuterAlt(_localctx, 3);
				{
				setState(11083);
				match(SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_queryContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Decl_cursor_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_queryContext decl_cursor_query() throws RecognitionException {
		Decl_cursor_queryContext _localctx = new Decl_cursor_queryContext(_ctx, getState());
		enterRule(_localctx, 1386, RULE_decl_cursor_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11086);
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_argsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Decl_cursor_arglistContext decl_cursor_arglist() {
			return getRuleContext(Decl_cursor_arglistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Decl_cursor_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_argsContext decl_cursor_args() throws RecognitionException {
		Decl_cursor_argsContext _localctx = new Decl_cursor_argsContext(_ctx, getState());
		enterRule(_localctx, 1388, RULE_decl_cursor_args);
		try {
			setState(11093);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
			case IS:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(11089);
				match(OPEN_PAREN);
				setState(11090);
				decl_cursor_arglist(0);
				setState(11091);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_arglistContext extends ParserRuleContext {
		public Decl_cursor_argContext decl_cursor_arg() {
			return getRuleContext(Decl_cursor_argContext.class,0);
		}
		public Decl_cursor_arglistContext decl_cursor_arglist() {
			return getRuleContext(Decl_cursor_arglistContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Decl_cursor_arglistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_arglist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_arglist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_arglist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_arglist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_arglistContext decl_cursor_arglist() throws RecognitionException {
		return decl_cursor_arglist(0);
	}

	private Decl_cursor_arglistContext decl_cursor_arglist(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Decl_cursor_arglistContext _localctx = new Decl_cursor_arglistContext(_ctx, _parentState);
		Decl_cursor_arglistContext _prevctx = _localctx;
		int _startState = 1390;
		enterRecursionRule(_localctx, 1390, RULE_decl_cursor_arglist, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(11096);
			decl_cursor_arg();
			}
			_ctx.stop = _input.LT(-1);
			setState(11103);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,563,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Decl_cursor_arglistContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_decl_cursor_arglist);
					setState(11098);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(11099);
					match(COMMA);
					setState(11100);
					decl_cursor_arg();
					}
					} 
				}
				setState(11105);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,563,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Decl_cursor_argContext extends ParserRuleContext {
		public Decl_varnameContext decl_varname() {
			return getRuleContext(Decl_varnameContext.class,0);
		}
		public Decl_datatypeContext decl_datatype() {
			return getRuleContext(Decl_datatypeContext.class,0);
		}
		public Decl_cursor_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_argContext decl_cursor_arg() throws RecognitionException {
		Decl_cursor_argContext _localctx = new Decl_cursor_argContext(_ctx, getState());
		enterRule(_localctx, 1392, RULE_decl_cursor_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11106);
			decl_varname();
			setState(11107);
			decl_datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_is_forContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Decl_is_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_is_for; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_is_for(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_is_for(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_is_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_is_forContext decl_is_for() throws RecognitionException {
		Decl_is_forContext _localctx = new Decl_is_forContext(_ctx, getState());
		enterRule(_localctx, 1394, RULE_decl_is_for);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11109);
			_la = _input.LA(1);
			if ( !(_la==FOR || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_aliasitemContext extends ParserRuleContext {
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Decl_aliasitemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_aliasitem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_aliasitem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_aliasitem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_aliasitem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_aliasitemContext decl_aliasitem() throws RecognitionException {
		Decl_aliasitemContext _localctx = new Decl_aliasitemContext(_ctx, getState());
		enterRule(_localctx, 1396, RULE_decl_aliasitem);
		try {
			setState(11113);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(11111);
				match(PARAM);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(11112);
				colid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_varnameContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public Decl_varnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_varname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_varname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_varname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_varname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_varnameContext decl_varname() throws RecognitionException {
		Decl_varnameContext _localctx = new Decl_varnameContext(_ctx, getState());
		enterRule(_localctx, 1398, RULE_decl_varname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11115);
			any_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_constContext extends ParserRuleContext {
		public TerminalNode CONSTANT() { return getToken(PostgreSQLParser.CONSTANT, 0); }
		public Decl_constContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_const; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_const(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_const(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_const(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_constContext decl_const() throws RecognitionException {
		Decl_constContext _localctx = new Decl_constContext(_ctx, getState());
		enterRule(_localctx, 1400, RULE_decl_const);
		try {
			setState(11119);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,565,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11118);
				match(CONSTANT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_datatypeContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Decl_datatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_datatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_datatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_datatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_datatypeContext decl_datatype() throws RecognitionException {
		Decl_datatypeContext _localctx = new Decl_datatypeContext(_ctx, getState());
		enterRule(_localctx, 1402, RULE_decl_datatype);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11121);
			typename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_collateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Decl_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_collate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_collate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_collateContext decl_collate() throws RecognitionException {
		Decl_collateContext _localctx = new Decl_collateContext(_ctx, getState());
		enterRule(_localctx, 1404, RULE_decl_collate);
		try {
			setState(11126);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COLLATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(11124);
				match(COLLATE);
				setState(11125);
				any_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_notnullContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Decl_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_notnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_notnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_notnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_notnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_notnullContext decl_notnull() throws RecognitionException {
		Decl_notnullContext _localctx = new Decl_notnullContext(_ctx, getState());
		enterRule(_localctx, 1406, RULE_decl_notnull);
		try {
			setState(11131);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(11129);
				match(NOT);
				setState(11130);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_defvalContext extends ParserRuleContext {
		public Decl_defkeyContext decl_defkey() {
			return getRuleContext(Decl_defkeyContext.class,0);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Decl_defvalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_defval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_defval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_defval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_defval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_defvalContext decl_defval() throws RecognitionException {
		Decl_defvalContext _localctx = new Decl_defvalContext(_ctx, getState());
		enterRule(_localctx, 1408, RULE_decl_defval);
		try {
			setState(11137);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(11134);
				decl_defkey();
				setState(11135);
				sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_defkeyContext extends ParserRuleContext {
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Decl_defkeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_defkey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_defkey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_defkey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_defkey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_defkeyContext decl_defkey() throws RecognitionException {
		Decl_defkeyContext _localctx = new Decl_defkeyContext(_ctx, getState());
		enterRule(_localctx, 1410, RULE_decl_defkey);
		try {
			setState(11141);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
			case COLON_EQUALS:
				enterOuterAlt(_localctx, 1);
				{
				setState(11139);
				assign_operator();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(11140);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_operatorContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode COLON_EQUALS() { return getToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public Assign_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAssign_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAssign_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAssign_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assign_operatorContext assign_operator() throws RecognitionException {
		Assign_operatorContext _localctx = new Assign_operatorContext(_ctx, getState());
		enterRule(_localctx, 1412, RULE_assign_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11143);
			_la = _input.LA(1);
			if ( !(_la==EQUAL || _la==COLON_EQUALS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_sectContext extends ParserRuleContext {
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Proc_stmtContext proc_stmt() {
			return getRuleContext(Proc_stmtContext.class,0);
		}
		public Proc_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_sect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_sect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_sect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_sectContext proc_sect() throws RecognitionException {
		return proc_sect(0);
	}

	private Proc_sectContext proc_sect(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Proc_sectContext _localctx = new Proc_sectContext(_ctx, _parentState);
		Proc_sectContext _prevctx = _localctx;
		int _startState = 1414;
		enterRecursionRule(_localctx, 1414, RULE_proc_sect, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(11150);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,570,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Proc_sectContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_proc_sect);
					setState(11146);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(11147);
					proc_stmt();
					}
					} 
				}
				setState(11152);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,570,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Proc_stmtContext extends ParserRuleContext {
		public Pl_blockContext pl_block() {
			return getRuleContext(Pl_blockContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_returnContext stmt_return() {
			return getRuleContext(Stmt_returnContext.class,0);
		}
		public Stmt_raiseContext stmt_raise() {
			return getRuleContext(Stmt_raiseContext.class,0);
		}
		public Stmt_assignContext stmt_assign() {
			return getRuleContext(Stmt_assignContext.class,0);
		}
		public Stmt_ifContext stmt_if() {
			return getRuleContext(Stmt_ifContext.class,0);
		}
		public Stmt_caseContext stmt_case() {
			return getRuleContext(Stmt_caseContext.class,0);
		}
		public Stmt_loopContext stmt_loop() {
			return getRuleContext(Stmt_loopContext.class,0);
		}
		public Stmt_whileContext stmt_while() {
			return getRuleContext(Stmt_whileContext.class,0);
		}
		public Stmt_forContext stmt_for() {
			return getRuleContext(Stmt_forContext.class,0);
		}
		public Stmt_foreach_aContext stmt_foreach_a() {
			return getRuleContext(Stmt_foreach_aContext.class,0);
		}
		public Stmt_exitContext stmt_exit() {
			return getRuleContext(Stmt_exitContext.class,0);
		}
		public Stmt_assertContext stmt_assert() {
			return getRuleContext(Stmt_assertContext.class,0);
		}
		public Stmt_execsqlContext stmt_execsql() {
			return getRuleContext(Stmt_execsqlContext.class,0);
		}
		public Stmt_dynexecuteContext stmt_dynexecute() {
			return getRuleContext(Stmt_dynexecuteContext.class,0);
		}
		public Stmt_performContext stmt_perform() {
			return getRuleContext(Stmt_performContext.class,0);
		}
		public Stmt_callContext stmt_call() {
			return getRuleContext(Stmt_callContext.class,0);
		}
		public Stmt_getdiagContext stmt_getdiag() {
			return getRuleContext(Stmt_getdiagContext.class,0);
		}
		public Stmt_openContext stmt_open() {
			return getRuleContext(Stmt_openContext.class,0);
		}
		public Stmt_fetchContext stmt_fetch() {
			return getRuleContext(Stmt_fetchContext.class,0);
		}
		public Stmt_moveContext stmt_move() {
			return getRuleContext(Stmt_moveContext.class,0);
		}
		public Stmt_closeContext stmt_close() {
			return getRuleContext(Stmt_closeContext.class,0);
		}
		public Stmt_nullContext stmt_null() {
			return getRuleContext(Stmt_nullContext.class,0);
		}
		public Stmt_commitContext stmt_commit() {
			return getRuleContext(Stmt_commitContext.class,0);
		}
		public Stmt_rollbackContext stmt_rollback() {
			return getRuleContext(Stmt_rollbackContext.class,0);
		}
		public Stmt_setContext stmt_set() {
			return getRuleContext(Stmt_setContext.class,0);
		}
		public Proc_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_stmtContext proc_stmt() throws RecognitionException {
		Proc_stmtContext _localctx = new Proc_stmtContext(_ctx, getState());
		enterRule(_localctx, 1416, RULE_proc_stmt);
		try {
			setState(11180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11153);
				pl_block();
				setState(11154);
				match(SEMI);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11156);
				stmt_return();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11157);
				stmt_raise();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11158);
				stmt_assign();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11159);
				stmt_if();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(11160);
				stmt_case();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(11161);
				stmt_loop();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(11162);
				stmt_while();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(11163);
				stmt_for();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(11164);
				stmt_foreach_a();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(11165);
				stmt_exit();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(11166);
				stmt_assert();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(11167);
				stmt_execsql();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(11168);
				stmt_dynexecute();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(11169);
				stmt_perform();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(11170);
				stmt_call();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(11171);
				stmt_getdiag();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(11172);
				stmt_open();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(11173);
				stmt_fetch();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(11174);
				stmt_move();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(11175);
				stmt_close();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(11176);
				stmt_null();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(11177);
				stmt_commit();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(11178);
				stmt_rollback();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(11179);
				stmt_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_performContext extends ParserRuleContext {
		public TerminalNode PERFORM() { return getToken(PostgreSQLParser.PERFORM, 0); }
		public Expr_until_semiContext expr_until_semi() {
			return getRuleContext(Expr_until_semiContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_performContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_perform; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_perform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_perform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_perform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_performContext stmt_perform() throws RecognitionException {
		Stmt_performContext _localctx = new Stmt_performContext(_ctx, getState());
		enterRule(_localctx, 1418, RULE_stmt_perform);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11182);
			match(PERFORM);
			setState(11183);
			expr_until_semi();
			setState(11184);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_callContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Opt_expr_listContext opt_expr_list() {
			return getRuleContext(Opt_expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public Stmt_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_callContext stmt_call() throws RecognitionException {
		Stmt_callContext _localctx = new Stmt_callContext(_ctx, getState());
		enterRule(_localctx, 1420, RULE_stmt_call);
		try {
			setState(11200);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(11186);
				match(CALL);
				setState(11187);
				any_identifier();
				setState(11188);
				match(OPEN_PAREN);
				setState(11189);
				opt_expr_list();
				setState(11190);
				match(CLOSE_PAREN);
				setState(11191);
				match(SEMI);
				}
				break;
			case DO:
				enterOuterAlt(_localctx, 2);
				{
				setState(11193);
				match(DO);
				setState(11194);
				any_identifier();
				setState(11195);
				match(OPEN_PAREN);
				setState(11196);
				opt_expr_list();
				setState(11197);
				match(CLOSE_PAREN);
				setState(11198);
				match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_expr_listContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_expr_listContext opt_expr_list() throws RecognitionException {
		Opt_expr_listContext _localctx = new Opt_expr_listContext(_ctx, getState());
		enterRule(_localctx, 1422, RULE_opt_expr_list);
		try {
			setState(11204);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
			case STAR:
			case EQUAL:
			case AMPERSAND:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case NOT_EQUALS_1:
			case PERCENT:
			case PARAM:
			case BITWISE_OR:
			case BITWISE_XOR:
			case BITWISE_NOT:
			case SQUARE_ROOT:
			case CUBIC_ROOT:
			case FACTORIAL:
			case PREFIX_FACTORIAL:
			case ABSOLUTE:
			case TEXT_PATTERN1:
			case TEXT_PATTERN2:
			case TEXT_PATTERN3:
			case TEXT_PATTERN4:
			case LENGTH:
			case CENTER:
			case CLOSET_POINT:
			case DISTANT:
			case EXTEND_RIGHT:
			case EXTEND_LEFT:
			case IS_STRICTLY_BELOW:
			case IS_STRICTLY_ABOVE:
			case EXTEND_ABOVE:
			case EXTEND_BELOW:
			case IS_BELOW:
			case IS_ABOVE:
			case INTERSECTION:
			case IS_HORIZON:
			case IS_VERTICAL:
			case IS_PERPENDICULAR:
			case IS_PARALLEL:
			case SAME:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(11203);
				expr_list(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_assignContext extends ParserRuleContext {
		public Assign_varContext assign_var() {
			return getRuleContext(Assign_varContext.class,0);
		}
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_assignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_assign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_assign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_assign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_assign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_assignContext stmt_assign() throws RecognitionException {
		Stmt_assignContext _localctx = new Stmt_assignContext(_ctx, getState());
		enterRule(_localctx, 1424, RULE_stmt_assign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11206);
			assign_var(0);
			setState(11207);
			assign_operator();
			setState(11208);
			sql_expression();
			setState(11209);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_getdiagContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(PostgreSQLParser.GET, 0); }
		public Getdiag_area_optContext getdiag_area_opt() {
			return getRuleContext(Getdiag_area_optContext.class,0);
		}
		public TerminalNode DIAGNOSTICS() { return getToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		public Getdiag_listContext getdiag_list() {
			return getRuleContext(Getdiag_listContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_getdiagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_getdiag; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_getdiag(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_getdiag(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_getdiag(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_getdiagContext stmt_getdiag() throws RecognitionException {
		Stmt_getdiagContext _localctx = new Stmt_getdiagContext(_ctx, getState());
		enterRule(_localctx, 1426, RULE_stmt_getdiag);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11211);
			match(GET);
			setState(11212);
			getdiag_area_opt();
			setState(11213);
			match(DIAGNOSTICS);
			setState(11214);
			getdiag_list(0);
			setState(11215);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_area_optContext extends ParserRuleContext {
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode STACKED() { return getToken(PostgreSQLParser.STACKED, 0); }
		public Getdiag_area_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_area_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_area_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_area_opt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_area_opt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_area_optContext getdiag_area_opt() throws RecognitionException {
		Getdiag_area_optContext _localctx = new Getdiag_area_optContext(_ctx, getState());
		enterRule(_localctx, 1428, RULE_getdiag_area_opt);
		try {
			setState(11220);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DIAGNOSTICS:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case CURRENT_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(11218);
				match(CURRENT_P);
				}
				break;
			case STACKED:
				enterOuterAlt(_localctx, 3);
				{
				setState(11219);
				match(STACKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_listContext extends ParserRuleContext {
		public Getdiag_list_itemContext getdiag_list_item() {
			return getRuleContext(Getdiag_list_itemContext.class,0);
		}
		public Getdiag_listContext getdiag_list() {
			return getRuleContext(Getdiag_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Getdiag_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_listContext getdiag_list() throws RecognitionException {
		return getdiag_list(0);
	}

	private Getdiag_listContext getdiag_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Getdiag_listContext _localctx = new Getdiag_listContext(_ctx, _parentState);
		Getdiag_listContext _prevctx = _localctx;
		int _startState = 1430;
		enterRecursionRule(_localctx, 1430, RULE_getdiag_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(11223);
			getdiag_list_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(11230);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,575,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Getdiag_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_getdiag_list);
					setState(11225);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(11226);
					match(COMMA);
					setState(11227);
					getdiag_list_item();
					}
					} 
				}
				setState(11232);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,575,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Getdiag_list_itemContext extends ParserRuleContext {
		public Getdiag_targetContext getdiag_target() {
			return getRuleContext(Getdiag_targetContext.class,0);
		}
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public Getdiag_itemContext getdiag_item() {
			return getRuleContext(Getdiag_itemContext.class,0);
		}
		public Getdiag_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_list_itemContext getdiag_list_item() throws RecognitionException {
		Getdiag_list_itemContext _localctx = new Getdiag_list_itemContext(_ctx, getState());
		enterRule(_localctx, 1432, RULE_getdiag_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11233);
			getdiag_target();
			setState(11234);
			assign_operator();
			setState(11235);
			getdiag_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Getdiag_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_itemContext getdiag_item() throws RecognitionException {
		Getdiag_itemContext _localctx = new Getdiag_itemContext(_ctx, getState());
		enterRule(_localctx, 1434, RULE_getdiag_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11237);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_targetContext extends ParserRuleContext {
		public Assign_varContext assign_var() {
			return getRuleContext(Assign_varContext.class,0);
		}
		public Getdiag_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_targetContext getdiag_target() throws RecognitionException {
		Getdiag_targetContext _localctx = new Getdiag_targetContext(_ctx, getState());
		enterRule(_localctx, 1436, RULE_getdiag_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11239);
			assign_var(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_varContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public Assign_varContext assign_var() {
			return getRuleContext(Assign_varContext.class,0);
		}
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public Expr_until_rightbracketContext expr_until_rightbracket() {
			return getRuleContext(Expr_until_rightbracketContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public Assign_varContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_var; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAssign_var(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAssign_var(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAssign_var(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assign_varContext assign_var() throws RecognitionException {
		return assign_var(0);
	}

	private Assign_varContext assign_var(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Assign_varContext _localctx = new Assign_varContext(_ctx, _parentState);
		Assign_varContext _prevctx = _localctx;
		int _startState = 1438;
		enterRecursionRule(_localctx, 1438, RULE_assign_var, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(11244);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				setState(11242);
				any_name();
				}
				break;
			case PARAM:
				{
				setState(11243);
				match(PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(11253);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,577,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assign_varContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_assign_var);
					setState(11246);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(11247);
					match(OPEN_BRACKET);
					setState(11248);
					expr_until_rightbracket();
					setState(11249);
					match(CLOSE_BRACKET);
					}
					} 
				}
				setState(11255);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,577,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Stmt_ifContext extends ParserRuleContext {
		public List<TerminalNode> IF_P() { return getTokens(PostgreSQLParser.IF_P); }
		public TerminalNode IF_P(int i) {
			return getToken(PostgreSQLParser.IF_P, i);
		}
		public Expr_until_thenContext expr_until_then() {
			return getRuleContext(Expr_until_thenContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Stmt_elsifsContext stmt_elsifs() {
			return getRuleContext(Stmt_elsifsContext.class,0);
		}
		public Stmt_elseContext stmt_else() {
			return getRuleContext(Stmt_elseContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_ifContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_if; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_if(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_if(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_if(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_ifContext stmt_if() throws RecognitionException {
		Stmt_ifContext _localctx = new Stmt_ifContext(_ctx, getState());
		enterRule(_localctx, 1440, RULE_stmt_if);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11256);
			match(IF_P);
			setState(11257);
			expr_until_then();
			setState(11258);
			match(THEN);
			setState(11259);
			proc_sect(0);
			setState(11260);
			stmt_elsifs(0);
			setState(11261);
			stmt_else();
			setState(11262);
			match(END_P);
			setState(11263);
			match(IF_P);
			setState(11264);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_elsifsContext extends ParserRuleContext {
		public Stmt_elsifsContext stmt_elsifs() {
			return getRuleContext(Stmt_elsifsContext.class,0);
		}
		public TerminalNode ELSIF() { return getToken(PostgreSQLParser.ELSIF, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Stmt_elsifsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_elsifs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_elsifs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_elsifs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_elsifs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_elsifsContext stmt_elsifs() throws RecognitionException {
		return stmt_elsifs(0);
	}

	private Stmt_elsifsContext stmt_elsifs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Stmt_elsifsContext _localctx = new Stmt_elsifsContext(_ctx, _parentState);
		Stmt_elsifsContext _prevctx = _localctx;
		int _startState = 1442;
		enterRecursionRule(_localctx, 1442, RULE_stmt_elsifs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(11275);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,578,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Stmt_elsifsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_stmt_elsifs);
					setState(11267);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(11268);
					match(ELSIF);
					setState(11269);
					a_expr(0);
					setState(11270);
					match(THEN);
					setState(11271);
					proc_sect(0);
					}
					} 
				}
				setState(11277);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,578,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Stmt_elseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Stmt_elseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_else; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_else(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_else(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_else(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_elseContext stmt_else() throws RecognitionException {
		Stmt_elseContext _localctx = new Stmt_elseContext(_ctx, getState());
		enterRule(_localctx, 1444, RULE_stmt_else);
		try {
			setState(11281);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case END_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ELSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(11279);
				match(ELSE);
				setState(11280);
				proc_sect(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_caseContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(PostgreSQLParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PostgreSQLParser.CASE, i);
		}
		public Opt_expr_until_whenContext opt_expr_until_when() {
			return getRuleContext(Opt_expr_until_whenContext.class,0);
		}
		public Case_when_listContext case_when_list() {
			return getRuleContext(Case_when_listContext.class,0);
		}
		public Opt_case_elseContext opt_case_else() {
			return getRuleContext(Opt_case_elseContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_case(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_case(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_caseContext stmt_case() throws RecognitionException {
		Stmt_caseContext _localctx = new Stmt_caseContext(_ctx, getState());
		enterRule(_localctx, 1446, RULE_stmt_case);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11283);
			match(CASE);
			setState(11284);
			opt_expr_until_when();
			setState(11285);
			case_when_list(0);
			setState(11286);
			opt_case_else();
			setState(11287);
			match(END_P);
			setState(11288);
			match(CASE);
			setState(11289);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_expr_until_whenContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_expr_until_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_expr_until_when; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_expr_until_when(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_expr_until_when(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_expr_until_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_expr_until_whenContext opt_expr_until_when() throws RecognitionException {
		Opt_expr_until_whenContext _localctx = new Opt_expr_until_whenContext(_ctx, getState());
		enterRule(_localctx, 1448, RULE_opt_expr_until_when);
		try {
			setState(11293);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11292);
				sql_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_when_listContext extends ParserRuleContext {
		public Case_whenContext case_when() {
			return getRuleContext(Case_whenContext.class,0);
		}
		public Case_when_listContext case_when_list() {
			return getRuleContext(Case_when_listContext.class,0);
		}
		public Case_when_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_when_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_when_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_when_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_when_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_when_listContext case_when_list() throws RecognitionException {
		return case_when_list(0);
	}

	private Case_when_listContext case_when_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Case_when_listContext _localctx = new Case_when_listContext(_ctx, _parentState);
		Case_when_listContext _prevctx = _localctx;
		int _startState = 1450;
		enterRecursionRule(_localctx, 1450, RULE_case_when_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(11296);
			case_when();
			}
			_ctx.stop = _input.LT(-1);
			setState(11302);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,581,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Case_when_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_case_when_list);
					setState(11298);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(11299);
					case_when();
					}
					} 
				}
				setState(11304);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,581,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Case_whenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Case_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_when; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_when(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_when(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_whenContext case_when() throws RecognitionException {
		Case_whenContext _localctx = new Case_whenContext(_ctx, getState());
		enterRule(_localctx, 1452, RULE_case_when);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11305);
			match(WHEN);
			setState(11306);
			expr_list(0);
			setState(11307);
			match(THEN);
			setState(11308);
			proc_sect(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_case_elseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Opt_case_elseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_case_else; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_case_else(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_case_else(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_case_else(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_case_elseContext opt_case_else() throws RecognitionException {
		Opt_case_elseContext _localctx = new Opt_case_elseContext(_ctx, getState());
		enterRule(_localctx, 1454, RULE_opt_case_else);
		try {
			setState(11313);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case END_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ELSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(11311);
				match(ELSE);
				setState(11312);
				proc_sect(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_loopContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_loopContext stmt_loop() throws RecognitionException {
		Stmt_loopContext _localctx = new Stmt_loopContext(_ctx, getState());
		enterRule(_localctx, 1456, RULE_stmt_loop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11315);
			opt_loop_label();
			setState(11316);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_whileContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public TerminalNode WHILE() { return getToken(PostgreSQLParser.WHILE, 0); }
		public Expr_until_loopContext expr_until_loop() {
			return getRuleContext(Expr_until_loopContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_whileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_while; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_while(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_while(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_while(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_whileContext stmt_while() throws RecognitionException {
		Stmt_whileContext _localctx = new Stmt_whileContext(_ctx, getState());
		enterRule(_localctx, 1458, RULE_stmt_while);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11318);
			opt_loop_label();
			setState(11319);
			match(WHILE);
			setState(11320);
			expr_until_loop();
			setState(11321);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_forContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public For_controlContext for_control() {
			return getRuleContext(For_controlContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_for; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_for(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_for(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_forContext stmt_for() throws RecognitionException {
		Stmt_forContext _localctx = new Stmt_forContext(_ctx, getState());
		enterRule(_localctx, 1460, RULE_stmt_for);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11323);
			opt_loop_label();
			setState(11324);
			match(FOR);
			setState(11325);
			for_control();
			setState(11326);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_controlContext extends ParserRuleContext {
		public For_variableContext for_variable() {
			return getRuleContext(For_variableContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Opt_reverseContext opt_reverse() {
			return getRuleContext(Opt_reverseContext.class,0);
		}
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode DOT_DOT() { return getToken(PostgreSQLParser.DOT_DOT, 0); }
		public Opt_by_expressionContext opt_by_expression() {
			return getRuleContext(Opt_by_expressionContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Opt_cursor_parametersContext opt_cursor_parameters() {
			return getRuleContext(Opt_cursor_parametersContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public Opt_for_using_expressionContext opt_for_using_expression() {
			return getRuleContext(Opt_for_using_expressionContext.class,0);
		}
		public ExplainstmtContext explainstmt() {
			return getRuleContext(ExplainstmtContext.class,0);
		}
		public For_controlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_control; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_control(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_control(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_control(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_controlContext for_control() throws RecognitionException {
		For_controlContext _localctx = new For_controlContext(_ctx, getState());
		enterRule(_localctx, 1462, RULE_for_control);
		try {
			setState(11355);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11328);
				for_variable();
				setState(11329);
				match(IN_P);
				setState(11330);
				opt_reverse();
				setState(11331);
				a_expr(0);
				setState(11332);
				match(DOT_DOT);
				setState(11333);
				a_expr(0);
				setState(11334);
				opt_by_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11336);
				for_variable();
				setState(11337);
				match(IN_P);
				setState(11338);
				cursor_name();
				setState(11339);
				opt_cursor_parameters();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11341);
				for_variable();
				setState(11342);
				match(IN_P);
				setState(11343);
				selectstmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11345);
				for_variable();
				setState(11346);
				match(IN_P);
				setState(11347);
				match(EXECUTE);
				setState(11348);
				a_expr(0);
				setState(11349);
				opt_for_using_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11351);
				for_variable();
				setState(11352);
				match(IN_P);
				setState(11353);
				explainstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_for_using_expressionContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_for_using_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_for_using_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_for_using_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_for_using_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_for_using_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_for_using_expressionContext opt_for_using_expression() throws RecognitionException {
		Opt_for_using_expressionContext _localctx = new Opt_for_using_expressionContext(_ctx, getState());
		enterRule(_localctx, 1464, RULE_opt_for_using_expression);
		try {
			setState(11360);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(11358);
				match(USING);
				setState(11359);
				expr_list(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_cursor_parametersContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_cursor_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_cursor_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_cursor_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_cursor_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_cursor_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_cursor_parametersContext opt_cursor_parameters() throws RecognitionException {
		Opt_cursor_parametersContext _localctx = new Opt_cursor_parametersContext(_ctx, getState());
		enterRule(_localctx, 1466, RULE_opt_cursor_parameters);
		int _la;
		try {
			setState(11374);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(11363);
				match(OPEN_PAREN);
				setState(11364);
				a_expr(0);
				setState(11369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(11365);
					match(COMMA);
					setState(11366);
					a_expr(0);
					}
					}
					setState(11371);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(11372);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_reverseContext extends ParserRuleContext {
		public TerminalNode REVERSE() { return getToken(PostgreSQLParser.REVERSE, 0); }
		public Opt_reverseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_reverse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_reverse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_reverse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_reverse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_reverseContext opt_reverse() throws RecognitionException {
		Opt_reverseContext _localctx = new Opt_reverseContext(_ctx, getState());
		enterRule(_localctx, 1468, RULE_opt_reverse);
		try {
			setState(11378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11377);
				match(REVERSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_by_expressionContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_by_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_by_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_by_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_by_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_by_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_by_expressionContext opt_by_expression() throws RecognitionException {
		Opt_by_expressionContext _localctx = new Opt_by_expressionContext(_ctx, getState());
		enterRule(_localctx, 1470, RULE_opt_by_expression);
		try {
			setState(11383);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case BY:
				enterOuterAlt(_localctx, 2);
				{
				setState(11381);
				match(BY);
				setState(11382);
				a_expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_variableContext extends ParserRuleContext {
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public For_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_variableContext for_variable() throws RecognitionException {
		For_variableContext _localctx = new For_variableContext(_ctx, getState());
		enterRule(_localctx, 1472, RULE_for_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11385);
			any_name_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_foreach_aContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public TerminalNode FOREACH() { return getToken(PostgreSQLParser.FOREACH, 0); }
		public For_variableContext for_variable() {
			return getRuleContext(For_variableContext.class,0);
		}
		public Foreach_sliceContext foreach_slice() {
			return getRuleContext(Foreach_sliceContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_foreach_aContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_foreach_a; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_foreach_a(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_foreach_a(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_foreach_a(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_foreach_aContext stmt_foreach_a() throws RecognitionException {
		Stmt_foreach_aContext _localctx = new Stmt_foreach_aContext(_ctx, getState());
		enterRule(_localctx, 1474, RULE_stmt_foreach_a);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11387);
			opt_loop_label();
			setState(11388);
			match(FOREACH);
			setState(11389);
			for_variable();
			setState(11390);
			foreach_slice();
			setState(11391);
			match(IN_P);
			setState(11392);
			match(ARRAY);
			setState(11393);
			a_expr(0);
			setState(11394);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreach_sliceContext extends ParserRuleContext {
		public TerminalNode SLICE() { return getToken(PostgreSQLParser.SLICE, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Foreach_sliceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreach_slice; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterForeach_slice(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitForeach_slice(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitForeach_slice(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreach_sliceContext foreach_slice() throws RecognitionException {
		Foreach_sliceContext _localctx = new Foreach_sliceContext(_ctx, getState());
		enterRule(_localctx, 1476, RULE_foreach_slice);
		try {
			setState(11399);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case SLICE:
				enterOuterAlt(_localctx, 2);
				{
				setState(11397);
				match(SLICE);
				setState(11398);
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_exitContext extends ParserRuleContext {
		public Exit_typeContext exit_type() {
			return getRuleContext(Exit_typeContext.class,0);
		}
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public Opt_exitcondContext opt_exitcond() {
			return getRuleContext(Opt_exitcondContext.class,0);
		}
		public Stmt_exitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_exit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_exit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_exit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_exit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_exitContext stmt_exit() throws RecognitionException {
		Stmt_exitContext _localctx = new Stmt_exitContext(_ctx, getState());
		enterRule(_localctx, 1478, RULE_stmt_exit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11401);
			exit_type();
			setState(11402);
			opt_label();
			setState(11403);
			opt_exitcond();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_typeContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PostgreSQLParser.EXIT, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public Exit_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExit_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExit_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExit_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_typeContext exit_type() throws RecognitionException {
		Exit_typeContext _localctx = new Exit_typeContext(_ctx, getState());
		enterRule(_localctx, 1480, RULE_exit_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11405);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE_P || _la==EXIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_returnContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PostgreSQLParser.RETURN, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode QUERY() { return getToken(PostgreSQLParser.QUERY, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_for_using_expressionContext opt_for_using_expression() {
			return getRuleContext(Opt_for_using_expressionContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Opt_return_resultContext opt_return_result() {
			return getRuleContext(Opt_return_resultContext.class,0);
		}
		public Stmt_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_return(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_returnContext stmt_return() throws RecognitionException {
		Stmt_returnContext _localctx = new Stmt_returnContext(_ctx, getState());
		enterRule(_localctx, 1482, RULE_stmt_return);
		try {
			setState(11428);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11407);
				match(RETURN);
				setState(11408);
				match(NEXT);
				setState(11409);
				sql_expression();
				setState(11410);
				match(SEMI);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11412);
				match(RETURN);
				setState(11413);
				match(QUERY);
				setState(11414);
				match(EXECUTE);
				setState(11415);
				a_expr(0);
				setState(11416);
				opt_for_using_expression();
				setState(11417);
				match(SEMI);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11419);
				match(RETURN);
				setState(11420);
				match(QUERY);
				setState(11421);
				selectstmt();
				setState(11422);
				match(SEMI);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11424);
				match(RETURN);
				setState(11425);
				opt_return_result();
				setState(11426);
				match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_return_resultContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_return_resultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_return_result; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_return_result(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_return_result(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_return_result(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_return_resultContext opt_return_result() throws RecognitionException {
		Opt_return_resultContext _localctx = new Opt_return_resultContext(_ctx, getState());
		enterRule(_localctx, 1484, RULE_opt_return_result);
		try {
			setState(11432);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11431);
				sql_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_raiseContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(PostgreSQLParser.RAISE, 0); }
		public Opt_stmt_raise_levelContext opt_stmt_raise_level() {
			return getRuleContext(Opt_stmt_raise_levelContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_raise_listContext opt_raise_list() {
			return getRuleContext(Opt_raise_listContext.class,0);
		}
		public Opt_raise_usingContext opt_raise_using() {
			return getRuleContext(Opt_raise_usingContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(PostgreSQLParser.SQLSTATE, 0); }
		public Stmt_raiseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_raise; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_raise(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_raise(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_raise(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_raiseContext stmt_raise() throws RecognitionException {
		Stmt_raiseContext _localctx = new Stmt_raiseContext(_ctx, getState());
		enterRule(_localctx, 1486, RULE_stmt_raise);
		try {
			setState(11460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11434);
				match(RAISE);
				setState(11435);
				opt_stmt_raise_level();
				setState(11436);
				sconst();
				setState(11437);
				opt_raise_list(0);
				setState(11438);
				opt_raise_using();
				setState(11439);
				match(SEMI);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11441);
				match(RAISE);
				setState(11442);
				opt_stmt_raise_level();
				setState(11443);
				identifier();
				setState(11444);
				opt_raise_using();
				setState(11445);
				match(SEMI);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11447);
				match(RAISE);
				setState(11448);
				opt_stmt_raise_level();
				setState(11449);
				match(SQLSTATE);
				setState(11450);
				sconst();
				setState(11451);
				opt_raise_using();
				setState(11452);
				match(SEMI);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11454);
				match(RAISE);
				setState(11455);
				opt_stmt_raise_level();
				setState(11456);
				opt_raise_using();
				setState(11457);
				match(SEMI);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11459);
				match(RAISE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_stmt_raise_levelContext extends ParserRuleContext {
		public TerminalNode DEBUG() { return getToken(PostgreSQLParser.DEBUG, 0); }
		public TerminalNode LOG() { return getToken(PostgreSQLParser.LOG, 0); }
		public TerminalNode INFO() { return getToken(PostgreSQLParser.INFO, 0); }
		public TerminalNode NOTICE() { return getToken(PostgreSQLParser.NOTICE, 0); }
		public TerminalNode WARNING() { return getToken(PostgreSQLParser.WARNING, 0); }
		public TerminalNode EXCEPTION() { return getToken(PostgreSQLParser.EXCEPTION, 0); }
		public Opt_stmt_raise_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_stmt_raise_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_stmt_raise_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_stmt_raise_level(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_stmt_raise_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_stmt_raise_levelContext opt_stmt_raise_level() throws RecognitionException {
		Opt_stmt_raise_levelContext _localctx = new Opt_stmt_raise_levelContext(_ctx, getState());
		enterRule(_localctx, 1488, RULE_opt_stmt_raise_level);
		try {
			setState(11470);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11464);
				match(DEBUG);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11465);
				match(LOG);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11466);
				match(INFO);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(11467);
				match(NOTICE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(11468);
				match(WARNING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(11469);
				match(EXCEPTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_raise_listContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_raise_listContext opt_raise_list() {
			return getRuleContext(Opt_raise_listContext.class,0);
		}
		public Opt_raise_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_listContext opt_raise_list() throws RecognitionException {
		return opt_raise_list(0);
	}

	private Opt_raise_listContext opt_raise_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_raise_listContext _localctx = new Opt_raise_listContext(_ctx, _parentState);
		Opt_raise_listContext _prevctx = _localctx;
		int _startState = 1490;
		enterRecursionRule(_localctx, 1490, RULE_opt_raise_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(11475);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
			case 1:
				{
				}
				break;
			case 2:
				{
				setState(11473);
				match(COMMA);
				setState(11474);
				a_expr(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(11482);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,595,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_raise_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opt_raise_list);
					setState(11477);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(11478);
					match(COMMA);
					setState(11479);
					a_expr(0);
					}
					} 
				}
				setState(11484);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,595,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_raise_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Opt_raise_using_elem_listContext opt_raise_using_elem_list() {
			return getRuleContext(Opt_raise_using_elem_listContext.class,0);
		}
		public Opt_raise_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_usingContext opt_raise_using() throws RecognitionException {
		Opt_raise_usingContext _localctx = new Opt_raise_usingContext(_ctx, getState());
		enterRule(_localctx, 1492, RULE_opt_raise_using);
		try {
			setState(11488);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(11486);
				match(USING);
				setState(11487);
				opt_raise_using_elem_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_raise_using_elemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_raise_using_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_using_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_using_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_using_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_using_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_using_elemContext opt_raise_using_elem() throws RecognitionException {
		Opt_raise_using_elemContext _localctx = new Opt_raise_using_elemContext(_ctx, getState());
		enterRule(_localctx, 1494, RULE_opt_raise_using_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11490);
			identifier();
			setState(11491);
			match(EQUAL);
			setState(11492);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_raise_using_elem_listContext extends ParserRuleContext {
		public Opt_raise_using_elemContext opt_raise_using_elem() {
			return getRuleContext(Opt_raise_using_elemContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Opt_raise_using_elem_listContext opt_raise_using_elem_list() {
			return getRuleContext(Opt_raise_using_elem_listContext.class,0);
		}
		public Opt_raise_using_elem_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_using_elem_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_using_elem_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_using_elem_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_using_elem_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_using_elem_listContext opt_raise_using_elem_list() throws RecognitionException {
		Opt_raise_using_elem_listContext _localctx = new Opt_raise_using_elem_listContext(_ctx, getState());
		enterRule(_localctx, 1496, RULE_opt_raise_using_elem_list);
		try {
			setState(11499);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11494);
				opt_raise_using_elem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11495);
				opt_raise_using_elem();
				setState(11496);
				match(COMMA);
				setState(11497);
				opt_raise_using_elem_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_assertContext extends ParserRuleContext {
		public TerminalNode ASSERT() { return getToken(PostgreSQLParser.ASSERT, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_stmt_assert_messageContext opt_stmt_assert_message() {
			return getRuleContext(Opt_stmt_assert_messageContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_assertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_assert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_assert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_assert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_assert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_assertContext stmt_assert() throws RecognitionException {
		Stmt_assertContext _localctx = new Stmt_assertContext(_ctx, getState());
		enterRule(_localctx, 1498, RULE_stmt_assert);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11501);
			match(ASSERT);
			setState(11502);
			sql_expression();
			setState(11503);
			opt_stmt_assert_message();
			setState(11504);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_stmt_assert_messageContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_stmt_assert_messageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_stmt_assert_message; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_stmt_assert_message(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_stmt_assert_message(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_stmt_assert_message(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_stmt_assert_messageContext opt_stmt_assert_message() throws RecognitionException {
		Opt_stmt_assert_messageContext _localctx = new Opt_stmt_assert_messageContext(_ctx, getState());
		enterRule(_localctx, 1500, RULE_opt_stmt_assert_message);
		try {
			setState(11509);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COMMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(11507);
				match(COMMA);
				setState(11508);
				sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_bodyContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(PostgreSQLParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PostgreSQLParser.LOOP, i);
		}
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Loop_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLoop_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLoop_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLoop_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_bodyContext loop_body() throws RecognitionException {
		Loop_bodyContext _localctx = new Loop_bodyContext(_ctx, getState());
		enterRule(_localctx, 1502, RULE_loop_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11511);
			match(LOOP);
			setState(11512);
			proc_sect(0);
			setState(11513);
			match(END_P);
			setState(11514);
			match(LOOP);
			setState(11515);
			opt_label();
			setState(11516);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_execsqlContext extends ParserRuleContext {
		public Make_execsql_stmtContext make_execsql_stmt() {
			return getRuleContext(Make_execsql_stmtContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_execsqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_execsql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_execsql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_execsql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_execsql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_execsqlContext stmt_execsql() throws RecognitionException {
		Stmt_execsqlContext _localctx = new Stmt_execsqlContext(_ctx, getState());
		enterRule(_localctx, 1504, RULE_stmt_execsql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11518);
			make_execsql_stmt();
			setState(11519);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_dynexecuteContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Opt_execute_intoContext opt_execute_into() {
			return getRuleContext(Opt_execute_intoContext.class,0);
		}
		public Opt_execute_usingContext opt_execute_using() {
			return getRuleContext(Opt_execute_usingContext.class,0);
		}
		public Stmt_dynexecuteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_dynexecute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_dynexecute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_dynexecute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_dynexecute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_dynexecuteContext stmt_dynexecute() throws RecognitionException {
		Stmt_dynexecuteContext _localctx = new Stmt_dynexecuteContext(_ctx, getState());
		enterRule(_localctx, 1506, RULE_stmt_dynexecute);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11521);
			match(EXECUTE);
			setState(11522);
			a_expr(0);
			setState(11530);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
			case 1:
				{
				setState(11523);
				opt_execute_into();
				setState(11524);
				opt_execute_using();
				}
				break;
			case 2:
				{
				setState(11526);
				opt_execute_using();
				setState(11527);
				opt_execute_into();
				}
				break;
			case 3:
				{
				}
				break;
			}
			setState(11532);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_execute_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Opt_execute_using_listContext opt_execute_using_list() {
			return getRuleContext(Opt_execute_using_listContext.class,0);
		}
		public Opt_execute_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_execute_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_execute_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_execute_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_execute_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_execute_usingContext opt_execute_using() throws RecognitionException {
		Opt_execute_usingContext _localctx = new Opt_execute_usingContext(_ctx, getState());
		enterRule(_localctx, 1508, RULE_opt_execute_using);
		try {
			setState(11537);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(11535);
				match(USING);
				setState(11536);
				opt_execute_using_list(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_execute_using_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_execute_using_listContext opt_execute_using_list() {
			return getRuleContext(Opt_execute_using_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Opt_execute_using_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_execute_using_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_execute_using_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_execute_using_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_execute_using_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_execute_using_listContext opt_execute_using_list() throws RecognitionException {
		return opt_execute_using_list(0);
	}

	private Opt_execute_using_listContext opt_execute_using_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_execute_using_listContext _localctx = new Opt_execute_using_listContext(_ctx, _parentState);
		Opt_execute_using_listContext _prevctx = _localctx;
		int _startState = 1510;
		enterRecursionRule(_localctx, 1510, RULE_opt_execute_using_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(11540);
			a_expr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(11547);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,601,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_execute_using_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opt_execute_using_list);
					setState(11542);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(11543);
					match(COMMA);
					setState(11544);
					a_expr(0);
					}
					} 
				}
				setState(11549);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,601,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_execute_intoContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public Opt_execute_intoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_execute_into; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_execute_into(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_execute_into(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_execute_into(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_execute_intoContext opt_execute_into() throws RecognitionException {
		Opt_execute_intoContext _localctx = new Opt_execute_intoContext(_ctx, getState());
		enterRule(_localctx, 1512, RULE_opt_execute_into);
		try {
			setState(11556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11551);
				match(INTO);
				setState(11552);
				match(STRICT_P);
				setState(11553);
				into_target();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11554);
				match(INTO);
				setState(11555);
				into_target();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_openContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PostgreSQLParser.OPEN, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public Opt_scroll_optionContext opt_scroll_option() {
			return getRuleContext(Opt_scroll_optionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_open_usingContext opt_open_using() {
			return getRuleContext(Opt_open_usingContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Opt_open_bound_listContext opt_open_bound_list() {
			return getRuleContext(Opt_open_bound_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Stmt_openContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_open; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_open(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_open(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_open(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_openContext stmt_open() throws RecognitionException {
		Stmt_openContext _localctx = new Stmt_openContext(_ctx, getState());
		enterRule(_localctx, 1514, RULE_stmt_open);
		try {
			setState(11583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11558);
				match(OPEN);
				setState(11559);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11560);
				match(OPEN);
				setState(11561);
				cursor_variable();
				setState(11562);
				opt_scroll_option();
				setState(11563);
				match(FOR);
				setState(11564);
				selectstmt();
				setState(11565);
				match(SEMI);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11567);
				match(OPEN);
				setState(11568);
				cursor_variable();
				setState(11569);
				opt_scroll_option();
				setState(11570);
				match(FOR);
				setState(11571);
				match(EXECUTE);
				setState(11572);
				sql_expression();
				setState(11573);
				opt_open_using();
				setState(11574);
				match(SEMI);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11576);
				match(OPEN);
				setState(11577);
				colid();
				setState(11578);
				match(OPEN_PAREN);
				setState(11579);
				opt_open_bound_list(0);
				setState(11580);
				match(CLOSE_PAREN);
				setState(11581);
				match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_open_bound_list_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode COLON_EQUALS() { return getToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_open_bound_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_open_bound_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_open_bound_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_open_bound_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_open_bound_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_open_bound_list_itemContext opt_open_bound_list_item() throws RecognitionException {
		Opt_open_bound_list_itemContext _localctx = new Opt_open_bound_list_itemContext(_ctx, getState());
		enterRule(_localctx, 1516, RULE_opt_open_bound_list_item);
		try {
			setState(11590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11585);
				colid();
				setState(11586);
				match(COLON_EQUALS);
				setState(11587);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11589);
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_open_bound_listContext extends ParserRuleContext {
		public Opt_open_bound_list_itemContext opt_open_bound_list_item() {
			return getRuleContext(Opt_open_bound_list_itemContext.class,0);
		}
		public Opt_open_bound_listContext opt_open_bound_list() {
			return getRuleContext(Opt_open_bound_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Opt_open_bound_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_open_bound_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_open_bound_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_open_bound_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_open_bound_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_open_bound_listContext opt_open_bound_list() throws RecognitionException {
		return opt_open_bound_list(0);
	}

	private Opt_open_bound_listContext opt_open_bound_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_open_bound_listContext _localctx = new Opt_open_bound_listContext(_ctx, _parentState);
		Opt_open_bound_listContext _prevctx = _localctx;
		int _startState = 1518;
		enterRecursionRule(_localctx, 1518, RULE_opt_open_bound_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(11593);
			opt_open_bound_list_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(11600);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,605,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_open_bound_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opt_open_bound_list);
					setState(11595);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(11596);
					match(COMMA);
					setState(11597);
					opt_open_bound_list_item();
					}
					} 
				}
				setState(11602);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,605,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_open_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_open_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_open_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_open_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_open_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_open_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_open_usingContext opt_open_using() throws RecognitionException {
		Opt_open_usingContext _localctx = new Opt_open_usingContext(_ctx, getState());
		enterRule(_localctx, 1520, RULE_opt_open_using);
		try {
			setState(11606);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(11604);
				match(USING);
				setState(11605);
				expr_list(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_expression_listContext extends ParserRuleContext {
		public List<Sql_expressionContext> sql_expression() {
			return getRuleContexts(Sql_expressionContext.class);
		}
		public Sql_expressionContext sql_expression(int i) {
			return getRuleContext(Sql_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Sql_expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSql_expression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSql_expression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSql_expression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_expression_listContext sql_expression_list() throws RecognitionException {
		Sql_expression_listContext _localctx = new Sql_expression_listContext(_ctx, getState());
		enterRule(_localctx, 1522, RULE_sql_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11608);
			sql_expression();
			setState(11613);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(11609);
				match(COMMA);
				setState(11610);
				sql_expression();
				}
				}
				setState(11615);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_scroll_optionContext extends ParserRuleContext {
		public Opt_scroll_option_noContext opt_scroll_option_no() {
			return getRuleContext(Opt_scroll_option_noContext.class,0);
		}
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public Opt_scroll_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_scroll_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_scroll_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_scroll_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_scroll_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_scroll_optionContext opt_scroll_option() throws RecognitionException {
		Opt_scroll_optionContext _localctx = new Opt_scroll_optionContext(_ctx, getState());
		enterRule(_localctx, 1524, RULE_opt_scroll_option);
		try {
			setState(11620);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
			case SCROLL:
				enterOuterAlt(_localctx, 2);
				{
				setState(11617);
				opt_scroll_option_no();
				setState(11618);
				match(SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_scroll_option_noContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_scroll_option_noContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_scroll_option_no; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_scroll_option_no(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_scroll_option_no(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_scroll_option_no(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_scroll_option_noContext opt_scroll_option_no() throws RecognitionException {
		Opt_scroll_option_noContext _localctx = new Opt_scroll_option_noContext(_ctx, getState());
		enterRule(_localctx, 1526, RULE_opt_scroll_option_no);
		try {
			setState(11624);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCROLL:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(11623);
				match(NO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_fetchContext extends ParserRuleContext {
		public Opt_fetch_directionContext direction;
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public Opt_cursor_fromContext opt_cursor_from() {
			return getRuleContext(Opt_cursor_fromContext.class,0);
		}
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Opt_fetch_directionContext opt_fetch_direction() {
			return getRuleContext(Opt_fetch_directionContext.class,0);
		}
		public Stmt_fetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_fetch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_fetch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_fetch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_fetch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_fetchContext stmt_fetch() throws RecognitionException {
		Stmt_fetchContext _localctx = new Stmt_fetchContext(_ctx, getState());
		enterRule(_localctx, 1528, RULE_stmt_fetch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11626);
			match(FETCH);
			setState(11627);
			((Stmt_fetchContext)_localctx).direction = opt_fetch_direction();
			setState(11628);
			opt_cursor_from();
			setState(11629);
			cursor_variable();
			setState(11630);
			match(INTO);
			setState(11631);
			into_target();
			setState(11632);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_targetContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Into_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInto_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInto_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInto_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_targetContext into_target() throws RecognitionException {
		Into_targetContext _localctx = new Into_targetContext(_ctx, getState());
		enterRule(_localctx, 1530, RULE_into_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11634);
			expr_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_cursor_fromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Opt_cursor_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_cursor_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_cursor_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_cursor_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_cursor_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_cursor_fromContext opt_cursor_from() throws RecognitionException {
		Opt_cursor_fromContext _localctx = new Opt_cursor_fromContext(_ctx, getState());
		enterRule(_localctx, 1532, RULE_opt_cursor_from);
		try {
			setState(11639);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARAM:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				setState(11637);
				match(FROM);
				}
				break;
			case IN_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(11638);
				match(IN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_fetch_directionContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public Opt_fetch_directionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_fetch_direction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_fetch_direction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_fetch_direction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_fetch_direction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fetch_directionContext opt_fetch_direction() throws RecognitionException {
		Opt_fetch_directionContext _localctx = new Opt_fetch_directionContext(_ctx, getState());
		enterRule(_localctx, 1534, RULE_opt_fetch_direction);
		try {
			setState(11663);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11643);
				match(NEXT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11644);
				match(PRIOR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11645);
				match(FIRST_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(11646);
				match(LAST_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(11647);
				match(ABSOLUTE_P);
				setState(11648);
				a_expr(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(11649);
				match(RELATIVE_P);
				setState(11650);
				a_expr(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(11651);
				a_expr(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(11652);
				match(ALL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(11653);
				match(FORWARD);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(11654);
				match(FORWARD);
				setState(11655);
				a_expr(0);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(11656);
				match(FORWARD);
				setState(11657);
				match(ALL);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(11658);
				match(BACKWARD);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(11659);
				match(BACKWARD);
				setState(11660);
				a_expr(0);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(11661);
				match(BACKWARD);
				setState(11662);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_moveContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public Opt_fetch_directionContext opt_fetch_direction() {
			return getRuleContext(Opt_fetch_directionContext.class,0);
		}
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_moveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_move; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_move(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_move(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_move(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_moveContext stmt_move() throws RecognitionException {
		Stmt_moveContext _localctx = new Stmt_moveContext(_ctx, getState());
		enterRule(_localctx, 1536, RULE_stmt_move);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11665);
			match(MOVE);
			setState(11666);
			opt_fetch_direction();
			setState(11667);
			cursor_variable();
			setState(11668);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_closeContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_closeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_close; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_close(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_close(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_close(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_closeContext stmt_close() throws RecognitionException {
		Stmt_closeContext _localctx = new Stmt_closeContext(_ctx, getState());
		enterRule(_localctx, 1538, RULE_stmt_close);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11670);
			match(CLOSE);
			setState(11671);
			cursor_variable();
			setState(11672);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_nullContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_nullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_null; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_null(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_null(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_null(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_nullContext stmt_null() throws RecognitionException {
		Stmt_nullContext _localctx = new Stmt_nullContext(_ctx, getState());
		enterRule(_localctx, 1540, RULE_stmt_null);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11674);
			match(NULL_P);
			setState(11675);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_commitContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
			return getRuleContext(Plsql_opt_transaction_chainContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_commitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_commit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_commit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_commit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_commit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_commitContext stmt_commit() throws RecognitionException {
		Stmt_commitContext _localctx = new Stmt_commitContext(_ctx, getState());
		enterRule(_localctx, 1542, RULE_stmt_commit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11677);
			match(COMMIT);
			setState(11678);
			plsql_opt_transaction_chain();
			setState(11679);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_rollbackContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
			return getRuleContext(Plsql_opt_transaction_chainContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_rollbackContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_rollback; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_rollback(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_rollback(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_rollback(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_rollbackContext stmt_rollback() throws RecognitionException {
		Stmt_rollbackContext _localctx = new Stmt_rollbackContext(_ctx, getState());
		enterRule(_localctx, 1544, RULE_stmt_rollback);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11681);
			match(ROLLBACK);
			setState(11682);
			plsql_opt_transaction_chain();
			setState(11683);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Plsql_opt_transaction_chainContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Plsql_opt_transaction_chainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsql_opt_transaction_chain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsql_opt_transaction_chain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsql_opt_transaction_chain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsql_opt_transaction_chain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() throws RecognitionException {
		Plsql_opt_transaction_chainContext _localctx = new Plsql_opt_transaction_chainContext(_ctx, getState());
		enterRule(_localctx, 1546, RULE_plsql_opt_transaction_chain);
		try {
			setState(11691);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11685);
				match(AND);
				setState(11686);
				match(CHAIN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11687);
				match(AND);
				setState(11688);
				match(NO);
				setState(11689);
				match(CHAIN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_setContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Stmt_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_set(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_set(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_setContext stmt_set() throws RecognitionException {
		Stmt_setContext _localctx = new Stmt_setContext(_ctx, getState());
		enterRule(_localctx, 1548, RULE_stmt_set);
		try {
			setState(11706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11693);
				match(SET);
				setState(11694);
				any_name();
				setState(11695);
				match(TO);
				setState(11696);
				match(DEFAULT);
				setState(11697);
				match(SEMI);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11699);
				match(RESET);
				setState(11700);
				any_name();
				setState(11701);
				match(SEMI);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11703);
				match(RESET);
				setState(11704);
				match(ALL);
				setState(11705);
				match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_variableContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public Cursor_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCursor_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCursor_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCursor_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_variableContext cursor_variable() throws RecognitionException {
		Cursor_variableContext _localctx = new Cursor_variableContext(_ctx, getState());
		enterRule(_localctx, 1550, RULE_cursor_variable);
		try {
			setState(11710);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(11708);
				colid();
				}
				break;
			case PARAM:
				enterOuterAlt(_localctx, 2);
				{
				setState(11709);
				match(PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_sectContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(PostgreSQLParser.EXCEPTION, 0); }
		public Proc_exceptionsContext proc_exceptions() {
			return getRuleContext(Proc_exceptionsContext.class,0);
		}
		public Exception_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_sect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterException_sect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitException_sect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitException_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_sectContext exception_sect() throws RecognitionException {
		Exception_sectContext _localctx = new Exception_sectContext(_ctx, getState());
		enterRule(_localctx, 1552, RULE_exception_sect);
		try {
			setState(11715);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case END_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case EXCEPTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(11713);
				match(EXCEPTION);
				setState(11714);
				proc_exceptions(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_exceptionsContext extends ParserRuleContext {
		public Proc_exceptionContext proc_exception() {
			return getRuleContext(Proc_exceptionContext.class,0);
		}
		public Proc_exceptionsContext proc_exceptions() {
			return getRuleContext(Proc_exceptionsContext.class,0);
		}
		public Proc_exceptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_exceptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_exceptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_exceptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_exceptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_exceptionsContext proc_exceptions() throws RecognitionException {
		return proc_exceptions(0);
	}

	private Proc_exceptionsContext proc_exceptions(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Proc_exceptionsContext _localctx = new Proc_exceptionsContext(_ctx, _parentState);
		Proc_exceptionsContext _prevctx = _localctx;
		int _startState = 1554;
		enterRecursionRule(_localctx, 1554, RULE_proc_exceptions, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(11718);
			proc_exception();
			}
			_ctx.stop = _input.LT(-1);
			setState(11724);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,616,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Proc_exceptionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_proc_exceptions);
					setState(11720);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(11721);
					proc_exception();
					}
					} 
				}
				setState(11726);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,616,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Proc_exceptionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Proc_conditionsContext proc_conditions() {
			return getRuleContext(Proc_conditionsContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Proc_exceptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_exception; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_exception(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_exception(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_exception(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_exceptionContext proc_exception() throws RecognitionException {
		Proc_exceptionContext _localctx = new Proc_exceptionContext(_ctx, getState());
		enterRule(_localctx, 1556, RULE_proc_exception);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11727);
			match(WHEN);
			setState(11728);
			proc_conditions(0);
			setState(11729);
			match(THEN);
			setState(11730);
			proc_sect(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_conditionsContext extends ParserRuleContext {
		public Proc_conditionContext proc_condition() {
			return getRuleContext(Proc_conditionContext.class,0);
		}
		public Proc_conditionsContext proc_conditions() {
			return getRuleContext(Proc_conditionsContext.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public Proc_conditionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_conditions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_conditions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_conditions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_conditions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_conditionsContext proc_conditions() throws RecognitionException {
		return proc_conditions(0);
	}

	private Proc_conditionsContext proc_conditions(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Proc_conditionsContext _localctx = new Proc_conditionsContext(_ctx, _parentState);
		Proc_conditionsContext _prevctx = _localctx;
		int _startState = 1558;
		enterRecursionRule(_localctx, 1558, RULE_proc_conditions, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(11733);
			proc_condition();
			}
			_ctx.stop = _input.LT(-1);
			setState(11740);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,617,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Proc_conditionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_proc_conditions);
					setState(11735);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(11736);
					match(OR);
					setState(11737);
					proc_condition();
					}
					} 
				}
				setState(11742);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,617,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Proc_conditionContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(PostgreSQLParser.SQLSTATE, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Proc_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_conditionContext proc_condition() throws RecognitionException {
		Proc_conditionContext _localctx = new Proc_conditionContext(_ctx, getState());
		enterRule(_localctx, 1560, RULE_proc_condition);
		try {
			setState(11746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11743);
				any_identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11744);
				match(SQLSTATE);
				setState(11745);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_block_labelContext extends ParserRuleContext {
		public Label_declContext label_decl() {
			return getRuleContext(Label_declContext.class,0);
		}
		public Opt_block_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_block_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_block_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_block_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_block_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_block_labelContext opt_block_label() throws RecognitionException {
		Opt_block_labelContext _localctx = new Opt_block_labelContext(_ctx, getState());
		enterRule(_localctx, 1562, RULE_opt_block_label);
		try {
			setState(11750);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN_P:
			case DECLARE:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LESS_LESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(11749);
				label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_loop_labelContext extends ParserRuleContext {
		public Label_declContext label_decl() {
			return getRuleContext(Label_declContext.class,0);
		}
		public Opt_loop_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_loop_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_loop_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_loop_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_loop_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_loop_labelContext opt_loop_label() throws RecognitionException {
		Opt_loop_labelContext _localctx = new Opt_loop_labelContext(_ctx, getState());
		enterRule(_localctx, 1564, RULE_opt_loop_label);
		try {
			setState(11754);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
			case WHILE:
			case FOREACH:
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LESS_LESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(11753);
				label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_labelContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public Opt_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_labelContext opt_label() throws RecognitionException {
		Opt_labelContext _localctx = new Opt_labelContext(_ctx, getState());
		enterRule(_localctx, 1566, RULE_opt_label);
		try {
			setState(11758);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case SEMI:
			case WHEN:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(11757);
				any_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_exitcondContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Expr_until_semiContext expr_until_semi() {
			return getRuleContext(Expr_until_semiContext.class,0);
		}
		public Opt_exitcondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_exitcond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_exitcond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_exitcond(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_exitcond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_exitcondContext opt_exitcond() throws RecognitionException {
		Opt_exitcondContext _localctx = new Opt_exitcondContext(_ctx, getState());
		enterRule(_localctx, 1568, RULE_opt_exitcond);
		try {
			setState(11763);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				setState(11760);
				match(SEMI);
				}
				break;
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(11761);
				match(WHEN);
				setState(11762);
				expr_until_semi();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_identifierContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Any_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_identifierContext any_identifier() throws RecognitionException {
		Any_identifierContext _localctx = new Any_identifierContext(_ctx, getState());
		enterRule(_localctx, 1570, RULE_any_identifier);
		try {
			setState(11767);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11765);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11766);
				plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Plsql_unreserved_keywordContext extends ParserRuleContext {
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public TerminalNode ALIAS() { return getToken(PostgreSQLParser.ALIAS, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode ASSERT() { return getToken(PostgreSQLParser.ASSERT, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode CONSTANT() { return getToken(PostgreSQLParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public TerminalNode DEBUG() { return getToken(PostgreSQLParser.DEBUG, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode DUMP() { return getToken(PostgreSQLParser.DUMP, 0); }
		public TerminalNode ELSIF() { return getToken(PostgreSQLParser.ELSIF, 0); }
		public TerminalNode ERROR() { return getToken(PostgreSQLParser.ERROR, 0); }
		public TerminalNode EXCEPTION() { return getToken(PostgreSQLParser.EXCEPTION, 0); }
		public TerminalNode EXIT() { return getToken(PostgreSQLParser.EXIT, 0); }
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode GET() { return getToken(PostgreSQLParser.GET, 0); }
		public TerminalNode INFO() { return getToken(PostgreSQLParser.INFO, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode LOG() { return getToken(PostgreSQLParser.LOG, 0); }
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode NOTICE() { return getToken(PostgreSQLParser.NOTICE, 0); }
		public TerminalNode OPEN() { return getToken(PostgreSQLParser.OPEN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode PERFORM() { return getToken(PostgreSQLParser.PERFORM, 0); }
		public TerminalNode PRINT_STRICT_PARAMS() { return getToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode QUERY() { return getToken(PostgreSQLParser.QUERY, 0); }
		public TerminalNode RAISE() { return getToken(PostgreSQLParser.RAISE, 0); }
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode RETURN() { return getToken(PostgreSQLParser.RETURN, 0); }
		public TerminalNode REVERSE() { return getToken(PostgreSQLParser.REVERSE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode ROWTYPE() { return getToken(PostgreSQLParser.ROWTYPE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SLICE() { return getToken(PostgreSQLParser.SLICE, 0); }
		public TerminalNode SQLSTATE() { return getToken(PostgreSQLParser.SQLSTATE, 0); }
		public TerminalNode STACKED() { return getToken(PostgreSQLParser.STACKED, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode USE_COLUMN() { return getToken(PostgreSQLParser.USE_COLUMN, 0); }
		public TerminalNode USE_VARIABLE() { return getToken(PostgreSQLParser.USE_VARIABLE, 0); }
		public TerminalNode VARIABLE_CONFLICT() { return getToken(PostgreSQLParser.VARIABLE_CONFLICT, 0); }
		public TerminalNode WARNING() { return getToken(PostgreSQLParser.WARNING, 0); }
		public TerminalNode OUTER_P() { return getToken(PostgreSQLParser.OUTER_P, 0); }
		public Plsql_unreserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsql_unreserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsql_unreserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsql_unreserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsql_unreserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Plsql_unreserved_keywordContext plsql_unreserved_keyword() throws RecognitionException {
		Plsql_unreserved_keywordContext _localctx = new Plsql_unreserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1572, RULE_plsql_unreserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11769);
			_la = _input.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (AND - 69)) | (1L << (ARRAY - 69)) | (1L << (COLLATE - 69)) | (1L << (COLUMN - 69)) | (1L << (CONSTRAINT - 69)) | (1L << (DEFAULT - 69)) | (1L << (DO - 69)) | (1L << (FETCH - 69)) | (1L << (TABLE - 69)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (IS - 152)) | (1L << (OUTER_P - 152)) | (1L << (ABSOLUTE_P - 152)) | (1L << (BACKWARD - 152)) | (1L << (CHAIN - 152)) | (1L << (CLOSE - 152)) | (1L << (COMMIT - 152)) | (1L << (CONTINUE_P - 152)) | (1L << (CURSOR - 152)))) != 0) || ((((_la - 243)) & ~0x3f) == 0 && ((1L << (_la - 243)) & ((1L << (FIRST_P - 243)) | (1L << (FORWARD - 243)) | (1L << (INSERT - 243)) | (1L << (LAST_P - 243)) | (1L << (MOVE - 243)) | (1L << (NEXT - 243)) | (1L << (NO - 243)) | (1L << (OPTION - 243)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRIOR - 320)) | (1L << (RELATIVE_P - 320)) | (1L << (RESET - 320)) | (1L << (ROLLBACK - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCROLL - 320)) | (1L << (SET - 320)))) != 0) || _la==TYPE_P || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (CALL - 460)) | (1L << (CURRENT_P - 460)) | (1L << (ROWTYPE - 460)) | (1L << (DUMP - 460)) | (1L << (PRINT_STRICT_PARAMS - 460)) | (1L << (VARIABLE_CONFLICT - 460)) | (1L << (ERROR - 460)) | (1L << (USE_VARIABLE - 460)) | (1L << (USE_COLUMN - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (ALIAS - 524)) | (1L << (CONSTANT - 524)) | (1L << (PERFORM - 524)) | (1L << (GET - 524)) | (1L << (DIAGNOSTICS - 524)) | (1L << (STACKED - 524)) | (1L << (ELSIF - 524)) | (1L << (REVERSE - 524)) | (1L << (SLICE - 524)) | (1L << (EXIT - 524)) | (1L << (RETURN - 524)) | (1L << (QUERY - 524)) | (1L << (RAISE - 524)) | (1L << (SQLSTATE - 524)) | (1L << (DEBUG - 524)) | (1L << (LOG - 524)) | (1L << (INFO - 524)) | (1L << (NOTICE - 524)) | (1L << (WARNING - 524)) | (1L << (EXCEPTION - 524)) | (1L << (ASSERT - 524)) | (1L << (OPEN - 524)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_expressionContext extends ParserRuleContext {
		public Opt_target_listContext opt_target_list() {
			return getRuleContext(Opt_target_listContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_clauseContext group_clause() {
			return getRuleContext(Group_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public Sql_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSql_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSql_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSql_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_expressionContext sql_expression() throws RecognitionException {
		Sql_expressionContext _localctx = new Sql_expressionContext(_ctx, getState());
		enterRule(_localctx, 1574, RULE_sql_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11771);
			opt_target_list();
			setState(11772);
			into_clause();
			setState(11773);
			from_clause();
			setState(11774);
			where_clause();
			setState(11775);
			group_clause();
			setState(11776);
			having_clause();
			setState(11777);
			window_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_thenContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Expr_until_thenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_then; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_then(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_then(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_then(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_thenContext expr_until_then() throws RecognitionException {
		Expr_until_thenContext _localctx = new Expr_until_thenContext(_ctx, getState());
		enterRule(_localctx, 1576, RULE_expr_until_then);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11779);
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_semiContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Expr_until_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_semiContext expr_until_semi() throws RecognitionException {
		Expr_until_semiContext _localctx = new Expr_until_semiContext(_ctx, getState());
		enterRule(_localctx, 1578, RULE_expr_until_semi);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11781);
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_rightbracketContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_until_rightbracketContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_rightbracket; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_rightbracket(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_rightbracket(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_rightbracket(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_rightbracketContext expr_until_rightbracket() throws RecognitionException {
		Expr_until_rightbracketContext _localctx = new Expr_until_rightbracketContext(_ctx, getState());
		enterRule(_localctx, 1580, RULE_expr_until_rightbracket);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11783);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_loopContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_until_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_loopContext expr_until_loop() throws RecognitionException {
		Expr_until_loopContext _localctx = new Expr_until_loopContext(_ctx, getState());
		enterRule(_localctx, 1582, RULE_expr_until_loop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11785);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Make_execsql_stmtContext extends ParserRuleContext {
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public Opt_returning_clause_intoContext opt_returning_clause_into() {
			return getRuleContext(Opt_returning_clause_intoContext.class,0);
		}
		public Make_execsql_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_make_execsql_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMake_execsql_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMake_execsql_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMake_execsql_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Make_execsql_stmtContext make_execsql_stmt() throws RecognitionException {
		Make_execsql_stmtContext _localctx = new Make_execsql_stmtContext(_ctx, getState());
		enterRule(_localctx, 1584, RULE_make_execsql_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11787);
			stmt();
			setState(11788);
			opt_returning_clause_into();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_returning_clause_intoContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Opt_strictContext opt_strict() {
			return getRuleContext(Opt_strictContext.class,0);
		}
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public Opt_returning_clause_intoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_returning_clause_into; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_returning_clause_into(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_returning_clause_into(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_returning_clause_into(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_returning_clause_intoContext opt_returning_clause_into() throws RecognitionException {
		Opt_returning_clause_intoContext _localctx = new Opt_returning_clause_intoContext(_ctx, getState());
		enterRule(_localctx, 1586, RULE_opt_returning_clause_into);
		try {
			setState(11795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(11790);
				match(INTO);
				setState(11791);
				opt_strict();
				setState(11792);
				into_target();
				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9:
			return optrolelist_sempred((OptrolelistContext)_localctx, predIndex);
		case 10:
			return alteroptrolelist_sempred((AlteroptrolelistContext)_localctx, predIndex);
		case 23:
			return optschemaeltlist_sempred((OptschemaeltlistContext)_localctx, predIndex);
		case 29:
			return var_name_sempred((Var_nameContext)_localctx, predIndex);
		case 30:
			return var_list_sempred((Var_listContext)_localctx, predIndex);
		case 49:
			return alter_table_cmds_sempred((Alter_table_cmdsContext)_localctx, predIndex);
		case 60:
			return reloption_list_sempred((Reloption_listContext)_localctx, predIndex);
		case 62:
			return alter_identity_column_option_list_sempred((Alter_identity_column_option_listContext)_localctx, predIndex);
		case 66:
			return hash_partbound_sempred((Hash_partboundContext)_localctx, predIndex);
		case 68:
			return alter_type_cmds_sempred((Alter_type_cmdsContext)_localctx, predIndex);
		case 76:
			return copy_opt_list_sempred((Copy_opt_listContext)_localctx, predIndex);
		case 81:
			return copy_generic_opt_list_sempred((Copy_generic_opt_listContext)_localctx, predIndex);
		case 84:
			return copy_generic_opt_arg_list_sempred((Copy_generic_opt_arg_listContext)_localctx, predIndex);
		case 90:
			return tableelementlist_sempred((TableelementlistContext)_localctx, predIndex);
		case 91:
			return typedtableelementlist_sempred((TypedtableelementlistContext)_localctx, predIndex);
		case 96:
			return colquallist_sempred((ColquallistContext)_localctx, predIndex);
		case 102:
			return tablelikeoptionlist_sempred((TablelikeoptionlistContext)_localctx, predIndex);
		case 108:
			return columnlist_sempred((ColumnlistContext)_localctx, predIndex);
		case 112:
			return exclusionconstraintlist_sempred((ExclusionconstraintlistContext)_localctx, predIndex);
		case 122:
			return part_params_sempred((Part_paramsContext)_localctx, predIndex);
		case 143:
			return seqoptlist_sempred((SeqoptlistContext)_localctx, predIndex);
		case 147:
			return numericonly_list_sempred((Numericonly_listContext)_localctx, predIndex);
		case 159:
			return create_extension_opt_list_sempred((Create_extension_opt_listContext)_localctx, predIndex);
		case 162:
			return alter_extension_opt_list_sempred((Alter_extension_opt_listContext)_localctx, predIndex);
		case 167:
			return fdw_options_sempred((Fdw_optionsContext)_localctx, predIndex);
		case 171:
			return generic_option_list_sempred((Generic_option_listContext)_localctx, predIndex);
		case 173:
			return alter_generic_option_list_sempred((Alter_generic_option_listContext)_localctx, predIndex);
		case 204:
			return triggerevents_sempred((TriggereventsContext)_localctx, predIndex);
		case 207:
			return triggertransitions_sempred((TriggertransitionsContext)_localctx, predIndex);
		case 217:
			return triggerfuncargs_sempred((TriggerfuncargsContext)_localctx, predIndex);
		case 220:
			return constraintattributespec_sempred((ConstraintattributespecContext)_localctx, predIndex);
		case 223:
			return event_trigger_when_list_sempred((Event_trigger_when_listContext)_localctx, predIndex);
		case 225:
			return event_trigger_value_list_sempred((Event_trigger_value_listContext)_localctx, predIndex);
		case 231:
			return def_list_sempred((Def_listContext)_localctx, predIndex);
		case 235:
			return old_aggr_list_sempred((Old_aggr_listContext)_localctx, predIndex);
		case 238:
			return enum_val_list_sempred((Enum_val_listContext)_localctx, predIndex);
		case 242:
			return opclass_item_list_sempred((Opclass_item_listContext)_localctx, predIndex);
		case 250:
			return opclass_drop_list_sempred((Opclass_drop_listContext)_localctx, predIndex);
		case 261:
			return any_name_list_sempred((Any_name_listContext)_localctx, predIndex);
		case 263:
			return attrs_sempred((AttrsContext)_localctx, predIndex);
		case 264:
			return type_name_list_sempred((Type_name_listContext)_localctx, predIndex);
		case 279:
			return privilege_list_sempred((Privilege_listContext)_localctx, predIndex);
		case 282:
			return grantee_list_sempred((Grantee_listContext)_localctx, predIndex);
		case 290:
			return defacloptionlist_sempred((DefacloptionlistContext)_localctx, predIndex);
		case 299:
			return index_params_sempred((Index_paramsContext)_localctx, predIndex);
		case 303:
			return index_including_params_sempred((Index_including_paramsContext)_localctx, predIndex);
		case 311:
			return func_args_list_sempred((Func_args_listContext)_localctx, predIndex);
		case 312:
			return function_with_argtypes_list_sempred((Function_with_argtypes_listContext)_localctx, predIndex);
		case 315:
			return func_args_with_defaults_list_sempred((Func_args_with_defaults_listContext)_localctx, predIndex);
		case 324:
			return aggr_args_list_sempred((Aggr_args_listContext)_localctx, predIndex);
		case 326:
			return aggregate_with_argtypes_list_sempred((Aggregate_with_argtypes_listContext)_localctx, predIndex);
		case 331:
			return transform_type_list_sempred((Transform_type_listContext)_localctx, predIndex);
		case 334:
			return table_func_column_list_sempred((Table_func_column_listContext)_localctx, predIndex);
		case 336:
			return alterfunc_opt_list_sempred((Alterfunc_opt_listContext)_localctx, predIndex);
		case 343:
			return operator_with_argtypes_list_sempred((Operator_with_argtypes_listContext)_localctx, predIndex);
		case 346:
			return dostmt_opt_list_sempred((Dostmt_opt_listContext)_localctx, predIndex);
		case 358:
			return reindex_option_list_sempred((Reindex_option_listContext)_localctx, predIndex);
		case 368:
			return operator_def_list_sempred((Operator_def_listContext)_localctx, predIndex);
		case 378:
			return publication_name_list_sempred((Publication_name_listContext)_localctx, predIndex);
		case 384:
			return ruleactionmulti_sempred((RuleactionmultiContext)_localctx, predIndex);
		case 396:
			return transaction_mode_list_sempred((Transaction_mode_listContext)_localctx, predIndex);
		case 404:
			return createdb_opt_items_sempred((Createdb_opt_itemsContext)_localctx, predIndex);
		case 411:
			return drop_option_list_sempred((Drop_option_listContext)_localctx, predIndex);
		case 426:
			return vac_analyze_option_list_sempred((Vac_analyze_option_listContext)_localctx, predIndex);
		case 437:
			return vacuum_relation_list_sempred((Vacuum_relation_listContext)_localctx, predIndex);
		case 441:
			return explain_option_list_sempred((Explain_option_listContext)_localctx, predIndex);
		case 455:
			return insert_column_list_sempred((Insert_column_listContext)_localctx, predIndex);
		case 468:
			return set_clause_list_sempred((Set_clause_listContext)_localctx, predIndex);
		case 471:
			return set_target_list_sempred((Set_target_listContext)_localctx, predIndex);
		case 474:
			return cursor_options_sempred((Cursor_optionsContext)_localctx, predIndex);
		case 480:
			return simple_select_sempred((Simple_selectContext)_localctx, predIndex);
		case 484:
			return cte_list_sempred((Cte_listContext)_localctx, predIndex);
		case 510:
			return group_by_list_sempred((Group_by_listContext)_localctx, predIndex);
		case 519:
			return for_locking_items_sempred((For_locking_itemsContext)_localctx, predIndex);
		case 523:
			return values_clause_sempred((Values_clauseContext)_localctx, predIndex);
		case 526:
			return table_ref_sempred((Table_refContext)_localctx, predIndex);
		case 534:
			return relation_expr_list_sempred((Relation_expr_listContext)_localctx, predIndex);
		case 540:
			return rowsfrom_list_sempred((Rowsfrom_listContext)_localctx, predIndex);
		case 546:
			return tablefuncelementlist_sempred((TablefuncelementlistContext)_localctx, predIndex);
		case 549:
			return xmltable_column_list_sempred((Xmltable_column_listContext)_localctx, predIndex);
		case 551:
			return xmltable_column_option_list_sempred((Xmltable_column_option_listContext)_localctx, predIndex);
		case 553:
			return xml_namespace_list_sempred((Xml_namespace_listContext)_localctx, predIndex);
		case 556:
			return opt_array_bounds_sempred((Opt_array_boundsContext)_localctx, predIndex);
		case 579:
			return a_expr_sempred((A_exprContext)_localctx, predIndex);
		case 581:
			return b_expr_sempred((B_exprContext)_localctx, predIndex);
		case 591:
			return xml_attribute_list_sempred((Xml_attribute_listContext)_localctx, predIndex);
		case 600:
			return window_definition_list_sempred((Window_definition_listContext)_localctx, predIndex);
		case 621:
			return expr_list_sempred((Expr_listContext)_localctx, predIndex);
		case 622:
			return func_arg_list_sempred((Func_arg_listContext)_localctx, predIndex);
		case 624:
			return type_list_sempred((Type_listContext)_localctx, predIndex);
		case 626:
			return array_expr_list_sempred((Array_expr_listContext)_localctx, predIndex);
		case 636:
			return when_clause_list_sempred((When_clause_listContext)_localctx, predIndex);
		case 643:
			return indirection_sempred((IndirectionContext)_localctx, predIndex);
		case 644:
			return opt_indirection_sempred((Opt_indirectionContext)_localctx, predIndex);
		case 649:
			return qualified_name_list_sempred((Qualified_name_listContext)_localctx, predIndex);
		case 651:
			return name_list_sempred((Name_listContext)_localctx, predIndex);
		case 667:
			return role_list_sempred((Role_listContext)_localctx, predIndex);
		case 679:
			return comp_options_sempred((Comp_optionsContext)_localctx, predIndex);
		case 688:
			return decl_stmts_sempred((Decl_stmtsContext)_localctx, predIndex);
		case 695:
			return decl_cursor_arglist_sempred((Decl_cursor_arglistContext)_localctx, predIndex);
		case 707:
			return proc_sect_sempred((Proc_sectContext)_localctx, predIndex);
		case 715:
			return getdiag_list_sempred((Getdiag_listContext)_localctx, predIndex);
		case 719:
			return assign_var_sempred((Assign_varContext)_localctx, predIndex);
		case 721:
			return stmt_elsifs_sempred((Stmt_elsifsContext)_localctx, predIndex);
		case 725:
			return case_when_list_sempred((Case_when_listContext)_localctx, predIndex);
		case 745:
			return opt_raise_list_sempred((Opt_raise_listContext)_localctx, predIndex);
		case 755:
			return opt_execute_using_list_sempred((Opt_execute_using_listContext)_localctx, predIndex);
		case 759:
			return opt_open_bound_list_sempred((Opt_open_bound_listContext)_localctx, predIndex);
		case 777:
			return proc_exceptions_sempred((Proc_exceptionsContext)_localctx, predIndex);
		case 779:
			return proc_conditions_sempred((Proc_conditionsContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean optrolelist_sempred(OptrolelistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alteroptrolelist_sempred(AlteroptrolelistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean optschemaeltlist_sempred(OptschemaeltlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean var_name_sempred(Var_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean var_list_sempred(Var_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alter_table_cmds_sempred(Alter_table_cmdsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean reloption_list_sempred(Reloption_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alter_identity_column_option_list_sempred(Alter_identity_column_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean hash_partbound_sempred(Hash_partboundContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alter_type_cmds_sempred(Alter_type_cmdsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean copy_opt_list_sempred(Copy_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean copy_generic_opt_list_sempred(Copy_generic_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean copy_generic_opt_arg_list_sempred(Copy_generic_opt_arg_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean tableelementlist_sempred(TableelementlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean typedtableelementlist_sempred(TypedtableelementlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean colquallist_sempred(ColquallistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean tablelikeoptionlist_sempred(TablelikeoptionlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return precpred(_ctx, 3);
		case 17:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean columnlist_sempred(ColumnlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean exclusionconstraintlist_sempred(ExclusionconstraintlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean part_params_sempred(Part_paramsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean seqoptlist_sempred(SeqoptlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean numericonly_list_sempred(Numericonly_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean create_extension_opt_list_sempred(Create_extension_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alter_extension_opt_list_sempred(Alter_extension_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean fdw_options_sempred(Fdw_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean generic_option_list_sempred(Generic_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alter_generic_option_list_sempred(Alter_generic_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean triggerevents_sempred(TriggereventsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean triggertransitions_sempred(TriggertransitionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean triggerfuncargs_sempred(TriggerfuncargsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean constraintattributespec_sempred(ConstraintattributespecContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean event_trigger_when_list_sempred(Event_trigger_when_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean event_trigger_value_list_sempred(Event_trigger_value_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean def_list_sempred(Def_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean old_aggr_list_sempred(Old_aggr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean enum_val_list_sempred(Enum_val_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean opclass_item_list_sempred(Opclass_item_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean opclass_drop_list_sempred(Opclass_drop_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean any_name_list_sempred(Any_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean attrs_sempred(AttrsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean type_name_list_sempred(Type_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean privilege_list_sempred(Privilege_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean grantee_list_sempred(Grantee_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean defacloptionlist_sempred(DefacloptionlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean index_params_sempred(Index_paramsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean index_including_params_sempred(Index_including_paramsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean func_args_list_sempred(Func_args_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean function_with_argtypes_list_sempred(Function_with_argtypes_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean func_args_with_defaults_list_sempred(Func_args_with_defaults_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean aggr_args_list_sempred(Aggr_args_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean aggregate_with_argtypes_list_sempred(Aggregate_with_argtypes_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean transform_type_list_sempred(Transform_type_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean table_func_column_list_sempred(Table_func_column_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alterfunc_opt_list_sempred(Alterfunc_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean operator_with_argtypes_list_sempred(Operator_with_argtypes_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean dostmt_opt_list_sempred(Dostmt_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean reindex_option_list_sempred(Reindex_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean operator_def_list_sempred(Operator_def_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean publication_name_list_sempred(Publication_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean ruleactionmulti_sempred(RuleactionmultiContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean transaction_mode_list_sempred(Transaction_mode_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61:
			return precpred(_ctx, 2);
		case 62:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean createdb_opt_items_sempred(Createdb_opt_itemsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean drop_option_list_sempred(Drop_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean vac_analyze_option_list_sempred(Vac_analyze_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean vacuum_relation_list_sempred(Vacuum_relation_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean explain_option_list_sempred(Explain_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean insert_column_list_sempred(Insert_column_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean set_clause_list_sempred(Set_clause_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean set_target_list_sempred(Set_target_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean cursor_options_sempred(Cursor_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71:
			return precpred(_ctx, 4);
		case 72:
			return precpred(_ctx, 3);
		case 73:
			return precpred(_ctx, 2);
		case 74:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean simple_select_sempred(Simple_selectContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean cte_list_sempred(Cte_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean group_by_list_sempred(Group_by_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 77:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean for_locking_items_sempred(For_locking_itemsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean values_clause_sempred(Values_clauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean table_ref_sempred(Table_refContext _localctx, int predIndex) {
		switch (predIndex) {
		case 80:
			return precpred(_ctx, 7);
		case 81:
			return precpred(_ctx, 4);
		case 82:
			return precpred(_ctx, 3);
		case 83:
			return precpred(_ctx, 6);
		case 84:
			return precpred(_ctx, 5);
		}
		return true;
	}
	private boolean relation_expr_list_sempred(Relation_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 85:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean rowsfrom_list_sempred(Rowsfrom_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 86:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean tablefuncelementlist_sempred(TablefuncelementlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 87:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean xmltable_column_list_sempred(Xmltable_column_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 88:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean xmltable_column_option_list_sempred(Xmltable_column_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 89:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean xml_namespace_list_sempred(Xml_namespace_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 90:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean opt_array_bounds_sempred(Opt_array_boundsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 91:
			return precpred(_ctx, 3);
		case 92:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean a_expr_sempred(A_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 93:
			return precpred(_ctx, 51);
		case 94:
			return precpred(_ctx, 49);
		case 95:
			return precpred(_ctx, 48);
		case 96:
			return precpred(_ctx, 47);
		case 97:
			return precpred(_ctx, 39);
		case 98:
			return precpred(_ctx, 38);
		case 99:
			return precpred(_ctx, 37);
		case 100:
			return precpred(_ctx, 36);
		case 101:
			return precpred(_ctx, 35);
		case 102:
			return precpred(_ctx, 23);
		case 103:
			return precpred(_ctx, 22);
		case 104:
			return precpred(_ctx, 11);
		case 105:
			return precpred(_ctx, 10);
		case 106:
			return precpred(_ctx, 9);
		case 107:
			return precpred(_ctx, 8);
		case 108:
			return precpred(_ctx, 53);
		case 109:
			return precpred(_ctx, 52);
		case 110:
			return precpred(_ctx, 45);
		case 111:
			return precpred(_ctx, 44);
		case 112:
			return precpred(_ctx, 43);
		case 113:
			return precpred(_ctx, 42);
		case 114:
			return precpred(_ctx, 41);
		case 115:
			return precpred(_ctx, 40);
		case 116:
			return precpred(_ctx, 34);
		case 117:
			return precpred(_ctx, 33);
		case 118:
			return precpred(_ctx, 32);
		case 119:
			return precpred(_ctx, 31);
		case 120:
			return precpred(_ctx, 29);
		case 121:
			return precpred(_ctx, 28);
		case 122:
			return precpred(_ctx, 27);
		case 123:
			return precpred(_ctx, 26);
		case 124:
			return precpred(_ctx, 25);
		case 125:
			return precpred(_ctx, 24);
		case 126:
			return precpred(_ctx, 21);
		case 127:
			return precpred(_ctx, 20);
		case 128:
			return precpred(_ctx, 19);
		case 129:
			return precpred(_ctx, 18);
		case 130:
			return precpred(_ctx, 17);
		case 131:
			return precpred(_ctx, 16);
		case 132:
			return precpred(_ctx, 15);
		case 133:
			return precpred(_ctx, 14);
		case 134:
			return precpred(_ctx, 7);
		case 135:
			return precpred(_ctx, 6);
		case 136:
			return precpred(_ctx, 5);
		case 137:
			return precpred(_ctx, 4);
		case 138:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean b_expr_sempred(B_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 139:
			return precpred(_ctx, 13);
		case 140:
			return precpred(_ctx, 12);
		case 141:
			return precpred(_ctx, 11);
		case 142:
			return precpred(_ctx, 10);
		case 143:
			return precpred(_ctx, 9);
		case 144:
			return precpred(_ctx, 6);
		case 145:
			return precpred(_ctx, 5);
		case 146:
			return precpred(_ctx, 15);
		case 147:
			return precpred(_ctx, 7);
		case 148:
			return precpred(_ctx, 4);
		case 149:
			return precpred(_ctx, 3);
		case 150:
			return precpred(_ctx, 2);
		case 151:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean xml_attribute_list_sempred(Xml_attribute_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 152:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean window_definition_list_sempred(Window_definition_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 153:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expr_list_sempred(Expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 154:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean func_arg_list_sempred(Func_arg_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 155:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean type_list_sempred(Type_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 156:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean array_expr_list_sempred(Array_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 157:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean when_clause_list_sempred(When_clause_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 158:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean indirection_sempred(IndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 159:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean opt_indirection_sempred(Opt_indirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 160:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean qualified_name_list_sempred(Qualified_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 161:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean name_list_sempred(Name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 162:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean role_list_sempred(Role_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 163:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean comp_options_sempred(Comp_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 164:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean decl_stmts_sempred(Decl_stmtsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 165:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean decl_cursor_arglist_sempred(Decl_cursor_arglistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 166:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean proc_sect_sempred(Proc_sectContext _localctx, int predIndex) {
		switch (predIndex) {
		case 167:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean getdiag_list_sempred(Getdiag_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 168:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean assign_var_sempred(Assign_varContext _localctx, int predIndex) {
		switch (predIndex) {
		case 169:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean stmt_elsifs_sempred(Stmt_elsifsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 170:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean case_when_list_sempred(Case_when_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 171:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean opt_raise_list_sempred(Opt_raise_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 172:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean opt_execute_using_list_sempred(Opt_execute_using_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 173:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean opt_open_bound_list_sempred(Opt_open_bound_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 174:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean proc_exceptions_sempred(Proc_exceptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 175:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean proc_conditions_sempred(Proc_conditionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 176:
			return precpred(_ctx, 2);
		}
		return true;
	}

	private static final int _serializedATNSegments = 5;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0252\u2e18\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227"+
		"\4\u0228\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c"+
		"\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230\t\u0230"+
		"\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235"+
		"\t\u0235\4\u0236\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239"+
		"\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e"+
		"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241\4\u0242\t\u0242"+
		"\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247"+
		"\t\u0247\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b"+
		"\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f\4\u0250"+
		"\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254"+
		"\4\u0255\t\u0255\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259"+
		"\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c\4\u025d\t\u025d"+
		"\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260\t\u0260\4\u0261\t\u0261\4\u0262"+
		"\t\u0262\4\u0263\t\u0263\4\u0264\t\u0264\4\u0265\t\u0265\4\u0266\t\u0266"+
		"\4\u0267\t\u0267\4\u0268\t\u0268\4\u0269\t\u0269\4\u026a\t\u026a\4\u026b"+
		"\t\u026b\4\u026c\t\u026c\4\u026d\t\u026d\4\u026e\t\u026e\4\u026f\t\u026f"+
		"\4\u0270\t\u0270\4\u0271\t\u0271\4\u0272\t\u0272\4\u0273\t\u0273\4\u0274"+
		"\t\u0274\4\u0275\t\u0275\4\u0276\t\u0276\4\u0277\t\u0277\4\u0278\t\u0278"+
		"\4\u0279\t\u0279\4\u027a\t\u027a\4\u027b\t\u027b\4\u027c\t\u027c\4\u027d"+
		"\t\u027d\4\u027e\t\u027e\4\u027f\t\u027f\4\u0280\t\u0280\4\u0281\t\u0281"+
		"\4\u0282\t\u0282\4\u0283\t\u0283\4\u0284\t\u0284\4\u0285\t\u0285\4\u0286"+
		"\t\u0286\4\u0287\t\u0287\4\u0288\t\u0288\4\u0289\t\u0289\4\u028a\t\u028a"+
		"\4\u028b\t\u028b\4\u028c\t\u028c\4\u028d\t\u028d\4\u028e\t\u028e\4\u028f"+
		"\t\u028f\4\u0290\t\u0290\4\u0291\t\u0291\4\u0292\t\u0292\4\u0293\t\u0293"+
		"\4\u0294\t\u0294\4\u0295\t\u0295\4\u0296\t\u0296\4\u0297\t\u0297\4\u0298"+
		"\t\u0298\4\u0299\t\u0299\4\u029a\t\u029a\4\u029b\t\u029b\4\u029c\t\u029c"+
		"\4\u029d\t\u029d\4\u029e\t\u029e\4\u029f\t\u029f\4\u02a0\t\u02a0\4\u02a1"+
		"\t\u02a1\4\u02a2\t\u02a2\4\u02a3\t\u02a3\4\u02a4\t\u02a4\4\u02a5\t\u02a5"+
		"\4\u02a6\t\u02a6\4\u02a7\t\u02a7\4\u02a8\t\u02a8\4\u02a9\t\u02a9\4\u02aa"+
		"\t\u02aa\4\u02ab\t\u02ab\4\u02ac\t\u02ac\4\u02ad\t\u02ad\4\u02ae\t\u02ae"+
		"\4\u02af\t\u02af\4\u02b0\t\u02b0\4\u02b1\t\u02b1\4\u02b2\t\u02b2\4\u02b3"+
		"\t\u02b3\4\u02b4\t\u02b4\4\u02b5\t\u02b5\4\u02b6\t\u02b6\4\u02b7\t\u02b7"+
		"\4\u02b8\t\u02b8\4\u02b9\t\u02b9\4\u02ba\t\u02ba\4\u02bb\t\u02bb\4\u02bc"+
		"\t\u02bc\4\u02bd\t\u02bd\4\u02be\t\u02be\4\u02bf\t\u02bf\4\u02c0\t\u02c0"+
		"\4\u02c1\t\u02c1\4\u02c2\t\u02c2\4\u02c3\t\u02c3\4\u02c4\t\u02c4\4\u02c5"+
		"\t\u02c5\4\u02c6\t\u02c6\4\u02c7\t\u02c7\4\u02c8\t\u02c8\4\u02c9\t\u02c9"+
		"\4\u02ca\t\u02ca\4\u02cb\t\u02cb\4\u02cc\t\u02cc\4\u02cd\t\u02cd\4\u02ce"+
		"\t\u02ce\4\u02cf\t\u02cf\4\u02d0\t\u02d0\4\u02d1\t\u02d1\4\u02d2\t\u02d2"+
		"\4\u02d3\t\u02d3\4\u02d4\t\u02d4\4\u02d5\t\u02d5\4\u02d6\t\u02d6\4\u02d7"+
		"\t\u02d7\4\u02d8\t\u02d8\4\u02d9\t\u02d9\4\u02da\t\u02da\4\u02db\t\u02db"+
		"\4\u02dc\t\u02dc\4\u02dd\t\u02dd\4\u02de\t\u02de\4\u02df\t\u02df\4\u02e0"+
		"\t\u02e0\4\u02e1\t\u02e1\4\u02e2\t\u02e2\4\u02e3\t\u02e3\4\u02e4\t\u02e4"+
		"\4\u02e5\t\u02e5\4\u02e6\t\u02e6\4\u02e7\t\u02e7\4\u02e8\t\u02e8\4\u02e9"+
		"\t\u02e9\4\u02ea\t\u02ea\4\u02eb\t\u02eb\4\u02ec\t\u02ec\4\u02ed\t\u02ed"+
		"\4\u02ee\t\u02ee\4\u02ef\t\u02ef\4\u02f0\t\u02f0\4\u02f1\t\u02f1\4\u02f2"+
		"\t\u02f2\4\u02f3\t\u02f3\4\u02f4\t\u02f4\4\u02f5\t\u02f5\4\u02f6\t\u02f6"+
		"\4\u02f7\t\u02f7\4\u02f8\t\u02f8\4\u02f9\t\u02f9\4\u02fa\t\u02fa\4\u02fb"+
		"\t\u02fb\4\u02fc\t\u02fc\4\u02fd\t\u02fd\4\u02fe\t\u02fe\4\u02ff\t\u02ff"+
		"\4\u0300\t\u0300\4\u0301\t\u0301\4\u0302\t\u0302\4\u0303\t\u0303\4\u0304"+
		"\t\u0304\4\u0305\t\u0305\4\u0306\t\u0306\4\u0307\t\u0307\4\u0308\t\u0308"+
		"\4\u0309\t\u0309\4\u030a\t\u030a\4\u030b\t\u030b\4\u030c\t\u030c\4\u030d"+
		"\t\u030d\4\u030e\t\u030e\4\u030f\t\u030f\4\u0310\t\u0310\4\u0311\t\u0311"+
		"\4\u0312\t\u0312\4\u0313\t\u0313\4\u0314\t\u0314\4\u0315\t\u0315\4\u0316"+
		"\t\u0316\4\u0317\t\u0317\4\u0318\t\u0318\4\u0319\t\u0319\4\u031a\t\u031a"+
		"\4\u031b\t\u031b\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\5\5\5\u0641\n\5"+
		"\6\5\u0643\n\5\r\5\16\5\u0644\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u06c4\n\6\3\7\3\7\5\7\u06c8"+
		"\n\7\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\5\n\u06d5\n\n\3\13\3"+
		"\13\3\13\7\13\u06da\n\13\f\13\16\13\u06dd\13\13\3\f\3\f\3\f\7\f\u06e2"+
		"\n\f\f\f\16\f\u06e5\13\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3"+
		"\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u06fb\n\r\3\16\3\16\3\16\3\16\3"+
		"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u070a\n\16\3\17\3\17"+
		"\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\5\20\u071e\n\20\3\21\3\21\3\21\3\21\5\21\u0724\n\21\3\22\3"+
		"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3"+
		"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u073e\n\22\3\23\3\23"+
		"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0758\n\23\3\24\3\24\3\24"+
		"\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\27\3\27"+
		"\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27"+
		"\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27"+
		"\5\27\u0787\n\27\3\30\3\30\5\30\u078b\n\30\3\31\3\31\3\31\7\31\u0790\n"+
		"\31\f\31\16\31\u0793\13\31\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u079b\n"+
		"\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u07a5\n\33\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u07af\n\34\3\35\3\35\3\35\3\35\3\35"+
		"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u07c1\n\35"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\5\36\u07df\n\36\3\37\3\37\3\37\3\37\3\37\3\37\7\37\u07e7\n\37\f\37\16"+
		"\37\u07ea\13\37\3 \3 \3 \3 \3 \3 \7 \u07f2\n \f \16 \u07f5\13 \3!\3!\5"+
		"!\u07f9\n!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0802\n\"\3#\3#\3#\3#\5#\u0808"+
		"\n#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u0819\n$\3%\3%\3%"+
		"\5%\u081e\n%\3&\3&\5&\u0822\n&\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\5("+
		"\u082f\n(\3)\3)\5)\u0833\n)\3*\3*\3*\5*\u0838\n*\3+\3+\3+\5+\u083d\n+"+
		"\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u084d\n,\3-\3-\3-\3-\3-"+
		"\3.\3.\5.\u0856\n.\3/\3/\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61"+
		"\3\61\3\61\3\61\5\61\u0866\n\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0912\n\62\3\63\3\63\3\63"+
		"\3\63\3\63\3\63\7\63\u091a\n\63\f\63\16\63\u091d\13\63\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\5\64\u0927\n\64\3\65\3\65\3\65\3\65\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u0a29"+
		"\n\66\3\67\3\67\3\67\3\67\3\67\5\67\u0a30\n\67\38\38\38\58\u0a35\n8\3"+
		"9\39\39\59\u0a3a\n9\3:\3:\3:\5:\u0a3f\n:\3;\3;\3;\3;\3;\3;\5;\u0a47\n"+
		";\3<\3<\3<\3<\3=\3=\3=\5=\u0a50\n=\3>\3>\3>\3>\3>\3>\7>\u0a58\n>\f>\16"+
		">\u0a5b\13>\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u0a6c\n?\3"+
		"@\3@\3@\3@\3@\7@\u0a73\n@\f@\16@\u0a76\13@\3A\3A\3A\3A\3A\3A\3A\3A\3A"+
		"\3A\5A\u0a82\nA\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B"+
		"\3B\3B\3B\3B\3B\3B\3B\3B\5B\u0a9e\nB\3C\3C\3C\3D\3D\3D\3D\3D\3D\7D\u0aa9"+
		"\nD\fD\16D\u0aac\13D\3E\3E\3E\3E\3E\3F\3F\3F\3F\3F\3F\7F\u0ab9\nF\fF\16"+
		"F\u0abc\13F\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3"+
		"G\3G\3G\3G\3G\3G\3G\5G\u0ad8\nG\3H\3H\3H\3H\5H\u0ade\nH\3I\3I\3I\3I\3"+
		"I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I\u0af6\nI\3J\3"+
		"J\3K\3K\5K\u0afc\nK\3L\3L\3L\5L\u0b01\nL\3M\3M\3M\3M\3M\5M\u0b08\nM\3"+
		"N\3N\3N\7N\u0b0d\nN\fN\16N\u0b10\13N\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O"+
		"\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O"+
		"\3O\5O\u0b35\nO\3P\3P\5P\u0b39\nP\3Q\3Q\3Q\3Q\3Q\5Q\u0b40\nQ\3R\3R\5R"+
		"\u0b44\nR\3S\3S\3S\3S\3S\3S\7S\u0b4c\nS\fS\16S\u0b4f\13S\3T\3T\3T\3U\3"+
		"U\3U\3U\3U\3U\3U\3U\5U\u0b5c\nU\3V\3V\3V\3V\3V\3V\7V\u0b64\nV\fV\16V\u0b67"+
		"\13V\3W\3W\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3"+
		"X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3"+
		"X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3"+
		"X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3"+
		"X\3X\3X\3X\3X\5X\u0bc8\nX\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0bd6"+
		"\nY\3Z\3Z\5Z\u0bda\nZ\3[\3[\3[\3[\3[\5[\u0be1\n[\3\\\3\\\3\\\3\\\3\\\3"+
		"\\\7\\\u0be9\n\\\f\\\16\\\u0bec\13\\\3]\3]\3]\3]\3]\3]\7]\u0bf4\n]\f]"+
		"\16]\u0bf7\13]\3^\3^\3^\5^\u0bfc\n^\3_\3_\5_\u0c00\n_\3`\3`\3`\3`\3`\3"+
		"a\3a\3a\3a\3a\3a\3a\3a\5a\u0c0f\na\3b\3b\3b\7b\u0c14\nb\fb\16b\u0c17\13"+
		"b\3c\3c\3c\3c\3c\3c\3c\3c\5c\u0c21\nc\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3"+
		"d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3"+
		"d\3d\3d\3d\3d\3d\3d\5d\u0c4b\nd\3e\3e\3e\5e\u0c50\ne\3f\3f\3f\3f\3f\3"+
		"f\3f\5f\u0c59\nf\3g\3g\3g\3g\3h\3h\3h\3h\3h\3h\3h\7h\u0c66\nh\fh\16h\u0c69"+
		"\13h\3i\3i\3j\3j\3j\3j\3j\5j\u0c72\nj\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3"+
		"k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3"+
		"k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3"+
		"k\5k\u0cad\nk\3l\3l\3l\5l\u0cb2\nl\3m\3m\3m\3m\3m\5m\u0cb9\nm\3n\3n\3"+
		"n\3n\3n\3n\7n\u0cc1\nn\fn\16n\u0cc4\13n\3o\3o\3p\3p\3p\3p\3p\3p\5p\u0cce"+
		"\np\3q\3q\3q\3q\3q\3q\3q\5q\u0cd7\nq\3r\3r\3r\3r\3r\3r\7r\u0cdf\nr\fr"+
		"\16r\u0ce2\13r\3s\3s\3s\6s\u0ce7\ns\rs\16s\u0ce8\3s\3s\3s\3s\3s\6s\u0cf0"+
		"\ns\rs\16s\u0cf1\3s\3s\5s\u0cf6\ns\3t\3t\3t\3t\3t\3t\5t\u0cfe\nt\3u\3"+
		"u\3u\3u\3u\3u\3u\3u\3u\5u\u0d09\nu\3v\3v\3v\3v\3w\3w\3w\3w\3x\3x\3x\3"+
		"x\3x\3x\3x\3x\5x\u0d1b\nx\3y\3y\3y\3y\3y\3y\5y\u0d23\ny\3z\3z\5z\u0d27"+
		"\nz\3{\3{\3{\3{\3{\3{\3{\3|\3|\3|\3|\3|\3|\7|\u0d36\n|\f|\16|\u0d39\13"+
		"|\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\5}\u0d49\n}\3~\3~\3~\5~\u0d4e"+
		"\n~\3\177\3\177\3\177\3\177\3\177\5\177\u0d55\n\177\3\u0080\3\u0080\3"+
		"\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\5\u0080\u0d63\n\u0080\3\u0081\3\u0081\3\u0081\5\u0081\u0d68\n"+
		"\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0d6f\n\u0082\3"+
		"\u0083\3\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0d8a"+
		"\n\u0084\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085"+
		"\u0d9c\n\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\3\u0086\3\u0086\3\u0086\5\u0086\u0db1\n\u0086\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\5\u0088\u0dc0\n\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0dd7"+
		"\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b"+
		"\5\u008b\u0de1\n\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c"+
		"\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0df9"+
		"\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0e07\n\u008e\3\u008f\3\u008f"+
		"\5\u008f\u0e0b\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090"+
		"\u0e12\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u0e19\n"+
		"\u0091\f\u0091\16\u0091\u0e1c\13\u0091\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\5\u0092\u0e40\n\u0092\3\u0093\3\u0093\5\u0093"+
		"\u0e44\n\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094"+
		"\u0e4c\n\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\7\u0095"+
		"\u0e54\n\u0095\f\u0095\16\u0095\u0e57\13\u0095\3\u0096\3\u0096\3\u0096"+
		"\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096"+
		"\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0e6b\n\u0096"+
		"\3\u0097\3\u0097\5\u0097\u0e6f\n\u0097\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\5\u0098\u0e75\n\u0098\3\u0099\3\u0099\3\u0099\5\u0099\u0e7a\n\u0099\3"+
		"\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0e80\n\u009a\3\u009b\3\u009b\5"+
		"\u009b\u0e84\n\u009b\3\u009c\3\u009c\5\u009c\u0e88\n\u009c\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e"+
		"\5\u009e\u0e95\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\5\u009f\u0e9f\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\3\u00a0\5\u00a0\u0eb0\n\u00a0\3\u00a1\3\u00a1\3\u00a1\7\u00a1"+
		"\u0eb5\n\u00a1\f\u00a1\16\u00a1\u0eb8\13\u00a1\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0ec1\n\u00a2\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u0ecc"+
		"\n\u00a4\f\u00a4\16\u00a4\u0ecf\13\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0f3c\n\u00a6\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0f4e\n\u00a8\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u0f55\n\u00a9\f\u00a9\16\u00a9"+
		"\u0f58\13\u00a9\3\u00aa\3\u00aa\5\u00aa\u0f5c\n\u00aa\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0f6d\n\u00ab\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0f75\n\u00ac\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\7\u00ad\u0f7d\n\u00ad\f\u00ad\16\u00ad"+
		"\u0f80\13\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\7\u00af\u0f8d\n\u00af\f\u00af\16\u00af"+
		"\u0f90\13\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\5\u00b0\u0f99\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b3"+
		"\3\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4"+
		"\u0fbb\n\u00b4\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0fc0\n\u00b5\3\u00b6\3"+
		"\u00b6\3\u00b6\3\u00b6\5\u00b6\u0fc6\n\u00b6\3\u00b7\3\u00b7\5\u00b7\u0fca"+
		"\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8"+
		"\u0fdc\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u1016\n\u00b9\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u1027\n\u00bb\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u102f\n\u00bc\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\5\u00bd\u1046\n\u00bd\3\u00be\3\u00be\5\u00be\u104a\n\u00be\3"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\5\u00bf\u105e\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\5\u00c3\u1083\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u108c\n\u00c4\3\u00c5\3\u00c5\3\u00c5"+
		"\5\u00c5\u1091\n\u00c5\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u1096\n\u00c6\3"+
		"\u00c7\3\u00c7\3\u00c7\5\u00c7\u109b\n\u00c7\3\u00c8\3\u00c8\3\u00c8\5"+
		"\u00c8\u10a0\n\u00c8\3\u00c9\3\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\5\u00cc\u10d5\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u10db\n"+
		"\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u10e3\n"+
		"\u00ce\f\u00ce\16\u00ce\u10e6\13\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u10ef\n\u00cf\3\u00d0\3\u00d0\3\u00d0"+
		"\5\u00d0\u10f4\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\7\u00d1"+
		"\u10fb\n\u00d1\f\u00d1\16\u00d1\u10fe\13\u00d1\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u1110\n\u00d6\3\u00d7\3\u00d7"+
		"\5\u00d7\u1114\n\u00d7\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\5\u00d9\u111e\n\u00d9\3\u00da\3\u00da\3\u00db\3\u00db"+
		"\3\u00db\5\u00db\u1125\n\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u112a\n"+
		"\u00db\f\u00db\16\u00db\u112d\13\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\5\u00dc\u1133\n\u00dc\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u1138\n\u00dd\3"+
		"\u00de\3\u00de\3\u00de\7\u00de\u113d\n\u00de\f\u00de\16\u00de\u1140\13"+
		"\u00de\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\5\u00df\u114d\n\u00df\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u1169\n\u00e0\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\7\u00e1\u1171\n\u00e1\f\u00e1"+
		"\16\u00e1\u1174\13\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\7\u00e3\u1182\n\u00e3"+
		"\f\u00e3\16\u00e3\u1185\13\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u1193"+
		"\n\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\6\u00e7"+
		"\u11ae\n\u00e7\r\u00e7\16\u00e7\u11af\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u120c\n\u00e7\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\7\u00e9\u1218\n\u00e9\f\u00e9\16\u00e9\u121b\13\u00e9\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u1222\n\u00ea\3\u00eb\3\u00eb\3\u00eb"+
		"\6\u00eb\u1227\n\u00eb\r\u00eb\16\u00eb\u1228\3\u00eb\3\u00eb\3\u00eb"+
		"\5\u00eb\u122e\n\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u123a\n\u00ed\f\u00ed\16\u00ed"+
		"\u123d\13\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ef\3\u00ef\5\u00ef"+
		"\u1245\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\7\u00f0"+
		"\u124d\n\u00f0\f\u00f0\16\u00f0\u1250\13\u00f0\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u1277"+
		"\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u127d\n\u00f2\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\7\u00f4\u1293\n\u00f4\f\u00f4\16\u00f4\u1296\13\u00f4\3\u00f5"+
		"\3\u00f5\3\u00f5\6\u00f5\u129b\n\u00f5\r\u00f5\16\u00f5\u129c\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u12b5\n\u00f5\3\u00f6\3\u00f6\5\u00f6"+
		"\u12b9\n\u00f6\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u12be\n\u00f7\3\u00f8\3"+
		"\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u12c7\n\u00f8\3"+
		"\u00f9\3\u00f9\5\u00f9\u12cb\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3"+
		"\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u12e6\n\u00fb\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\7\u00fc\u12ee\n\u00fc\f\u00fc\16\u00fc\u12f1"+
		"\13\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u12ff\n\u00fd\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u1313"+
		"\n\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\3\u00ff\5\u00ff\u1327\n\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100"+
		"\3\u0100\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u1384\n\u0102\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u139d\n\u0103\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\5\u0104\u13a4\n\u0104\3\u0105\3\u0105\3\u0105"+
		"\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105"+
		"\3\u0105\3\u0105\5\u0105\u13b4\n\u0105\3\u0106\3\u0106\3\u0107\3\u0107"+
		"\3\u0107\3\u0107\3\u0107\3\u0107\7\u0107\u13be\n\u0107\f\u0107\16\u0107"+
		"\u13c1\13\u0107\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u13c7\n\u0108"+
		"\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\7\u0109\u13d0"+
		"\n\u0109\f\u0109\16\u0109\u13d3\13\u0109\3\u010a\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\7\u010a\u13db\n\u010a\f\u010a\16\u010a\u13de\13\u010a"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\5\u010c\u13eb\n\u010c\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d"+
		"\u1480\n\u010d\3\u010e\3\u010e\5\u010e\u1484\n\u010e\3\u010f\3\u010f\3"+
		"\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f"+
		"\u14e1\n\u010f\3\u0110\3\u0110\3\u0110\5\u0110\u14e6\n\u0110\3\u0111\3"+
		"\u0111\5\u0111\u14ea\n\u0111\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u14f0"+
		"\n\u0112\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u1534\n\u0113\3\u0114\3\u0114"+
		"\3\u0115\3\u0115\5\u0115\u153a\n\u0115\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u1557\n\u0117\3\u0118"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u1568\n\u0118\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\7\u0119\u1570\n\u0119\f\u0119"+
		"\16\u0119\u1573\13\u0119\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\5\u011a\u157e\n\u011a\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\5\u011b\u15ba\n\u011b\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\7\u011c\u15c2\n\u011c\f\u011c\16\u011c\u15c5\13\u011c\3\u011d"+
		"\3\u011d\3\u011d\5\u011d\u15ca\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\5\u011e\u15d0\n\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\5\u0120\u15ea\n\u0120\3\u0121\3\u0121\3\u0121\3\u0121\5\u0121\u15f0\n"+
		"\u0121\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u15f6\n\u0122\3\u0123\3"+
		"\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124\7\u0124"+
		"\u1601\n\u0124\f\u0124\16\u0124\u1604\13\u0124\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u160f\n\u0125"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\5\u0126\u162c\n\u0126\3\u0127\3\u0127\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1653\n\u0128\3\u0129\3\u0129"+
		"\5\u0129\u1657\n\u0129\3\u012a\3\u012a\5\u012a\u165b\n\u012a\3\u012b\3"+
		"\u012b\5\u012b\u165f\n\u012b\3\u012c\3\u012c\3\u012c\5\u012c\u1664\n\u012c"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\7\u012d\u166c\n\u012d"+
		"\f\u012d\16\u012d\u166f\13\u012d\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u167c\n\u012e"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\5\u012f\u1689\n\u012f\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\5\u0130\u1691\n\u0130\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\7\u0131\u1699\n\u0131\f\u0131\16\u0131\u169c\13\u0131"+
		"\3\u0132\3\u0132\3\u0132\5\u0132\u16a1\n\u0132\3\u0133\3\u0133\5\u0133"+
		"\u16a5\n\u0133\3\u0134\3\u0134\3\u0134\5\u0134\u16aa\n\u0134\3\u0135\3"+
		"\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u16b1\n\u0135\3\u0136\3\u0136\3"+
		"\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u16d6\n\u0136"+
		"\3\u0137\3\u0137\3\u0137\5\u0137\u16db\n\u0137\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\3\u0138\3\u0138\5\u0138\u16e3\n\u0138\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\3\u0139\3\u0139\7\u0139\u16eb\n\u0139\f\u0139\16\u0139\u16ee"+
		"\13\u0139\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\7\u013a\u16f6"+
		"\n\u013a\f\u013a\16\u013a\u16f9\13\u013a\3\u013b\3\u013b\3\u013b\3\u013b"+
		"\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u1703\n\u013b\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u170b\n\u013c\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\7\u013d\u1713\n\u013d\f\u013d\16\u013d"+
		"\u1716\13\u013d\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e"+
		"\u1727\n\u013e\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f"+
		"\u172f\n\u013f\3\u0140\3\u0140\3\u0141\3\u0141\3\u0142\3\u0142\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142"+
		"\5\u0142\u1741\n\u0142\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\5\u0143\u174c\n\u0143\3\u0144\3\u0144\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\5\u0145\u1764\n\u0145\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146"+
		"\3\u0146\7\u0146\u176c\n\u0146\f\u0146\16\u0146\u176f\13\u0146\3\u0147"+
		"\3\u0147\3\u0147\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\7\u0148"+
		"\u177a\n\u0148\f\u0148\16\u0148\u177d\13\u0148\3\u0149\6\u0149\u1780\n"+
		"\u0149\r\u0149\16\u0149\u1781\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\5\u014a\u17a7\n\u014a\3\u014b\3\u014b\3\u014b"+
		"\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u17b1\n\u014b\3\u014c"+
		"\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\5\u014c\u17ba\n\u014c"+
		"\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d"+
		"\3\u014d\7\u014d\u17c6\n\u014d\f\u014d\16\u014d\u17c9\13\u014d\3\u014e"+
		"\3\u014e\3\u014e\5\u014e\u17ce\n\u014e\3\u014f\3\u014f\3\u014f\3\u0150"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\7\u0150\u17d9\n\u0150\f\u0150"+
		"\16\u0150\u17dc\13\u0150\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151"+
		"\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151"+
		"\3\u0151\3\u0151\3\u0151\5\u0151\u17f0\n\u0151\3\u0152\3\u0152\3\u0152"+
		"\3\u0152\3\u0152\7\u0152\u17f7\n\u0152\f\u0152\16\u0152\u17fa\13\u0152"+
		"\3\u0153\3\u0153\5\u0153\u17fe\n\u0153\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\5\u0154\u1824\n\u0154\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\5\u0155\u1832\n\u0155\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156"+
		"\u1840\n\u0156\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\5\u0157\u1858\n\u0157"+
		"\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u185f\n\u0158\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\7\u0159\u1867\n\u0159\f\u0159"+
		"\16\u0159\u186a\13\u0159\3\u015a\6\u015a\u186d\n\u015a\r\u015a\16\u015a"+
		"\u186e\3\u015a\3\u015a\3\u015b\3\u015b\3\u015b\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\3\u015c\7\u015c\u187b\n\u015c\f\u015c\16\u015c\u187e\13\u015c"+
		"\3\u015d\3\u015d\3\u015d\5\u015d\u1883\n\u015d\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u18a7\n\u015e\3\u015f\3\u015f"+
		"\3\u015f\3\u015f\3\u015f\5\u015f\u18ae\n\u015f\3\u0160\3\u0160\3\u0160"+
		"\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0161\3\u0161"+
		"\3\u0161\5\u0161\u18bd\n\u0161\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u18ec\n\u0163\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0165\3\u0165"+
		"\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165\u1911\n\u0165"+
		"\3\u0166\3\u0166\3\u0167\3\u0167\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\7\u0168\u191d\n\u0168\f\u0168\16\u0168\u1920\13\u0168\3\u0169"+
		"\3\u0169\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a"+
		"\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u1930\n\u016a\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u1b06"+
		"\n\u016b\3\u016c\3\u016c\5\u016c\u1b0a\n\u016c\3\u016d\3\u016d\3\u016d"+
		"\5\u016d\u1b0f\n\u016d\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u1b4a\n\u016e"+
		"\3\u016f\3\u016f\5\u016f\u1b4e\n\u016f\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\5\u0170\u1c29\n\u0170"+
		"\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0172"+
		"\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\7\u0172\u1c39\n\u0172\f\u0172"+
		"\16\u0172\u1c3c\13\u0172\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173"+
		"\3\u0173\3\u0173\5\u0173\u1c46\n\u0173\3\u0174\3\u0174\3\u0174\6\u0174"+
		"\u1c4b\n\u0174\r\u0174\16\u0174\u1c4c\3\u0174\3\u0174\5\u0174\u1c51\n"+
		"\u0174\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\5\u0176\u1d12\n\u0176\3\u0177\3\u0177\3\u0177"+
		"\3\u0177\3\u0177\3\u0177\3\u0178\3\u0178\5\u0178\u1d1c\n\u0178\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\5\u0179\u1d24\n\u0179\3\u017a"+
		"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a"+
		"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a"+
		"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\5\u017a"+
		"\u1d41\n\u017a\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\7\u017c"+
		"\u1d52\n\u017c\f\u017c\16\u017c\u1d55\13\u017c\3\u017d\3\u017d\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\5\u017e\u1d7e\n\u017e\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\5\u017f\u1d8c\n\u017f"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\5\u0181\u1da2\n\u0181\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\3\u0182\7\u0182\u1daa\n\u0182\f\u0182\16\u0182\u1dad\13\u0182"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u1db4\n\u0183\3\u0184"+
		"\3\u0184\5\u0184\u1db8\n\u0184\3\u0185\3\u0185\3\u0186\3\u0186\3\u0186"+
		"\5\u0186\u1dbf\n\u0186\3\u0187\3\u0187\3\u0187\3\u0187\3\u0188\3\u0188"+
		"\3\u0188\5\u0188\u1dc8\n\u0188\3\u0189\3\u0189\3\u0189\3\u018a\3\u018a"+
		"\3\u018a\3\u018a\5\u018a\u1dd1\n\u018a\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\5\u018b\u1e05\n\u018b\3\u018c\3\u018c\3\u018c\5\u018c\u1e0a\n"+
		"\u018c\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\5\u018d\u1e16\n\u018d\3\u018e\3\u018e\3\u018e\3\u018e"+
		"\3\u018e\3\u018e\3\u018e\3\u018e\7\u018e\u1e20\n\u018e\f\u018e\16\u018e"+
		"\u1e23\13\u018e\3\u018f\3\u018f\5\u018f\u1e27\n\u018f\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\5\u0190\u1e2f\n\u0190\3\u0191\3\u0191"+
		"\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191"+
		"\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191"+
		"\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191"+
		"\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191"+
		"\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191"+
		"\3\u0191\3\u0191\3\u0191\5\u0191\u1e63\n\u0191\3\u0192\3\u0192\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192"+
		"\5\u0192\u1e71\n\u0192\3\u0193\3\u0193\3\u0193\3\u0194\3\u0194\3\u0194"+
		"\3\u0194\3\u0194\3\u0194\3\u0195\3\u0195\5\u0195\u1e7e\n\u0195\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\7\u0196\u1e85\n\u0196\f\u0196\16\u0196"+
		"\u1e88\13\u0196\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197"+
		"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\5\u0197\u1e96\n\u0197\3\u0198"+
		"\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\5\u0198\u1ea0"+
		"\n\u0198\3\u0199\3\u0199\5\u0199\u1ea4\n\u0199\3\u019a\3\u019a\3\u019a"+
		"\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a"+
		"\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\5\u019a\u1eb8\n\u019a"+
		"\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019c\3\u019c\3\u019c\3\u019c"+
		"\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c"+
		"\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c"+
		"\3\u019c\3\u019c\3\u019c\3\u019c\5\u019c\u1ed9\n\u019c\3\u019d\3\u019d"+
		"\3\u019d\3\u019d\3\u019d\3\u019d\7\u019d\u1ee1\n\u019d\f\u019d\16\u019d"+
		"\u1ee4\13\u019d\3\u019e\3\u019e\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0"+
		"\5\u01a0\u1ef6\n\u01a0\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1"+
		"\3\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\5\u01a2\u1f31\n\u01a2"+
		"\3\u01a3\3\u01a3\5\u01a3\u1f35\n\u01a3\3\u01a4\3\u01a4\3\u01a4\3\u01a4"+
		"\3\u01a4\3\u01a4\3\u01a4\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u1f86\n\u01a5\3\u01a6\3\u01a6\3\u01a7"+
		"\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7"+
		"\3\u01a7\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8"+
		"\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\5\u01a8\u1fa2\n\u01a8\3\u01a9"+
		"\3\u01a9\3\u01a9\5\u01a9\u1fa7\n\u01a9\3\u01aa\3\u01aa\3\u01aa\3\u01aa"+
		"\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa"+
		"\5\u01aa\u1fb6\n\u01aa\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab"+
		"\3\u01ab\3\u01ab\3\u01ab\3\u01ab\5\u01ab\u1fc2\n\u01ab\3\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ac\3\u01ac\3\u01ac\7\u01ac\u1fca\n\u01ac\f\u01ac\16\u01ac"+
		"\u1fcd\13\u01ac\3\u01ad\3\u01ad\3\u01ae\3\u01ae\3\u01ae\3\u01af\3\u01af"+
		"\5\u01af\u1fd6\n\u01af\3\u01b0\3\u01b0\3\u01b0\5\u01b0\u1fdb\n\u01b0\3"+
		"\u01b1\3\u01b1\5\u01b1\u1fdf\n\u01b1\3\u01b2\3\u01b2\5\u01b2\u1fe3\n\u01b2"+
		"\3\u01b3\3\u01b3\5\u01b3\u1fe7\n\u01b3\3\u01b4\3\u01b4\5\u01b4\u1feb\n"+
		"\u01b4\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1ff2\n\u01b5\3"+
		"\u01b6\3\u01b6\3\u01b6\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7"+
		"\7\u01b7\u1ffd\n\u01b7\f\u01b7\16\u01b7\u2000\13\u01b7\3\u01b8\3\u01b8"+
		"\5\u01b8\u2004\n\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\3\u01b9\5\u01b9\u2016\n\u01b9\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba"+
		"\3\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u2021\n\u01ba\3\u01bb\3\u01bb"+
		"\3\u01bb\3\u01bb\3\u01bb\3\u01bb\7\u01bb\u2029\n\u01bb\f\u01bb\16\u01bb"+
		"\u202c\13\u01bb\3\u01bc\3\u01bc\3\u01bc\3\u01bd\3\u01bd\5\u01bd\u2033"+
		"\n\u01bd\3\u01be\3\u01be\3\u01be\5\u01be\u2038\n\u01be\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\5\u01c0\u2045\n\u01c0\3\u01c1\3\u01c1\3\u01c1\3\u01c1\5\u01c1\u204b\n"+
		"\u01c1\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2"+
		"\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2"+
		"\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2"+
		"\3\u01c2\5\u01c2\u2068\n\u01c2\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3"+
		"\5\u01c3\u206f\n\u01c3\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u207b\n\u01c4\3\u01c5\3\u01c5"+
		"\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\5\u01c6\u208a\n\u01c6\3\u01c7\3\u01c7\3\u01c7\3\u01c7"+
		"\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7"+
		"\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7"+
		"\u20a1\n\u01c7\3\u01c8\3\u01c8\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9"+
		"\3\u01c9\7\u01c9\u20ab\n\u01c9\f\u01c9\16\u01c9\u20ae\13\u01c9\3\u01ca"+
		"\3\u01ca\3\u01ca\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb"+
		"\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb"+
		"\5\u01cb\u20c3\n\u01cb\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc"+
		"\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u20ce\n\u01cc\3\u01cd\3\u01cd\3\u01cd"+
		"\5\u01cd\u20d3\n\u01cd\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01cf\3\u01cf\3\u01cf\5\u01cf\u20e0\n\u01cf\3\u01d0"+
		"\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\5\u01d1\u20ed\n\u01d1\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\5\u01d2\u20ff\n\u01d2\3\u01d3\3\u01d3\5\u01d3\u2103\n"+
		"\u01d3\3\u01d4\3\u01d4\3\u01d4\3\u01d4\5\u01d4\u2109\n\u01d4\3\u01d5\3"+
		"\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d6"+
		"\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\7\u01d6\u211a\n\u01d6\f\u01d6"+
		"\16\u01d6\u211d\13\u01d6\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7"+
		"\3\u01d7\3\u01d7\3\u01d7\3\u01d7\5\u01d7\u2129\n\u01d7\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\7\u01d9\u2134"+
		"\n\u01d9\f\u01d9\16\u01d9\u2137\13\u01d9\3\u01da\3\u01da\3\u01da\3\u01da"+
		"\3\u01da\3\u01da\3\u01da\3\u01da\3\u01db\3\u01db\3\u01dc\3\u01dc\3\u01dc"+
		"\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\7\u01dc\u214d"+
		"\n\u01dc\f\u01dc\16\u01dc\u2150\13\u01dc\3\u01dd\3\u01dd\3\u01dd\3\u01dd"+
		"\3\u01dd\5\u01dd\u2157\n\u01dd\3\u01de\3\u01de\5\u01de\u215b\n\u01de\3"+
		"\u01df\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df\5\u01df"+
		"\u2165\n\u01df\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0"+
		"\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0"+
		"\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0"+
		"\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\5\u01e0"+
		"\u2188\n\u01e0\3\u01e1\3\u01e1\5\u01e1\u218c\n\u01e1\3\u01e2\3\u01e2\3"+
		"\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2"+
		"\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2"+
		"\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2"+
		"\5\u01e2\u21ab\n\u01e2\5\u01e2\u21ad\n\u01e2\3\u01e2\3\u01e2\3\u01e2\3"+
		"\u01e2\5\u01e2\u21b3\n\u01e2\7\u01e2\u21b5\n\u01e2\f\u01e2\16\u01e2\u21b8"+
		"\13\u01e2\3\u01e3\3\u01e3\3\u01e3\5\u01e3\u21bd\n\u01e3\3\u01e4\3\u01e4"+
		"\3\u01e4\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\5\u01e5\u21c7\n\u01e5"+
		"\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\7\u01e6\u21cf\n\u01e6"+
		"\f\u01e6\16\u01e6\u21d2\13\u01e6\3\u01e7\3\u01e7\3\u01e7\3\u01e7\3\u01e7"+
		"\3\u01e7\3\u01e7\3\u01e7\3\u01e8\3\u01e8\3\u01e8\3\u01e8\5\u01e8\u21e0"+
		"\n\u01e8\3\u01e9\3\u01e9\5\u01e9\u21e4\n\u01e9\3\u01ea\3\u01ea\3\u01ea"+
		"\3\u01ea\3\u01ea\3\u01ea\3\u01ea\5\u01ea\u21ed\n\u01ea\3\u01eb\3\u01eb"+
		"\5\u01eb\u21f1\n\u01eb\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec"+
		"\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec"+
		"\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec"+
		"\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec"+
		"\3\u01ec\3\u01ec\5\u01ec\u2216\n\u01ec\3\u01ed\3\u01ed\5\u01ed\u221a\n"+
		"\u01ed\3\u01ee\3\u01ee\3\u01ee\5\u01ee\u221f\n\u01ee\3\u01ef\3\u01ef\3"+
		"\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01ef\5\u01ef\u2228\n\u01ef\3\u01f0\3"+
		"\u01f0\5\u01f0\u222c\n\u01f0\3\u01f1\3\u01f1\5\u01f1\u2230\n\u01f1\3\u01f2"+
		"\3\u01f2\3\u01f2\3\u01f2\3\u01f3\3\u01f3\3\u01f3\7\u01f3\u2239\n\u01f3"+
		"\f\u01f3\16\u01f3\u223c\13\u01f3\3\u01f4\3\u01f4\3\u01f4\3\u01f4\5\u01f4"+
		"\u2242\n\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f4\5\u01f4"+
		"\u224a\n\u01f4\3\u01f5\3\u01f5\3\u01f5\3\u01f5\3\u01f5\3\u01f5\3\u01f5"+
		"\3\u01f5\5\u01f5\u2254\n\u01f5\3\u01f6\3\u01f6\5\u01f6\u2258\n\u01f6\3"+
		"\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7"+
		"\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7"+
		"\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7"+
		"\3\u01f7\3\u01f7\3\u01f7\3\u01f7\5\u01f7\u2279\n\u01f7\3\u01f8\3\u01f8"+
		"\3\u01f8\3\u01f8\3\u01f8\3\u01f8\5\u01f8\u2281\n\u01f8\3\u01f9\3\u01f9"+
		"\5\u01f9\u2285\n\u01f9\3\u01fa\3\u01fa\3\u01fb\3\u01fb\3\u01fb\3\u01fb"+
		"\3\u01fb\5\u01fb\u228e\n\u01fb\3\u01fc\3\u01fc\5\u01fc\u2292\n\u01fc\3"+
		"\u01fd\3\u01fd\3\u01fe\3\u01fe\3\u01ff\3\u01ff\3\u01ff\3\u01ff\5\u01ff"+
		"\u229c\n\u01ff\3\u0200\3\u0200\3\u0200\3\u0200\3\u0200\3\u0200\7\u0200"+
		"\u22a4\n\u0200\f\u0200\16\u0200\u22a7\13\u0200\3\u0201\3\u0201\3\u0201"+
		"\3\u0201\3\u0201\5\u0201\u22ae\n\u0201\3\u0202\3\u0202\3\u0202\3\u0203"+
		"\3\u0203\3\u0203\3\u0203\3\u0203\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204"+
		"\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0206\3\u0206\3\u0206"+
		"\5\u0206\u22c6\n\u0206\3\u0207\3\u0207\3\u0207\3\u0207\5\u0207\u22cc\n"+
		"\u0207\3\u0208\3\u0208\5\u0208\u22d0\n\u0208\3\u0209\3\u0209\3\u0209\3"+
		"\u0209\3\u0209\7\u0209\u22d7\n\u0209\f\u0209\16\u0209\u22da\13\u0209\3"+
		"\u020a\3\u020a\3\u020a\3\u020a\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b"+
		"\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\5\u020b\u22eb\n\u020b"+
		"\3\u020c\3\u020c\3\u020c\5\u020c\u22f0\n\u020c\3\u020d\3\u020d\3\u020d"+
		"\3\u020d\3\u020d\3\u020d\3\u020d\3\u020d\3\u020d\3\u020d\3\u020d\3\u020d"+
		"\7\u020d\u22fe\n\u020d\f\u020d\16\u020d\u2301\13\u020d\3\u020e\3\u020e"+
		"\3\u020e\5\u020e\u2306\n\u020e\3\u020f\3\u020f\3\u020f\7\u020f\u230b\n"+
		"\u020f\f\u020f\16\u020f\u230e\13\u020f\3\u0210\3\u0210\3\u0210\3\u0210"+
		"\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210"+
		"\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210"+
		"\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210"+
		"\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210"+
		"\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210"+
		"\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210"+
		"\3\u0210\3\u0210\3\u0210\3\u0210\5\u0210\u234e\n\u0210\3\u0210\3\u0210"+
		"\3\u0210\5\u0210\u2353\n\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210"+
		"\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210"+
		"\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210"+
		"\3\u0210\3\u0210\7\u0210\u236e\n\u0210\f\u0210\16\u0210\u2371\13\u0210"+
		"\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211"+
		"\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\5\u0211\u2381\n\u0211\3\u0212"+
		"\3\u0212\5\u0212\u2385\n\u0212\3\u0213\3\u0213\3\u0213\3\u0213\3\u0213"+
		"\3\u0213\3\u0213\3\u0213\3\u0213\3\u0213\3\u0213\3\u0213\3\u0213\3\u0213"+
		"\3\u0213\3\u0213\3\u0213\3\u0213\5\u0213\u2399\n\u0213\3\u0214\3\u0214"+
		"\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\5\u0214\u23a2\n\u0214\3\u0215"+
		"\3\u0215\5\u0215\u23a6\n\u0215\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216"+
		"\3\u0216\3\u0216\5\u0216\u23af\n\u0216\3\u0217\3\u0217\3\u0217\3\u0217"+
		"\3\u0217\3\u0217\3\u0217\3\u0217\3\u0217\3\u0217\3\u0217\5\u0217\u23bc"+
		"\n\u0217\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\7\u0218\u23c4"+
		"\n\u0218\f\u0218\16\u0218\u23c7\13\u0218\3\u0219\3\u0219\3\u0219\3\u0219"+
		"\3\u0219\3\u0219\3\u0219\3\u0219\5\u0219\u23d1\n\u0219\3\u021a\3\u021a"+
		"\3\u021a\3\u021a\3\u021a\3\u021a\3\u021a\3\u021b\3\u021b\3\u021b\3\u021b"+
		"\3\u021b\3\u021b\5\u021b\u23e0\n\u021b\3\u021c\3\u021c\3\u021c\3\u021c"+
		"\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\5\u021c\u23ec\n\u021c"+
		"\3\u021d\3\u021d\3\u021d\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\7\u021e\u23f7\n\u021e\f\u021e\16\u021e\u23fa\13\u021e\3\u021f\3\u021f"+
		"\3\u021f\3\u021f\3\u021f\3\u021f\5\u021f\u2402\n\u021f\3\u0220\3\u0220"+
		"\3\u0220\5\u0220\u2407\n\u0220\3\u0221\3\u0221\3\u0221\5\u0221\u240c\n"+
		"\u0221\3\u0222\3\u0222\3\u0222\3\u0222\3\u0222\3\u0222\3\u0222\5\u0222"+
		"\u2415\n\u0222\3\u0223\3\u0223\5\u0223\u2419\n\u0223\3\u0224\3\u0224\3"+
		"\u0224\3\u0224\3\u0224\3\u0224\7\u0224\u2421\n\u0224\f\u0224\16\u0224"+
		"\u2424\13\u0224\3\u0225\3\u0225\3\u0225\3\u0225\3\u0226\3\u0226\3\u0226"+
		"\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226"+
		"\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226"+
		"\5\u0226\u243f\n\u0226\3\u0227\3\u0227\3\u0227\3\u0227\3\u0227\3\u0227"+
		"\7\u0227\u2447\n\u0227\f\u0227\16\u0227\u244a\13\u0227\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\5\u0228\u2457\n\u0228\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\7\u0229"+
		"\u245e\n\u0229\f\u0229\16\u0229\u2461\13\u0229\3\u022a\3\u022a\3\u022a"+
		"\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\5\u022a\u246b\n\u022a\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\7\u022b\u2473\n\u022b\f\u022b"+
		"\16\u022b\u2476\13\u022b\3\u022c\3\u022c\3\u022c\3\u022c\3\u022c\3\u022c"+
		"\5\u022c\u247e\n\u022c\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d"+
		"\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d"+
		"\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d"+
		"\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d"+
		"\3\u022d\3\u022d\5\u022d\u24a3\n\u022d\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\7\u022e\u24ae\n\u022e\f\u022e"+
		"\16\u022e\u24b1\13\u022e\3\u022f\3\u022f\3\u022f\3\u022f\3\u022f\3\u022f"+
		"\3\u022f\3\u022f\3\u022f\3\u022f\3\u022f\3\u022f\3\u022f\5\u022f\u24c0"+
		"\n\u022f\3\u0230\3\u0230\3\u0230\3\u0230\5\u0230\u24c6\n\u0230\3\u0231"+
		"\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231\5\u0231\u24cf\n\u0231"+
		"\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\5\u0232\u24d6\n\u0232\3\u0233"+
		"\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233"+
		"\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\5\u0233\u24e8\n\u0233"+
		"\3\u0234\3\u0234\3\u0234\3\u0234\3\u0234\5\u0234\u24ef\n\u0234\3\u0235"+
		"\3\u0235\5\u0235\u24f3\n\u0235\3\u0236\3\u0236\5\u0236\u24f7\n\u0236\3"+
		"\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0238\3\u0238\3\u0238"+
		"\3\u0239\3\u0239\5\u0239\u2504\n\u0239\3\u023a\3\u023a\5\u023a\u2508\n"+
		"\u023a\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\3\u023c\3\u023c\3\u023d"+
		"\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d"+
		"\3\u023d\3\u023d\3\u023d\5\u023d\u251e\n\u023d\3\u023e\3\u023e\5\u023e"+
		"\u2522\n\u023e\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f"+
		"\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f"+
		"\5\u023f\u2534\n\u023f\3\u0240\3\u0240\3\u0241\3\u0241\3\u0241\3\u0241"+
		"\3\u0241\3\u0241\3\u0241\5\u0241\u253f\n\u0241\3\u0242\3\u0242\3\u0242"+
		"\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242"+
		"\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242"+
		"\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\5\u0242\u255d"+
		"\n\u0242\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\5\u0243\u2565"+
		"\n\u0243\3\u0244\3\u0244\3\u0244\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\5\u0245\u257d\n\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\5\u0245"+
		"\u25d0\n\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\5\u0245\u25d7\n"+
		"\u0245\3\u0245\3\u0245\3\u0245\3\u0245\5\u0245\u25dd\n\u0245\3\u0245\3"+
		"\u0245\3\u0245\3\u0245\3\u0245\5\u0245\u25e4\n\u0245\3\u0245\3\u0245\3"+
		"\u0245\3\u0245\3\u0245\5\u0245\u25eb\n\u0245\3\u0245\3\u0245\3\u0245\3"+
		"\u0245\3\u0245\3\u0245\5\u0245\u25f3\n\u0245\3\u0245\3\u0245\3\u0245\3"+
		"\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\7\u0245\u2653\n\u0245\f\u0245\16\u0245\u2656\13\u0245\3\u0246"+
		"\3\u0246\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\5\u0247"+
		"\u2661\n\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247"+
		"\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247"+
		"\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247"+
		"\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247"+
		"\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247"+
		"\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247"+
		"\3\u0247\3\u0247\7\u0247\u2699\n\u0247\f\u0247\16\u0247\u269c\13\u0247"+
		"\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248"+
		"\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\5\u0248\u26ac\n\u0248\3\u0248"+
		"\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248"+
		"\3\u0248\3\u0248\3\u0248\5\u0248\u26bb\n\u0248\3\u0249\3\u0249\3\u024a"+
		"\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a"+
		"\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a"+
		"\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a"+
		"\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a"+
		"\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\5\u024a"+
		"\u26ec\n\u024a\3\u024b\3\u024b\3\u024b\3\u024b\3\u024b\3\u024b\5\u024b"+
		"\u26f4\n\u024b\3\u024c\3\u024c\5\u024c\u26f8\n\u024c\3\u024d\3\u024d\3"+
		"\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\5\u024d\u2726\n\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\5\u024d\u27d4\n\u024d\3\u024e\3\u024e\3\u024e\3\u024e\3\u024e"+
		"\5\u024e\u27db\n\u024e\3\u024f\3\u024f\3\u024f\3\u024f\3\u024f\3\u024f"+
		"\3\u024f\3\u024f\3\u024f\3\u024f\3\u024f\5\u024f\u27e8\n\u024f\3\u0250"+
		"\3\u0250\3\u0250\3\u0250\3\u0250\3\u0251\3\u0251\3\u0251\3\u0251\3\u0251"+
		"\3\u0251\7\u0251\u27f5\n\u0251\f\u0251\16\u0251\u27f8\13\u0251\3\u0252"+
		"\3\u0252\3\u0252\3\u0252\3\u0252\5\u0252\u27ff\n\u0252\3\u0253\3\u0253"+
		"\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254\5\u0254\u2808\n\u0254\3\u0255"+
		"\3\u0255\3\u0255\3\u0255\3\u0255\3\u0255\3\u0255\3\u0255\3\u0255\3\u0255"+
		"\3\u0255\3\u0255\3\u0255\3\u0255\3\u0255\5\u0255\u2819\n\u0255\3\u0256"+
		"\3\u0256\3\u0256\3\u0256\5\u0256\u281f\n\u0256\3\u0257\3\u0257\3\u0257"+
		"\3\u0257\3\u0257\3\u0257\3\u0257\5\u0257\u2828\n\u0257\3\u0258\3\u0258"+
		"\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\5\u0258\u2831\n\u0258\3\u0259"+
		"\3\u0259\3\u0259\5\u0259\u2836\n\u0259\3\u025a\3\u025a\3\u025a\3\u025a"+
		"\3\u025a\3\u025a\7\u025a\u283e\n\u025a\f\u025a\16\u025a\u2841\13\u025a"+
		"\3\u025b\3\u025b\3\u025b\3\u025b\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c"+
		"\5\u025c\u284c\n\u025c\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d"+
		"\3\u025d\3\u025e\3\u025e\5\u025e\u2857\n\u025e\3\u025f\3\u025f\3\u025f"+
		"\3\u025f\5\u025f\u285d\n\u025f\3\u0260\3\u0260\3\u0260\3\u0260\3\u0260"+
		"\3\u0260\3\u0260\3\u0260\3\u0260\3\u0260\3\u0260\3\u0260\3\u0260\5\u0260"+
		"\u286c\n\u0260\3\u0261\3\u0261\3\u0261\3\u0261\3\u0261\3\u0261\5\u0261"+
		"\u2874\n\u0261\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262\u2882\n\u0262\3\u0263"+
		"\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263"+
		"\3\u0263\5\u0263\u288f\n\u0263\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264"+
		"\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264"+
		"\5\u0264\u289f\n\u0264\3\u0265\3\u0265\3\u0265\3\u0265\3\u0265\3\u0265"+
		"\3\u0265\3\u0265\5\u0265\u28a9\n\u0265\3\u0266\3\u0266\3\u0266\3\u0266"+
		"\3\u0266\3\u0266\3\u0267\3\u0267\3\u0268\3\u0268\3\u0268\3\u0268\3\u0268"+
		"\3\u0268\3\u0268\3\u0268\5\u0268\u28bb\n\u0268\3\u0269\3\u0269\3\u026a"+
		"\3\u026a\3\u026b\3\u026b\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c"+
		"\5\u026c\u28c9\n\u026c\3\u026d\3\u026d\3\u026d\3\u026d\3\u026d\3\u026d"+
		"\5\u026d\u28d1\n\u026d\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e"+
		"\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e\5\u026e\u28df\n\u026e"+
		"\3\u026f\3\u026f\3\u026f\3\u026f\3\u026f\3\u026f\7\u026f\u28e7\n\u026f"+
		"\f\u026f\16\u026f\u28ea\13\u026f\3\u0270\3\u0270\3\u0270\3\u0270\3\u0270"+
		"\3\u0270\7\u0270\u28f2\n\u0270\f\u0270\16\u0270\u28f5\13\u0270\3\u0271"+
		"\3\u0271\3\u0271\3\u0271\3\u0271\3\u0271\3\u0271\3\u0271\3\u0271\5\u0271"+
		"\u2900\n\u0271\3\u0272\3\u0272\3\u0272\3\u0272\3\u0272\3\u0272\7\u0272"+
		"\u2908\n\u0272\f\u0272\16\u0272\u290b\13\u0272\3\u0273\3\u0273\3\u0273"+
		"\3\u0273\3\u0273\3\u0273\3\u0273\3\u0273\3\u0273\3\u0273\5\u0273\u2917"+
		"\n\u0273\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274\7\u0274\u291f"+
		"\n\u0274\f\u0274\16\u0274\u2922\13\u0274\3\u0275\3\u0275\3\u0275\3\u0275"+
		"\3\u0275\5\u0275\u2929\n\u0275\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\5\u0276\u2933\n\u0276\3\u0277\3\u0277\3\u0278"+
		"\3\u0278\3\u0278\3\u0278\3\u0278\3\u0278\3\u0278\3\u0278\3\u0278\3\u0278"+
		"\3\u0278\3\u0278\3\u0278\3\u0278\5\u0278\u2945\n\u0278\3\u0279\3\u0279"+
		"\3\u0279\3\u0279\3\u0279\5\u0279\u294c\n\u0279\3\u027a\3\u027a\3\u027a"+
		"\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a"+
		"\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a"+
		"\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a\5\u027a\u296a"+
		"\n\u027a\3\u027b\3\u027b\3\u027b\3\u027b\3\u027b\3\u027b\3\u027b\5\u027b"+
		"\u2973";
	private static final String _serializedATNSegment1 =
		"\n\u027b\3\u027c\3\u027c\3\u027c\3\u027c\3\u027c\5\u027c\u297a\n\u027c"+
		"\3\u027d\3\u027d\3\u027d\3\u027d\3\u027d\3\u027d\3\u027e\3\u027e\3\u027e"+
		"\3\u027e\3\u027e\7\u027e\u2987\n\u027e\f\u027e\16\u027e\u298a\13\u027e"+
		"\3\u027f\3\u027f\3\u027f\3\u027f\3\u027f\3\u0280\3\u0280\3\u0280\5\u0280"+
		"\u2994\n\u0280\3\u0281\3\u0281\5\u0281\u2998\n\u0281\3\u0282\3\u0282\3"+
		"\u0282\3\u0282\5\u0282\u299e\n\u0282\3\u0283\3\u0283\3\u0283\3\u0283\3"+
		"\u0283\3\u0283\3\u0283\3\u0283\3\u0283\3\u0283\3\u0283\3\u0283\3\u0283"+
		"\3\u0283\5\u0283\u29ae\n\u0283\3\u0284\3\u0284\5\u0284\u29b2\n\u0284\3"+
		"\u0285\3\u0285\3\u0285\3\u0285\3\u0285\7\u0285\u29b9\n\u0285\f\u0285\16"+
		"\u0285\u29bc\13\u0285\3\u0286\3\u0286\3\u0286\7\u0286\u29c1\n\u0286\f"+
		"\u0286\16\u0286\u29c4\13\u0286\3\u0287\3\u0287\5\u0287\u29c8\n\u0287\3"+
		"\u0288\3\u0288\5\u0288\u29cc\n\u0288\3\u0289\3\u0289\3\u0289\7\u0289\u29d1"+
		"\n\u0289\f\u0289\16\u0289\u29d4\13\u0289\3\u028a\3\u028a\3\u028a\3\u028a"+
		"\3\u028a\5\u028a\u29db\n\u028a\3\u028a\5\u028a\u29de\n\u028a\3\u028b\3"+
		"\u028b\3\u028b\3\u028b\3\u028b\3\u028b\7\u028b\u29e6\n\u028b\f\u028b\16"+
		"\u028b\u29e9\13\u028b\3\u028c\3\u028c\3\u028c\3\u028c\5\u028c\u29ef\n"+
		"\u028c\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\7\u028d\u29f7\n"+
		"\u028d\f\u028d\16\u028d\u29fa\13\u028d\3\u028e\3\u028e\3\u028f\3\u028f"+
		"\3\u0290\3\u0290\3\u0291\3\u0291\3\u0291\3\u0291\5\u0291\u2a06\n\u0291"+
		"\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292"+
		"\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292"+
		"\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292"+
		"\3\u0292\3\u0292\3\u0292\3\u0292\5\u0292\u2a27\n\u0292\3\u0293\3\u0293"+
		"\3\u0294\3\u0294\3\u0295\3\u0295\3\u0296\3\u0296\3\u0297\3\u0297\3\u0297"+
		"\3\u0298\6\u0298\u2a35\n\u0298\r\u0298\16\u0298\u2a36\3\u0298\3\u0298"+
		"\3\u0298\7\u0298\u2a3c\n\u0298\f\u0298\16\u0298\u2a3f\13\u0298\3\u0298"+
		"\3\u0298\5\u0298\u2a43\n\u0298\3\u0299\3\u0299\3\u0299\5\u0299\u2a48\n"+
		"\u0299\3\u029a\3\u029a\3\u029a\3\u029a\3\u029a\5\u029a\u2a4f\n\u029a\3"+
		"\u029b\3\u029b\3\u029c\3\u029c\3\u029c\5\u029c\u2a56\n\u029c\3\u029d\3"+
		"\u029d\3\u029d\3\u029d\3\u029d\3\u029d\7\u029d\u2a5e\n\u029d\f\u029d\16"+
		"\u029d\u2a61\13\u029d\3\u029e\3\u029e\3\u029e\3\u029e\5\u029e\u2a67\n"+
		"\u029e\3\u029f\3\u029f\3\u029f\3\u029f\5\u029f\u2a6d\n\u029f\3\u02a0\3"+
		"\u02a0\3\u02a0\3\u02a0\5\u02a0\u2a73\n\u02a0\3\u02a1\3\u02a1\3\u02a1\3"+
		"\u02a1\3\u02a1\3\u02a1\5\u02a1\u2a7b\n\u02a1\3\u02a2\3\u02a2\3\u02a2\3"+
		"\u02a2\3\u02a2\3\u02a2\3\u02a2\5\u02a2\u2a84\n\u02a2\3\u02a3\3\u02a3\3"+
		"\u02a4\3\u02a4\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5"+
		"\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5"+
		"\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5"+
		"\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5"+
		"\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5"+
		"\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\3\u02a5\5\u02a5"+
		"\u2abd\n\u02a5\3\u02a6\3\u02a6\3\u02a7\3\u02a7\3\u02a8\3\u02a8\3\u02a8"+
		"\3\u02a8\3\u02a9\3\u02a9\3\u02a9\7\u02a9\u2aca\n\u02a9\f\u02a9\16\u02a9"+
		"\u2acd\13\u02a9\3\u02aa\3\u02aa\3\u02aa\3\u02aa\3\u02aa\3\u02aa\3\u02aa"+
		"\3\u02aa\3\u02aa\3\u02aa\3\u02aa\3\u02aa\3\u02aa\3\u02aa\3\u02aa\3\u02aa"+
		"\3\u02aa\3\u02aa\3\u02aa\3\u02aa\5\u02aa\u2ae3\n\u02aa\3\u02ab\3\u02ab"+
		"\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab"+
		"\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab"+
		"\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\5\u02ab\u2aff\n\u02ab"+
		"\3\u02ac\3\u02ac\3\u02ad\3\u02ad\3\u02ad\3\u02ad\5\u02ad\u2b07\n\u02ad"+
		"\3\u02ae\3\u02ae\5\u02ae\u2b0b\n\u02ae\3\u02af\3\u02af\3\u02af\3\u02af"+
		"\3\u02af\3\u02af\3\u02af\3\u02b0\3\u02b0\3\u02b0\3\u02b0\3\u02b0\3\u02b0"+
		"\3\u02b0\3\u02b0\5\u02b0\u2b1c\n\u02b0\3\u02b1\3\u02b1\3\u02b2\3\u02b2"+
		"\3\u02b2\3\u02b2\3\u02b2\7\u02b2\u2b25\n\u02b2\f\u02b2\16\u02b2\u2b28"+
		"\13\u02b2\3\u02b3\3\u02b3\3\u02b3\3\u02b3\3\u02b4\3\u02b4\3\u02b4\5\u02b4"+
		"\u2b31\n\u02b4\3\u02b5\3\u02b5\3\u02b5\3\u02b5\3\u02b5\3\u02b5\3\u02b5"+
		"\3\u02b5\3\u02b5\3\u02b5\3\u02b5\3\u02b5\3\u02b5\3\u02b5\3\u02b5\3\u02b5"+
		"\3\u02b5\3\u02b5\3\u02b5\3\u02b5\3\u02b5\3\u02b5\5\u02b5\u2b49\n\u02b5"+
		"\3\u02b6\3\u02b6\3\u02b6\3\u02b6\5\u02b6\u2b4f\n\u02b6\3\u02b7\3\u02b7"+
		"\3\u02b8\3\u02b8\3\u02b8\3\u02b8\3\u02b8\5\u02b8\u2b58\n\u02b8\3\u02b9"+
		"\3\u02b9\3\u02b9\3\u02b9\3\u02b9\3\u02b9\7\u02b9\u2b60\n\u02b9\f\u02b9"+
		"\16\u02b9\u2b63\13\u02b9\3\u02ba\3\u02ba\3\u02ba\3\u02bb\3\u02bb\3\u02bc"+
		"\3\u02bc\5\u02bc\u2b6c\n\u02bc\3\u02bd\3\u02bd\3\u02be\3\u02be\5\u02be"+
		"\u2b72\n\u02be\3\u02bf\3\u02bf\3\u02c0\3\u02c0\3\u02c0\5\u02c0\u2b79\n"+
		"\u02c0\3\u02c1\3\u02c1\3\u02c1\5\u02c1\u2b7e\n\u02c1\3\u02c2\3\u02c2\3"+
		"\u02c2\3\u02c2\5\u02c2\u2b84\n\u02c2\3\u02c3\3\u02c3\5\u02c3\u2b88\n\u02c3"+
		"\3\u02c4\3\u02c4\3\u02c5\3\u02c5\3\u02c5\7\u02c5\u2b8f\n\u02c5\f\u02c5"+
		"\16\u02c5\u2b92\13\u02c5\3\u02c6\3\u02c6\3\u02c6\3\u02c6\3\u02c6\3\u02c6"+
		"\3\u02c6\3\u02c6\3\u02c6\3\u02c6\3\u02c6\3\u02c6\3\u02c6\3\u02c6\3\u02c6"+
		"\3\u02c6\3\u02c6\3\u02c6\3\u02c6\3\u02c6\3\u02c6\3\u02c6\3\u02c6\3\u02c6"+
		"\3\u02c6\3\u02c6\3\u02c6\5\u02c6\u2baf\n\u02c6\3\u02c7\3\u02c7\3\u02c7"+
		"\3\u02c7\3\u02c8\3\u02c8\3\u02c8\3\u02c8\3\u02c8\3\u02c8\3\u02c8\3\u02c8"+
		"\3\u02c8\3\u02c8\3\u02c8\3\u02c8\3\u02c8\3\u02c8\5\u02c8\u2bc3\n\u02c8"+
		"\3\u02c9\3\u02c9\5\u02c9\u2bc7\n\u02c9\3\u02ca\3\u02ca\3\u02ca\3\u02ca"+
		"\3\u02ca\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cc\3\u02cc"+
		"\3\u02cc\5\u02cc\u2bd7\n\u02cc\3\u02cd\3\u02cd\3\u02cd\3\u02cd\3\u02cd"+
		"\3\u02cd\7\u02cd\u2bdf\n\u02cd\f\u02cd\16\u02cd\u2be2\13\u02cd\3\u02ce"+
		"\3\u02ce\3\u02ce\3\u02ce\3\u02cf\3\u02cf\3\u02d0\3\u02d0\3\u02d1\3\u02d1"+
		"\3\u02d1\5\u02d1\u2bef\n\u02d1\3\u02d1\3\u02d1\3\u02d1\3\u02d1\3\u02d1"+
		"\7\u02d1\u2bf6\n\u02d1\f\u02d1\16\u02d1\u2bf9\13\u02d1\3\u02d2\3\u02d2"+
		"\3\u02d2\3\u02d2\3\u02d2\3\u02d2\3\u02d2\3\u02d2\3\u02d2\3\u02d2\3\u02d3"+
		"\3\u02d3\3\u02d3\3\u02d3\3\u02d3\3\u02d3\3\u02d3\7\u02d3\u2c0c\n\u02d3"+
		"\f\u02d3\16\u02d3\u2c0f\13\u02d3\3\u02d4\3\u02d4\3\u02d4\5\u02d4\u2c14"+
		"\n\u02d4\3\u02d5\3\u02d5\3\u02d5\3\u02d5\3\u02d5\3\u02d5\3\u02d5\3\u02d5"+
		"\3\u02d6\3\u02d6\5\u02d6\u2c20\n\u02d6\3\u02d7\3\u02d7\3\u02d7\3\u02d7"+
		"\3\u02d7\7\u02d7\u2c27\n\u02d7\f\u02d7\16\u02d7\u2c2a\13\u02d7\3\u02d8"+
		"\3\u02d8\3\u02d8\3\u02d8\3\u02d8\3\u02d9\3\u02d9\3\u02d9\5\u02d9\u2c34"+
		"\n\u02d9\3\u02da\3\u02da\3\u02da\3\u02db\3\u02db\3\u02db\3\u02db\3\u02db"+
		"\3\u02dc\3\u02dc\3\u02dc\3\u02dc\3\u02dc\3\u02dd\3\u02dd\3\u02dd\3\u02dd"+
		"\3\u02dd\3\u02dd\3\u02dd\3\u02dd\3\u02dd\3\u02dd\3\u02dd\3\u02dd\3\u02dd"+
		"\3\u02dd\3\u02dd\3\u02dd\3\u02dd\3\u02dd\3\u02dd\3\u02dd\3\u02dd\3\u02dd"+
		"\3\u02dd\3\u02dd\3\u02dd\3\u02dd\3\u02dd\5\u02dd\u2c5e\n\u02dd\3\u02de"+
		"\3\u02de\3\u02de\5\u02de\u2c63\n\u02de\3\u02df\3\u02df\3\u02df\3\u02df"+
		"\3\u02df\7\u02df\u2c6a\n\u02df\f\u02df\16\u02df\u2c6d\13\u02df\3\u02df"+
		"\3\u02df\5\u02df\u2c71\n\u02df\3\u02e0\3\u02e0\5\u02e0\u2c75\n\u02e0\3"+
		"\u02e1\3\u02e1\3\u02e1\5\u02e1\u2c7a\n\u02e1\3\u02e2\3\u02e2\3\u02e3\3"+
		"\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e4"+
		"\3\u02e4\3\u02e4\5\u02e4\u2c8a\n\u02e4\3\u02e5\3\u02e5\3\u02e5\3\u02e5"+
		"\3\u02e6\3\u02e6\3\u02e7\3\u02e7\3\u02e7\3\u02e7\3\u02e7\3\u02e7\3\u02e7"+
		"\3\u02e7\3\u02e7\3\u02e7\3\u02e7\3\u02e7\3\u02e7\3\u02e7\3\u02e7\3\u02e7"+
		"\3\u02e7\3\u02e7\3\u02e7\3\u02e7\3\u02e7\5\u02e7\u2ca7\n\u02e7\3\u02e8"+
		"\3\u02e8\5\u02e8\u2cab\n\u02e8\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9"+
		"\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9"+
		"\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9"+
		"\3\u02e9\3\u02e9\3\u02e9\5\u02e9\u2cc7\n\u02e9\3\u02ea\3\u02ea\3\u02ea"+
		"\3\u02ea\3\u02ea\3\u02ea\3\u02ea\3\u02ea\5\u02ea\u2cd1\n\u02ea\3\u02eb"+
		"\3\u02eb\3\u02eb\5\u02eb\u2cd6\n\u02eb\3\u02eb\3\u02eb\3\u02eb\7\u02eb"+
		"\u2cdb\n\u02eb\f\u02eb\16\u02eb\u2cde\13\u02eb\3\u02ec\3\u02ec\3\u02ec"+
		"\5\u02ec\u2ce3\n\u02ec\3\u02ed\3\u02ed\3\u02ed\3\u02ed\3\u02ee\3\u02ee"+
		"\3\u02ee\3\u02ee\3\u02ee\5\u02ee\u2cee\n\u02ee\3\u02ef\3\u02ef\3\u02ef"+
		"\3\u02ef\3\u02ef\3\u02f0\3\u02f0\3\u02f0\5\u02f0\u2cf8\n\u02f0\3\u02f1"+
		"\3\u02f1\3\u02f1\3\u02f1\3\u02f1\3\u02f1\3\u02f1\3\u02f2\3\u02f2\3\u02f2"+
		"\3\u02f3\3\u02f3\3\u02f3\3\u02f3\3\u02f3\3\u02f3\3\u02f3\3\u02f3\3\u02f3"+
		"\5\u02f3\u2d0d\n\u02f3\3\u02f3\3\u02f3\3\u02f4\3\u02f4\3\u02f4\5\u02f4"+
		"\u2d14\n\u02f4\3\u02f5\3\u02f5\3\u02f5\3\u02f5\3\u02f5\3\u02f5\7\u02f5"+
		"\u2d1c\n\u02f5\f\u02f5\16\u02f5\u2d1f\13\u02f5\3\u02f6\3\u02f6\3\u02f6"+
		"\3\u02f6\3\u02f6\3\u02f6\5\u02f6\u2d27\n\u02f6\3\u02f7\3\u02f7\3\u02f7"+
		"\3\u02f7\3\u02f7\3\u02f7\3\u02f7\3\u02f7\3\u02f7\3\u02f7\3\u02f7\3\u02f7"+
		"\3\u02f7\3\u02f7\3\u02f7\3\u02f7\3\u02f7\3\u02f7\3\u02f7\3\u02f7\3\u02f7"+
		"\3\u02f7\3\u02f7\3\u02f7\3\u02f7\5\u02f7\u2d42\n\u02f7\3\u02f8\3\u02f8"+
		"\3\u02f8\3\u02f8\3\u02f8\5\u02f8\u2d49\n\u02f8\3\u02f9\3\u02f9\3\u02f9"+
		"\3\u02f9\3\u02f9\3\u02f9\7\u02f9\u2d51\n\u02f9\f\u02f9\16\u02f9\u2d54"+
		"\13\u02f9\3\u02fa\3\u02fa\3\u02fa\5\u02fa\u2d59\n\u02fa\3\u02fb\3\u02fb"+
		"\3\u02fb\7\u02fb\u2d5e\n\u02fb\f\u02fb\16\u02fb\u2d61\13\u02fb\3\u02fc"+
		"\3\u02fc\3\u02fc\3\u02fc\5\u02fc\u2d67\n\u02fc\3\u02fd\3\u02fd\5\u02fd"+
		"\u2d6b\n\u02fd\3\u02fe\3\u02fe\3\u02fe\3\u02fe\3\u02fe\3\u02fe\3\u02fe"+
		"\3\u02fe\3\u02ff\3\u02ff\3\u0300\3\u0300\3\u0300\5\u0300\u2d7a\n\u0300"+
		"\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301"+
		"\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301"+
		"\3\u0301\3\u0301\3\u0301\3\u0301\5\u0301\u2d92\n\u0301\3\u0302\3\u0302"+
		"\3\u0302\3\u0302\3\u0302\3\u0303\3\u0303\3\u0303\3\u0303\3\u0304\3\u0304"+
		"\3\u0304\3\u0305\3\u0305\3\u0305\3\u0305\3\u0306\3\u0306\3\u0306\3\u0306"+
		"\3\u0307\3\u0307\3\u0307\3\u0307\3\u0307\3\u0307\5\u0307\u2dae\n\u0307"+
		"\3\u0308\3\u0308\3\u0308\3\u0308\3\u0308\3\u0308\3\u0308\3\u0308\3\u0308"+
		"\3\u0308\3\u0308\3\u0308\3\u0308\5\u0308\u2dbd\n\u0308\3\u0309\3\u0309"+
		"\5\u0309\u2dc1\n\u0309\3\u030a\3\u030a\3\u030a\5\u030a\u2dc6\n\u030a\3"+
		"\u030b\3\u030b\3\u030b\3\u030b\3\u030b\7\u030b\u2dcd\n\u030b\f\u030b\16"+
		"\u030b\u2dd0\13\u030b\3\u030c\3\u030c\3\u030c\3\u030c\3\u030c\3\u030d"+
		"\3\u030d\3\u030d\3\u030d\3\u030d\3\u030d\7\u030d\u2ddd\n\u030d\f\u030d"+
		"\16\u030d\u2de0\13\u030d\3\u030e\3\u030e\3\u030e\5\u030e\u2de5\n\u030e"+
		"\3\u030f\3\u030f\5\u030f\u2de9\n\u030f\3\u0310\3\u0310\5\u0310\u2ded\n"+
		"\u0310\3\u0311\3\u0311\5\u0311\u2df1\n\u0311\3\u0312\3\u0312\3\u0312\5"+
		"\u0312\u2df6\n\u0312\3\u0313\3\u0313\5\u0313\u2dfa\n\u0313\3\u0314\3\u0314"+
		"\3\u0315\3\u0315\3\u0315\3\u0315\3\u0315\3\u0315\3\u0315\3\u0315\3\u0316"+
		"\3\u0316\3\u0317\3\u0317\3\u0318\3\u0318\3\u0319\3\u0319\3\u031a\3\u031a"+
		"\3\u031a\3\u031b\3\u031b\3\u031b\3\u031b\3\u031b\5\u031b\u2e16\n\u031b"+
		"\3\u031b\2p\24\26\60<>dz~\u0086\u008a\u009a\u00a4\u00aa\u00b6\u00b8\u00c2"+
		"\u00ce\u00da\u00e2\u00f6\u0120\u0128\u0140\u0146\u0150\u0158\u015c\u019a"+
		"\u01a0\u01b4\u01ba\u01c0\u01c4\u01d0\u01d8\u01de\u01e6\u01f6\u020c\u0210"+
		"\u0212\u0230\u0236\u0246\u0258\u0260\u0270\u0272\u0278\u028a\u028e\u0298"+
		"\u029e\u02a2\u02b0\u02b6\u02ce\u02e2\u02f6\u0302\u031a\u032a\u0338\u0356"+
		"\u036c\u0374\u0390\u03aa\u03b0\u03b6\u03c2\u03ca\u03fe\u0410\u0418\u041e"+
		"\u042e\u043a\u0446\u044c\u0450\u0454\u045a\u0488\u048c\u04a0\u04b2\u04dc"+
		"\u04de\u04e2\u04e6\u04fa\u0508\u050a\u0514\u0518\u0538\u0550\u0562\u0570"+
		"\u0588\u0598\u05a0\u05a4\u05ac\u05d4\u05e8\u05f0\u0614\u0618\u031c\2\4"+
		"\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNP"+
		"RTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e"+
		"\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6"+
		"\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be"+
		"\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6"+
		"\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee"+
		"\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106"+
		"\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e"+
		"\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136"+
		"\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e"+
		"\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166"+
		"\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e"+
		"\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196"+
		"\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae"+
		"\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6"+
		"\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de"+
		"\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6"+
		"\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e"+
		"\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226"+
		"\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e"+
		"\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256"+
		"\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e"+
		"\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286"+
		"\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e"+
		"\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6"+
		"\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce"+
		"\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6"+
		"\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe"+
		"\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316"+
		"\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e"+
		"\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346"+
		"\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e"+
		"\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376"+
		"\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c\u038e"+
		"\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6"+
		"\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be"+
		"\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6"+
		"\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee"+
		"\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406"+
		"\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418\u041a\u041c\u041e"+
		"\u0420\u0422\u0424\u0426\u0428\u042a\u042c\u042e\u0430\u0432\u0434\u0436"+
		"\u0438\u043a\u043c\u043e\u0440\u0442\u0444\u0446\u0448\u044a\u044c\u044e"+
		"\u0450\u0452\u0454\u0456\u0458\u045a\u045c\u045e\u0460\u0462\u0464\u0466"+
		"\u0468\u046a\u046c\u046e\u0470\u0472\u0474\u0476\u0478\u047a\u047c\u047e"+
		"\u0480\u0482\u0484\u0486\u0488\u048a\u048c\u048e\u0490\u0492\u0494\u0496"+
		"\u0498\u049a\u049c\u049e\u04a0\u04a2\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae"+
		"\u04b0\u04b2\u04b4\u04b6\u04b8\u04ba\u04bc\u04be\u04c0\u04c2\u04c4\u04c6"+
		"\u04c8\u04ca\u04cc\u04ce\u04d0\u04d2\u04d4\u04d6\u04d8\u04da\u04dc\u04de"+
		"\u04e0\u04e2\u04e4\u04e6\u04e8\u04ea\u04ec\u04ee\u04f0\u04f2\u04f4\u04f6"+
		"\u04f8\u04fa\u04fc\u04fe\u0500\u0502\u0504\u0506\u0508\u050a\u050c\u050e"+
		"\u0510\u0512\u0514\u0516\u0518\u051a\u051c\u051e\u0520\u0522\u0524\u0526"+
		"\u0528\u052a\u052c\u052e\u0530\u0532\u0534\u0536\u0538\u053a\u053c\u053e"+
		"\u0540\u0542\u0544\u0546\u0548\u054a\u054c\u054e\u0550\u0552\u0554\u0556"+
		"\u0558\u055a\u055c\u055e\u0560\u0562\u0564\u0566\u0568\u056a\u056c\u056e"+
		"\u0570\u0572\u0574\u0576\u0578\u057a\u057c\u057e\u0580\u0582\u0584\u0586"+
		"\u0588\u058a\u058c\u058e\u0590\u0592\u0594\u0596\u0598\u059a\u059c\u059e"+
		"\u05a0\u05a2\u05a4\u05a6\u05a8\u05aa\u05ac\u05ae\u05b0\u05b2\u05b4\u05b6"+
		"\u05b8\u05ba\u05bc\u05be\u05c0\u05c2\u05c4\u05c6\u05c8\u05ca\u05cc\u05ce"+
		"\u05d0\u05d2\u05d4\u05d6\u05d8\u05da\u05dc\u05de\u05e0\u05e2\u05e4\u05e6"+
		"\u05e8\u05ea\u05ec\u05ee\u05f0\u05f2\u05f4\u05f6\u05f8\u05fa\u05fc\u05fe"+
		"\u0600\u0602\u0604\u0606\u0608\u060a\u060c\u060e\u0610\u0612\u0614\u0616"+
		"\u0618\u061a\u061c\u061e\u0620\u0622\u0624\u0626\u0628\u062a\u062c\u062e"+
		"\u0630\u0632\u0634\2\'\4\2\u00ab\u00ab\u00e5\u00e5\4\2\u00da\u00da\u0103"+
		"\u0103\4\2ff\u0084\u0084\13\2DD\u00c6\u00c6\u00cb\u00cb\u00d9\u00d9\u0101"+
		"\u0101\u0109\u0109\u0173\u0173\u0176\u0176\u01d4\u01d4\7\2DD~~\u00dc\u00dc"+
		"\u010e\u010e\u018e\u018e\4\2\u0082\u0082\u0108\u0108\3\2\u01de\u01df\4"+
		"\2\u0082\u0082\u01bb\u01bb\4\2\u0172\u0172\u01bb\u01bb\4\2\u00f9\u00f9"+
		"\u0145\u0145\5\2\u015e\u015e\u0182\u0182\u01db\u01db\4\2ffjj\7\2\u00fa"+
		"\u00fa\u0166\u0166\u017b\u017b\u0186\u0186\u01e5\u01e6\5\2\u00d5\u00d5"+
		"\u0160\u0160\u017a\u017a\6\2~~\u00dc\u00dc\u010e\u010e\u018e\u018e\3\2"+
		"EF\4\2\u0089\u0089\u017a\u017a\4\2\u015d\u015d\u01bb\u01bb\4\2\u00f5\u00f5"+
		"\u0129\u0129\3\2\20\21\5\2\13\13\17\22  \b\2\f\f\24\25\31\31\33\33\35"+
		"\35.\61\5\2\13\13\22\22  \7\2\f\f\24\25\31\31\33\33\35\35\4\2\u00cc\u00cc"+
		"\u00e2\u00e2\5\2DDHH\u0080\u0080\3\2*-\3\2\62C\t\2\13\f\20\27\31\31\33"+
		"\33\35\36  \")\3\2\u0201\u0204\13\2\u00a2\u00a2\u00a7\u00bd\u00bf\u019f"+
		"\u01ce\u01e2\u01e5\u01f3\u01f5\u01f5\u01f7\u01f7\u01f9\u01f9\u01fc\u0206"+
		"\5\2\u0090\u00a1\u00a3\u00a6\u01f6\u01f6\5\2Dln\u008f\u01e4\u01e4\4\2"+
		"dd\u009a\u009a\4\2\f\f\30\30\4\2\u00cd\u00cd\u0219\u0219&\2GGIIQS[[__"+
		"cc\u0082\u0082\u009a\u009a\u00a1\u00a1\u00a8\u00a8\u00b6\u00b6\u00bf\u00bf"+
		"\u00c3\u00c3\u00c7\u00c7\u00cd\u00cd\u00d2\u00d2\u00f5\u00f5\u00f8\u00f8"+
		"\u010e\u010e\u0116\u0116\u0126\u0126\u0129\u012a\u0134\u0134\u0142\u0142"+
		"\u0150\u0150\u0156\u0156\u015c\u015c\u0160\u0161\u016a\u016a\u0185\u0185"+
		"\u01ce\u01cf\u01fb\u01fb\u0208\u0214\u0216\u0216\u0218\u0224\u0226\u0226"+
		"\2\u31ef\2\u0636\3\2\2\2\4\u0639\3\2\2\2\6\u063b\3\2\2\2\b\u0642\3\2\2"+
		"\2\n\u06c3\3\2\2\2\f\u06c5\3\2\2\2\16\u06c9\3\2\2\2\20\u06cc\3\2\2\2\22"+
		"\u06d4\3\2\2\2\24\u06d6\3\2\2\2\26\u06de\3\2\2\2\30\u06fa\3\2\2\2\32\u0709"+
		"\3\2\2\2\34\u070b\3\2\2\2\36\u071d\3\2\2\2 \u0723\3\2\2\2\"\u073d\3\2"+
		"\2\2$\u0757\3\2\2\2&\u0759\3\2\2\2(\u075f\3\2\2\2*\u0766\3\2\2\2,\u0786"+
		"\3\2\2\2.\u078a\3\2\2\2\60\u078c\3\2\2\2\62\u079a\3\2\2\2\64\u07a4\3\2"+
		"\2\2\66\u07ae\3\2\2\28\u07c0\3\2\2\2:\u07de\3\2\2\2<\u07e0\3\2\2\2>\u07eb"+
		"\3\2\2\2@\u07f8\3\2\2\2B\u0801\3\2\2\2D\u0807\3\2\2\2F\u0818\3\2\2\2H"+
		"\u081d\3\2\2\2J\u0821\3\2\2\2L\u0823\3\2\2\2N\u082e\3\2\2\2P\u0832\3\2"+
		"\2\2R\u0837\3\2\2\2T\u083c\3\2\2\2V\u084c\3\2\2\2X\u084e\3\2\2\2Z\u0855"+
		"\3\2\2\2\\\u0857\3\2\2\2^\u0859\3\2\2\2`\u0865\3\2\2\2b\u0911\3\2\2\2"+
		"d\u0913\3\2\2\2f\u0926\3\2\2\2h\u0928\3\2\2\2j\u0a28\3\2\2\2l\u0a2f\3"+
		"\2\2\2n\u0a34\3\2\2\2p\u0a39\3\2\2\2r\u0a3e\3\2\2\2t\u0a46\3\2\2\2v\u0a48"+
		"\3\2\2\2x\u0a4f\3\2\2\2z\u0a51\3\2\2\2|\u0a6b\3\2\2\2~\u0a6d\3\2\2\2\u0080"+
		"\u0a81\3\2\2\2\u0082\u0a9d\3\2\2\2\u0084\u0a9f\3\2\2\2\u0086\u0aa2\3\2"+
		"\2\2\u0088\u0aad\3\2\2\2\u008a\u0ab2\3\2\2\2\u008c\u0ad7\3\2\2\2\u008e"+
		"\u0add\3\2\2\2\u0090\u0af5\3\2\2\2\u0092\u0af7\3\2\2\2\u0094\u0afb\3\2"+
		"\2\2\u0096\u0b00\3\2\2\2\u0098\u0b07\3\2\2\2\u009a\u0b09\3\2\2\2\u009c"+
		"\u0b34\3\2\2\2\u009e\u0b38\3\2\2\2\u00a0\u0b3f\3\2\2\2\u00a2\u0b43\3\2"+
		"\2\2\u00a4\u0b45\3\2\2\2\u00a6\u0b50\3\2\2\2\u00a8\u0b5b\3\2\2\2\u00aa"+
		"\u0b5d\3\2\2\2\u00ac\u0b68\3\2\2\2\u00ae\u0bc7\3\2\2\2\u00b0\u0bd5\3\2"+
		"\2\2\u00b2\u0bd9\3\2\2\2\u00b4\u0be0\3\2\2\2\u00b6\u0be2\3\2\2\2\u00b8"+
		"\u0bed\3\2\2\2\u00ba\u0bfb\3\2\2\2\u00bc\u0bff\3\2\2\2\u00be\u0c01\3\2"+
		"\2\2\u00c0\u0c0e\3\2\2\2\u00c2\u0c10\3\2\2\2\u00c4\u0c20\3\2\2\2\u00c6"+
		"\u0c4a\3\2\2\2\u00c8\u0c4f\3\2\2\2\u00ca\u0c58\3\2\2\2\u00cc\u0c5a\3\2"+
		"\2\2\u00ce\u0c5e\3\2\2\2\u00d0\u0c6a\3\2\2\2\u00d2\u0c71\3\2\2\2\u00d4"+
		"\u0cac\3\2\2\2\u00d6\u0cb1\3\2\2\2\u00d8\u0cb8\3\2\2\2\u00da\u0cba\3\2"+
		"\2\2\u00dc\u0cc5\3\2\2\2\u00de\u0ccd\3\2\2\2\u00e0\u0cd6\3\2\2\2\u00e2"+
		"\u0cd8\3\2\2\2\u00e4\u0cf5\3\2\2\2\u00e6\u0cfd\3\2\2\2\u00e8\u0d08\3\2"+
		"\2\2\u00ea\u0d0a\3\2\2\2\u00ec\u0d0e\3\2\2\2\u00ee\u0d1a\3\2\2\2\u00f0"+
		"\u0d22\3\2\2\2\u00f2\u0d26\3\2\2\2\u00f4\u0d28\3\2\2\2\u00f6\u0d2f\3\2"+
		"\2\2\u00f8\u0d48\3\2\2\2\u00fa\u0d4d\3\2\2\2\u00fc\u0d54\3\2\2\2\u00fe"+
		"\u0d62\3\2\2\2\u0100\u0d67\3\2\2\2\u0102\u0d6e\3\2\2\2\u0104\u0d70\3\2"+
		"\2\2\u0106\u0d89\3\2\2\2\u0108\u0d9b\3\2\2\2\u010a\u0db0\3\2\2\2\u010c"+
		"\u0db2\3\2\2\2\u010e\u0dbf\3\2\2\2\u0110\u0dd6\3\2\2\2\u0112\u0dd8\3\2"+
		"\2\2\u0114\u0de0\3\2\2\2\u0116\u0de2\3\2\2\2\u0118\u0df8\3\2\2\2\u011a"+
		"\u0e06\3\2\2\2\u011c\u0e0a\3\2\2\2\u011e\u0e11\3\2\2\2\u0120\u0e13\3\2"+
		"\2\2\u0122\u0e3f\3\2\2\2\u0124\u0e43\3\2\2\2\u0126\u0e4b\3\2\2\2\u0128"+
		"\u0e4d\3\2\2\2\u012a\u0e6a\3\2\2\2\u012c\u0e6e\3\2\2\2\u012e\u0e74\3\2"+
		"\2\2\u0130\u0e79\3\2\2\2\u0132\u0e7f\3\2\2\2\u0134\u0e83\3\2\2\2\u0136"+
		"\u0e87\3\2\2\2\u0138\u0e89\3\2\2\2\u013a\u0e94\3\2\2\2\u013c\u0e9e\3\2"+
		"\2\2\u013e\u0eaf\3\2\2\2\u0140\u0eb1\3\2\2\2\u0142\u0ec0\3\2\2\2\u0144"+
		"\u0ec2\3\2\2\2\u0146\u0ec8\3\2\2\2\u0148\u0ed0\3\2\2\2\u014a\u0f3b\3\2"+
		"\2\2\u014c\u0f3d\3\2\2\2\u014e\u0f4d\3\2\2\2\u0150\u0f4f\3\2\2\2\u0152"+
		"\u0f5b\3\2\2\2\u0154\u0f6c\3\2\2\2\u0156\u0f74\3\2\2\2\u0158\u0f76\3\2"+
		"\2\2\u015a\u0f81\3\2\2\2\u015c\u0f86\3\2\2\2\u015e\u0f98\3\2\2\2\u0160"+
		"\u0f9a\3\2\2\2\u0162\u0f9d\3\2\2\2\u0164\u0f9f\3\2\2\2\u0166\u0fba\3\2"+
		"\2\2\u0168\u0fbf\3\2\2\2\u016a\u0fc5\3\2\2\2\u016c\u0fc9\3\2\2\2\u016e"+
		"\u0fdb\3\2\2\2\u0170\u1015\3\2\2\2\u0172\u1017\3\2\2\2\u0174\u1026\3\2"+
		"\2\2\u0176\u102e\3\2\2\2\u0178\u1045\3\2\2\2\u017a\u1049\3\2\2\2\u017c"+
		"\u105d\3\2\2\2\u017e\u105f\3\2\2\2\u0180\u1068\3\2\2\2\u0182\u1073\3\2"+
		"\2\2\u0184\u1082\3\2\2\2\u0186\u108b\3\2\2\2\u0188\u1090\3\2\2\2\u018a"+
		"\u1095\3\2\2\2\u018c\u109a\3\2\2\2\u018e\u109f\3\2\2\2\u0190\u10a1\3\2"+
		"\2\2\u0192\u10a3\3\2\2\2\u0194\u10ac\3\2\2\2\u0196\u10d4\3\2\2\2\u0198"+
		"\u10da\3\2\2\2\u019a\u10dc\3\2\2\2\u019c\u10ee\3\2\2\2\u019e\u10f3\3\2"+
		"\2\2\u01a0\u10f5\3\2\2\2\u01a2\u10ff\3\2\2\2\u01a4\u1104\3\2\2\2\u01a6"+
		"\u1106\3\2\2\2\u01a8\u1108\3\2\2\2\u01aa\u110f\3\2\2\2\u01ac\u1113\3\2"+
		"\2\2\u01ae\u1115\3\2\2\2\u01b0\u111d\3\2\2\2\u01b2\u111f\3\2\2\2\u01b4"+
		"\u1124\3\2\2\2\u01b6\u1132\3\2\2\2\u01b8\u1137\3\2\2\2\u01ba\u1139\3\2"+
		"\2\2\u01bc\u114c\3\2\2\2\u01be\u1168\3\2\2\2\u01c0\u116a\3\2\2\2\u01c2"+
		"\u1175\3\2\2\2\u01c4\u117b\3\2\2\2\u01c6\u1186\3\2\2\2\u01c8\u1192\3\2"+
		"\2\2\u01ca\u1194\3\2\2\2\u01cc\u120b\3\2\2\2\u01ce\u120d\3\2\2\2\u01d0"+
		"\u1211\3\2\2\2\u01d2\u1221\3\2\2\2\u01d4\u122d\3\2\2\2\u01d6\u122f\3\2"+
		"\2\2\u01d8\u1233\3\2\2\2\u01da\u123e\3\2\2\2\u01dc\u1244\3\2\2\2\u01de"+
		"\u1246\3\2\2\2\u01e0\u1276\3\2\2\2\u01e2\u127c\3\2\2\2\u01e4\u127e\3\2"+
		"\2\2\u01e6\u128c\3\2\2\2\u01e8\u12b4\3\2\2\2\u01ea\u12b8\3\2\2\2\u01ec"+
		"\u12bd\3\2\2\2\u01ee\u12c6\3\2\2\2\u01f0\u12ca\3\2\2\2\u01f2\u12cc\3\2"+
		"\2\2\u01f4\u12e5\3\2\2\2\u01f6\u12e7\3\2\2\2\u01f8\u12fe\3\2\2\2\u01fa"+
		"\u1312\3\2\2\2\u01fc\u1326\3\2\2\2\u01fe\u1328\3\2\2\2\u0200\u132e\3\2"+
		"\2\2\u0202\u1383\3\2\2\2\u0204\u139c\3\2\2\2\u0206\u13a3\3\2\2\2\u0208"+
		"\u13b3\3\2\2\2\u020a\u13b5\3\2\2\2\u020c\u13b7\3\2\2\2\u020e\u13c6\3\2"+
		"\2\2\u0210\u13c8\3\2\2\2\u0212\u13d4\3\2\2\2\u0214\u13df\3\2\2\2\u0216"+
		"\u13ea\3\2\2\2\u0218\u147f\3\2\2\2\u021a\u1483\3\2\2\2\u021c\u14e0\3\2"+
		"\2\2\u021e\u14e5\3\2\2\2\u0220\u14e9\3\2\2\2\u0222\u14ef\3\2\2\2\u0224"+
		"\u1533\3\2\2\2\u0226\u1535\3\2\2\2\u0228\u1539\3\2\2\2\u022a\u153b\3\2"+
		"\2\2\u022c\u1556\3\2\2\2\u022e\u1567\3\2\2\2\u0230\u1569\3\2\2\2\u0232"+
		"\u157d\3\2\2\2\u0234\u15b9\3\2\2\2\u0236\u15bb\3\2\2\2\u0238\u15c9\3\2"+
		"\2\2\u023a\u15cf\3\2\2\2\u023c\u15d1\3\2\2\2\u023e\u15e9\3\2\2\2\u0240"+
		"\u15ef\3\2\2\2\u0242\u15f5\3\2\2\2\u0244\u15f7\3\2\2\2\u0246\u15fd\3\2"+
		"\2\2\u0248\u160e\3\2\2\2\u024a\u162b\3\2\2\2\u024c\u162d\3\2\2\2\u024e"+
		"\u1652\3\2\2\2\u0250\u1656\3\2\2\2\u0252\u165a\3\2\2\2\u0254\u165e\3\2"+
		"\2\2\u0256\u1663\3\2\2\2\u0258\u1665\3\2\2\2\u025a\u167b\3\2\2\2\u025c"+
		"\u1688\3\2\2\2\u025e\u1690\3\2\2\2\u0260\u1692\3\2\2\2\u0262\u16a0\3\2"+
		"\2\2\u0264\u16a4\3\2\2\2\u0266\u16a9\3\2\2\2\u0268\u16b0\3\2\2\2\u026a"+
		"\u16d5\3\2\2\2\u026c\u16da\3\2\2\2\u026e\u16e2\3\2\2\2\u0270\u16e4\3\2"+
		"\2\2\u0272\u16ef\3\2\2\2\u0274\u1702\3\2\2\2\u0276\u170a\3\2\2\2\u0278"+
		"\u170c\3\2\2\2\u027a\u1726\3\2\2\2\u027c\u172e\3\2\2\2\u027e\u1730\3\2"+
		"\2\2\u0280\u1732\3\2\2\2\u0282\u1740\3\2\2\2\u0284\u174b\3\2\2\2\u0286"+
		"\u174d\3\2\2\2\u0288\u1763\3\2\2\2\u028a\u1765\3\2\2\2\u028c\u1770\3\2"+
		"\2\2\u028e\u1773\3\2\2\2\u0290\u177f\3\2\2\2\u0292\u17a6\3\2\2\2\u0294"+
		"\u17b0\3\2\2\2\u0296\u17b9\3\2\2\2\u0298\u17bb\3\2\2\2\u029a\u17cd\3\2"+
		"\2\2\u029c\u17cf\3\2\2\2\u029e\u17d2\3\2\2\2\u02a0\u17ef\3\2\2\2\u02a2"+
		"\u17f1\3\2\2\2\u02a4\u17fd\3\2\2\2\u02a6\u1823\3\2\2\2\u02a8\u1831\3\2"+
		"\2\2\u02aa\u183f\3\2\2\2\u02ac\u1857\3\2\2\2\u02ae\u185e\3\2\2\2\u02b0"+
		"\u1860\3\2\2\2\u02b2\u186c\3\2\2\2\u02b4\u1872\3\2\2\2\u02b6\u1875\3\2"+
		"\2\2\u02b8\u1882\3\2\2\2\u02ba\u18a6\3\2\2\2\u02bc\u18ad\3\2\2\2\u02be"+
		"\u18af\3\2\2\2\u02c0\u18bc\3\2\2\2\u02c2\u18be\3\2\2\2\u02c4\u18eb\3\2"+
		"\2\2\u02c6\u18ed\3\2\2\2\u02c8\u1910\3\2\2\2\u02ca\u1912\3\2\2\2\u02cc"+
		"\u1914\3\2\2\2\u02ce\u1916\3\2\2\2\u02d0\u1921\3\2\2\2\u02d2\u192f\3\2"+
		"\2\2\u02d4\u1b05\3\2\2\2\u02d6\u1b09\3\2\2\2\u02d8\u1b0e\3\2\2\2\u02da"+
		"\u1b49\3\2\2\2\u02dc\u1b4d\3\2\2\2\u02de\u1c28\3\2\2\2\u02e0\u1c2a\3\2"+
		"\2\2\u02e2\u1c32\3\2\2\2\u02e4\u1c45\3\2\2\2\u02e6\u1c50\3\2\2\2\u02e8"+
		"\u1c52\3\2\2\2\u02ea\u1d11\3\2\2\2\u02ec\u1d13\3\2\2\2\u02ee\u1d1b\3\2"+
		"\2\2\u02f0\u1d23\3\2\2\2\u02f2\u1d40\3\2\2\2\u02f4\u1d42\3\2\2\2\u02f6"+
		"\u1d4b\3\2\2\2\u02f8\u1d56\3\2\2\2\u02fa\u1d7d\3\2\2\2\u02fc\u1d8b\3\2"+
		"\2\2\u02fe\u1d8d\3\2\2\2\u0300\u1da1\3\2\2\2\u0302\u1da3\3\2\2\2\u0304"+
		"\u1db3\3\2\2\2\u0306\u1db7\3\2\2\2\u0308\u1db9\3\2\2\2\u030a\u1dbe\3\2"+
		"\2\2\u030c\u1dc0\3\2\2\2\u030e\u1dc7\3\2\2\2\u0310\u1dc9\3\2\2\2\u0312"+
		"\u1dd0\3\2\2\2\u0314\u1e04\3\2\2\2\u0316\u1e09\3\2\2\2\u0318\u1e15\3\2"+
		"\2\2\u031a\u1e17\3\2\2\2\u031c\u1e26\3\2\2\2\u031e\u1e2e\3\2\2\2\u0320"+
		"\u1e62\3\2\2\2\u0322\u1e70\3\2\2\2\u0324\u1e72\3\2\2\2\u0326\u1e75\3\2"+
		"\2\2\u0328\u1e7d\3\2\2\2\u032a\u1e7f\3\2\2\2\u032c\u1e95\3\2\2\2\u032e"+
		"\u1e9f\3\2\2\2\u0330\u1ea3\3\2\2\2\u0332\u1eb7\3\2\2\2\u0334\u1eb9\3\2"+
		"\2\2\u0336\u1ed8\3\2\2\2\u0338\u1eda\3\2\2\2\u033a\u1ee5\3\2\2\2\u033c"+
		"\u1ee7\3\2\2\2\u033e\u1ef5\3\2\2\2\u0340\u1ef7\3\2\2\2\u0342\u1f30\3\2"+
		"\2\2\u0344\u1f34\3\2\2\2\u0346\u1f36\3\2\2\2\u0348\u1f85\3\2\2\2\u034a"+
		"\u1f87\3\2\2\2\u034c\u1f89\3\2\2\2\u034e\u1fa1\3\2\2\2\u0350\u1fa6\3\2"+
		"\2\2\u0352\u1fb5\3\2\2\2\u0354\u1fc1\3\2\2\2\u0356\u1fc3\3\2\2\2\u0358"+
		"\u1fce\3\2\2\2\u035a\u1fd0\3\2\2\2\u035c\u1fd5\3\2\2\2\u035e\u1fda\3\2"+
		"\2\2\u0360\u1fde\3\2\2\2\u0362\u1fe2\3\2\2\2\u0364\u1fe6\3\2\2\2\u0366"+
		"\u1fea\3\2\2\2\u0368\u1ff1\3\2\2\2\u036a\u1ff3\3\2\2\2\u036c\u1ff6\3\2"+
		"\2\2\u036e\u2003\3\2\2\2\u0370\u2015\3\2\2\2\u0372\u2020\3\2\2\2\u0374"+
		"\u2022\3\2\2\2\u0376\u202d\3\2\2\2\u0378\u2032\3\2\2\2\u037a\u2037\3\2"+
		"\2\2\u037c\u2039\3\2\2\2\u037e\u2044\3\2\2\2\u0380\u204a\3\2\2\2\u0382"+
		"\u2067\3\2\2\2\u0384\u206e\3\2\2\2\u0386\u207a\3\2\2\2\u0388\u207c\3\2"+
		"\2\2\u038a\u2089\3\2\2\2\u038c\u20a0\3\2\2\2\u038e\u20a2\3\2\2\2\u0390"+
		"\u20a4\3\2\2\2\u0392\u20af\3\2\2\2\u0394\u20c2\3\2\2\2\u0396\u20cd\3\2"+
		"\2\2\u0398\u20d2\3\2\2\2\u039a\u20d4\3\2\2\2\u039c\u20df\3\2\2\2\u039e"+
		"\u20e1\3\2\2\2\u03a0\u20ec\3\2\2\2\u03a2\u20fe\3\2\2\2\u03a4\u2102\3\2"+
		"\2\2\u03a6\u2108\3\2\2\2\u03a8\u210a\3\2\2\2\u03aa\u2113\3\2\2\2\u03ac"+
		"\u2128\3\2\2\2\u03ae\u212a\3\2\2\2\u03b0\u212d\3\2\2\2\u03b2\u2138\3\2"+
		"\2\2\u03b4\u2140\3\2\2\2\u03b6\u2142\3\2\2\2\u03b8\u2156\3\2\2\2\u03ba"+
		"\u215a\3\2\2\2\u03bc\u2164\3\2\2\2\u03be\u2187\3\2\2\2\u03c0\u218b\3\2"+
		"\2\2\u03c2\u21ac\3\2\2\2\u03c4\u21bc\3\2\2\2\u03c6\u21be\3\2\2\2\u03c8"+
		"\u21c6\3\2\2\2\u03ca\u21c8\3\2\2\2\u03cc\u21d3\3\2\2\2\u03ce\u21df\3\2"+
		"\2\2\u03d0\u21e3\3\2\2\2\u03d2\u21ec\3\2\2\2\u03d4\u21f0\3\2\2\2\u03d6"+
		"\u2215\3\2\2\2\u03d8\u2219\3\2\2\2\u03da\u221e\3\2\2\2\u03dc\u2227\3\2"+
		"\2\2\u03de\u222b\3\2\2\2\u03e0\u222f\3\2\2\2\u03e2\u2231\3\2\2\2\u03e4"+
		"\u2235\3\2\2\2\u03e6\u2249\3\2\2\2\u03e8\u2253\3\2\2\2\u03ea\u2257\3\2"+
		"\2\2\u03ec\u2278\3\2\2\2\u03ee\u2280\3\2\2\2\u03f0\u2284\3\2\2\2\u03f2"+
		"\u2286\3\2\2\2\u03f4\u228d\3\2\2\2\u03f6\u2291\3\2\2\2\u03f8\u2293\3\2"+
		"\2\2\u03fa\u2295\3\2\2\2\u03fc\u229b\3\2\2\2\u03fe\u229d\3\2\2\2\u0400"+
		"\u22ad\3\2\2\2\u0402\u22af\3\2\2\2\u0404\u22b2\3\2\2\2\u0406\u22b7\3\2"+
		"\2\2\u0408\u22bc\3\2\2\2\u040a\u22c5\3\2\2\2\u040c\u22cb\3\2\2\2\u040e"+
		"\u22cf\3\2\2\2\u0410\u22d1\3\2\2\2\u0412\u22db\3\2\2\2\u0414\u22ea\3\2"+
		"\2\2\u0416\u22ef\3\2\2\2\u0418\u22f1\3\2\2\2\u041a\u2305\3\2\2\2\u041c"+
		"\u2307\3\2\2\2\u041e\u2352\3\2\2\2\u0420\u2380\3\2\2\2\u0422\u2384\3\2"+
		"\2\2\u0424\u2398\3\2\2\2\u0426\u23a1\3\2\2\2\u0428\u23a5\3\2\2\2\u042a"+
		"\u23ae\3\2\2\2\u042c\u23bb\3\2\2\2\u042e\u23bd\3\2\2\2\u0430\u23d0\3\2"+
		"\2\2\u0432\u23d2\3\2\2\2\u0434\u23df\3\2\2\2\u0436\u23eb\3\2\2\2\u0438"+
		"\u23ed\3\2\2\2\u043a\u23f0\3\2\2\2\u043c\u2401\3\2\2\2\u043e\u2406\3\2"+
		"\2\2\u0440\u240b\3\2\2\2\u0442\u2414\3\2\2\2\u0444\u2418\3\2\2\2\u0446"+
		"\u241a\3\2\2\2\u0448\u2425\3\2\2\2\u044a\u243e\3\2\2\2\u044c\u2440\3\2"+
		"\2\2\u044e\u2456\3\2\2\2\u0450\u2458\3\2\2\2\u0452\u246a\3\2\2\2\u0454"+
		"\u246c\3\2\2\2\u0456\u247d\3\2\2\2\u0458\u24a2\3\2\2\2\u045a\u24a4\3\2"+
		"\2\2\u045c\u24bf\3\2\2\2\u045e\u24c5\3\2\2\2\u0460\u24ce\3\2\2\2\u0462"+
		"\u24d5\3\2\2\2\u0464\u24e7\3\2\2\2\u0466\u24ee\3\2\2\2\u0468\u24f2\3\2"+
		"\2\2\u046a\u24f6\3\2\2\2\u046c\u24f8\3\2\2\2\u046e\u24fe\3\2\2\2\u0470"+
		"\u2503\3\2\2\2\u0472\u2507\3\2\2\2\u0474\u2509\3\2\2\2\u0476\u250e\3\2"+
		"\2\2\u0478\u251d\3\2\2\2\u047a\u2521\3\2\2\2\u047c\u2533\3\2\2\2\u047e"+
		"\u2535\3\2\2\2\u0480\u253e\3\2\2\2\u0482\u255c\3\2\2\2\u0484\u2564\3\2"+
		"\2\2\u0486\u2566\3\2\2\2\u0488\u257c\3\2\2\2\u048a\u2657\3\2\2\2\u048c"+
		"\u2660\3\2\2\2\u048e\u26ba\3\2\2\2\u0490\u26bc\3\2\2\2\u0492\u26eb\3\2"+
		"\2\2\u0494\u26f3\3\2\2\2\u0496\u26f7\3\2\2\2\u0498\u27d3\3\2\2\2\u049a"+
		"\u27da\3\2\2\2\u049c\u27e7\3\2\2\2\u049e\u27e9\3\2\2\2\u04a0\u27ee\3\2"+
		"\2\2\u04a2\u27fe\3\2\2\2\u04a4\u2800\3\2\2\2\u04a6\u2807\3\2\2\2\u04a8"+
		"\u2818\3\2\2\2\u04aa\u281e\3\2\2\2\u04ac\u2827\3\2\2\2\u04ae\u2830\3\2"+
		"\2\2\u04b0\u2835\3\2\2\2\u04b2\u2837\3\2\2\2\u04b4\u2842\3\2\2\2\u04b6"+
		"\u284b\3\2\2\2\u04b8\u284d\3\2\2\2\u04ba\u2856\3\2\2\2\u04bc\u285c\3\2"+
		"\2\2\u04be\u286b\3\2\2\2\u04c0\u2873\3\2\2\2\u04c2\u2881\3\2\2\2\u04c4"+
		"\u288e\3\2\2\2\u04c6\u289e\3\2\2\2\u04c8\u28a8\3\2\2\2\u04ca\u28aa\3\2"+
		"\2\2\u04cc\u28b0\3\2\2\2\u04ce\u28ba\3\2\2\2\u04d0\u28bc\3\2\2\2\u04d2"+
		"\u28be\3\2\2\2\u04d4\u28c0\3\2\2\2\u04d6\u28c8\3\2\2\2\u04d8\u28d0\3\2"+
		"\2\2\u04da\u28de\3\2\2\2\u04dc\u28e0\3\2\2\2\u04de\u28eb\3\2\2\2\u04e0"+
		"\u28ff\3\2\2\2\u04e2\u2901\3\2\2\2\u04e4\u2916\3\2\2\2\u04e6\u2918\3\2"+
		"\2\2\u04e8\u2928\3\2\2\2\u04ea\u2932\3\2\2\2\u04ec\u2934\3\2\2\2\u04ee"+
		"\u2944\3\2\2\2\u04f0\u294b\3\2\2\2\u04f2\u2969\3\2\2\2\u04f4\u2972\3\2"+
		"\2\2\u04f6\u2979\3\2\2\2\u04f8\u297b\3\2\2\2\u04fa\u2981\3\2\2\2\u04fc"+
		"\u298b\3\2\2\2\u04fe\u2993\3\2\2\2\u0500\u2997\3\2\2\2\u0502\u299d\3\2"+
		"\2\2\u0504\u29ad\3\2\2\2\u0506\u29b1\3\2\2\2\u0508\u29b3\3\2\2\2\u050a"+
		"\u29bd\3\2\2\2\u050c\u29c7\3\2\2\2\u050e\u29cb\3\2\2\2\u0510\u29cd\3\2"+
		"\2\2\u0512\u29dd\3\2\2\2\u0514\u29df\3\2\2\2\u0516\u29ee\3\2\2\2\u0518"+
		"\u29f0\3\2\2\2\u051a\u29fb\3\2\2\2\u051c\u29fd\3\2\2\2\u051e\u29ff\3\2"+
		"\2\2\u0520\u2a05\3\2\2\2\u0522\u2a26\3\2\2\2\u0524\u2a28\3\2\2\2\u0526"+
		"\u2a2a\3\2\2\2\u0528\u2a2c\3\2\2\2\u052a\u2a2e\3\2\2\2\u052c\u2a30\3\2"+
		"\2\2\u052e\u2a42\3\2\2\2\u0530\u2a47\3\2\2\2\u0532\u2a4e\3\2\2\2\u0534"+
		"\u2a50\3\2\2\2\u0536\u2a55\3\2\2\2\u0538\u2a57\3\2\2\2\u053a\u2a66\3\2"+
		"\2\2\u053c\u2a6c\3\2\2\2\u053e\u2a72\3\2\2\2\u0540\u2a7a\3\2\2\2\u0542"+
		"\u2a83\3\2\2\2\u0544\u2a85\3\2\2\2\u0546\u2a87\3\2\2\2\u0548\u2abc\3\2"+
		"\2\2\u054a\u2abe\3\2\2\2\u054c\u2ac0\3\2\2\2\u054e\u2ac2\3\2\2\2\u0550"+
		"\u2ac6\3\2\2\2\u0552\u2ae2\3\2\2\2\u0554\u2afe\3\2\2\2\u0556\u2b00\3\2"+
		"\2\2\u0558\u2b06\3\2\2\2\u055a\u2b0a\3\2\2\2\u055c\u2b0c\3\2\2\2\u055e"+
		"\u2b1b\3\2\2\2\u0560\u2b1d\3\2\2\2\u0562\u2b1f\3\2\2\2\u0564\u2b29\3\2"+
		"\2\2\u0566\u2b30\3\2\2\2\u0568\u2b48\3\2\2\2\u056a\u2b4e\3\2\2\2\u056c"+
		"\u2b50\3\2\2\2\u056e\u2b57\3\2\2\2\u0570\u2b59\3\2\2\2\u0572\u2b64\3\2"+
		"\2\2\u0574\u2b67\3\2\2\2\u0576\u2b6b\3\2\2\2\u0578\u2b6d\3\2\2\2\u057a"+
		"\u2b71\3\2\2\2\u057c\u2b73\3\2\2\2\u057e\u2b78\3\2\2\2\u0580\u2b7d\3\2"+
		"\2\2\u0582\u2b83\3\2\2\2\u0584\u2b87\3\2\2\2\u0586\u2b89\3\2\2\2\u0588"+
		"\u2b8b\3\2\2\2\u058a\u2bae\3\2\2\2\u058c\u2bb0\3\2\2\2\u058e\u2bc2\3\2"+
		"\2\2\u0590\u2bc6\3\2\2\2\u0592\u2bc8\3\2\2\2\u0594\u2bcd\3\2\2\2\u0596"+
		"\u2bd6\3\2\2\2\u0598\u2bd8\3\2\2\2\u059a\u2be3\3\2\2\2\u059c\u2be7\3\2"+
		"\2\2\u059e\u2be9\3\2\2\2\u05a0\u2bee\3\2\2\2\u05a2\u2bfa\3\2\2\2\u05a4"+
		"\u2c04\3\2\2\2\u05a6\u2c13\3\2\2\2\u05a8\u2c15\3\2\2\2\u05aa\u2c1f\3\2"+
		"\2\2\u05ac\u2c21\3\2\2\2\u05ae\u2c2b\3\2\2\2\u05b0\u2c33\3\2\2\2\u05b2"+
		"\u2c35\3\2\2\2\u05b4\u2c38\3\2\2\2\u05b6\u2c3d\3\2\2\2\u05b8\u2c5d\3\2"+
		"\2\2\u05ba\u2c62\3\2\2\2\u05bc\u2c70\3\2\2\2\u05be\u2c74\3\2\2\2\u05c0"+
		"\u2c79\3\2\2\2\u05c2\u2c7b\3\2\2\2\u05c4\u2c7d\3\2\2\2\u05c6\u2c89\3\2"+
		"\2\2\u05c8\u2c8b\3\2\2\2\u05ca\u2c8f\3\2\2\2\u05cc\u2ca6\3\2\2\2\u05ce"+
		"\u2caa\3\2\2\2\u05d0\u2cc6\3\2\2\2\u05d2\u2cd0\3\2\2\2\u05d4\u2cd5\3\2"+
		"\2\2\u05d6\u2ce2\3\2\2\2\u05d8\u2ce4\3\2\2\2\u05da\u2ced\3\2\2\2\u05dc"+
		"\u2cef\3\2\2\2\u05de\u2cf7\3\2\2\2\u05e0\u2cf9\3\2\2\2\u05e2\u2d00\3\2"+
		"\2\2\u05e4\u2d03\3\2\2\2\u05e6\u2d13\3\2\2\2\u05e8\u2d15\3\2\2\2\u05ea"+
		"\u2d26\3\2\2\2\u05ec\u2d41\3\2\2\2\u05ee\u2d48\3\2\2\2\u05f0\u2d4a\3\2"+
		"\2\2\u05f2\u2d58\3\2\2\2\u05f4\u2d5a\3\2\2\2\u05f6\u2d66\3\2\2\2\u05f8"+
		"\u2d6a\3\2\2\2\u05fa\u2d6c\3\2\2\2\u05fc\u2d74\3\2\2\2\u05fe\u2d79\3\2"+
		"\2\2\u0600\u2d91\3\2\2\2\u0602\u2d93\3\2\2\2\u0604\u2d98\3\2\2\2\u0606"+
		"\u2d9c\3\2\2\2\u0608\u2d9f\3\2\2\2\u060a\u2da3\3\2\2\2\u060c\u2dad\3\2"+
		"\2\2\u060e\u2dbc\3\2\2\2\u0610\u2dc0\3\2\2\2\u0612\u2dc5\3\2\2\2\u0614"+
		"\u2dc7\3\2\2\2\u0616\u2dd1\3\2\2\2\u0618\u2dd6\3\2\2\2\u061a\u2de4\3\2"+
		"\2\2\u061c\u2de8\3\2\2\2\u061e\u2dec\3\2\2\2\u0620\u2df0\3\2\2\2\u0622"+
		"\u2df5\3\2\2\2\u0624\u2df9\3\2\2\2\u0626\u2dfb\3\2\2\2\u0628\u2dfd\3\2"+
		"\2\2\u062a\u2e05\3\2\2\2\u062c\u2e07\3\2\2\2\u062e\u2e09\3\2\2\2\u0630"+
		"\u2e0b\3\2\2\2\u0632\u2e0d\3\2\2\2\u0634\u2e15\3\2\2\2\u0636\u0637\5\6"+
		"\4\2\u0637\u0638\7\2\2\3\u0638\3\3\2\2\2\u0639\u063a\5\u054e\u02a8\2\u063a"+
		"\5\3\2\2\2\u063b\u063c\5\b\5\2\u063c\7\3\2\2\2\u063d\u0640\5\n\6\2\u063e"+
		"\u0641\7\t\2\2\u063f\u0641\5\f\7\2\u0640\u063e\3\2\2\2\u0640\u063f\3\2"+
		"\2\2\u0641\u0643\3\2\2\2\u0642\u063d\3\2\2\2\u0643\u0644\3\2\2\2\u0644"+
		"\u0642\3\2\2\2\u0644\u0645\3\2\2\2\u0645\t\3\2\2\2\u0646\u06c4\5\u01c6"+
		"\u00e4\2\u0647\u06c4\5\u033c\u019f\2\u0648\u06c4\5\u0332\u019a\2\u0649"+
		"\u06c4\5\u0334\u019b\2\u064a\u06c4\5\u0244\u0123\2\u064b\u06c4\5\u0342"+
		"\u01a2\2\u064c\u06c4\5\u01e0\u00f1\2\u064d\u06c4\5\u0144\u00a3\2\u064e"+
		"\u06c4\5\u014a\u00a6\2\u064f\u06c4\5\u0154\u00ab\2\u0650\u06c4\5\u016e"+
		"\u00b8\2\u0651\u06c4\5\u02a0\u0151\2\u0652\u06c4\5(\25\2\u0653\u06c4\5"+
		"\u02da\u016e\2\u0654\u06c4\5\u02de\u0170\2\u0655\u06c4\5\u02ea\u0176\2"+
		"\u0656\u06c4\5\u02e0\u0171\2\u0657\u06c4\5\u02e8\u0175\2\u0658\u06c4\5"+
		"\u0182\u00c2\2\u0659\u06c4\5\u011a\u008e\2\u065a\u06c4\5\u033e\u01a0\2"+
		"\u065b\u06c4\5b\62\2\u065c\u06c4\5\u02d2\u016a\2\u065d\u06c4\5\u0088E"+
		"\2\u065e\u06c4\5\u02f2\u017a\2\u065f\u06c4\5\"\22\2\u0660\u06c4\5\36\20"+
		"\2\u0661\u06c4\5\u02fa\u017e\2\u0662\u06c4\5\u0108\u0085\2\u0663\u06c4"+
		"\5\u0348\u01a5\2\u0664\u06c4\5\u0346\u01a4\2\u0665\u06c4\5\u017e\u00c0"+
		"\2\u0666\u06c4\5\u0354\u01ab\2\u0667\u06c4\5\16\b\2\u0668\u06c4\5^\60"+
		"\2\u0669\u06c4\5\u008eH\2\u066a\u06c4\5\u034e\u01a8\2\u066b\u06c4\5\u0218"+
		"\u010d\2\u066c\u06c4\5X-\2\u066d\u06c4\5\u0090I\2\u066e\u06c4\5\u0192"+
		"\u00ca\2\u066f\u06c4\5\u010a\u0086\2\u0670\u06c4\5\u01ca\u00e6\2\u0671"+
		"\u06c4\5\u02ba\u015e\2\u0672\u06c4\5\u034c\u01a7\2\u0673\u06c4\5\u0340"+
		"\u01a1\2\u0674\u06c4\5\u013e\u00a0\2\u0675\u06c4\5\u014c\u00a7\2\u0676"+
		"\u06c4\5\u0166\u00b4\2\u0677\u06c4\5\u0170\u00b9\2\u0678\u06c4\5\u026a"+
		"\u0136\2\u0679\u06c4\5&\24\2\u067a\u06c4\5\u0110\u0089\2\u067b\u06c4\5"+
		"\u01e4\u00f3\2\u067c\u06c4\5\u01f2\u00fa\2\u067d\u06c4\5\u02ec\u0177\2"+
		"\u067e\u06c4\5\u01f4\u00fb\2\u067f\u06c4\5\u0180\u00c1\2\u0680\u06c4\5"+
		"\u012a\u0096\2\u0681\u06c4\5,\27\2\u0682\u06c4\5\u0118\u008d\2\u0683\u06c4"+
		"\5\u00aeX\2\u0684\u06c4\5\u02f4\u017b\2\u0685\u06c4\5\u0106\u0084\2\u0686"+
		"\u06c4\5\u0138\u009d\2\u0687\u06c4\5\u02c2\u0162\2\u0688\u06c4\5\u0196"+
		"\u00cc\2\u0689\u06c4\5\u01be\u00e0\2\u068a\u06c4\5\20\t\2\u068b\u06c4"+
		"\5\34\17\2\u068c\u06c4\5\u0178\u00bd\2\u068d\u06c4\5\u0326\u0194\2\u068e"+
		"\u06c4\5\u0386\u01c4\2\u068f\u06c4\5\u03b2\u01da\2\u0690\u06c4\5\u01cc"+
		"\u00e7\2\u0691\u06c4\5\u039a\u01ce\2\u0692\u06c4\5`\61\2\u0693\u06c4\5"+
		"\u02b4\u015b\2\u0694\u06c4\5\u02be\u0160\2\u0695\u06c4\5\u01fa\u00fe\2"+
		"\u0696\u06c4\5\u01fc\u00ff\2\u0697\u06c4\5\u01fe\u0100\2\u0698\u06c4\5"+
		"\u0202\u0102\2\u0699\u06c4\5\u02fc\u017f\2\u069a\u06c4\5\u013c\u009f\2"+
		"\u069b\u06c4\5\u02c6\u0164\2\u069c\u06c4\5$\23\2\u069d\u06c4\5\u017c\u00bf"+
		"\2\u069e\u06c4\5\u0336\u019c\2\u069f\u06c4\5\u0382\u01c2\2\u06a0\u06c4"+
		"\5\u0370\u01b9\2\u06a1\u06c4\5\u0222\u0112\2\u06a2\u06c4\5\u022a\u0116"+
		"\2\u06a3\u06c4\5\u023c\u011f\2\u06a4\u06c4\5\u0172\u00ba\2\u06a5\u06c4"+
		"\5\u024e\u0128\2\u06a6\u06c4\5\u0388\u01c5\2\u06a7\u06c4\5\u0310\u0189"+
		"\2\u06a8\u06c4\5\u0116\u008c\2\u06a9\u06c4\5\u0324\u0193\2\u06aa\u06c4"+
		"\5\u039e\u01d0\2\u06ab\u06c4\5\u030c\u0187\2\u06ac\u06c4\5\u037c\u01bf"+
		"\2\u06ad\u06c4\5\u0200\u0101\2\u06ae\u06c4\5\u02c8\u0165\2\u06af\u06c4"+
		"\5\u02a8\u0155\2\u06b0\u06c4\5\u02a6\u0154\2\u06b1\u06c4\5\u02aa\u0156"+
		"\2\u06b2\u06c4\5\u02d4\u016b\2\u06b3\u06c4\5\u022c\u0117\2\u06b4\u06c4"+
		"\5\u023e\u0120\2\u06b5\u06c4\5\u02fe\u0180\2\u06b6\u06c4\5\u021c\u010f"+
		"\2\u06b7\u06c4\5\u03ba\u01de\2\u06b8\u06c4\5\u0314\u018b\2\u06b9\u06c4"+
		"\5\u0214\u010b\2\u06ba\u06c4\5\u0312\u018a\2\u06bb\u06c4\5\u03a8\u01d5"+
		"\2\u06bc\u06c4\5\u0352\u01aa\2\u06bd\u06c4\5L\'\2\u06be\u06c4\5\64\33"+
		"\2\u06bf\u06c4\5V,\2\u06c0\u06c4\5\u0320\u0191\2\u06c1\u06c4\5\f\7\2\u06c2"+
		"\u06c4\3\2\2\2\u06c3\u0646\3\2\2\2\u06c3\u0647\3\2\2\2\u06c3\u0648\3\2"+
		"\2\2\u06c3\u0649\3\2\2\2\u06c3\u064a\3\2\2\2\u06c3\u064b\3\2\2\2\u06c3"+
		"\u064c\3\2\2\2\u06c3\u064d\3\2\2\2\u06c3\u064e\3\2\2\2\u06c3\u064f\3\2"+
		"\2\2\u06c3\u0650\3\2\2\2\u06c3\u0651\3\2\2\2\u06c3\u0652\3\2\2\2\u06c3"+
		"\u0653\3\2\2\2\u06c3\u0654\3\2\2\2\u06c3\u0655\3\2\2\2\u06c3\u0656\3\2"+
		"\2\2\u06c3\u0657\3\2\2\2\u06c3\u0658\3\2\2\2\u06c3\u0659\3\2\2\2\u06c3"+
		"\u065a\3\2\2\2\u06c3\u065b\3\2\2\2\u06c3\u065c\3\2\2\2\u06c3\u065d\3\2"+
		"\2\2\u06c3\u065e\3\2\2\2\u06c3\u065f\3\2\2\2\u06c3\u0660\3\2\2\2\u06c3"+
		"\u0661\3\2\2\2\u06c3\u0662\3\2\2\2\u06c3\u0663\3\2\2\2\u06c3\u0664\3\2"+
		"\2\2\u06c3\u0665\3\2\2\2\u06c3\u0666\3\2\2\2\u06c3\u0667\3\2\2\2\u06c3"+
		"\u0668\3\2\2\2\u06c3\u0669\3\2\2\2\u06c3\u066a\3\2\2\2\u06c3\u066b\3\2"+
		"\2\2\u06c3\u066c\3\2\2\2\u06c3\u066d\3\2\2\2\u06c3\u066e\3\2\2\2\u06c3"+
		"\u066f\3\2\2\2\u06c3\u0670\3\2\2\2\u06c3\u0671\3\2\2\2\u06c3\u0672\3\2"+
		"\2\2\u06c3\u0673\3\2\2\2\u06c3\u0674\3\2\2\2\u06c3\u0675\3\2\2\2\u06c3"+
		"\u0676\3\2\2\2\u06c3\u0677\3\2\2\2\u06c3\u0678\3\2\2\2\u06c3\u0679\3\2"+
		"\2\2\u06c3\u067a\3\2\2\2\u06c3\u067b\3\2\2\2\u06c3\u067c\3\2\2\2\u06c3"+
		"\u067d\3\2\2\2\u06c3\u067e\3\2\2\2\u06c3\u067f\3\2\2\2\u06c3\u0680\3\2"+
		"\2\2\u06c3\u0681\3\2\2\2\u06c3\u0682\3\2\2\2\u06c3\u0683\3\2\2\2\u06c3"+
		"\u0684\3\2\2\2\u06c3\u0685\3\2\2\2\u06c3\u0686\3\2\2\2\u06c3\u0687\3\2"+
		"\2\2\u06c3\u0688\3\2\2\2\u06c3\u0689\3\2\2\2\u06c3\u068a\3\2\2\2\u06c3"+
		"\u068b\3\2\2\2\u06c3\u068c\3\2\2\2\u06c3\u068d\3\2\2\2\u06c3\u068e\3\2"+
		"\2\2\u06c3\u068f\3\2\2\2\u06c3\u0690\3\2\2\2\u06c3\u0691\3\2\2\2\u06c3"+
		"\u0692\3\2\2\2\u06c3\u0693\3\2\2\2\u06c3\u0694\3\2\2\2\u06c3\u0695\3\2"+
		"\2\2\u06c3\u0696\3\2\2\2\u06c3\u0697\3\2\2\2\u06c3\u0698\3\2\2\2\u06c3"+
		"\u0699\3\2\2\2\u06c3\u069a\3\2\2\2\u06c3\u069b\3\2\2\2\u06c3\u069c\3\2"+
		"\2\2\u06c3\u069d\3\2\2\2\u06c3\u069e\3\2\2\2\u06c3\u069f\3\2\2\2\u06c3"+
		"\u06a0\3\2\2\2\u06c3\u06a1\3\2\2\2\u06c3\u06a2\3\2\2\2\u06c3\u06a3\3\2"+
		"\2\2\u06c3\u06a4\3\2\2\2\u06c3\u06a5\3\2\2\2\u06c3\u06a6\3\2\2\2\u06c3"+
		"\u06a7\3\2\2\2\u06c3\u06a8\3\2\2\2\u06c3\u06a9\3\2\2\2\u06c3\u06aa\3\2"+
		"\2\2\u06c3\u06ab\3\2\2\2\u06c3\u06ac\3\2\2\2\u06c3\u06ad\3\2\2\2\u06c3"+
		"\u06ae\3\2\2\2\u06c3\u06af\3\2\2\2\u06c3\u06b0\3\2\2\2\u06c3\u06b1\3\2"+
		"\2\2\u06c3\u06b2\3\2\2\2\u06c3\u06b3\3\2\2\2\u06c3\u06b4\3\2\2\2\u06c3"+
		"\u06b5\3\2\2\2\u06c3\u06b6\3\2\2\2\u06c3\u06b7\3\2\2\2\u06c3\u06b8\3\2"+
		"\2\2\u06c3\u06b9\3\2\2\2\u06c3\u06ba\3\2\2\2\u06c3\u06bb\3\2\2\2\u06c3"+
		"\u06bc\3\2\2\2\u06c3\u06bd\3\2\2\2\u06c3\u06be\3\2\2\2\u06c3\u06bf\3\2"+
		"\2\2\u06c3\u06c0\3\2\2\2\u06c3\u06c1\3\2\2\2\u06c3\u06c2\3\2\2\2\u06c4"+
		"\13\3\2\2\2\u06c5\u06c7\7\u0247\2\2\u06c6\u06c8\7\u0248\2\2\u06c7\u06c6"+
		"\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8\r\3\2\2\2\u06c9\u06ca\7\u01ce\2\2\u06ca"+
		"\u06cb\5\u0492\u024a\2\u06cb\17\3\2\2\2\u06cc\u06cd\7T\2\2\u06cd\u06ce"+
		"\7\u015b\2\2\u06ce\u06cf\5\u0534\u029b\2\u06cf\u06d0\5\22\n\2\u06d0\u06d1"+
		"\5\24\13\2\u06d1\21\3\2\2\2\u06d2\u06d5\7\u008f\2\2\u06d3\u06d5\3\2\2"+
		"\2\u06d4\u06d2\3\2\2\2\u06d4\u06d3\3\2\2\2\u06d5\23\3\2\2\2\u06d6\u06db"+
		"\b\13\1\2\u06d7\u06d8\f\4\2\2\u06d8\u06da\5\32\16\2\u06d9\u06d7\3\2\2"+
		"\2\u06da\u06dd\3\2\2\2\u06db\u06d9\3\2\2\2\u06db\u06dc\3\2\2\2\u06dc\25"+
		"\3\2\2\2\u06dd\u06db\3\2\2\2\u06de\u06e3\b\f\1\2\u06df\u06e0\f\4\2\2\u06e0"+
		"\u06e2\5\30\r\2\u06e1\u06df\3\2\2\2\u06e2\u06e5\3\2\2\2\u06e3\u06e1\3"+
		"\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\27\3\2\2\2\u06e5\u06e3\3\2\2\2\u06e6"+
		"\u06e7\7\u013c\2\2\u06e7\u06fb\5\u052c\u0297\2\u06e8\u06e9\7\u013c\2\2"+
		"\u06e9\u06fb\7t\2\2\u06ea\u06eb\7\u00e9\2\2\u06eb\u06ec\7\u013c\2\2\u06ec"+
		"\u06fb\5\u052c\u0297\2\u06ed\u06ee\7\u0189\2\2\u06ee\u06ef\7\u013c\2\2"+
		"\u06ef\u06fb\5\u052c\u0297\2\u06f0\u06fb\7\u010a\2\2\u06f1\u06f2\7\u00ca"+
		"\2\2\u06f2\u06f3\7p\2\2\u06f3\u06fb\5\u0532\u029a\2\u06f4\u06f5\7\u0190"+
		"\2\2\u06f5\u06f6\7\u018d\2\2\u06f6\u06fb\5\u052c\u0297\2\u06f7\u06f8\7"+
		"\u0089\2\2\u06f8\u06fb\5\u0538\u029d\2\u06f9\u06fb\5\u0542\u02a2\2\u06fa"+
		"\u06e6\3\2\2\2\u06fa\u06e8\3\2\2\2\u06fa\u06ea\3\2\2\2\u06fa\u06ed\3\2"+
		"\2\2\u06fa\u06f0\3\2\2\2\u06fa\u06f1\3\2\2\2\u06fa\u06f4\3\2\2\2\u06fa"+
		"\u06f7\3\2\2\2\u06fa\u06f9\3\2\2\2\u06fb\31\3\2\2\2\u06fc\u070a\5\30\r"+
		"\2\u06fd\u06fe\7\u0179\2\2\u06fe\u070a\5\u052a\u0296\2\u06ff\u0700\7\u00ac"+
		"\2\2\u0700\u070a\5\u0538\u029d\2\u0701\u0702\7\u015b\2\2\u0702\u070a\5"+
		"\u0538\u029d\2\u0703\u0704\7j\2\2\u0704\u0705\7\u015b\2\2\u0705\u070a"+
		"\5\u0538\u029d\2\u0706\u0707\7j\2\2\u0707\u0708\7h\2\2\u0708\u070a\5\u0538"+
		"\u029d\2\u0709\u06fc\3\2\2\2\u0709\u06fd\3\2\2\2\u0709\u06ff\3\2\2\2\u0709"+
		"\u0701\3\2\2\2\u0709\u0703\3\2\2\2\u0709\u0706\3\2\2\2\u070a\33\3\2\2"+
		"\2\u070b\u070c\7T\2\2\u070c\u070d\7\u0089\2\2\u070d\u070e\5\u0534\u029b"+
		"\2\u070e\u070f\5\22\n\2\u070f\u0710\5\24\13\2\u0710\35\3\2\2\2\u0711\u0712"+
		"\7\u00b0\2\2\u0712\u0713\7\u015b\2\2\u0713\u0714\5\u0536\u029c\2\u0714"+
		"\u0715\5\22\n\2\u0715\u0716\5\26\f\2\u0716\u071e\3\2\2\2\u0717\u0718\7"+
		"\u00b0\2\2\u0718\u0719\7\u0089\2\2\u0719\u071a\5\u0536\u029c\2\u071a\u071b"+
		"\5\22\n\2\u071b\u071c\5\26\f\2\u071c\u071e\3\2\2\2\u071d\u0711\3\2\2\2"+
		"\u071d\u0717\3\2\2\2\u071e\37\3\2\2\2\u071f\u0724\3\2\2\2\u0720\u0721"+
		"\7j\2\2\u0721\u0722\7\u00d5\2\2\u0722\u0724\5\u051a\u028e\2\u0723\u071f"+
		"\3\2\2\2\u0723\u0720\3\2\2\2\u0724!\3\2\2\2\u0725\u0726\7\u00b0\2\2\u0726"+
		"\u0727\7\u015b\2\2\u0727\u0728\5\u0536\u029c\2\u0728\u0729\5 \21\2\u0729"+
		"\u072a\5R*\2\u072a\u073e\3\2\2\2\u072b\u072c\7\u00b0\2\2\u072c\u072d\7"+
		"\u015b\2\2\u072d\u072e\7D\2\2\u072e\u072f\5 \21\2\u072f\u0730\5R*\2\u0730"+
		"\u073e\3\2\2\2\u0731\u0732\7\u00b0\2\2\u0732\u0733\7\u0089\2\2\u0733\u0734"+
		"\5\u0536\u029c\2\u0734\u0735\5 \21\2\u0735\u0736\5R*\2\u0736\u073e\3\2"+
		"\2\2\u0737\u0738\7\u00b0\2\2\u0738\u0739\7\u0089\2\2\u0739\u073a\7D\2"+
		"\2\u073a\u073b\5 \21\2\u073b\u073c\5R*\2\u073c\u073e\3\2\2\2\u073d\u0725"+
		"\3\2\2\2\u073d\u072b\3\2\2\2\u073d\u0731\3\2\2\2\u073d\u0737\3\2\2\2\u073e"+
		"#\3\2\2\2\u073f\u0740\7\u00e5\2\2\u0740\u0741\7\u015b\2\2\u0741\u0758"+
		"\5\u0538\u029d\2\u0742\u0743\7\u00e5\2\2\u0743\u0744\7\u015b\2\2\u0744"+
		"\u0745\7\u0102\2\2\u0745\u0746\7\u01a9\2\2\u0746\u0758\5\u0538\u029d\2"+
		"\u0747\u0748\7\u00e5\2\2\u0748\u0749\7\u0089\2\2\u0749\u0758\5\u0538\u029d"+
		"\2\u074a\u074b\7\u00e5\2\2\u074b\u074c\7\u0089\2\2\u074c\u074d\7\u0102"+
		"\2\2\u074d\u074e\7\u01a9\2\2\u074e\u0758\5\u0538\u029d\2\u074f\u0750\7"+
		"\u00e5\2\2\u0750\u0751\7h\2\2\u0751\u0758\5\u0538\u029d\2\u0752\u0753"+
		"\7\u00e5\2\2\u0753\u0754\7h\2\2\u0754\u0755\7\u0102\2\2\u0755\u0756\7"+
		"\u01a9\2\2\u0756\u0758\5\u0538\u029d\2\u0757\u073f\3\2\2\2\u0757\u0742"+
		"\3\2\2\2\u0757\u0747\3\2\2\2\u0757\u074a\3\2\2\2\u0757\u074f\3\2\2\2\u0757"+
		"\u0752\3\2\2\2\u0758%\3\2\2\2\u0759\u075a\7T\2\2\u075a\u075b\7h\2\2\u075b"+
		"\u075c\5\u0534\u029b\2\u075c\u075d\5\22\n\2\u075d\u075e\5\24\13\2\u075e"+
		"\'\3\2\2\2\u075f\u0760\7\u00b0\2\2\u0760\u0761\7h\2\2\u0761\u0762\5\u0536"+
		"\u029c\2\u0762\u0763\5*\26\2\u0763\u0764\7\u0089\2\2\u0764\u0765\5\u0538"+
		"\u029d\2\u0765)\3\2\2\2\u0766\u0767\t\2\2\2\u0767+\3\2\2\2\u0768\u0769"+
		"\7T\2\2\u0769\u076a\7\u0160\2\2\u076a\u076b\5.\30\2\u076b\u076c\7\u0090"+
		"\2\2\u076c\u076d\5\u0536\u029c\2\u076d\u076e\5\60\31\2\u076e\u0787\3\2"+
		"\2\2\u076f\u0770\7T\2\2\u0770\u0771\7\u0160\2\2\u0771\u0772\5\u053a\u029e"+
		"\2\u0772\u0773\5\60\31\2\u0773\u0787\3\2\2\2\u0774\u0775\7T\2\2\u0775"+
		"\u0776\7\u0160\2\2\u0776\u0777\7\u0102\2\2\u0777\u0778\7s\2\2\u0778\u0779"+
		"\7\u01a9\2\2\u0779\u077a\5.\30\2\u077a\u077b\7\u0090\2\2\u077b\u077c\5"+
		"\u0536\u029c\2\u077c\u077d\5\60\31\2\u077d\u0787\3\2\2\2\u077e\u077f\7"+
		"T\2\2\u077f\u0780\7\u0160\2\2\u0780\u0781\7\u0102\2\2\u0781\u0782\7s\2"+
		"\2\u0782\u0783\7\u01a9\2\2\u0783\u0784\5\u053a\u029e\2\u0784\u0785\5\60"+
		"\31\2\u0785\u0787\3\2\2\2\u0786\u0768\3\2\2\2\u0786\u076f\3\2\2\2\u0786"+
		"\u0774\3\2\2\2\u0786\u077e\3\2\2\2\u0787-\3\2\2\2\u0788\u078b\5\u053a"+
		"\u029e\2\u0789\u078b\3\2\2\2\u078a\u0788\3\2\2\2\u078a\u0789\3\2\2\2\u078b"+
		"/\3\2\2\2\u078c\u0791\b\31\1\2\u078d\u078e\f\4\2\2\u078e\u0790\5\62\32"+
		"\2\u078f\u078d\3\2\2\2\u0790\u0793\3\2\2\2\u0791\u078f\3\2\2\2\u0791\u0792"+
		"\3\2\2\2\u0792\61\3\2\2\2\u0793\u0791\3\2\2\2\u0794\u079b\5\u00aeX\2\u0795"+
		"\u079b\5\u024e\u0128\2\u0796\u079b\5\u0118\u008d\2\u0797\u079b\5\u0196"+
		"\u00cc\2\u0798\u079b\5\u022a\u0116\2\u0799\u079b\5\u0320\u0191\2\u079a"+
		"\u0794\3\2\2\2\u079a\u0795\3\2\2\2\u079a\u0796\3\2\2\2\u079a\u0797\3\2"+
		"\2\2\u079a\u0798\3\2\2\2\u079a\u0799\3\2\2\2\u079b\63\3\2\2\2\u079c\u079d"+
		"\7\u016a\2\2\u079d\u07a5\5\66\34\2\u079e\u079f\7\u016a\2\2\u079f\u07a0"+
		"\7\u011b\2\2\u07a0\u07a5\5\66\34\2\u07a1\u07a2\7\u016a\2\2\u07a2\u07a3"+
		"\7\u0169\2\2\u07a3\u07a5\5\66\34\2\u07a4\u079c\3\2\2\2\u07a4\u079e\3\2"+
		"\2\2\u07a4\u07a1\3\2\2\2\u07a5\65\3\2\2\2\u07a6\u07a7\7\u0181\2\2\u07a7"+
		"\u07af\5\u031a\u018e\2\u07a8\u07a9\7\u0169\2\2\u07a9\u07aa\7\u00c0\2\2"+
		"\u07aa\u07ab\7J\2\2\u07ab\u07ac\7\u0181\2\2\u07ac\u07af\5\u031a\u018e"+
		"\2\u07ad\u07af\5:\36\2\u07ae\u07a6\3\2\2\2\u07ae\u07a8\3\2\2\2\u07ae\u07ad"+
		"\3\2\2\2\u07af\67\3\2\2\2\u07b0\u07b1\5<\37\2\u07b1\u07b2\7\u0084\2\2"+
		"\u07b2\u07b3\5> \2\u07b3\u07c1\3\2\2\2\u07b4\u07b5\5<\37\2\u07b5\u07b6"+
		"\7\f\2\2\u07b6\u07b7\5> \2\u07b7\u07c1\3\2\2\2\u07b8\u07b9\5<\37\2\u07b9"+
		"\u07ba\7\u0084\2\2\u07ba\u07bb\7[\2\2\u07bb\u07c1\3\2\2\2\u07bc\u07bd"+
		"\5<\37\2\u07bd\u07be\7\f\2\2\u07be\u07bf\7[\2\2\u07bf\u07c1\3\2\2\2\u07c0"+
		"\u07b0\3\2\2\2\u07c0\u07b4\3\2\2\2\u07c0\u07b8\3\2\2\2\u07c0\u07bc\3\2"+
		"\2\2\u07c19\3\2\2\2\u07c2\u07df\58\35\2\u07c3\u07c4\5<\37\2\u07c4\u07c5"+
		"\7f\2\2\u07c5\u07c6\7\u01cf\2\2\u07c6\u07df\3\2\2\2\u07c7\u07c8\7\u01bf"+
		"\2\2\u07c8\u07c9\7\u019f\2\2\u07c9\u07df\5F$\2\u07ca\u07cb\7\u01d0\2\2"+
		"\u07cb\u07df\5\u052c\u0297\2\u07cc\u07cd\7\u0160\2\2\u07cd\u07df\5\u052c"+
		"\u0297\2\u07ce\u07cf\7\u0128\2\2\u07cf\u07df\5H%\2\u07d0\u07d1\7\u015b"+
		"\2\2\u07d1\u07df\5J&\2\u07d2\u07d3\7\u0169\2\2\u07d3\u07d4\7\u0090\2\2"+
		"\u07d4\u07df\5J&\2\u07d5\u07d6\7\u0169\2\2\u07d6\u07d7\7\u0090\2\2\u07d7"+
		"\u07df\7[\2\2\u07d8\u07d9\7\u019c\2\2\u07d9\u07da\7\u0134\2\2\u07da\u07df"+
		"\5\u04a4\u0253\2\u07db\u07dc\7\u0181\2\2\u07dc\u07dd\7\u016e\2\2\u07dd"+
		"\u07df\5\u052c\u0297\2\u07de\u07c2\3\2\2\2\u07de\u07c3\3\2\2\2\u07de\u07c7"+
		"\3\2\2\2\u07de\u07ca\3\2\2\2\u07de\u07cc\3\2\2\2\u07de\u07ce\3\2\2\2\u07de"+
		"\u07d0\3\2\2\2\u07de\u07d2\3\2\2\2\u07de\u07d5\3\2\2\2\u07de\u07d8\3\2"+
		"\2\2\u07de\u07db\3\2\2\2\u07df;\3\2\2\2\u07e0\u07e1\b\37\1\2\u07e1\u07e2"+
		"\5\u053a\u029e\2\u07e2\u07e8\3\2\2\2\u07e3\u07e4\f\3\2\2\u07e4\u07e5\7"+
		"\r\2\2\u07e5\u07e7\5\u053a\u029e\2\u07e6\u07e3\3\2\2\2\u07e7\u07ea\3\2"+
		"\2\2\u07e8\u07e6\3\2\2\2\u07e8\u07e9\3\2\2\2\u07e9=\3\2\2\2\u07ea\u07e8"+
		"\3\2\2\2\u07eb\u07ec\b \1\2\u07ec\u07ed\5@!\2\u07ed\u07f3\3\2\2\2\u07ee"+
		"\u07ef\f\3\2\2\u07ef\u07f0\7\b\2\2\u07f0\u07f2\5@!\2\u07f1\u07ee\3\2\2"+
		"\2\u07f2\u07f5\3\2\2\2\u07f3\u07f1\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4?"+
		"\3\2\2\2\u07f5\u07f3\3\2\2\2\u07f6\u07f9\5D#\2\u07f7\u07f9\5\u0126\u0094"+
		"\2\u07f8\u07f6\3\2\2\2\u07f8\u07f7\3\2\2\2\u07f9A\3\2\2\2\u07fa\u07fb"+
		"\7\u0149\2\2\u07fb\u0802\7\u0188\2\2\u07fc\u07fd\7\u0149\2\2\u07fd\u0802"+
		"\7\u00c8\2\2\u07fe\u07ff\7\u0153\2\2\u07ff\u0802\7\u0149\2\2\u0800\u0802"+
		"\7\u0167\2\2\u0801\u07fa\3\2\2\2\u0801\u07fc\3\2\2\2\u0801\u07fe\3\2\2"+
		"\2\u0801\u0800\3\2\2\2\u0802C\3\2\2\2\u0803\u0808\7\u0086\2\2\u0804\u0808"+
		"\7b\2\2\u0805\u0808\7v\2\2\u0806\u0808\5J&\2\u0807\u0803\3\2\2\2\u0807"+
		"\u0804\3\2\2\2\u0807\u0805\3\2\2\2\u0807\u0806\3\2\2\2\u0808E\3\2\2\2"+
		"\u0809\u0819\5\u052c\u0297\2\u080a\u0819\5\u0542\u02a2\2\u080b\u080c\5"+
		"\u047e\u0240\2\u080c\u080d\5\u052c\u0297\2\u080d\u080e\5\u0482\u0242\2"+
		"\u080e\u0819\3\2\2\2\u080f\u0810\5\u047e\u0240\2\u0810\u0811\7\4\2\2\u0811"+
		"\u0812\5\u052a\u0296\2\u0812\u0813\7\5\2\2\u0813\u0814\5\u052c\u0297\2"+
		"\u0814\u0819\3\2\2\2\u0815\u0819\5\u0126\u0094\2\u0816\u0819\7[\2\2\u0817"+
		"\u0819\7\u011b\2\2\u0818\u0809\3\2\2\2\u0818\u080a\3\2\2\2\u0818\u080b"+
		"\3\2\2\2\u0818\u080f\3\2\2\2\u0818\u0815\3\2\2\2\u0818\u0816\3\2\2\2\u0818"+
		"\u0817\3\2\2\2\u0819G\3\2\2\2\u081a\u081e\5\u052c\u0297\2\u081b\u081e"+
		"\7[\2\2\u081c\u081e\3\2\2\2\u081d\u081a\3\2\2\2\u081d\u081b\3\2\2\2\u081d"+
		"\u081c\3\2\2\2\u081eI\3\2\2\2\u081f\u0822\5\u053e\u02a0\2\u0820\u0822"+
		"\5\u052c\u0297\2\u0821\u081f\3\2\2\2\u0821\u0820\3\2\2\2\u0822K\3\2\2"+
		"\2\u0823\u0824\7\u0156\2\2\u0824\u0825\5N(\2\u0825M\3\2\2\2\u0826\u082f"+
		"\5P)\2\u0827\u0828\7\u01bf\2\2\u0828\u082f\7\u019f\2\2\u0829\u082a\7\u0181"+
		"\2\2\u082a\u082b\7\u0111\2\2\u082b\u082f\7\u0118\2\2\u082c\u082d\7\u0169"+
		"\2\2\u082d\u082f\7\u0090\2\2\u082e\u0826\3\2\2\2\u082e\u0827\3\2\2\2\u082e"+
		"\u0829\3\2\2\2\u082e\u082c\3\2\2\2\u082fO\3\2\2\2\u0830\u0833\5<\37\2"+
		"\u0831\u0833\7D\2\2\u0832\u0830\3\2\2\2\u0832\u0831\3\2\2\2\u0833Q\3\2"+
		"\2\2\u0834\u0835\7\u016a\2\2\u0835\u0838\5\66\34\2\u0836\u0838\5L\'\2"+
		"\u0837\u0834\3\2\2\2\u0837\u0836\3\2\2\2\u0838S\3\2\2\2\u0839\u083a\7"+
		"\u016a\2\2\u083a\u083d\5:\36\2\u083b\u083d\5L\'\2\u083c\u0839\3\2\2\2"+
		"\u083c\u083b\3\2\2\2\u083dU\3\2\2\2\u083e\u083f\7\u016c\2\2\u083f\u084d"+
		"\5<\37\2\u0840\u0841\7\u016c\2\2\u0841\u0842\7\u01bf\2\2\u0842\u084d\7"+
		"\u019f\2\2\u0843\u0844\7\u016c\2\2\u0844\u0845\7\u0181\2\2\u0845\u0846"+
		"\7\u0111\2\2\u0846\u084d\7\u0118\2\2\u0847\u0848\7\u016c\2\2\u0848\u0849"+
		"\7\u0169\2\2\u0849\u084d\7\u0090\2\2\u084a\u084b\7\u016c\2\2\u084b\u084d"+
		"\7D\2\2\u084c\u083e\3\2\2\2\u084c\u0840\3\2\2\2\u084c\u0843\3\2\2\2\u084c"+
		"\u0847\3\2\2\2\u084c\u084a\3\2\2\2\u084dW\3\2\2\2\u084e\u084f\7\u016a"+
		"\2\2\u084f\u0850\7\u00cb\2\2\u0850\u0851\5Z.\2\u0851\u0852\5\\/\2\u0852"+
		"Y\3\2\2\2\u0853\u0856\7D\2\2\u0854\u0856\5\u0514\u028b\2\u0855\u0853\3"+
		"\2\2\2\u0855\u0854\3\2\2\2\u0856[\3\2\2\2\u0857\u0858\t\3\2\2\u0858]\3"+
		"\2\2\2\u0859\u085a\7\u00c1\2\2\u085a_\3\2\2\2\u085b\u085c\7\u00e1\2\2"+
		"\u085c\u0866\7D\2\2\u085d\u085e\7\u00e1\2\2\u085e\u0866\7\u017d\2\2\u085f"+
		"\u0860\7\u00e1\2\2\u0860\u0866\7\u017f\2\2\u0861\u0862\7\u00e1\2\2\u0862"+
		"\u0866\7\u013d\2\2\u0863\u0864\7\u00e1\2\2\u0864\u0866\7\u0166\2\2\u0865"+
		"\u085b\3\2\2\2\u0865\u085d\3\2\2\2\u0865\u085f\3\2\2\2\u0865\u0861\3\2"+
		"\2\2\u0865\u0863\3\2\2\2\u0866a\3\2\2\2\u0867\u0868\7\u00b0\2\2\u0868"+
		"\u0869\7\u0082\2\2\u0869\u086a\5\u042c\u0217\2\u086a\u086b\5d\63\2\u086b"+
		"\u0912\3\2\2\2\u086c\u086d\7\u00b0\2\2\u086d\u086e\7\u0082\2\2\u086e\u086f"+
		"\7\u0102\2\2\u086f\u0870\7\u01a9\2\2\u0870\u0871\5\u042c\u0217\2\u0871"+
		"\u0872\5d\63\2\u0872\u0912\3\2\2\2\u0873\u0874\7\u00b0\2\2\u0874\u0875"+
		"\7\u0082\2\2\u0875\u0876\5\u042c\u0217\2\u0876\u0877\5f\64\2\u0877\u0912"+
		"\3\2\2\2\u0878\u0879\7\u00b0\2\2\u0879\u087a\7\u0082\2\2\u087a\u087b\7"+
		"\u0102\2\2\u087b\u087c\7\u01a9\2\2\u087c\u087d\5\u042c\u0217\2\u087d\u087e"+
		"\5f\64\2\u087e\u0912\3\2\2\2\u087f\u0880\7\u00b0\2\2\u0880\u0881\7\u0082"+
		"\2\2\u0881\u0882\7D\2\2\u0882\u0883\7j\2\2\u0883\u0884\7\u017c\2\2\u0884"+
		"\u0885\5\u051a\u028e\2\u0885\u0886\7\u016a\2\2\u0886\u0887\7\u017c\2\2"+
		"\u0887\u0888\5\u051a\u028e\2\u0888\u0889\5\u03a4\u01d3\2\u0889\u0912\3"+
		"\2\2\2\u088a\u088b\7\u00b0\2\2\u088b\u088c\7\u0082\2\2\u088c\u088d\7D"+
		"\2\2\u088d\u088e\7j\2\2\u088e\u088f\7\u017c\2\2\u088f\u0890\5\u051a\u028e"+
		"\2\u0890\u0891\7\u0136\2\2\u0891\u0892\7\u00b9\2\2\u0892\u0893\5\u0538"+
		"\u029d\2\u0893\u0894\7\u016a\2\2\u0894\u0895\7\u017c\2\2\u0895\u0896\5"+
		"\u051a\u028e\2\u0896\u0897\5\u03a4\u01d3\2\u0897\u0912\3\2\2\2\u0898\u0899"+
		"\7\u00b0\2\2\u0899\u089a\7\u0108\2\2\u089a\u089b\5\u0516\u028c\2\u089b"+
		"\u089c\5d\63\2\u089c\u0912\3\2\2\2\u089d\u089e\7\u00b0\2\2\u089e\u089f"+
		"\7\u0108\2\2\u089f\u08a0\7\u0102\2\2\u08a0\u08a1\7\u01a9\2\2\u08a1\u08a2"+
		"\5\u0516\u028c\2\u08a2\u08a3\5d\63\2\u08a3\u0912\3\2\2\2\u08a4\u08a5\7"+
		"\u00b0\2\2\u08a5\u08a6\7\u0108\2\2\u08a6\u08a7\5\u0516\u028c\2\u08a7\u08a8"+
		"\5h\65\2\u08a8\u0912\3\2\2\2\u08a9\u08aa\7\u00b0\2\2\u08aa\u08ab\7\u0108"+
		"\2\2\u08ab\u08ac\7D\2\2\u08ac\u08ad\7j\2\2\u08ad\u08ae\7\u017c\2\2\u08ae"+
		"\u08af\5\u051a\u028e\2\u08af\u08b0\7\u016a\2\2\u08b0\u08b1\7\u017c\2\2"+
		"\u08b1\u08b2\5\u051a\u028e\2\u08b2\u08b3\5\u03a4\u01d3\2\u08b3\u0912\3"+
		"\2\2\2\u08b4\u08b5\7\u00b0\2\2\u08b5\u08b6\7\u0108\2\2\u08b6\u08b7\7D"+
		"\2\2\u08b7\u08b8\7j\2\2\u08b8\u08b9\7\u017c\2\2\u08b9\u08ba\5\u051a\u028e"+
		"\2\u08ba\u08bb\7\u0136\2\2\u08bb\u08bc\7\u00b9\2\2\u08bc\u08bd\5\u0538"+
		"\u029d\2\u08bd\u08be\7\u016a\2\2\u08be\u08bf\7\u017c\2\2\u08bf\u08c0\5"+
		"\u051a\u028e\2\u08c0\u08c1\5\u03a4\u01d3\2\u08c1\u0912\3\2\2\2\u08c2\u08c3"+
		"\7\u00b0\2\2\u08c3\u08c4\7\u0165\2\2\u08c4\u08c5\5\u0516\u028c\2\u08c5"+
		"\u08c6\5d\63\2\u08c6\u0912\3\2\2\2\u08c7\u08c8\7\u00b0\2\2\u08c8\u08c9"+
		"\7\u0165\2\2\u08c9\u08ca\7\u0102\2\2\u08ca\u08cb\7\u01a9\2\2\u08cb\u08cc"+
		"\5\u0516\u028c\2\u08cc\u08cd\5d\63\2\u08cd\u0912\3\2\2\2\u08ce\u08cf\7"+
		"\u00b0\2\2\u08cf\u08d0\7\u0195\2\2\u08d0\u08d1\5\u0516\u028c\2\u08d1\u08d2"+
		"\5d\63\2\u08d2\u0912\3\2\2\2\u08d3\u08d4\7\u00b0\2\2\u08d4\u08d5\7\u0195"+
		"\2\2\u08d5\u08d6\7\u0102\2\2\u08d6\u08d7\7\u01a9\2\2\u08d7\u08d8\5\u0516"+
		"\u028c\2\u08d8\u08d9\5d\63\2\u08d9\u0912\3\2\2\2\u08da\u08db\7\u00b0\2"+
		"\2\u08db\u08dc\7\u0120\2\2\u08dc\u08dd\7\u0195\2\2\u08dd\u08de\5\u0516"+
		"\u028c\2\u08de\u08df\5d\63\2\u08df\u0912\3\2\2\2\u08e0\u08e1\7\u00b0\2"+
		"\2\u08e1\u08e2\7\u0120\2\2\u08e2\u08e3\7\u0195\2\2\u08e3\u08e4\7\u0102"+
		"\2\2\u08e4\u08e5\7\u01a9\2\2\u08e5\u08e6\5\u0516\u028c\2\u08e6\u08e7\5"+
		"d\63\2\u08e7\u0912\3\2\2\2\u08e8\u08e9\7\u00b0\2\2\u08e9\u08ea\7\u0120"+
		"\2\2\u08ea\u08eb\7\u0195\2\2\u08eb\u08ec\7D\2\2\u08ec\u08ed\7j\2\2\u08ed"+
		"\u08ee\7\u017c\2\2\u08ee\u08ef\5\u051a\u028e\2\u08ef\u08f0\7\u016a\2\2"+
		"\u08f0\u08f1\7\u017c\2\2\u08f1\u08f2\5\u051a\u028e\2\u08f2\u08f3\5\u03a4"+
		"\u01d3\2\u08f3\u0912\3\2\2\2\u08f4\u08f5\7\u00b0\2\2\u08f5\u08f6\7\u0120"+
		"\2\2\u08f6\u08f7\7\u0195\2\2\u08f7\u08f8\7D\2\2\u08f8\u08f9\7j\2\2\u08f9"+
		"\u08fa\7\u017c\2\2\u08fa\u08fb\5\u051a\u028e\2\u08fb\u08fc\7\u0136\2\2"+
		"\u08fc\u08fd\7\u00b9\2\2\u08fd\u08fe\5\u0538\u029d\2\u08fe\u08ff\7\u016a"+
		"\2\2\u08ff\u0900\7\u017c\2\2\u0900\u0901\5\u051a\u028e\2\u0901\u0902\5"+
		"\u03a4\u01d3\2\u0902\u0912\3\2\2\2\u0903\u0904\7\u00b0\2\2\u0904\u0905"+
		"\7e\2\2\u0905\u0906\7\u0082\2\2\u0906\u0907\5\u042c\u0217\2\u0907\u0908"+
		"\5d\63\2\u0908\u0912\3\2\2\2\u0909\u090a\7\u00b0\2\2\u090a\u090b\7e\2"+
		"\2\u090b\u090c\7\u0082\2\2\u090c\u090d\7\u0102\2\2\u090d\u090e\7\u01a9"+
		"\2\2\u090e\u090f\5\u042c\u0217\2\u090f\u0910\5d\63\2\u0910\u0912\3\2\2"+
		"\2\u0911\u0867\3\2\2\2\u0911\u086c\3\2\2\2\u0911\u0873\3\2\2\2\u0911\u0878"+
		"\3\2\2\2\u0911\u087f\3\2\2\2\u0911\u088a\3\2\2\2\u0911\u0898\3\2\2\2\u0911"+
		"\u089d\3\2\2\2\u0911\u08a4\3\2\2\2\u0911\u08a9\3\2\2\2\u0911\u08b4\3\2"+
		"\2\2\u0911\u08c2\3\2\2\2\u0911\u08c7\3\2\2\2\u0911\u08ce\3\2\2\2\u0911"+
		"\u08d3\3\2\2\2\u0911\u08da\3\2\2\2\u0911\u08e0\3\2\2\2\u0911\u08e8\3\2"+
		"\2\2\u0911\u08f4\3\2\2\2\u0911\u0903\3\2\2\2\u0911\u0909\3\2\2\2\u0912"+
		"c\3\2\2\2\u0913\u0914\b\63\1\2\u0914\u0915\5j\66\2\u0915\u091b\3\2\2\2"+
		"\u0916\u0917\f\3\2\2\u0917\u0918\7\b\2\2\u0918\u091a\5j\66\2\u0919\u0916"+
		"\3\2\2\2\u091a\u091d\3\2\2\2\u091b\u0919\3\2\2\2\u091b\u091c\3\2\2\2\u091c"+
		"e\3\2\2\2\u091d\u091b\3\2\2\2\u091e\u091f\7\u01d1\2\2\u091f\u0920\7\u013a"+
		"\2\2\u0920\u0921\5\u0516\u028c\2\u0921\u0922\5\u0082B\2\u0922\u0927\3"+
		"\2\2\2\u0923\u0924\7\u01d2\2\2\u0924\u0925\7\u013a\2\2\u0925\u0927\5\u0516"+
		"\u028c\2\u0926\u091e\3\2\2\2\u0926\u0923\3\2\2\2\u0927g\3\2\2\2\u0928"+
		"\u0929\7\u01d1\2\2\u0929\u092a\7\u013a\2\2\u092a\u092b\5\u0516\u028c\2"+
		"\u092bi\3\2\2\2\u092c\u092d\7\u00ab\2\2\u092d\u0a29\5\u00be`\2\u092e\u092f"+
		"\7\u00ab\2\2\u092f\u0930\7\u0102\2\2\u0930\u0931\7s\2\2\u0931\u0932\7"+
		"\u01a9\2\2\u0932\u0a29\5\u00be`\2\u0933\u0934\7\u00ab\2\2\u0934\u0935"+
		"\7R\2\2\u0935\u0a29\5\u00be`\2\u0936\u0937\7\u00ab\2\2\u0937\u0938\7R"+
		"\2\2\u0938\u0939\7\u0102\2\2\u0939\u093a\7s\2\2\u093a\u093b\7\u01a9\2"+
		"\2\u093b\u0a29\5\u00be`\2\u093c\u093d\7\u00b0\2\2\u093d\u093e\5\u02d6"+
		"\u016c\2\u093e\u093f\5\u053a\u029e\2\u093f\u0940\5l\67\2\u0940\u0a29\3"+
		"\2\2\2\u0941\u0942\7\u00b0\2\2\u0942\u0943\5\u02d6\u016c\2\u0943\u0944"+
		"\5\u053a\u029e\2\u0944\u0945\7\u00e5\2\2\u0945\u0946\7s\2\2\u0946\u0947"+
		"\7t\2\2\u0947\u0a29\3\2\2\2\u0948\u0949\7\u00b0\2\2\u0949\u094a\5\u02d6"+
		"\u016c\2\u094a\u094b\5\u053a\u029e\2\u094b\u094c\7\u016a\2\2\u094c\u094d"+
		"\7s\2\2\u094d\u094e\7t\2\2\u094e\u0a29\3\2\2\2\u094f\u0950\7\u00b0\2\2"+
		"\u0950\u0951\5\u02d6\u016c\2\u0951\u0952\5\u053a\u029e\2\u0952\u0953\7"+
		"\u00e5\2\2\u0953\u0954\7\u01d3\2\2\u0954\u0a29\3\2\2\2\u0955\u0956\7\u00b0"+
		"\2\2\u0956\u0957\5\u02d6\u016c\2\u0957\u0958\5\u053a\u029e\2\u0958\u0959"+
		"\7\u00e5\2\2\u0959\u095a\7\u01d3\2\2\u095a\u095b\7\u0102\2\2\u095b\u095c"+
		"\7\u01a9\2\2\u095c\u0a29\3\2\2\2\u095d\u095e\7\u00b0\2\2\u095e\u095f\5"+
		"\u02d6\u016c\2\u095f\u0960\5\u053a\u029e\2\u0960\u0961\7\u016a\2\2\u0961"+
		"\u0962\7\u0173\2\2\u0962\u0963\5\u0532\u029a\2\u0963\u0a29\3\2\2\2\u0964"+
		"\u0965\7\u00b0\2\2\u0965\u0966\5\u02d6\u016c\2\u0966\u0967\5\u052a\u0296"+
		"\2\u0967\u0968\7\u016a\2\2\u0968\u0969\7\u0173\2\2\u0969\u096a\5\u0532"+
		"\u029a\2\u096a\u0a29\3\2\2\2\u096b\u096c\7\u00b0\2\2\u096c\u096d\5\u02d6"+
		"\u016c\2\u096d\u096e\5\u053a\u029e\2\u096e\u096f\7\u016a\2\2\u096f\u0970"+
		"\5v<\2\u0970\u0a29\3\2\2\2\u0971\u0972\7\u00b0\2\2\u0972\u0973\5\u02d6"+
		"\u016c\2\u0973\u0974\5\u053a\u029e\2\u0974\u0975\7\u0156\2\2\u0975\u0976"+
		"\5v<\2\u0976\u0a29\3\2\2\2\u0977\u0978\7\u00b0\2\2\u0978\u0979\5\u02d6"+
		"\u016c\2\u0979\u097a\5\u053a\u029e\2\u097a\u097b\7\u016a\2\2\u097b\u097c"+
		"\7\u0176\2\2\u097c\u097d\5\u053a\u029e\2\u097d\u0a29\3\2\2\2\u097e\u097f"+
		"\7\u00b0\2\2\u097f\u0980\5\u02d6\u016c\2\u0980\u0981\5\u053a\u029e\2\u0981"+
		"\u0982\7\u00ab\2\2\u0982\u0983\7\u01d4\2\2\u0983\u0984\5\u00c8e\2\u0984"+
		"\u0985\7J\2\2\u0985\u0986\7\u0101\2\2\u0986\u0987\5\u011e\u0090\2\u0987"+
		"\u0a29\3\2\2\2\u0988\u0989\7\u00b0\2\2\u0989\u098a\5\u02d6\u016c\2\u098a"+
		"\u098b\5\u053a\u029e\2\u098b\u098c\5~@\2\u098c\u0a29\3\2\2\2\u098d\u098e"+
		"\7\u00b0\2\2\u098e\u098f\5\u02d6\u016c\2\u098f\u0990\5\u053a\u029e\2\u0990"+
		"\u0991\7\u00e5\2\2\u0991\u0992\7\u0101\2\2\u0992\u0a29\3\2\2\2\u0993\u0994"+
		"\7\u00b0\2\2\u0994\u0995\5\u02d6\u016c\2\u0995\u0996\5\u053a\u029e\2\u0996"+
		"\u0997\7\u00e5\2\2\u0997\u0998\7\u0101\2\2\u0998\u0999\7\u0102\2\2\u0999"+
		"\u099a\7\u01a9\2\2\u099a\u0a29\3\2\2\2\u099b\u099c\7\u00e5\2\2\u099c\u099d"+
		"\5\u02d6\u016c\2\u099d\u099e\7\u0102\2\2\u099e\u099f\7\u01a9\2\2\u099f"+
		"\u09a0\5\u053a\u029e\2\u09a0\u09a1\5n8\2\u09a1\u0a29\3\2\2\2\u09a2\u09a3"+
		"\7\u00e5\2\2\u09a3\u09a4\5\u02d6\u016c\2\u09a4\u09a5\5\u053a\u029e\2\u09a5"+
		"\u09a6\5n8\2\u09a6\u0a29\3\2\2\2\u09a7\u09a8\7\u00b0\2\2\u09a8\u09a9\5"+
		"\u02d6\u016c\2\u09a9\u09aa\5\u053a\u029e\2\u09aa\u09ab\5\u02d8\u016d\2"+
		"\u09ab\u09ac\7\u0185\2\2\u09ac\u09ad\5\u0458\u022d\2\u09ad\u09ae\5p9\2"+
		"\u09ae\u09af\5r:\2\u09af\u0a29\3\2\2\2\u09b0\u09b1\7\u00b0\2\2\u09b1\u09b2"+
		"\5\u02d6\u016c\2\u09b2\u09b3\5\u053a\u029e\2\u09b3\u09b4\5\u015a\u00ae"+
		"\2\u09b4\u0a29\3\2\2\2\u09b5\u09b6\7\u00ab\2\2\u09b6\u0a29\5\u00d2j\2"+
		"\u09b7\u09b8\7\u00b0\2\2\u09b8\u09b9\7S\2\2\u09b9\u09ba\5\u051a\u028e"+
		"\2\u09ba\u09bb\5\u01ba\u00de\2\u09bb\u0a29\3\2\2\2\u09bc\u09bd\7\u0191"+
		"\2\2\u09bd\u09be\7S\2\2\u09be\u0a29\5\u051a\u028e\2\u09bf\u09c0\7\u00e5"+
		"\2\2\u09c0\u09c1\7S\2\2\u09c1\u09c2\7\u0102\2\2\u09c2\u09c3\7\u01a9\2"+
		"\2\u09c3\u09c4\5\u051a\u028e\2\u09c4\u09c5\5n8\2\u09c5\u0a29\3\2\2\2\u09c6"+
		"\u09c7\7\u00e5\2\2\u09c7\u09c8\7S\2\2\u09c8\u09c9\5\u051a\u028e\2\u09c9"+
		"\u09ca\5n8\2\u09ca\u0a29\3\2\2\2\u09cb\u09cc\7\u016a\2\2\u09cc\u09cd\7"+
		"\u0198\2\2\u09cd\u0a29\7\u0132\2\2\u09ce\u09cf\7\u00c4\2\2\u09cf\u09d0"+
		"\7v\2\2\u09d0\u0a29\5\u051a\u028e\2\u09d1\u09d2\7\u016a\2\2\u09d2\u09d3"+
		"\7\u0198\2\2\u09d3\u0a29\7\u00c4\2\2\u09d4\u09d5\7\u016a\2\2\u09d5\u0a29"+
		"\7\u01d5\2\2\u09d6\u09d7\7\u016a\2\2\u09d7\u0a29\7\u018c\2\2\u09d8\u09d9"+
		"\7\u00e7\2\2\u09d9\u09da\7\u0182\2\2\u09da\u0a29\5\u051a\u028e\2\u09db"+
		"\u09dc\7\u00e7\2\2\u09dc\u09dd\7\u00b1\2\2\u09dd\u09de\7\u0182\2\2\u09de"+
		"\u0a29\5\u051a\u028e\2\u09df\u09e0\7\u00e7\2\2\u09e0\u09e1\7\u0155\2\2"+
		"\u09e1\u09e2\7\u0182\2\2\u09e2\u0a29\5\u051a\u028e\2\u09e3\u09e4\7\u00e7"+
		"\2\2\u09e4\u09e5\7\u0182\2\2\u09e5\u0a29\7D\2\2\u09e6\u09e7\7\u00e7\2"+
		"\2\u09e7\u09e8\7\u0182\2\2\u09e8\u0a29\7\u0089\2\2\u09e9\u09ea\7\u00e0"+
		"\2\2\u09ea\u09eb\7\u0182\2\2\u09eb\u0a29\5\u051a\u028e\2\u09ec\u09ed\7"+
		"\u00e0\2\2\u09ed\u09ee\7\u0182\2\2\u09ee\u0a29\7D\2\2\u09ef\u09f0\7\u00e0"+
		"\2\2\u09f0\u09f1\7\u0182\2\2\u09f1\u0a29\7\u0089\2\2\u09f2\u09f3\7\u00e7"+
		"\2\2\u09f3\u09f4\7\u015e\2\2\u09f4\u0a29\5\u051a\u028e\2\u09f5\u09f6\7"+
		"\u00e7\2\2\u09f6\u09f7\7\u00b1\2\2\u09f7\u09f8\7\u015e\2\2\u09f8\u0a29"+
		"\5\u051a\u028e\2\u09f9\u09fa\7\u00e7\2\2\u09fa\u09fb\7\u0155\2\2\u09fb"+
		"\u09fc\7\u015e\2\2\u09fc\u0a29\5\u051a\u028e\2\u09fd\u09fe\7\u00e0\2\2"+
		"\u09fe\u09ff\7\u015e\2\2\u09ff\u0a29\5\u051a\u028e\2\u0a00\u0a01\7\u010a"+
		"\2\2\u0a01\u0a29\5\u0516\u028c\2\u0a02\u0a03\7\u012a\2\2\u0a03\u0a04\7"+
		"\u010a\2\2\u0a04\u0a29\5\u0516\u028c\2\u0a05\u0a06\7\u0130\2\2\u0a06\u0a29"+
		"\5\u020e\u0108\2\u0a07\u0a08\7s\2\2\u0a08\u0a29\7\u0130\2\2\u0a09\u0a0a"+
		"\7\u0137\2\2\u0a0a\u0a0b\7\u0084\2\2\u0a0b\u0a29\5\u0536\u029c\2\u0a0c"+
		"\u0a0d\7\u016a\2\2\u0a0d\u0a0e\7\u017c\2\2\u0a0e\u0a29\5\u051a\u028e\2"+
		"\u0a0f\u0a10\7\u016a\2\2\u0a10\u0a29\5v<\2\u0a11\u0a12\7\u0156\2\2\u0a12"+
		"\u0a29\5v<\2\u0a13\u0a14\7\u0155\2\2\u0a14\u0a15\7\u0101\2\2\u0a15\u0a29"+
		"\5t;\2\u0a16\u0a17\7\u00e7\2\2\u0a17\u0a18\7\u01bb\2\2\u0a18\u0a19\7\u0118"+
		"\2\2\u0a19\u0a29\7\u0164\2\2\u0a1a\u0a1b\7\u00e0\2\2\u0a1b\u0a1c\7\u01bb"+
		"\2\2\u0a1c\u0a1d\7\u0118\2\2\u0a1d\u0a29\7\u0164\2\2\u0a1e\u0a1f\7\u00f7"+
		"\2\2\u0a1f\u0a20\7\u01bb\2\2\u0a20\u0a21\7\u0118\2\2\u0a21\u0a29\7\u0164"+
		"\2\2\u0a22\u0a23\7\u012a\2\2\u0a23\u0a24\7\u00f7\2\2\u0a24\u0a25\7\u01bb"+
		"\2\2\u0a25\u0a26\7\u0118\2\2\u0a26\u0a29\7\u0164\2\2\u0a27\u0a29\5\u015a"+
		"\u00ae\2\u0a28\u092c\3\2\2\2\u0a28\u092e\3\2\2\2\u0a28\u0933\3\2\2\2\u0a28"+
		"\u0936\3\2\2\2\u0a28\u093c\3\2\2\2\u0a28\u0941\3\2\2\2\u0a28\u0948\3\2"+
		"\2\2\u0a28\u094f\3\2\2\2\u0a28\u0955\3\2\2\2\u0a28\u095d\3\2\2\2\u0a28"+
		"\u0964\3\2\2\2\u0a28\u096b\3\2\2\2\u0a28\u0971\3\2\2\2\u0a28\u0977\3\2"+
		"\2\2\u0a28\u097e\3\2\2\2\u0a28\u0988\3\2\2\2\u0a28\u098d\3\2\2\2\u0a28"+
		"\u0993\3\2\2\2\u0a28\u099b\3\2\2\2\u0a28\u09a2\3\2\2\2\u0a28\u09a7\3\2"+
		"\2\2\u0a28\u09b0\3\2\2\2\u0a28\u09b5\3\2\2\2\u0a28\u09b7\3\2\2\2\u0a28"+
		"\u09bc\3\2\2\2\u0a28\u09bf\3\2\2\2\u0a28\u09c6\3\2\2\2\u0a28\u09cb\3\2"+
		"\2\2\u0a28\u09ce\3\2\2\2\u0a28\u09d1\3\2\2\2\u0a28\u09d4\3\2\2\2\u0a28"+
		"\u09d6\3\2\2\2\u0a28\u09d8\3\2\2\2\u0a28\u09db\3\2\2\2\u0a28\u09df\3\2"+
		"\2\2\u0a28\u09e3\3\2\2\2\u0a28\u09e6\3\2\2\2\u0a28\u09e9\3\2\2\2\u0a28"+
		"\u09ec\3\2\2\2\u0a28\u09ef\3\2\2\2\u0a28\u09f2\3\2\2\2\u0a28\u09f5\3\2"+
		"\2\2\u0a28\u09f9\3\2\2\2\u0a28\u09fd\3\2\2\2\u0a28\u0a00\3\2\2\2\u0a28"+
		"\u0a02\3\2\2\2\u0a28\u0a05\3\2\2\2\u0a28\u0a07\3\2\2\2\u0a28\u0a09\3\2"+
		"\2\2\u0a28\u0a0c\3\2\2\2\u0a28\u0a0f\3\2\2\2\u0a28\u0a11\3\2\2\2\u0a28"+
		"\u0a13\3\2\2\2\u0a28\u0a16\3\2\2\2\u0a28\u0a1a\3\2\2\2\u0a28\u0a1e\3\2"+
		"\2\2\u0a28\u0a22\3\2\2\2\u0a28\u0a27\3\2\2\2\u0a29k\3\2\2\2\u0a2a\u0a2b"+
		"\7\u016a\2\2\u0a2b\u0a2c\7[\2\2\u0a2c\u0a30\5\u0488\u0245\2\u0a2d\u0a2e"+
		"\7\u00e5\2\2\u0a2e\u0a30\7[\2\2\u0a2f\u0a2a\3\2\2\2\u0a2f\u0a2d\3\2\2"+
		"\2\u0a30m\3\2\2\2\u0a31\u0a35\7\u00bc\2\2\u0a32\u0a35\7\u0158\2\2\u0a33"+
		"\u0a35\3\2\2\2\u0a34\u0a31\3\2\2\2\u0a34\u0a32\3\2\2\2\u0a34\u0a33\3\2"+
		"\2\2\u0a35o\3\2\2\2\u0a36\u0a37\7Q\2\2\u0a37\u0a3a\5\u020e\u0108\2\u0a38"+
		"\u0a3a\3\2\2\2\u0a39\u0a36\3\2\2\2\u0a39\u0a38\3\2\2\2\u0a3aq\3\2\2\2"+
		"\u0a3b\u0a3c\7\u008a\2\2\u0a3c\u0a3f\5\u0488\u0245\2\u0a3d\u0a3f\3\2\2"+
		"\2\u0a3e\u0a3b\3\2\2\2\u0a3e\u0a3d\3\2\2\2\u0a3fs\3\2\2\2\u0a40\u0a47"+
		"\7\u012b\2\2\u0a41\u0a47\7\u0097\2\2\u0a42\u0a47\7[\2\2\u0a43\u0a44\7"+
		"\u008a\2\2\u0a44\u0a45\7\u0108\2\2\u0a45\u0a47\5\u051a\u028e\2\u0a46\u0a40"+
		"\3\2\2\2\u0a46\u0a41\3\2\2\2\u0a46\u0a42\3\2\2\2\u0a46\u0a43\3\2\2\2\u0a47"+
		"u\3\2\2\2\u0a48\u0a49\7\4\2\2\u0a49\u0a4a\5z>\2\u0a4a\u0a4b\7\5\2\2\u0a4b"+
		"w\3\2\2\2\u0a4c\u0a4d\7\u008f\2\2\u0a4d\u0a50\5v<\2\u0a4e\u0a50\3\2\2"+
		"\2\u0a4f\u0a4c\3\2\2\2\u0a4f\u0a4e\3\2\2\2\u0a50y\3\2\2\2\u0a51\u0a52"+
		"\b>\1\2\u0a52\u0a53\5|?\2\u0a53\u0a59\3\2\2\2\u0a54\u0a55\f\3\2\2\u0a55"+
		"\u0a56\7\b\2\2\u0a56\u0a58\5|?\2\u0a57\u0a54\3\2\2\2\u0a58\u0a5b\3\2\2"+
		"\2\u0a59\u0a57\3\2\2\2\u0a59\u0a5a\3\2\2\2\u0a5a{\3\2\2\2\u0a5b\u0a59"+
		"\3\2\2\2\u0a5c\u0a5d\5\u0540\u02a1\2\u0a5d\u0a5e\7\f\2\2\u0a5e\u0a5f\5"+
		"\u01d4\u00eb\2\u0a5f\u0a6c\3\2\2\2\u0a60\u0a6c\5\u0540\u02a1\2\u0a61\u0a62"+
		"\5\u0540\u02a1\2\u0a62\u0a63\7\r\2\2\u0a63\u0a64\5\u0540\u02a1\2\u0a64"+
		"\u0a65\7\f\2\2\u0a65\u0a66\5\u01d4\u00eb\2\u0a66\u0a6c\3\2\2\2\u0a67\u0a68"+
		"\5\u0540\u02a1\2\u0a68\u0a69\7\r\2\2\u0a69\u0a6a\5\u0540\u02a1\2\u0a6a"+
		"\u0a6c\3\2\2\2\u0a6b\u0a5c\3\2\2\2\u0a6b\u0a60\3\2\2\2\u0a6b\u0a61\3\2"+
		"\2\2\u0a6b\u0a67\3\2\2\2\u0a6c}\3\2\2\2\u0a6d\u0a6e\b@\1\2\u0a6e\u0a6f"+
		"\5\u0080A\2\u0a6f\u0a74\3\2\2\2\u0a70\u0a71\f\3\2\2\u0a71\u0a73\5\u0080"+
		"A\2\u0a72\u0a70\3\2\2\2\u0a73\u0a76\3\2\2\2\u0a74\u0a72\3\2\2\2\u0a74"+
		"\u0a75\3\2\2\2\u0a75\177\3\2\2\2\u0a76\u0a74\3\2\2\2\u0a77\u0a82\7\u0157"+
		"\2\2\u0a78\u0a79\7\u0157\2\2\u0a79\u0a7a\5\22\n\2\u0a7a\u0a7b\5\u0126"+
		"\u0094\2\u0a7b\u0a82\3\2\2\2\u0a7c\u0a7d\7\u016a\2\2\u0a7d\u0a82\5\u0122"+
		"\u0092\2\u0a7e\u0a7f\7\u016a\2\2\u0a7f\u0a80\7\u01d4\2\2\u0a80\u0a82\5"+
		"\u00c8e\2\u0a81\u0a77\3\2\2\2\u0a81\u0a78\3\2\2\2\u0a81\u0a7c\3\2\2\2"+
		"\u0a81\u0a7e\3\2\2\2\u0a82\u0081\3\2\2\2\u0a83\u0a84\7d\2\2\u0a84\u0a85"+
		"\7\u01c3\2\2\u0a85\u0a86\7\u008f\2\2\u0a86\u0a87\7\4\2\2\u0a87\u0a88\5"+
		"\u0086D\2\u0a88\u0a89\7\5\2\2\u0a89\u0a9e\3\2\2\2\u0a8a\u0a8b\7d\2\2\u0a8b"+
		"\u0a8c\7\u01c3\2\2\u0a8c\u0a8d\7j\2\2\u0a8d\u0a8e\7\4\2\2\u0a8e\u0a8f"+
		"\5\u04dc\u026f\2\u0a8f\u0a90\7\5\2\2\u0a90\u0a9e\3\2\2\2\u0a91\u0a92\7"+
		"d\2\2\u0a92\u0a93\7\u01c3\2\2\u0a93\u0a94\7f\2\2\u0a94\u0a95\7\4\2\2\u0a95"+
		"\u0a96\5\u04dc\u026f\2\u0a96\u0a97\7\5\2\2\u0a97\u0a98\7\u0084\2\2\u0a98"+
		"\u0a99\7\4\2\2\u0a99\u0a9a\5\u04dc\u026f\2\u0a9a\u0a9b\7\5\2\2\u0a9b\u0a9e"+
		"\3\2\2\2\u0a9c\u0a9e\7[\2\2\u0a9d\u0a83\3\2\2\2\u0a9d\u0a8a\3\2\2\2\u0a9d"+
		"\u0a91\3\2\2\2\u0a9d\u0a9c\3\2\2\2\u0a9e\u0083\3\2\2\2\u0a9f\u0aa0\5\u053e"+
		"\u02a0\2\u0aa0\u0aa1\5\u052a\u0296\2\u0aa1\u0085\3\2\2\2\u0aa2\u0aa3\b"+
		"D\1\2\u0aa3\u0aa4\5\u0084C\2\u0aa4\u0aaa\3\2\2\2\u0aa5\u0aa6\f\3\2\2\u0aa6"+
		"\u0aa7\7\b\2\2\u0aa7\u0aa9\5\u0084C\2\u0aa8\u0aa5\3\2\2\2\u0aa9\u0aac"+
		"\3\2\2\2\u0aaa\u0aa8\3\2\2\2\u0aaa\u0aab\3\2\2\2\u0aab\u0087\3\2\2\2\u0aac"+
		"\u0aaa\3\2\2\2\u0aad\u0aae\7\u00b0\2\2\u0aae\u0aaf\7\u0185\2\2\u0aaf\u0ab0"+
		"\5\u020e\u0108\2\u0ab0\u0ab1\5\u008aF\2\u0ab1\u0089\3\2\2\2\u0ab2\u0ab3"+
		"\bF\1\2\u0ab3\u0ab4\5\u008cG\2\u0ab4\u0aba\3\2\2\2\u0ab5\u0ab6\f\3\2\2"+
		"\u0ab6\u0ab7\7\b\2\2\u0ab7\u0ab9\5\u008cG\2\u0ab8\u0ab5\3\2\2\2\u0ab9"+
		"\u0abc\3\2\2\2\u0aba\u0ab8\3\2\2\2\u0aba\u0abb\3\2\2\2\u0abb\u008b\3\2"+
		"\2\2\u0abc\u0aba\3\2\2\2\u0abd\u0abe\7\u00ab\2\2\u0abe\u0abf\7\u00b5\2"+
		"\2\u0abf\u0ac0\5\u0448\u0225\2\u0ac0\u0ac1\5n8\2\u0ac1\u0ad8\3\2\2\2\u0ac2"+
		"\u0ac3\7\u00e5\2\2\u0ac3\u0ac4\7\u00b5\2\2\u0ac4\u0ac5\7\u0102\2\2\u0ac5"+
		"\u0ac6\7\u01a9\2\2\u0ac6\u0ac7\5\u053a\u029e\2\u0ac7\u0ac8\5n8\2\u0ac8"+
		"\u0ad8\3\2\2\2\u0ac9\u0aca\7\u00e5\2\2\u0aca\u0acb\7\u00b5\2\2\u0acb\u0acc"+
		"\5\u053a\u029e\2\u0acc\u0acd\5n8\2\u0acd\u0ad8\3\2\2\2\u0ace\u0acf\7\u00b0"+
		"\2\2\u0acf\u0ad0\7\u00b5\2\2\u0ad0\u0ad1\5\u053a\u029e\2\u0ad1\u0ad2\5"+
		"\u02d8\u016d\2\u0ad2\u0ad3\7\u0185\2\2\u0ad3\u0ad4\5\u0458\u022d\2\u0ad4"+
		"\u0ad5\5p9\2\u0ad5\u0ad6\5n8\2\u0ad6\u0ad8\3\2\2\2\u0ad7\u0abd\3\2\2\2"+
		"\u0ad7\u0ac2\3\2\2\2\u0ad7\u0ac9\3\2\2\2\u0ad7\u0ace\3\2\2\2\u0ad8\u008d"+
		"\3\2\2\2\u0ad9\u0ada\7\u00c3\2\2\u0ada\u0ade\5\u03b4\u01db\2\u0adb\u0adc"+
		"\7\u00c3\2\2\u0adc\u0ade\7D\2\2\u0add\u0ad9\3\2\2\2\u0add\u0adb\3\2\2"+
		"\2\u0ade\u008f\3\2\2\2\u0adf\u0ae0\7\u00cf\2\2\u0ae0\u0ae1\5\u009eP\2"+
		"\u0ae1\u0ae2\5\u0516\u028c\2\u0ae2\u0ae3\5\u00d8m\2\u0ae3\u0ae4\5\u0092"+
		"J\2\u0ae4\u0ae5\5\u0094K\2\u0ae5\u0ae6\5\u0096L\2\u0ae6\u0ae7\5\u00a0"+
		"Q\2\u0ae7\u0ae8\5\22\n\2\u0ae8\u0ae9\5\u0098M\2\u0ae9\u0aea\5\u0440\u0221"+
		"\2\u0aea\u0af6\3\2\2\2\u0aeb\u0aec\7\u00cf\2\2\u0aec\u0aed\7\4\2\2\u0aed"+
		"\u0aee\5\u0380\u01c1\2\u0aee\u0aef\7\5\2\2\u0aef\u0af0\7\u0084\2\2\u0af0"+
		"\u0af1\5\u0094K\2\u0af1\u0af2\5\u0096L\2\u0af2\u0af3\5\22\n\2\u0af3\u0af4"+
		"\5\u0098M\2\u0af4\u0af6\3\2\2\2\u0af5\u0adf\3\2\2\2\u0af5\u0aeb\3\2\2"+
		"\2\u0af6\u0091\3\2\2\2\u0af7\u0af8\t\4\2\2\u0af8\u0093\3\2\2\2\u0af9\u0afc"+
		"\7\u0146\2\2\u0afa\u0afc\3\2\2\2\u0afb\u0af9\3\2\2\2\u0afb\u0afa\3\2\2"+
		"\2\u0afc\u0095\3\2\2\2\u0afd\u0b01\5\u052c\u0297\2\u0afe\u0b01\7\u0174"+
		"\2\2\u0aff\u0b01\7\u0175\2\2\u0b00\u0afd\3\2\2\2\u0b00\u0afe\3\2\2\2\u0b00"+
		"\u0aff\3\2\2\2\u0b01\u0097\3\2\2\2\u0b02\u0b08\5\u009aN\2\u0b03\u0b04"+
		"\7\4\2\2\u0b04\u0b05\5\u00a4S\2\u0b05\u0b06\7\5\2\2\u0b06\u0b08\3\2\2"+
		"\2\u0b07\u0b02\3\2\2\2\u0b07\u0b03\3\2\2\2\u0b08\u0099\3\2\2\2\u0b09\u0b0e"+
		"\bN\1\2\u0b0a\u0b0b\f\4\2\2\u0b0b\u0b0d\5\u009cO\2\u0b0c\u0b0a\3\2\2\2"+
		"\u0b0d\u0b10\3\2\2\2\u0b0e\u0b0c\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u009b"+
		"\3\2\2\2\u0b10\u0b0e\3\2\2\2\u0b11\u0b35\7\u0091\2\2\u0b12\u0b35\7\u0096"+
		"\2\2\u0b13\u0b14\7\u00dd\2\2\u0b14\u0b15\5\u0344\u01a3\2\u0b15\u0b16\5"+
		"\u052c\u0297\2\u0b16\u0b35\3\2\2\2\u0b17\u0b18\7t\2\2\u0b18\u0b19\5\u0344"+
		"\u01a3\2\u0b19\u0b1a\5\u052c\u0297\2\u0b1a\u0b35\3\2\2\2\u0b1b\u0b35\7"+
		"\u00d1\2\2\u0b1c\u0b35\7\u00fe\2\2\u0b1d\u0b1e\7\u0147\2\2\u0b1e\u0b1f"+
		"\5\u0344\u01a3\2\u0b1f\u0b20\5\u052c\u0297\2\u0b20\u0b35\3\2\2\2\u0b21"+
		"\u0b22\7\u00eb\2\2\u0b22\u0b23\5\u0344\u01a3\2\u0b23\u0b24\5\u052c\u0297"+
		"\2\u0b24\u0b35\3\2\2\2\u0b25\u0b26\7\u00f7\2\2\u0b26\u0b27\7\u0147\2\2"+
		"\u0b27\u0b35\5\u00dan\2\u0b28\u0b29\7\u00f7\2\2\u0b29\u0b2a\7\u0147\2"+
		"\2\u0b2a\u0b35\7\13\2\2\u0b2b\u0b2c\7\u00f7\2\2\u0b2c\u0b2d\7s\2\2\u0b2d"+
		"\u0b2e\7t\2\2\u0b2e\u0b35\5\u00dan\2\u0b2f\u0b30\7\u00f7\2\2\u0b30\u0b31"+
		"\7t\2\2\u0b31\u0b35\5\u00dan\2\u0b32\u0b33\7\u00e8\2\2\u0b33\u0b35\5\u052c"+
		"\u0297\2\u0b34\u0b11\3\2\2\2\u0b34\u0b12\3\2\2\2\u0b34\u0b13\3\2\2\2\u0b34"+
		"\u0b17\3\2\2\2\u0b34\u0b1b\3\2\2\2\u0b34\u0b1c\3\2\2\2\u0b34\u0b1d\3\2"+
		"\2\2\u0b34\u0b21\3\2\2\2\u0b34\u0b25\3\2\2\2\u0b34\u0b28\3\2\2\2\u0b34"+
		"\u0b2b\3\2\2\2\u0b34\u0b2f\3\2\2\2\u0b34\u0b32\3\2\2\2\u0b35\u009d\3\2"+
		"\2\2\u0b36\u0b39\7\u0091\2\2\u0b37\u0b39\3\2\2\2\u0b38\u0b36\3\2\2\2\u0b38"+
		"\u0b37\3\2\2\2\u0b39\u009f\3\2\2\2\u0b3a\u0b3b\5\u00a2R\2\u0b3b\u0b3c"+
		"\7\u00de\2\2\u0b3c\u0b3d\5\u052c\u0297\2\u0b3d\u0b40\3\2\2\2\u0b3e\u0b40"+
		"\3\2\2\2\u0b3f\u0b3a\3\2\2\2\u0b3f\u0b3e\3\2\2\2\u0b40\u00a1\3\2\2\2\u0b41"+
		"\u0b44\7\u008a\2\2\u0b42\u0b44\3\2\2\2\u0b43\u0b41\3\2\2\2\u0b43\u0b42"+
		"\3\2\2\2\u0b44\u00a3\3\2\2\2\u0b45\u0b46\bS\1\2\u0b46\u0b47\5\u00a6T\2"+
		"\u0b47\u0b4d\3\2\2\2\u0b48\u0b49\f\3\2\2\u0b49\u0b4a\7\b\2\2\u0b4a\u0b4c"+
		"\5\u00a6T\2\u0b4b\u0b48\3\2\2\2\u0b4c\u0b4f\3\2\2\2\u0b4d\u0b4b\3\2\2"+
		"\2\u0b4d\u0b4e\3\2\2\2\u0b4e\u00a5\3\2\2\2\u0b4f\u0b4d\3\2\2\2\u0b50\u0b51"+
		"\5\u0540\u02a1\2\u0b51\u0b52\5\u00a8U\2\u0b52\u00a7\3\2\2\2\u0b53\u0b5c"+
		"\5D#\2\u0b54\u0b5c\5\u0126\u0094\2\u0b55\u0b5c\7\13\2\2\u0b56\u0b57\7"+
		"\4\2\2\u0b57\u0b58\5\u00aaV\2\u0b58\u0b59\7\5\2\2\u0b59\u0b5c\3\2\2\2"+
		"\u0b5a\u0b5c\3\2\2\2\u0b5b\u0b53\3\2\2\2\u0b5b\u0b54\3\2\2\2\u0b5b\u0b55"+
		"\3\2\2\2\u0b5b\u0b56\3\2\2\2\u0b5b\u0b5a\3\2\2\2\u0b5c\u00a9\3\2\2\2\u0b5d"+
		"\u0b5e\bV\1\2\u0b5e\u0b5f\5\u00acW\2\u0b5f\u0b65\3\2\2\2\u0b60\u0b61\f"+
		"\3\2\2\u0b61\u0b62\7\b\2\2\u0b62\u0b64\5\u00acW\2\u0b63\u0b60\3\2\2\2"+
		"\u0b64\u0b67\3\2\2\2\u0b65\u0b63\3\2\2\2\u0b65\u0b66\3\2\2\2\u0b66\u00ab"+
		"\3\2\2\2\u0b67\u0b65\3\2\2\2\u0b68\u0b69\5D#\2\u0b69\u00ad\3\2\2\2\u0b6a"+
		"\u0b6b\7T\2\2\u0b6b\u0b6c\5\u00b0Y\2\u0b6c\u0b6d\7\u0082\2\2\u0b6d\u0b6e"+
		"\5\u0516\u028c\2\u0b6e\u0b6f\7\4\2\2\u0b6f\u0b70\5\u00b2Z\2\u0b70\u0b71"+
		"\7\5\2\2\u0b71\u0b72\5\u00f0y\2\u0b72\u0b73\5\u00f2z\2\u0b73\u0b74\5\u00fa"+
		"~\2\u0b74\u0b75\5\u00fc\177\2\u0b75\u0b76\5\u00fe\u0080\2\u0b76\u0b77"+
		"\5\u0100\u0081\2\u0b77\u0bc8\3\2\2\2\u0b78\u0b79\7T\2\2\u0b79\u0b7a\5"+
		"\u00b0Y\2\u0b7a\u0b7b\7\u0082\2\2\u0b7b\u0b7c\7\u0102\2\2\u0b7c\u0b7d"+
		"\7s\2\2\u0b7d\u0b7e\7\u01a9\2\2\u0b7e\u0b7f\5\u0516\u028c\2\u0b7f\u0b80"+
		"\7\4\2\2\u0b80\u0b81\5\u00b2Z\2\u0b81\u0b82\7\5\2\2\u0b82\u0b83\5\u00f0"+
		"y\2\u0b83\u0b84\5\u00f2z\2\u0b84\u0b85\5\u00fa~\2\u0b85\u0b86\5\u00fc"+
		"\177\2\u0b86\u0b87\5\u00fe\u0080\2\u0b87\u0b88\5\u0100\u0081\2\u0b88\u0bc8"+
		"\3\2\2\2\u0b89\u0b8a\7T\2\2\u0b8a\u0b8b\5\u00b0Y\2\u0b8b\u0b8c\7\u0082"+
		"\2\2\u0b8c\u0b8d\5\u0516\u028c\2\u0b8d\u0b8e\7\u0130\2\2\u0b8e\u0b8f\5"+
		"\u020e\u0108\2\u0b8f\u0b90\5\u00b4[\2\u0b90\u0b91\5\u00f2z\2\u0b91\u0b92"+
		"\5\u00fa~\2\u0b92\u0b93\5\u00fc\177\2\u0b93\u0b94\5\u00fe\u0080\2\u0b94"+
		"\u0b95\5\u0100\u0081\2\u0b95\u0bc8\3\2\2\2\u0b96\u0b97\7T\2\2\u0b97\u0b98"+
		"\5\u00b0Y\2\u0b98\u0b99\7\u0082\2\2\u0b99\u0b9a\7\u0102\2\2\u0b9a\u0b9b"+
		"\7s\2\2\u0b9b\u0b9c\7\u01a9\2\2\u0b9c\u0b9d\5\u0516\u028c\2\u0b9d\u0b9e"+
		"\7\u0130\2\2\u0b9e\u0b9f\5\u020e\u0108\2\u0b9f\u0ba0\5\u00b4[\2\u0ba0"+
		"\u0ba1\5\u00f2z\2\u0ba1\u0ba2\5\u00fa~\2\u0ba2\u0ba3\5\u00fc\177\2\u0ba3"+
		"\u0ba4\5\u00fe\u0080\2\u0ba4\u0ba5\5\u0100\u0081\2\u0ba5\u0bc8\3\2\2\2"+
		"\u0ba6\u0ba7\7T\2\2\u0ba7\u0ba8\5\u00b0Y\2\u0ba8\u0ba9\7\u0082\2\2\u0ba9"+
		"\u0baa\5\u0516\u028c\2\u0baa\u0bab\7\u013a\2\2\u0bab\u0bac\7\u0130\2\2"+
		"\u0bac\u0bad\5\u0516\u028c\2\u0bad\u0bae\5\u00b4[\2\u0bae\u0baf\5\u0082"+
		"B\2\u0baf\u0bb0\5\u00f2z\2\u0bb0\u0bb1\5\u00fa~\2\u0bb1\u0bb2\5\u00fc"+
		"\177\2\u0bb2\u0bb3\5\u00fe\u0080\2\u0bb3\u0bb4\5\u0100\u0081\2\u0bb4\u0bc8"+
		"\3\2\2\2\u0bb5\u0bb6\7T\2\2\u0bb6\u0bb7\5\u00b0Y\2\u0bb7\u0bb8\7\u0082"+
		"\2\2\u0bb8\u0bb9\7\u0102\2\2\u0bb9\u0bba\7s\2\2\u0bba\u0bbb\7\u01a9\2"+
		"\2\u0bbb\u0bbc\5\u0516\u028c\2\u0bbc\u0bbd\7\u013a\2\2\u0bbd\u0bbe\7\u0130"+
		"\2\2\u0bbe\u0bbf\5\u0516\u028c\2\u0bbf\u0bc0\5\u00b4[\2\u0bc0\u0bc1\5"+
		"\u0082B\2\u0bc1\u0bc2\5\u00f2z\2\u0bc2\u0bc3\5\u00fa~\2\u0bc3\u0bc4\5"+
		"\u00fc\177\2\u0bc4\u0bc5\5\u00fe\u0080\2\u0bc5\u0bc6\5\u0100\u0081\2\u0bc6"+
		"\u0bc8\3\2\2\2\u0bc7\u0b6a\3\2\2\2\u0bc7\u0b78\3\2\2\2\u0bc7\u0b89\3\2"+
		"\2\2\u0bc7\u0b96\3\2\2\2\u0bc7\u0ba6\3\2\2\2\u0bc7\u0bb5\3\2\2\2\u0bc8"+
		"\u00af\3\2\2\2\u0bc9\u0bd6\7\u017f\2\2\u0bca\u0bd6\7\u017d\2\2\u0bcb\u0bcc"+
		"\7\u011b\2\2\u0bcc\u0bd6\7\u017f\2\2\u0bcd\u0bce\7\u011b\2\2\u0bce\u0bd6"+
		"\7\u017d\2\2\u0bcf\u0bd0\7\u00fb\2\2\u0bd0\u0bd6\7\u017f\2\2\u0bd1\u0bd2"+
		"\7\u00fb\2\2\u0bd2\u0bd6\7\u017d\2\2\u0bd3\u0bd6\7\u018c\2\2\u0bd4\u0bd6"+
		"\3\2\2\2\u0bd5\u0bc9\3\2\2\2\u0bd5\u0bca\3\2\2\2\u0bd5\u0bcb\3\2\2\2\u0bd5"+
		"\u0bcd\3\2\2\2\u0bd5\u0bcf\3\2\2\2\u0bd5\u0bd1\3\2\2\2\u0bd5\u0bd3\3\2"+
		"\2\2\u0bd5\u0bd4\3\2\2\2\u0bd6\u00b1\3\2\2\2\u0bd7\u0bda\5\u00b6\\\2\u0bd8"+
		"\u0bda\3\2\2\2\u0bd9\u0bd7\3\2\2\2\u0bd9\u0bd8\3\2\2\2\u0bda\u00b3\3\2"+
		"\2\2\u0bdb\u0bdc\7\4\2\2\u0bdc\u0bdd\5\u00b8]\2\u0bdd\u0bde\7\5\2\2\u0bde"+
		"\u0be1\3\2\2\2\u0bdf\u0be1\3\2\2\2\u0be0\u0bdb\3\2\2\2\u0be0\u0bdf\3\2"+
		"\2\2\u0be1\u00b5\3\2\2\2\u0be2\u0be3\b\\\1\2\u0be3\u0be4\5\u00ba^\2\u0be4"+
		"\u0bea\3\2\2\2\u0be5\u0be6\f\3\2\2\u0be6\u0be7\7\b\2\2\u0be7\u0be9\5\u00ba"+
		"^\2\u0be8\u0be5\3\2\2\2\u0be9\u0bec\3\2\2\2\u0bea\u0be8\3\2\2\2\u0bea"+
		"\u0beb\3\2\2\2\u0beb\u00b7\3\2\2\2\u0bec\u0bea\3\2\2\2\u0bed\u0bee\b]"+
		"\1\2\u0bee\u0bef\5\u00bc_\2\u0bef\u0bf5\3\2\2\2\u0bf0\u0bf1\f\3\2\2\u0bf1"+
		"\u0bf2\7\b\2\2\u0bf2\u0bf4\5\u00bc_\2\u0bf3\u0bf0\3\2\2\2\u0bf4\u0bf7"+
		"\3\2\2\2\u0bf5\u0bf3\3\2\2\2\u0bf5\u0bf6\3\2\2\2\u0bf6\u00b9\3\2\2\2\u0bf7"+
		"\u0bf5\3\2\2\2\u0bf8\u0bfc\5\u00be`\2\u0bf9\u0bfc\5\u00ccg\2\u0bfa\u0bfc"+
		"\5\u00d2j\2\u0bfb\u0bf8\3\2\2\2\u0bfb\u0bf9\3\2\2\2\u0bfb\u0bfa\3\2\2"+
		"\2\u0bfc\u00bb\3\2\2\2\u0bfd\u0c00\5\u00c0a\2\u0bfe\u0c00\5\u00d2j\2\u0bff"+
		"\u0bfd\3\2\2\2\u0bff\u0bfe\3\2\2\2\u0c00\u00bd\3\2\2\2\u0c01\u0c02\5\u053a"+
		"\u029e\2\u0c02\u0c03\5\u0458\u022d\2\u0c03\u0c04\5\u0156\u00ac\2\u0c04"+
		"\u0c05\5\u00c2b\2\u0c05\u00bf\3\2\2\2\u0c06\u0c07\5\u053a\u029e\2\u0c07"+
		"\u0c08\5\u00c2b\2\u0c08\u0c0f\3\2\2\2\u0c09\u0c0a\5\u053a\u029e\2\u0c0a"+
		"\u0c0b\7\u008f\2\2\u0c0b\u0c0c\7\u0135\2\2\u0c0c\u0c0d\5\u00c2b\2\u0c0d"+
		"\u0c0f\3\2\2\2\u0c0e\u0c06\3\2\2\2\u0c0e\u0c09\3\2\2\2\u0c0f\u00c1\3\2"+
		"\2\2\u0c10\u0c15\bb\1\2\u0c11\u0c12\f\4\2\2\u0c12\u0c14\5\u00c4c\2\u0c13"+
		"\u0c11\3\2\2\2\u0c14\u0c17\3\2\2\2\u0c15\u0c13\3\2\2\2\u0c15\u0c16\3\2"+
		"\2\2\u0c16\u00c3\3\2\2\2\u0c17\u0c15\3\2\2\2\u0c18\u0c19\7S\2\2\u0c19"+
		"\u0c1a\5\u051a\u028e\2\u0c1a\u0c1b\5\u00c6d\2\u0c1b\u0c21\3\2\2\2\u0c1c"+
		"\u0c21\5\u00c6d\2\u0c1d\u0c21\5\u00caf\2\u0c1e\u0c1f\7Q\2\2\u0c1f\u0c21"+
		"\5\u020e\u0108\2\u0c20\u0c18\3\2\2\2\u0c20\u0c1c\3\2\2\2\u0c20\u0c1d\3"+
		"\2\2\2\u0c20\u0c1e\3\2\2\2\u0c21\u00c5\3\2\2\2\u0c22\u0c23\7s\2\2\u0c23"+
		"\u0c4b\7t\2\2\u0c24\u0c4b\7t\2\2\u0c25\u0c26\7\u0088\2\2\u0c26\u0c27\5"+
		"\u029a\u014e\2\u0c27\u0c28\5\u0102\u0082\2\u0c28\u0c4b\3\2\2\2\u0c29\u0c2a"+
		"\7{\2\2\u0c2a\u0c2b\7\u0112\2\2\u0c2b\u0c2c\5\u029a\u014e\2\u0c2c\u0c2d"+
		"\5\u0102\u0082\2\u0c2d\u0c4b\3\2\2\2\u0c2e\u0c2f\7P\2\2\u0c2f\u0c30\7"+
		"\4\2\2\u0c30\u0c31\5\u0488\u0245\2\u0c31\u0c32\7\5\2\2\u0c32\u0c33\5\u00d6"+
		"l\2\u0c33\u0c4b\3\2\2\2\u0c34\u0c35\7[\2\2\u0c35\u0c4b\5\u048c\u0247\2"+
		"\u0c36\u0c37\7\u01d4\2\2\u0c37\u0c38\5\u00c8e\2\u0c38\u0c39\7J\2\2\u0c39"+
		"\u0c3a\7\u0101\2\2\u0c3a\u0c3b\5\u011e\u0090\2\u0c3b\u0c4b\3\2\2\2\u0c3c"+
		"\u0c3d\7\u01d4\2\2\u0c3d\u0c3e\5\u00c8e\2\u0c3e\u0c3f\7J\2\2\u0c3f\u0c40"+
		"\7\4\2\2\u0c40\u0c41\5\u0488\u0245\2\u0c41\u0c42\7\5\2\2\u0c42\u0c43\7"+
		"\u01d6\2\2\u0c43\u0c4b\3\2\2\2\u0c44\u0c45\7|\2\2\u0c45\u0c46\5\u0516"+
		"\u028c\2\u0c46\u0c47\5\u00d8m\2\u0c47\u0c48\5\u00e0q\2\u0c48\u0c49\5\u00e8"+
		"u\2\u0c49\u0c4b\3\2\2\2\u0c4a\u0c22\3\2\2\2\u0c4a\u0c24\3\2\2\2\u0c4a"+
		"\u0c25\3\2\2\2\u0c4a\u0c29\3\2\2\2\u0c4a\u0c2e\3\2\2\2\u0c4a\u0c34\3\2"+
		"\2\2\u0c4a\u0c36\3\2\2\2\u0c4a\u0c3c\3\2\2\2\u0c4a\u0c44\3\2\2\2\u0c4b"+
		"\u00c7\3\2\2\2\u0c4c\u0c50\7\u00b1\2\2\u0c4d\u0c4e\7\u00b9\2\2\u0c4e\u0c50"+
		"\7[\2\2\u0c4f\u0c4c\3\2\2\2\u0c4f\u0c4d\3\2\2\2\u0c50\u00c9\3\2\2\2\u0c51"+
		"\u0c59\7\\\2\2\u0c52\u0c53\7s\2\2\u0c53\u0c59\7\\\2\2\u0c54\u0c55\7k\2"+
		"\2\u0c55\u0c59\7\u00da\2\2\u0c56\u0c57\7k\2\2\u0c57\u0c59\7\u0103\2\2"+
		"\u0c58\u0c51\3\2\2\2\u0c58\u0c52\3\2\2\2\u0c58\u0c54\3\2\2\2\u0c58\u0c56"+
		"\3\2\2\2\u0c59\u00cb\3\2\2\2\u0c5a\u0c5b\7\u009e\2\2\u0c5b\u0c5c\5\u0516"+
		"\u028c\2\u0c5c\u0c5d\5\u00ceh\2\u0c5d\u00cd\3\2\2\2\u0c5e\u0c67\bh\1\2"+
		"\u0c5f\u0c60\f\5\2\2\u0c60\u0c61\7\u0106\2\2\u0c61\u0c66\5\u00d0i\2\u0c62"+
		"\u0c63\f\4\2\2\u0c63\u0c64\7\u00ee\2\2\u0c64\u0c66\5\u00d0i\2\u0c65\u0c5f"+
		"\3\2\2\2\u0c65\u0c62\3\2\2\2\u0c66\u0c69\3\2\2\2\u0c67\u0c65\3\2\2\2\u0c67"+
		"\u0c68\3\2\2\2\u0c68\u00cf\3\2\2\2\u0c69\u0c67\3\2\2\2\u0c6a\u0c6b\t\5"+
		"\2\2\u0c6b\u00d1\3\2\2\2\u0c6c\u0c6d\7S\2\2\u0c6d\u0c6e\5\u051a\u028e"+
		"\2\u0c6e\u0c6f\5\u00d4k\2\u0c6f\u0c72\3\2\2\2\u0c70\u0c72\5\u00d4k\2\u0c71"+
		"\u0c6c\3\2\2\2\u0c71\u0c70\3\2\2\2\u0c72\u00d3\3\2\2\2\u0c73\u0c74\7P"+
		"\2\2\u0c74\u0c75\7\4\2\2\u0c75\u0c76\5\u0488\u0245\2\u0c76\u0c77\7\5\2"+
		"\2\u0c77\u0c78\5\u01ba\u00de\2\u0c78\u0cad\3\2\2\2\u0c79\u0c7a\7\u0088"+
		"\2\2\u0c7a\u0c7b\7\4\2\2\u0c7b\u0c7c\5\u00dan\2\u0c7c\u0c7d\7\5\2\2\u0c7d"+
		"\u0c7e\5\u00dep\2\u0c7e\u0c7f\5\u029a\u014e\2\u0c7f\u0c80\5\u0102\u0082"+
		"\2\u0c80\u0c81\5\u01ba\u00de\2\u0c81\u0cad\3\2\2\2\u0c82\u0c83\7\u0088"+
		"\2\2\u0c83\u0c84\5\u0104\u0083\2\u0c84\u0c85\5\u01ba\u00de\2\u0c85\u0cad"+
		"\3\2\2\2\u0c86\u0c87\7{\2\2\u0c87\u0c88\7\u0112\2\2\u0c88\u0c89\7\4\2"+
		"\2\u0c89\u0c8a\5\u00dan\2\u0c8a\u0c8b\7\5\2\2\u0c8b\u0c8c\5\u00dep\2\u0c8c"+
		"\u0c8d\5\u029a\u014e\2\u0c8d\u0c8e\5\u0102\u0082\2\u0c8e\u0c8f\5\u01ba"+
		"\u00de\2\u0c8f\u0cad\3\2\2\2\u0c90\u0c91\7{\2\2\u0c91\u0c92\7\u0112\2"+
		"\2\u0c92\u0c93\5\u0104\u0083\2\u0c93\u0c94\5\u01ba\u00de\2\u0c94\u0cad"+
		"\3\2\2\2\u0c95\u0c96\7\u00ed\2\2\u0c96\u0c97\5\u0256\u012c\2\u0c97\u0c98"+
		"\7\4\2\2\u0c98\u0c99\5\u00e2r\2\u0c99\u0c9a\7\5\2\2\u0c9a\u0c9b\5\u00de"+
		"p\2\u0c9b\u0c9c\5\u029a\u014e\2\u0c9c\u0c9d\5\u0102\u0082\2\u0c9d\u0c9e"+
		"\5\u00e6t\2\u0c9e\u0c9f\5\u01ba\u00de\2\u0c9f\u0cad\3\2\2\2\u0ca0\u0ca1"+
		"\7e\2\2\u0ca1\u0ca2\7\u0112\2\2\u0ca2\u0ca3\7\4\2\2\u0ca3\u0ca4\5\u00da"+
		"n\2\u0ca4\u0ca5\7\5\2\2\u0ca5\u0ca6\7|\2\2\u0ca6\u0ca7\5\u0516\u028c\2"+
		"\u0ca7\u0ca8\5\u00d8m\2\u0ca8\u0ca9\5\u00e0q\2\u0ca9\u0caa\5\u00e8u\2"+
		"\u0caa\u0cab\5\u01ba\u00de\2\u0cab\u0cad\3\2\2\2\u0cac\u0c73\3\2\2\2\u0cac"+
		"\u0c79\3\2\2\2\u0cac\u0c82\3\2\2\2\u0cac\u0c86\3\2\2\2\u0cac\u0c90\3\2"+
		"\2\2\u0cac\u0c95\3\2\2\2\u0cac\u0ca0\3\2\2\2\u0cad\u00d5\3\2\2\2\u0cae"+
		"\u0caf\7\u012a\2\2\u0caf\u0cb2\7\u010a\2\2\u0cb0\u0cb2\3\2\2\2\u0cb1\u0cae"+
		"\3\2\2\2\u0cb1\u0cb0\3\2\2\2\u0cb2\u00d7\3\2\2\2\u0cb3\u0cb4\7\4\2\2\u0cb4"+
		"\u0cb5\5\u00dan\2\u0cb5\u0cb6\7\5\2\2\u0cb6\u0cb9\3\2\2\2\u0cb7\u0cb9"+
		"\3\2\2\2\u0cb8\u0cb3\3\2\2\2\u0cb8\u0cb7\3\2\2\2\u0cb9\u00d9\3\2\2\2\u0cba"+
		"\u0cbb\bn\1\2\u0cbb\u0cbc\5\u00dco\2\u0cbc\u0cc2\3\2\2\2\u0cbd\u0cbe\f"+
		"\3\2\2\u0cbe\u0cbf\7\b\2\2\u0cbf\u0cc1\5\u00dco\2\u0cc0\u0cbd\3\2\2\2"+
		"\u0cc1\u0cc4\3\2\2\2\u0cc2\u0cc0\3\2\2\2\u0cc2\u0cc3\3\2\2\2\u0cc3\u00db"+
		"\3\2\2\2\u0cc4\u0cc2\3\2\2\2\u0cc5\u0cc6\5\u053a\u029e\2\u0cc6\u00dd\3"+
		"\2\2\2\u0cc7\u0cc8\7\u01d7\2\2\u0cc8\u0cc9\7\4\2\2\u0cc9\u0cca\5\u00da"+
		"n\2\u0cca\u0ccb\7\5\2\2\u0ccb\u0cce\3\2\2\2\u0ccc\u0cce\3\2\2\2\u0ccd"+
		"\u0cc7\3\2\2\2\u0ccd\u0ccc\3\2\2\2\u0cce\u00df\3\2\2\2\u0ccf\u0cd0\7\u011f"+
		"\2\2\u0cd0\u0cd7\7\u0097\2\2\u0cd1\u0cd2\7\u011f\2\2\u0cd2\u0cd7\7\u0139"+
		"\2\2\u0cd3\u0cd4\7\u011f\2\2\u0cd4\u0cd7\7\u016d\2\2\u0cd5\u0cd7\3\2\2"+
		"\2\u0cd6\u0ccf\3\2\2\2\u0cd6\u0cd1\3\2\2\2\u0cd6\u0cd3\3\2\2\2\u0cd6\u0cd5"+
		"\3\2\2\2\u0cd7\u00e1\3\2\2\2\u0cd8\u0cd9\br\1\2\u0cd9\u0cda\5\u00e4s\2"+
		"\u0cda\u0ce0\3\2\2\2\u0cdb\u0cdc\f\3\2\2\u0cdc\u0cdd\7\b\2\2\u0cdd\u0cdf"+
		"\5\u00e4s\2\u0cde\u0cdb\3\2\2\2\u0cdf\u0ce2\3\2\2\2\u0ce0\u0cde\3\2\2"+
		"\2\u0ce0\u0ce1\3\2\2\2\u0ce1\u00e3\3\2\2\2\u0ce2\u0ce0\3\2\2\2\u0ce3\u0ce4"+
		"\5\u025c\u012f\2\u0ce4\u0ce6\7\u008f\2\2\u0ce5\u0ce7\5\u02ae\u0158\2\u0ce6"+
		"\u0ce5\3\2\2\2\u0ce7\u0ce8\3\2\2\2\u0ce8\u0ce6\3\2\2\2\u0ce8\u0ce9\3\2"+
		"\2\2\u0ce9\u0cf6\3\2\2\2\u0cea\u0ceb\5\u025c\u012f\2\u0ceb\u0cec\7\u008f"+
		"\2\2\u0cec\u0ced\7\u0133\2\2\u0ced\u0cef\7\4\2\2\u0cee\u0cf0\5\u02ae\u0158"+
		"\2\u0cef\u0cee\3\2\2\2\u0cf0\u0cf1\3\2\2\2\u0cf1\u0cef\3\2\2\2\u0cf1\u0cf2"+
		"\3\2\2\2\u0cf2\u0cf3\3\2\2\2\u0cf3\u0cf4\7\5\2\2\u0cf4\u0cf6\3\2\2\2\u0cf5"+
		"\u0ce3\3\2\2\2\u0cf5\u0cea\3\2\2\2\u0cf6\u00e5\3\2\2\2\u0cf7\u0cf8\7\u008d"+
		"\2\2\u0cf8\u0cf9\7\4\2\2\u0cf9\u0cfa\5\u0488\u0245\2\u0cfa\u0cfb\7\5\2"+
		"\2\u0cfb\u0cfe\3\2\2\2\u0cfc\u0cfe\3\2\2\2\u0cfd\u0cf7\3\2\2\2\u0cfd\u0cfc"+
		"\3\2\2\2\u0cfe\u00e7\3\2\2\2\u0cff\u0d09\5\u00eav\2\u0d00\u0d09\5\u00ec"+
		"w\2\u0d01\u0d02\5\u00eav\2\u0d02\u0d03\5\u00ecw\2\u0d03\u0d09\3\2\2\2"+
		"\u0d04\u0d05\5\u00ecw\2\u0d05\u0d06\5\u00eav\2\u0d06\u0d09\3\2\2\2\u0d07"+
		"\u0d09\3\2\2\2\u0d08\u0cff\3\2\2\2\u0d08\u0d00\3\2\2\2\u0d08\u0d01\3\2"+
		"\2\2\u0d08\u0d04\3\2\2\2\u0d08\u0d07\3\2\2\2\u0d09\u00e9\3\2\2\2\u0d0a"+
		"\u0d0b\7v\2\2\u0d0b\u0d0c\7\u018e\2\2\u0d0c\u0d0d\5\u00eex\2\u0d0d\u00eb"+
		"\3\2\2\2\u0d0e\u0d0f\7v\2\2\u0d0f\u0d10\7\u00dc\2\2\u0d10\u0d11\5\u00ee"+
		"x\2\u0d11\u00ed\3\2\2\2\u0d12\u0d13\7\u012a\2\2\u0d13\u0d1b\7\u00aa\2"+
		"\2\u0d14\u0d1b\7\u0158\2\2\u0d15\u0d1b\7\u00bc\2\2\u0d16\u0d17\7\u016a"+
		"\2\2\u0d17\u0d1b\7t\2\2\u0d18\u0d19\7\u016a\2\2\u0d19\u0d1b\7[\2\2\u0d1a"+
		"\u0d12\3\2\2\2\u0d1a\u0d14\3\2\2\2\u0d1a\u0d15\3\2\2\2\u0d1a\u0d16\3\2"+
		"\2\2\u0d1a\u0d18\3\2\2\2\u0d1b\u00ef\3\2\2\2\u0d1c\u0d1d\7\u010b\2\2\u0d1d"+
		"\u0d1e\7\4\2\2\u0d1e\u0d1f\5\u0514\u028b\2\u0d1f\u0d20\7\5\2\2\u0d20\u0d23"+
		"\3\2\2\2\u0d21\u0d23\3\2\2\2\u0d22\u0d1c\3\2\2\2\u0d22\u0d21\3\2\2\2\u0d23"+
		"\u00f1\3\2\2\2\u0d24\u0d27\5\u00f4{\2\u0d25\u0d27\3\2\2\2\u0d26\u0d24"+
		"\3\2\2\2\u0d26\u0d25\3\2\2\2\u0d27\u00f3\3\2\2\2\u0d28\u0d29\7\u013a\2"+
		"\2\u0d29\u0d2a\7\u00b9\2\2\u0d2a\u0d2b\5\u053a\u029e\2\u0d2b\u0d2c\7\4"+
		"\2\2\u0d2c\u0d2d\5\u00f6|\2\u0d2d\u0d2e\7\5\2\2\u0d2e\u00f5\3\2\2\2\u0d2f"+
		"\u0d30\b|\1\2\u0d30\u0d31\5\u00f8}\2\u0d31\u0d37\3\2\2\2\u0d32\u0d33\f"+
		"\3\2\2\u0d33\u0d34\7\b\2\2\u0d34\u0d36\5\u00f8}\2\u0d35\u0d32\3\2\2\2"+
		"\u0d36\u0d39\3\2\2\2\u0d37\u0d35\3\2\2\2\u0d37\u0d38\3\2\2\2\u0d38\u00f7"+
		"\3\2\2\2\u0d39\u0d37\3\2\2\2\u0d3a\u0d3b\5\u053a\u029e\2\u0d3b\u0d3c\5"+
		"\u0262\u0132\2\u0d3c\u0d3d\5\u0264\u0133\2\u0d3d\u0d49\3\2\2\2\u0d3e\u0d3f"+
		"\5\u0496\u024c\2\u0d3f\u0d40\5\u0262\u0132\2\u0d40\u0d41\5\u0264\u0133"+
		"\2\u0d41\u0d49\3\2\2\2\u0d42";
	private static final String _serializedATNSegment2 =
		"\u0d43\7\4\2\2\u0d43\u0d44\5\u0488\u0245\2\u0d44\u0d45\7\5\2\2\u0d45\u0d46"+
		"\5\u0262\u0132\2\u0d46\u0d47\5\u0264\u0133\2\u0d47\u0d49\3\2\2\2\u0d48"+
		"\u0d3a\3\2\2\2\u0d48\u0d3e\3\2\2\2\u0d48\u0d42\3\2\2\2\u0d49\u00f9\3\2"+
		"\2\2\u0d4a\u0d4b\7\u008a\2\2\u0d4b\u0d4e\5\u051a\u028e\2\u0d4c\u0d4e\3"+
		"\2\2\2\u0d4d\u0d4a\3\2\2\2\u0d4d\u0d4c\3\2\2\2\u0d4e\u00fb\3\2\2\2\u0d4f"+
		"\u0d50\7\u008f\2\2\u0d50\u0d55\5v<\2\u0d51\u0d52\7\u0198\2\2\u0d52\u0d55"+
		"\7\u0132\2\2\u0d53\u0d55\3\2\2\2\u0d54\u0d4f\3\2\2\2\u0d54\u0d51\3\2\2"+
		"\2\u0d54\u0d53\3\2\2\2\u0d55\u00fd\3\2\2\2\u0d56\u0d57\7v\2\2\u0d57\u0d58"+
		"\7\u00c7\2\2\u0d58\u0d63\7\u00e5\2\2\u0d59\u0d5a\7v\2\2\u0d5a\u0d5b\7"+
		"\u00c7\2\2\u0d5b\u0d5c\7\u00dc\2\2\u0d5c\u0d63\7\u015d\2\2\u0d5d\u0d5e"+
		"\7v\2\2\u0d5e\u0d5f\7\u00c7\2\2\u0d5f\u0d60\7\u0141\2\2\u0d60\u0d63\7"+
		"\u015d\2\2\u0d61\u0d63\3\2\2\2\u0d62\u0d56\3\2\2\2\u0d62\u0d59\3\2\2\2"+
		"\u0d62\u0d5d\3\2\2\2\u0d62\u0d61\3\2\2\2\u0d63\u00ff\3\2\2\2\u0d64\u0d65"+
		"\7\u017c\2\2\u0d65\u0d68\5\u051a\u028e\2\u0d66\u0d68\3\2\2\2\u0d67\u0d64"+
		"\3\2\2\2\u0d67\u0d66\3\2\2\2\u0d68\u0101\3\2\2\2\u0d69\u0d6a\7\u008a\2"+
		"\2\u0d6a\u0d6b\7\u0108\2\2\u0d6b\u0d6c\7\u017c\2\2\u0d6c\u0d6f\5\u051a"+
		"\u028e\2\u0d6d\u0d6f\3\2\2\2\u0d6e\u0d69\3\2\2\2\u0d6e\u0d6d\3\2\2\2\u0d6f"+
		"\u0103\3\2\2\2\u0d70\u0d71\7\u008a\2\2\u0d71\u0d72\7\u0108\2\2\u0d72\u0d73"+
		"\5\u051a\u028e\2\u0d73\u0105\3\2\2\2\u0d74\u0d75\7T\2\2\u0d75\u0d76\7"+
		"\u0173\2\2\u0d76\u0d77\5\u020e\u0108\2\u0d77\u0d78\5\u0368\u01b5\2\u0d78"+
		"\u0d79\7v\2\2\u0d79\u0d7a\5\u04dc\u026f\2\u0d7a\u0d7b\7f\2\2\u0d7b\u0d7c"+
		"\5\u041c\u020f\2\u0d7c\u0d8a\3\2\2\2\u0d7d\u0d7e\7T\2\2\u0d7e\u0d7f\7"+
		"\u0173\2\2\u0d7f\u0d80\7\u0102\2\2\u0d80\u0d81\7s\2\2\u0d81\u0d82\7\u01a9"+
		"\2\2\u0d82\u0d83\5\u020e\u0108\2\u0d83\u0d84\5\u0368\u01b5\2\u0d84\u0d85"+
		"\7v\2\2\u0d85\u0d86\5\u04dc\u026f\2\u0d86\u0d87\7f\2\2\u0d87\u0d88\5\u041c"+
		"\u020f\2\u0d88\u0d8a\3\2\2\2\u0d89\u0d74\3\2\2\2\u0d89\u0d7d\3\2\2\2\u0d8a"+
		"\u0107\3\2\2\2\u0d8b\u0d8c\7\u00b0\2\2\u0d8c\u0d8d\7\u0173\2\2\u0d8d\u0d8e"+
		"\5\u020e\u0108\2\u0d8e\u0d8f\7\u016a\2\2\u0d8f\u0d90\7\u0173\2\2\u0d90"+
		"\u0d91\5\u0532\u029a\2\u0d91\u0d9c\3\2\2\2\u0d92\u0d93\7\u00b0\2\2\u0d93"+
		"\u0d94\7\u0173\2\2\u0d94\u0d95\7\u0102\2\2\u0d95\u0d96\7\u01a9\2\2\u0d96"+
		"\u0d97\5\u020e\u0108\2\u0d97\u0d98\7\u016a\2\2\u0d98\u0d99\7\u0173\2\2"+
		"\u0d99\u0d9a\5\u0532\u029a\2\u0d9a\u0d9c\3\2\2\2\u0d9b\u0d8b\3\2\2\2\u0d9b"+
		"\u0d92\3\2\2\2\u0d9c\u0109\3\2\2\2\u0d9d\u0d9e\7T\2\2\u0d9e\u0d9f\5\u00b0"+
		"Y\2\u0d9f\u0da0\7\u0082\2\2\u0da0\u0da1\5\u010c\u0087\2\u0da1\u0da2\7"+
		"J\2\2\u0da2\u0da3\5\u03ba\u01de\2\u0da3\u0da4\5\u010e\u0088\2\u0da4\u0db1"+
		"\3\2\2\2\u0da5\u0da6\7T\2\2\u0da6\u0da7\5\u00b0Y\2\u0da7\u0da8\7\u0082"+
		"\2\2\u0da8\u0da9\7\u0102\2\2\u0da9\u0daa\7s\2\2\u0daa\u0dab\7\u01a9\2"+
		"\2\u0dab\u0dac\5\u010c\u0087\2\u0dac\u0dad\7J\2\2\u0dad\u0dae\5\u03ba"+
		"\u01de\2\u0dae\u0daf\5\u010e\u0088\2\u0daf\u0db1\3\2\2\2\u0db0\u0d9d\3"+
		"\2\2\2\u0db0\u0da5\3\2\2\2\u0db1\u010b\3\2\2\2\u0db2\u0db3\5\u0516\u028c"+
		"\2\u0db3\u0db4\5\u00d8m\2\u0db4\u0db5\5\u00fa~\2\u0db5\u0db6\5\u00fc\177"+
		"\2\u0db6\u0db7\5\u00fe\u0080\2\u0db7\u0db8\5\u0100\u0081\2\u0db8\u010d"+
		"\3\2\2\2\u0db9\u0dba\7\u008f\2\2\u0dba\u0dc0\7\u00d4\2\2\u0dbb\u0dbc\7"+
		"\u008f\2\2\u0dbc\u0dbd\7\u012a\2\2\u0dbd\u0dc0\7\u00d4\2\2\u0dbe\u0dc0"+
		"\3\2\2\2\u0dbf\u0db9\3\2\2\2\u0dbf\u0dbb\3\2\2\2\u0dbf\u0dbe\3\2\2\2\u0dc0"+
		"\u010f\3\2\2\2\u0dc1\u0dc2\7T\2\2\u0dc2\u0dc3\5\u0114\u008b\2\u0dc3\u0dc4"+
		"\7\u0120\2\2\u0dc4\u0dc5\7\u0195\2\2\u0dc5\u0dc6\5\u0112\u008a\2\u0dc6"+
		"\u0dc7\7J\2\2\u0dc7\u0dc8\5\u03ba\u01de\2\u0dc8\u0dc9\5\u010e\u0088\2"+
		"\u0dc9\u0dd7\3\2\2\2\u0dca\u0dcb\7T\2\2\u0dcb\u0dcc\5\u0114\u008b\2\u0dcc"+
		"\u0dcd\7\u0120\2\2\u0dcd\u0dce\7\u0195\2\2\u0dce\u0dcf\7\u0102\2\2\u0dcf"+
		"\u0dd0\7s\2\2\u0dd0\u0dd1\7\u01a9\2\2\u0dd1\u0dd2\5\u0112\u008a\2\u0dd2"+
		"\u0dd3\7J\2\2\u0dd3\u0dd4\5\u03ba\u01de\2\u0dd4\u0dd5\5\u010e\u0088\2"+
		"\u0dd5\u0dd7\3\2\2\2\u0dd6\u0dc1\3\2\2\2\u0dd6\u0dca\3\2\2\2\u0dd7\u0111"+
		"\3\2\2\2\u0dd8\u0dd9\5\u0516\u028c\2\u0dd9\u0dda\5\u00d8m\2\u0dda\u0ddb"+
		"\5\u00fa~\2\u0ddb\u0ddc\5x=\2\u0ddc\u0ddd\5\u0100\u0081\2\u0ddd\u0113"+
		"\3\2\2\2\u0dde\u0de1\7\u018c\2\2\u0ddf\u0de1\3\2\2\2\u0de0\u0dde\3\2\2"+
		"\2\u0de0\u0ddf\3\2\2\2\u0de1\u0115\3\2\2\2\u0de2\u0de3\7\u014e\2\2\u0de3"+
		"\u0de4\7\u0120\2\2\u0de4\u0de5\7\u0195\2\2\u0de5\u0de6\5\u0252\u012a\2"+
		"\u0de6\u0de7\5\u0516\u028c\2\u0de7\u0de8\5\u010e\u0088\2\u0de8\u0117\3"+
		"\2\2\2\u0de9\u0dea\7T\2\2\u0dea\u0deb\5\u00b0Y\2\u0deb\u0dec\7\u0165\2"+
		"\2\u0dec\u0ded\5\u0516\u028c\2\u0ded\u0dee\5\u011c\u008f\2\u0dee\u0df9"+
		"\3\2\2\2\u0def\u0df0\7T\2\2\u0df0\u0df1\5\u00b0Y\2\u0df1\u0df2\7\u0165"+
		"\2\2\u0df2\u0df3\7\u0102\2\2\u0df3\u0df4\7s\2\2\u0df4\u0df5\7\u01a9\2"+
		"\2\u0df5\u0df6\5\u0516\u028c\2\u0df6\u0df7\5\u011c\u008f\2\u0df7\u0df9"+
		"\3\2\2\2\u0df8\u0de9\3\2\2\2\u0df8\u0def\3\2\2\2\u0df9\u0119\3\2\2\2\u0dfa"+
		"\u0dfb\7\u00b0\2\2\u0dfb\u0dfc\7\u0165\2\2\u0dfc\u0dfd\5\u0516\u028c\2"+
		"\u0dfd\u0dfe\5\u0120\u0091\2\u0dfe\u0e07\3\2\2\2\u0dff\u0e00\7\u00b0\2"+
		"\2\u0e00\u0e01\7\u0165\2\2\u0e01\u0e02\7\u0102\2\2\u0e02\u0e03\7\u01a9"+
		"\2\2\u0e03\u0e04\5\u0516\u028c\2\u0e04\u0e05\5\u0120\u0091\2\u0e05\u0e07"+
		"\3\2\2\2\u0e06\u0dfa\3\2\2\2\u0e06\u0dff\3\2\2\2\u0e07\u011b\3\2\2\2\u0e08"+
		"\u0e0b\5\u0120\u0091\2\u0e09\u0e0b\3\2\2\2\u0e0a\u0e08\3\2\2\2\u0e0a\u0e09"+
		"\3\2\2\2\u0e0b\u011d\3\2\2\2\u0e0c\u0e0d\7\4\2\2\u0e0d\u0e0e\5\u0120\u0091"+
		"\2\u0e0e\u0e0f\7\5\2\2\u0e0f\u0e12\3\2\2\2\u0e10\u0e12\3\2\2\2\u0e11\u0e0c"+
		"\3\2\2\2\u0e11\u0e10\3\2\2\2\u0e12\u011f\3\2\2\2\u0e13\u0e14\b\u0091\1"+
		"\2\u0e14\u0e15\5\u0122\u0092\2\u0e15\u0e1a\3\2\2\2\u0e16\u0e17\f\3\2\2"+
		"\u0e17\u0e19\5\u0122\u0092\2\u0e18\u0e16\3\2\2\2\u0e19\u0e1c\3\2\2\2\u0e1a"+
		"\u0e18\3\2\2\2\u0e1a\u0e1b\3\2\2\2\u0e1b\u0121\3\2\2\2\u0e1c\u0e1a\3\2"+
		"\2\2\u0e1d\u0e1e\7J\2\2\u0e1e\u0e40\5\u045c\u022f\2\u0e1f\u0e20\7\u00ba"+
		"\2\2\u0e20\u0e40\5\u0126\u0094\2\u0e21\u0e40\7\u00d3\2\2\u0e22\u0e23\7"+
		"\u012a\2\2\u0e23\u0e40\7\u00d3\2\2\u0e24\u0e25\7\u0107\2\2\u0e25\u0e26"+
		"\5\u0124\u0093\2\u0e26\u0e27\5\u0126\u0094\2\u0e27\u0e40\3\2\2\2\u0e28"+
		"\u0e29\7\u0121\2\2\u0e29\u0e40\5\u0126\u0094\2\u0e2a\u0e2b\7\u0123\2\2"+
		"\u0e2b\u0e40\5\u0126\u0094\2\u0e2c\u0e2d\7\u012a\2\2\u0e2d\u0e40\7\u0121"+
		"\2\2\u0e2e\u0e2f\7\u012a\2\2\u0e2f\u0e40\7\u0123\2\2\u0e30\u0e31\7\u0136"+
		"\2\2\u0e31\u0e32\7\u00b9\2\2\u0e32\u0e40\5\u020e\u0108\2\u0e33\u0e34\7"+
		"\u0165\2\2\u0e34\u0e35\7\u0127\2\2\u0e35\u0e40\5\u020e\u0108\2\u0e36\u0e37"+
		"\7\u0171\2\2\u0e37\u0e38\5\22\n\2\u0e38\u0e39\5\u0126\u0094\2\u0e39\u0e40"+
		"\3\2\2\2\u0e3a\u0e40\7\u0157\2\2\u0e3b\u0e3c\7\u0157\2\2\u0e3c\u0e3d\5"+
		"\22\n\2\u0e3d\u0e3e\5\u0126\u0094\2\u0e3e\u0e40\3\2\2\2\u0e3f\u0e1d\3"+
		"\2\2\2\u0e3f\u0e1f\3\2\2\2\u0e3f\u0e21\3\2\2\2\u0e3f\u0e22\3\2\2\2\u0e3f"+
		"\u0e24\3\2\2\2\u0e3f\u0e28\3\2\2\2\u0e3f\u0e2a\3\2\2\2\u0e3f\u0e2c\3\2"+
		"\2\2\u0e3f\u0e2e\3\2\2\2\u0e3f\u0e30\3\2\2\2\u0e3f\u0e33\3\2\2\2\u0e3f"+
		"\u0e36\3\2\2\2\u0e3f\u0e3a\3\2\2\2\u0e3f\u0e3b\3\2\2\2\u0e40\u0123\3\2"+
		"\2\2\u0e41\u0e44\7\u00b9\2\2\u0e42\u0e44\3\2\2\2\u0e43\u0e41\3\2\2\2\u0e43"+
		"\u0e42\3\2\2\2\u0e44\u0125\3\2\2\2\u0e45\u0e4c\5\u0528\u0295\2\u0e46\u0e47"+
		"\7\20\2\2\u0e47\u0e4c\5\u0528\u0295\2\u0e48\u0e49\7\21\2\2\u0e49\u0e4c"+
		"\5\u0528\u0295\2\u0e4a\u0e4c\5\u0532\u029a\2\u0e4b\u0e45\3\2\2\2\u0e4b"+
		"\u0e46\3\2\2\2\u0e4b\u0e48\3\2\2\2\u0e4b\u0e4a\3\2\2\2\u0e4c\u0127\3\2"+
		"\2\2\u0e4d\u0e4e\b\u0095\1\2\u0e4e\u0e4f\5\u0126\u0094\2\u0e4f\u0e55\3"+
		"\2\2\2\u0e50\u0e51\f\3\2\2\u0e51\u0e52\7\b\2\2\u0e52\u0e54\5\u0126\u0094"+
		"\2\u0e53\u0e50\3\2\2\2\u0e54\u0e57\3\2\2\2\u0e55\u0e53\3\2\2\2\u0e55\u0e56"+
		"\3\2\2\2\u0e56\u0129\3\2\2\2\u0e57\u0e55\3\2\2\2\u0e58\u0e59\7T\2\2\u0e59"+
		"\u0e5a\5\u026c\u0137\2\u0e5a\u0e5b\5\u012c\u0097\2\u0e5b\u0e5c\5\u0136"+
		"\u009c\2\u0e5c\u0e5d\7\u0114\2\2\u0e5d\u0e5e\5\u051a\u028e\2\u0e5e\u0e6b"+
		"\3\2\2\2\u0e5f\u0e60\7T\2\2\u0e60\u0e61\5\u026c\u0137\2\u0e61\u0e62\5"+
		"\u012c\u0097\2\u0e62\u0e63\5\u0136\u009c\2\u0e63\u0e64\7\u0114\2\2\u0e64"+
		"\u0e65\5\u051a\u028e\2\u0e65\u0e66\7\u00fd\2\2\u0e66\u0e67\5\u012e\u0098"+
		"\2\u0e67\u0e68\5\u0130\u0099\2\u0e68\u0e69\5\u0134\u009b\2\u0e69\u0e6b"+
		"\3\2\2\2\u0e6a\u0e58\3\2\2\2\u0e6a\u0e5f\3\2\2\2\u0e6b\u012b\3\2\2\2\u0e6c"+
		"\u0e6f\7\u0184\2\2\u0e6d\u0e6f\3\2\2\2\u0e6e\u0e6c\3\2\2\2\u0e6e\u0e6d"+
		"\3\2\2\2\u0e6f\u012d\3\2\2\2\u0e70\u0e75\5\u051a\u028e\2\u0e71\u0e72\5"+
		"\u051a\u028e\2\u0e72\u0e73\5\u0210\u0109\2\u0e73\u0e75\3\2\2\2\u0e74\u0e70"+
		"\3\2\2\2\u0e74\u0e71\3\2\2\2\u0e75\u012f\3\2\2\2\u0e76\u0e77\7\u010c\2"+
		"\2\u0e77\u0e7a\5\u012e\u0098\2\u0e78\u0e7a\3\2\2\2\u0e79\u0e76\3\2\2\2"+
		"\u0e79\u0e78\3\2\2\2\u0e7a\u0131\3\2\2\2\u0e7b\u0e7c\7\u0192\2\2\u0e7c"+
		"\u0e80\5\u012e\u0098\2\u0e7d\u0e7e\7\u012a\2\2\u0e7e\u0e80\7\u0192\2\2"+
		"\u0e7f\u0e7b\3\2\2\2\u0e7f\u0e7d\3\2\2\2\u0e80\u0133\3\2\2\2\u0e81\u0e84"+
		"\5\u0132\u009a\2\u0e82\u0e84\3\2\2\2\u0e83\u0e81\3\2\2\2\u0e83\u0e82\3"+
		"\2\2\2\u0e84\u0135\3\2\2\2\u0e85\u0e88\7\u0144\2\2\u0e86\u0e88\3\2\2\2"+
		"\u0e87\u0e85\3\2\2\2\u0e87\u0e86\3\2\2\2\u0e88\u0137\3\2\2\2\u0e89\u0e8a"+
		"\7T\2\2\u0e8a\u0e8b\7\u017c\2\2\u0e8b\u0e8c\5\u051a\u028e\2\u0e8c\u0e8d"+
		"\5\u013a\u009e\2\u0e8d\u0e8e\7\u011c\2\2\u0e8e\u0e8f\5\u052c\u0297\2\u0e8f"+
		"\u0e90\5x=\2\u0e90\u0139\3\2\2\2\u0e91\u0e92\7\u0137\2\2\u0e92\u0e95\5"+
		"\u0536\u029c\2\u0e93\u0e95\3\2\2\2\u0e94\u0e91\3\2\2\2\u0e94\u0e93\3\2"+
		"\2\2\u0e95\u013b\3\2\2\2\u0e96\u0e97\7\u00e5\2\2\u0e97\u0e98\7\u017c\2"+
		"\2\u0e98\u0e9f\5\u051a\u028e\2\u0e99\u0e9a\7\u00e5\2\2\u0e9a\u0e9b\7\u017c"+
		"\2\2\u0e9b\u0e9c\7\u0102\2\2\u0e9c\u0e9d\7\u01a9\2\2\u0e9d\u0e9f\5\u051a"+
		"\u028e\2\u0e9e\u0e96\3\2\2\2\u0e9e\u0e99\3\2\2\2\u0e9f\u013d\3\2\2\2\u0ea0"+
		"\u0ea1\7T\2\2\u0ea1\u0ea2\7\u00f2\2\2\u0ea2\u0ea3\5\u051a\u028e\2\u0ea3"+
		"\u0ea4\5\22\n\2\u0ea4\u0ea5\5\u0140\u00a1\2\u0ea5\u0eb0\3\2\2\2\u0ea6"+
		"\u0ea7\7T\2\2\u0ea7\u0ea8\7\u00f2\2\2\u0ea8\u0ea9\7\u0102\2\2\u0ea9\u0eaa"+
		"\7s\2\2\u0eaa\u0eab\7\u01a9\2\2\u0eab\u0eac\5\u051a\u028e\2\u0eac\u0ead"+
		"\5\22\n\2\u0ead\u0eae\5\u0140\u00a1\2\u0eae\u0eb0\3\2\2\2\u0eaf\u0ea0"+
		"\3\2\2\2\u0eaf\u0ea6\3\2\2\2\u0eb0\u013f\3\2\2\2\u0eb1\u0eb6\b\u00a1\1"+
		"\2\u0eb2\u0eb3\f\4\2\2\u0eb3\u0eb5\5\u0142\u00a2\2\u0eb4\u0eb2\3\2\2\2"+
		"\u0eb5\u0eb8\3\2\2\2\u0eb6\u0eb4\3\2\2\2\u0eb6\u0eb7\3\2\2\2\u0eb7\u0141"+
		"\3\2\2\2\u0eb8\u0eb6\3\2\2\2\u0eb9\u0eba\7\u0160\2\2\u0eba\u0ec1\5\u051a"+
		"\u028e\2\u0ebb\u0ebc\7\u0194\2\2\u0ebc\u0ec1\5J&\2\u0ebd\u0ebe\7f\2\2"+
		"\u0ebe\u0ec1\5J&\2\u0ebf\u0ec1\7\u00bc\2\2\u0ec0\u0eb9\3\2\2\2\u0ec0\u0ebb"+
		"\3\2\2\2\u0ec0\u0ebd\3\2\2\2\u0ec0\u0ebf\3\2\2\2\u0ec1\u0143\3\2\2\2\u0ec2"+
		"\u0ec3\7\u00b0\2\2\u0ec3\u0ec4\7\u00f2\2\2\u0ec4\u0ec5\5\u051a\u028e\2"+
		"\u0ec5\u0ec6\7\u018e\2\2\u0ec6\u0ec7\5\u0146\u00a4\2\u0ec7\u0145\3\2\2"+
		"\2\u0ec8\u0ecd\b\u00a4\1\2\u0ec9\u0eca\f\4\2\2\u0eca\u0ecc\5\u0148\u00a5"+
		"\2\u0ecb\u0ec9\3\2\2\2\u0ecc\u0ecf\3\2\2\2\u0ecd\u0ecb\3\2\2\2\u0ecd\u0ece"+
		"\3\2\2\2\u0ece\u0147\3\2\2\2\u0ecf\u0ecd\3\2\2\2\u0ed0\u0ed1\7\u0084\2"+
		"\2\u0ed1\u0ed2\5J&\2\u0ed2\u0149\3\2\2\2\u0ed3\u0ed4\7\u00b0\2\2\u0ed4"+
		"\u0ed5\7\u00f2\2\2\u0ed5\u0ed6\5\u051a\u028e\2\u0ed6\u0ed7\5*\26\2\u0ed7"+
		"\u0ed8\5\u0206\u0104\2\u0ed8\u0ed9\5\u051a\u028e\2\u0ed9\u0f3c\3\2\2\2"+
		"\u0eda\u0edb\7\u00b0\2\2\u0edb\u0edc\7\u00f2\2\2\u0edc\u0edd\5\u051a\u028e"+
		"\2\u0edd\u0ede\5*\26\2\u0ede\u0edf\5\u0204\u0103\2\u0edf\u0ee0\5\u020e"+
		"\u0108\2\u0ee0\u0f3c\3\2\2\2\u0ee1\u0ee2\7\u00b0\2\2\u0ee2\u0ee3\7\u00f2"+
		"\2\2\u0ee3\u0ee4\5\u051a\u028e\2\u0ee4\u0ee5\5*\26\2\u0ee5\u0ee6\7\u00ae"+
		"\2\2\u0ee6\u0ee7\5\u028c\u0147\2\u0ee7\u0f3c\3\2\2\2\u0ee8\u0ee9\7\u00b0"+
		"\2\2\u0ee9\u0eea\7\u00f2\2\2\u0eea\u0eeb\5\u051a\u028e\2\u0eeb\u0eec\5"+
		"*\26\2\u0eec\u0eed\7O\2\2\u0eed\u0eee\7\4\2\2\u0eee\u0eef\5\u0458\u022d"+
		"\2\u0eef\u0ef0\7J\2\2\u0ef0\u0ef1\5\u0458\u022d\2\u0ef1\u0ef2\7\5\2\2"+
		"\u0ef2\u0f3c\3\2\2\2\u0ef3\u0ef4\7\u00b0\2\2\u0ef4\u0ef5\7\u00f2\2\2\u0ef5"+
		"\u0ef6\5\u051a\u028e\2\u0ef6\u0ef7\5*\26\2\u0ef7\u0ef8\7\u00e3\2\2\u0ef8"+
		"\u0ef9\5\u0458\u022d\2\u0ef9\u0f3c\3\2\2\2\u0efa\u0efb\7\u00b0\2\2\u0efb"+
		"\u0efc\7\u00f2\2\2\u0efc\u0efd\5\u051a\u028e\2\u0efd\u0efe\5*\26\2\u0efe"+
		"\u0eff\7\u00f9\2\2\u0eff\u0f00\5\u0274\u013b\2\u0f00\u0f3c\3\2\2\2\u0f01"+
		"\u0f02\7\u00b0\2\2\u0f02\u0f03\7\u00f2\2\2\u0f03\u0f04\5\u051a\u028e\2"+
		"\u0f04\u0f05\5*\26\2\u0f05\u0f06\7\u0133\2\2\u0f06\u0f07\5\u02b2\u015a"+
		"\2\u0f07\u0f3c\3\2\2\2\u0f08\u0f09\7\u00b0\2\2\u0f09\u0f0a\7\u00f2\2\2"+
		"\u0f0a\u0f0b\5\u051a\u028e\2\u0f0b\u0f0c\5*\26\2\u0f0c\u0f0d\7\u0133\2"+
		"\2\u0f0d\u0f0e\7\u00c2\2\2\u0f0e\u0f0f\5\u020e\u0108\2\u0f0f\u0f10\7\u008a"+
		"\2\2\u0f10\u0f11\5\u051a\u028e\2\u0f11\u0f3c\3\2\2\2\u0f12\u0f13\7\u00b0"+
		"\2\2\u0f13\u0f14\7\u00f2\2\2\u0f14\u0f15\5\u051a\u028e\2\u0f15\u0f16\5"+
		"*\26\2\u0f16\u0f17\7\u0133\2\2\u0f17\u0f18\7\u00f4\2\2\u0f18\u0f19\5\u020e"+
		"\u0108\2\u0f19\u0f1a\7\u008a\2\2\u0f1a\u0f1b\5\u051a\u028e\2\u0f1b\u0f3c"+
		"\3\2\2\2\u0f1c\u0f1d\7\u00b0\2\2\u0f1d\u0f1e\7\u00f2\2\2\u0f1e\u0f1f\5"+
		"\u051a\u028e\2\u0f1f\u0f20\5*\26\2\u0f20\u0f21\7\u0145\2\2\u0f21\u0f22"+
		"\5\u0274\u013b\2\u0f22\u0f3c\3\2\2\2\u0f23\u0f24\7\u00b0\2\2\u0f24\u0f25"+
		"\7\u00f2\2\2\u0f25\u0f26\5\u051a\u028e\2\u0f26\u0f27\5*\26\2\u0f27\u0f28"+
		"\7\u01d8\2\2\u0f28\u0f29\5\u0274\u013b\2\u0f29\u0f3c\3\2\2\2\u0f2a\u0f2b"+
		"\7\u00b0\2\2\u0f2b\u0f2c\7\u00f2\2\2\u0f2c\u0f2d\5\u051a\u028e\2\u0f2d"+
		"\u0f2e\5*\26\2\u0f2e\u0f2f\7\u01d9\2\2\u0f2f\u0f30\7d\2\2\u0f30\u0f31"+
		"\5\u0458\u022d\2\u0f31\u0f32\7\u0114\2\2\u0f32\u0f33\5\u051a\u028e\2\u0f33"+
		"\u0f3c\3\2\2\2\u0f34\u0f35\7\u00b0\2\2\u0f35\u0f36\7\u00f2\2\2\u0f36\u0f37"+
		"\5\u051a\u028e\2\u0f37\u0f38\5*\26\2\u0f38\u0f39\7\u0185\2\2\u0f39\u0f3a"+
		"\5\u0458\u022d\2\u0f3a\u0f3c\3\2\2\2\u0f3b\u0ed3\3\2\2\2\u0f3b\u0eda\3"+
		"\2\2\2\u0f3b\u0ee1\3\2\2\2\u0f3b\u0ee8\3\2\2\2\u0f3b\u0ef3\3\2\2\2\u0f3b"+
		"\u0efa\3\2\2\2\u0f3b\u0f01\3\2\2\2\u0f3b\u0f08\3\2\2\2\u0f3b\u0f12\3\2"+
		"\2\2\u0f3b\u0f1c\3\2\2\2\u0f3b\u0f23\3\2\2\2\u0f3b\u0f2a\3\2\2\2\u0f3b"+
		"\u0f34\3\2\2\2\u0f3c\u014b\3\2\2\2\u0f3d\u0f3e\7T\2\2\u0f3e\u0f3f\7e\2"+
		"\2\u0f3f\u0f40\7\u00d4\2\2\u0f40\u0f41\7\u019a\2\2\u0f41\u0f42\5\u051a"+
		"\u028e\2\u0f42\u0f43\5\u0152\u00aa\2\u0f43\u0f44\5\u0156\u00ac\2\u0f44"+
		"\u014d\3\2\2\2\u0f45\u0f46\7\u00fd\2\2\u0f46\u0f4e\5\u012e\u0098\2\u0f47"+
		"\u0f48\7\u012a\2\2\u0f48\u0f4e\7\u00fd\2\2\u0f49\u0f4a\7\u0192\2\2\u0f4a"+
		"\u0f4e\5\u012e\u0098\2\u0f4b\u0f4c\7\u012a\2\2\u0f4c\u0f4e\7\u0192\2\2"+
		"\u0f4d\u0f45\3\2\2\2\u0f4d\u0f47\3\2\2\2\u0f4d\u0f49\3\2\2\2\u0f4d\u0f4b"+
		"\3\2\2\2\u0f4e\u014f\3\2\2\2\u0f4f\u0f50\b\u00a9\1\2\u0f50\u0f51\5\u014e"+
		"\u00a8\2\u0f51\u0f56\3\2\2\2\u0f52\u0f53\f\3\2\2\u0f53\u0f55\5\u014e\u00a8"+
		"\2\u0f54\u0f52\3\2\2\2\u0f55\u0f58\3\2\2\2\u0f56\u0f54\3\2\2\2\u0f56\u0f57"+
		"\3\2\2\2\u0f57\u0151\3\2\2\2\u0f58\u0f56\3\2\2\2\u0f59\u0f5c\5\u0150\u00a9"+
		"\2\u0f5a\u0f5c\3\2\2\2\u0f5b\u0f59\3\2\2\2\u0f5b\u0f5a\3\2\2\2\u0f5c\u0153"+
		"\3\2\2\2\u0f5d\u0f5e\7\u00b0\2\2\u0f5e\u0f5f\7e\2\2\u0f5f\u0f60\7\u00d4"+
		"\2\2\u0f60\u0f61\7\u019a\2\2\u0f61\u0f62\5\u051a\u028e\2\u0f62\u0f63\5"+
		"\u0152\u00aa\2\u0f63\u0f64\5\u015a\u00ae\2\u0f64\u0f6d\3\2\2\2\u0f65\u0f66"+
		"\7\u00b0\2\2\u0f66\u0f67\7e\2\2\u0f67\u0f68\7\u00d4\2\2\u0f68\u0f69\7"+
		"\u019a\2\2\u0f69\u0f6a\5\u051a\u028e\2\u0f6a\u0f6b\5\u0150\u00a9\2\u0f6b"+
		"\u0f6d\3\2\2\2\u0f6c\u0f5d\3\2\2\2\u0f6c\u0f65\3\2\2\2\u0f6d\u0155\3\2"+
		"\2\2\u0f6e\u0f6f\7\u0135\2\2\u0f6f\u0f70\7\4\2\2\u0f70\u0f71\5\u0158\u00ad"+
		"\2\u0f71\u0f72\7\5\2\2\u0f72\u0f75\3\2\2\2\u0f73\u0f75\3\2\2\2\u0f74\u0f6e"+
		"\3\2\2\2\u0f74\u0f73\3\2\2\2\u0f75\u0157\3\2\2\2\u0f76\u0f77\b\u00ad\1"+
		"\2\u0f77\u0f78\5\u0160\u00b1\2\u0f78\u0f7e\3\2\2\2\u0f79\u0f7a\f\3\2\2"+
		"\u0f7a\u0f7b\7\b\2\2\u0f7b\u0f7d\5\u0160\u00b1\2\u0f7c\u0f79\3\2\2\2\u0f7d"+
		"\u0f80\3\2\2\2\u0f7e\u0f7c\3\2\2\2\u0f7e\u0f7f\3\2\2\2\u0f7f\u0159\3\2"+
		"\2\2\u0f80\u0f7e\3\2\2\2\u0f81\u0f82\7\u0135\2\2\u0f82\u0f83\7\4\2\2\u0f83"+
		"\u0f84\5\u015c\u00af\2\u0f84\u0f85\7\5\2\2\u0f85\u015b\3\2\2\2\u0f86\u0f87"+
		"\b\u00af\1\2\u0f87\u0f88\5\u015e\u00b0\2\u0f88\u0f8e\3\2\2\2\u0f89\u0f8a"+
		"\f\3\2\2\u0f8a\u0f8b\7\b\2\2\u0f8b\u0f8d\5\u015e\u00b0\2\u0f8c\u0f89\3"+
		"\2\2\2\u0f8d\u0f90\3\2\2\2\u0f8e\u0f8c\3\2\2\2\u0f8e\u0f8f\3\2\2\2\u0f8f"+
		"\u015d\3\2\2\2\u0f90\u0f8e\3\2\2\2\u0f91\u0f99\5\u0160\u00b1\2\u0f92\u0f93"+
		"\7\u016a\2\2\u0f93\u0f99\5\u0160\u00b1\2\u0f94\u0f95\7\u00ab\2\2\u0f95"+
		"\u0f99\5\u0160\u00b1\2\u0f96\u0f97\7\u00e5\2\2\u0f97\u0f99\5\u0162\u00b2"+
		"\2\u0f98\u0f91\3\2\2\2\u0f98\u0f92\3\2\2\2\u0f98\u0f94\3\2\2\2\u0f98\u0f96"+
		"\3\2\2\2\u0f99\u015f\3\2\2\2\u0f9a\u0f9b\5\u0162\u00b2\2\u0f9b\u0f9c\5"+
		"\u0164\u00b3\2\u0f9c\u0161\3\2\2\2\u0f9d\u0f9e\5\u0540\u02a1\2\u0f9e\u0163"+
		"\3\2\2\2\u0f9f\u0fa0\5\u052c\u0297\2\u0fa0\u0165\3\2\2\2\u0fa1\u0fa2\7"+
		"T\2\2\u0fa2\u0fa3\7\u0168\2\2\u0fa3\u0fa4\5\u051a\u028e\2\u0fa4\u0fa5"+
		"\5\u0168\u00b5\2\u0fa5\u0fa6\5\u016c\u00b7\2\u0fa6\u0fa7\7e\2\2\u0fa7"+
		"\u0fa8\7\u00d4\2\2\u0fa8\u0fa9\7\u019a\2\2\u0fa9\u0faa\5\u051a\u028e\2"+
		"\u0faa\u0fab\5\u0156\u00ac\2\u0fab\u0fbb\3\2\2\2\u0fac\u0fad\7T\2\2\u0fad"+
		"\u0fae\7\u0168\2\2\u0fae\u0faf\7\u0102\2\2\u0faf\u0fb0\7s\2\2\u0fb0\u0fb1"+
		"\7\u01a9\2\2\u0fb1\u0fb2\5\u051a\u028e\2\u0fb2\u0fb3\5\u0168\u00b5\2\u0fb3"+
		"\u0fb4\5\u016c\u00b7\2\u0fb4\u0fb5\7e\2\2\u0fb5\u0fb6\7\u00d4\2\2\u0fb6"+
		"\u0fb7\7\u019a\2\2\u0fb7\u0fb8\5\u051a\u028e\2\u0fb8\u0fb9\5\u0156\u00ac"+
		"\2\u0fb9\u0fbb\3\2\2\2\u0fba\u0fa1\3\2\2\2\u0fba\u0fac\3\2\2\2\u0fbb\u0167"+
		"\3\2\2\2\u0fbc\u0fbd\7\u0185\2\2\u0fbd\u0fc0\5\u052c\u0297\2\u0fbe\u0fc0"+
		"\3\2\2\2\u0fbf\u0fbc\3\2\2\2\u0fbf\u0fbe\3\2\2\2\u0fc0\u0169\3\2\2\2\u0fc1"+
		"\u0fc2\7\u0194\2\2\u0fc2\u0fc6\5\u052c\u0297\2\u0fc3\u0fc4\7\u0194\2\2"+
		"\u0fc4\u0fc6\7t\2\2\u0fc5\u0fc1\3\2\2\2\u0fc5\u0fc3\3\2\2\2\u0fc6\u016b"+
		"\3\2\2\2\u0fc7\u0fca\5\u016a\u00b6\2\u0fc8\u0fca\3\2\2\2\u0fc9\u0fc7\3"+
		"\2\2\2\u0fc9\u0fc8\3\2\2\2\u0fca\u016d\3\2\2\2\u0fcb\u0fcc\7\u00b0\2\2"+
		"\u0fcc\u0fcd\7\u0168\2\2\u0fcd\u0fce\5\u051a\u028e\2\u0fce\u0fcf\5\u016a"+
		"\u00b6\2\u0fcf\u0fd0\5\u015a\u00ae\2\u0fd0\u0fdc\3\2\2\2\u0fd1\u0fd2\7"+
		"\u00b0\2\2\u0fd2\u0fd3\7\u0168\2\2\u0fd3\u0fd4\5\u051a\u028e\2\u0fd4\u0fd5"+
		"\5\u016a\u00b6\2\u0fd5\u0fdc\3\2\2\2\u0fd6\u0fd7\7\u00b0\2\2\u0fd7\u0fd8"+
		"\7\u0168\2\2\u0fd8\u0fd9\5\u051a\u028e\2\u0fd9\u0fda\5\u015a\u00ae\2\u0fda"+
		"\u0fdc\3\2\2\2\u0fdb\u0fcb\3\2\2\2\u0fdb\u0fd1\3\2\2\2\u0fdb\u0fd6\3\2"+
		"\2\2\u0fdc\u016f\3\2\2\2\u0fdd\u0fde\7T\2\2\u0fde\u0fdf\7e\2\2\u0fdf\u0fe0"+
		"\7\u0082\2\2\u0fe0\u0fe1\5\u0516\u028c\2\u0fe1\u0fe2\7\4\2\2\u0fe2\u0fe3"+
		"\5\u00b2Z\2\u0fe3\u0fe4\7\5\2\2\u0fe4\u0fe5\5\u00f0y\2\u0fe5\u0fe6\7\u0168"+
		"\2\2\u0fe6\u0fe7\5\u051a\u028e\2\u0fe7\u0fe8\5\u0156\u00ac\2\u0fe8\u1016"+
		"\3\2\2\2\u0fe9\u0fea\7T\2\2\u0fea\u0feb\7e\2\2\u0feb\u0fec\7\u0082\2\2"+
		"\u0fec\u0fed\7\u0102\2\2\u0fed\u0fee\7s\2\2\u0fee\u0fef\7\u01a9\2\2\u0fef"+
		"\u0ff0\5\u0516\u028c\2\u0ff0\u0ff1\7\4\2\2\u0ff1\u0ff2\5\u00b2Z\2\u0ff2"+
		"\u0ff3\7\5\2\2\u0ff3\u0ff4\5\u00f0y\2\u0ff4\u0ff5\7\u0168\2\2\u0ff5\u0ff6"+
		"\5\u051a\u028e\2\u0ff6\u0ff7\5\u0156\u00ac\2\u0ff7\u1016\3\2\2\2\u0ff8"+
		"\u0ff9\7T\2\2\u0ff9\u0ffa\7e\2\2\u0ffa\u0ffb\7\u0082\2\2\u0ffb\u0ffc\5"+
		"\u0516\u028c\2\u0ffc\u0ffd\7\u013a\2\2\u0ffd\u0ffe\7\u0130\2\2\u0ffe\u0fff"+
		"\5\u0516\u028c\2\u0fff\u1000\5\u00b4[\2\u1000\u1001\5\u0082B\2\u1001\u1002"+
		"\7\u0168\2\2\u1002\u1003\5\u051a\u028e\2\u1003\u1004\5\u0156\u00ac\2\u1004"+
		"\u1016\3\2\2\2\u1005\u1006\7T\2\2\u1006\u1007\7e\2\2\u1007\u1008\7\u0082"+
		"\2\2\u1008\u1009\7\u0102\2\2\u1009\u100a\7s\2\2\u100a\u100b\7\u01a9\2"+
		"\2\u100b\u100c\5\u0516\u028c\2\u100c\u100d\7\u013a\2\2\u100d\u100e\7\u0130"+
		"\2\2\u100e\u100f\5\u0516\u028c\2\u100f\u1010\5\u00b4[\2\u1010\u1011\5"+
		"\u0082B\2\u1011\u1012\7\u0168\2\2\u1012\u1013\5\u051a\u028e\2\u1013\u1014"+
		"\5\u0156\u00ac\2\u1014\u1016\3\2\2\2\u1015\u0fdd\3\2\2\2\u1015\u0fe9\3"+
		"\2\2\2\u1015\u0ff8\3\2\2\2\u1015\u1005\3\2\2\2\u1016\u0171\3\2\2\2\u1017"+
		"\u1018\7\u01da\2\2\u1018\u1019\7e\2\2\u1019\u101a\7\u0160\2\2\u101a\u101b"+
		"\5\u051a\u028e\2\u101b\u101c\5\u0176\u00bc\2\u101c\u101d\7f\2\2\u101d"+
		"\u101e\7\u0168\2\2\u101e\u101f\5\u051a\u028e\2\u101f\u1020\7m\2\2\u1020"+
		"\u1021\5\u051a\u028e\2\u1021\u1022\5\u0156\u00ac\2\u1022\u0173\3\2\2\2"+
		"\u1023\u1024\7p\2\2\u1024\u1027\7\u0084\2\2\u1025\u1027\7a\2\2\u1026\u1023"+
		"\3\2\2\2\u1026\u1025\3\2\2\2\u1027\u0175\3\2\2\2\u1028\u1029\5\u0174\u00bb"+
		"\2\u1029\u102a\7\4\2\2\u102a\u102b\5\u042e\u0218\2\u102b\u102c\7\5\2\2"+
		"\u102c\u102f\3\2\2\2\u102d\u102f\3\2\2\2\u102e\u1028\3\2\2\2\u102e\u102d"+
		"\3\2\2\2\u102f\u0177\3\2\2\2\u1030\u1031\7T\2\2\u1031\u1032\7\u0089\2"+
		"\2\u1032\u1033\7\u011e\2\2\u1033\u1034\7d\2\2\u1034\u1035\5\u017a\u00be"+
		"\2\u1035\u1036\7\u0168\2\2\u1036\u1037\5\u051a\u028e\2\u1037\u1038\5\u0156"+
		"\u00ac\2\u1038\u1046\3\2\2\2\u1039\u103a\7T\2\2\u103a\u103b\7\u0089\2"+
		"\2\u103b\u103c\7\u011e\2\2\u103c\u103d\7\u0102\2\2\u103d\u103e\7s\2\2"+
		"\u103e\u103f\7\u01a9\2\2\u103f\u1040\7d\2\2\u1040\u1041\5\u017a\u00be"+
		"\2\u1041\u1042\7\u0168\2\2\u1042\u1043\5\u051a\u028e\2\u1043\u1044\5\u0156"+
		"\u00ac\2\u1044\u1046\3\2\2\2\u1045\u1030\3\2\2\2\u1045\u1039\3\2\2\2\u1046"+
		"\u0179\3\2\2\2\u1047\u104a\5\u0536\u029c\2\u1048\u104a\7\u0089\2\2\u1049"+
		"\u1047\3\2\2\2\u1049\u1048\3\2\2\2\u104a\u017b\3\2\2\2\u104b\u104c\7\u00e5"+
		"\2\2\u104c\u104d\7\u0089\2\2\u104d\u104e\7\u011e\2\2\u104e\u104f\7d\2"+
		"\2\u104f\u1050\5\u017a\u00be\2\u1050\u1051\7\u0168\2\2\u1051\u1052\5\u051a"+
		"\u028e\2\u1052\u105e\3\2\2\2\u1053\u1054\7\u00e5\2\2\u1054\u1055\7\u0089"+
		"\2\2\u1055\u1056\7\u011e\2\2\u1056\u1057\7\u0102\2\2\u1057\u1058\7\u01a9"+
		"\2\2\u1058\u1059\7d\2\2\u1059\u105a\5\u017a\u00be\2\u105a\u105b\7\u0168"+
		"\2\2\u105b\u105c\5\u051a\u028e\2\u105c\u105e\3\2\2\2\u105d\u104b\3\2\2"+
		"\2\u105d\u1053\3\2\2\2\u105e\u017d\3\2\2\2\u105f\u1060\7\u00b0\2\2\u1060"+
		"\u1061\7\u0089\2\2\u1061\u1062\7\u011e\2\2\u1062\u1063\7d\2\2\u1063\u1064"+
		"\5\u017a\u00be\2\u1064\u1065\7\u0168\2\2\u1065\u1066\5\u051a\u028e\2\u1066"+
		"\u1067\5\u015a\u00ae\2\u1067\u017f\3\2\2\2\u1068\u1069\7T\2\2\u1069\u106a"+
		"\7\u01db\2\2\u106a\u106b\5\u051a\u028e\2\u106b\u106c\7v\2\2\u106c\u106d"+
		"\5\u0516\u028c\2\u106d\u106e\5\u018c\u00c7\2\u106e\u106f\5\u018e\u00c8"+
		"\2\u106f\u1070\5\u0188\u00c5\2\u1070\u1071\5\u0184\u00c3\2\u1071\u1072"+
		"\5\u0186\u00c4\2\u1072\u0181\3\2\2\2\u1073\u1074\7\u00b0\2\2\u1074\u1075"+
		"\7\u01db\2\2\u1075\u1076\5\u051a\u028e\2\u1076\u1077\7v\2\2\u1077\u1078"+
		"\5\u0516\u028c\2\u1078\u1079\5\u018a\u00c6\2\u1079\u107a\5\u0184\u00c3"+
		"\2\u107a\u107b\5\u0186\u00c4\2\u107b\u0183\3\2\2\2\u107c\u107d\7\u008a"+
		"\2\2\u107d\u107e\7\4\2\2\u107e\u107f\5\u0488\u0245\2\u107f\u1080\7\5\2"+
		"\2\u1080\u1083\3\2\2\2\u1081\u1083\3\2\2\2\u1082\u107c\3\2\2\2\u1082\u1081"+
		"\3\2\2\2\u1083\u0185\3\2\2\2\u1084\u1085\7\u008f\2\2\u1085\u1086\7P\2"+
		"\2\u1086\u1087\7\4\2\2\u1087\u1088\5\u0488\u0245\2\u1088\u1089\7\5\2\2"+
		"\u1089\u108c\3\2\2\2\u108a\u108c\3\2\2\2\u108b\u1084\3\2\2\2\u108b\u108a"+
		"\3\2\2\2\u108c\u0187\3\2\2\2\u108d\u108e\7\u0084\2\2\u108e\u1091\5\u0538"+
		"\u029d\2\u108f\u1091\3\2\2\2\u1090\u108d\3\2\2\2\u1090\u108f\3\2\2\2\u1091"+
		"\u0189\3\2\2\2\u1092\u1093\7\u0084\2\2\u1093\u1096\5\u0538\u029d\2\u1094"+
		"\u1096\3\2\2\2\u1095\u1092\3\2\2\2\u1095\u1094\3\2\2\2\u1096\u018b\3\2"+
		"\2\2\u1097\u1098\7J\2\2\u1098\u109b\5\u0542\u02a2\2\u1099\u109b\3\2\2"+
		"\2\u109a\u1097\3\2\2\2\u109a\u1099\3\2\2\2\u109b\u018d\3\2\2\2\u109c\u109d"+
		"\7d\2\2\u109d\u10a0\5\u0190\u00c9\2\u109e\u10a0\3\2\2\2\u109f\u109c\3"+
		"\2\2\2\u109f\u109e\3\2\2\2\u10a0\u018f\3\2\2\2\u10a1\u10a2\t\6\2\2\u10a2"+
		"\u0191\3\2\2\2\u10a3\u10a4\7T\2\2\u10a4\u10a5\7\u00a9\2\2\u10a5\u10a6"+
		"\7\u01dc\2\2\u10a6\u10a7\5\u051a\u028e\2\u10a7\u10a8\7\u0185\2\2\u10a8"+
		"\u10a9\5\u0194\u00cb\2\u10a9\u10aa\7\u00fd\2\2\u10aa\u10ab\5\u012e\u0098"+
		"\2\u10ab\u0193\3\2\2\2\u10ac\u10ad\t\7\2\2\u10ad\u0195\3\2\2\2\u10ae\u10af"+
		"\7T\2\2\u10af\u10b0\7\u0182\2\2\u10b0\u10b1\5\u051a\u028e\2\u10b1\u10b2"+
		"\5\u0198\u00cd\2\u10b2\u10b3\5\u019a\u00ce\2\u10b3\u10b4\7v\2\2\u10b4"+
		"\u10b5\5\u0516\u028c\2\u10b5\u10b6\5\u019e\u00d0\2\u10b6\u10b7\5\u01aa"+
		"\u00d6\2\u10b7\u10b8\5\u01b0\u00d9\2\u10b8\u10b9\7\u00f0\2\2\u10b9\u10ba"+
		"\5\u01b2\u00da\2\u10ba\u10bb\5\u0520\u0291\2\u10bb\u10bc\7\4\2\2\u10bc"+
		"\u10bd\5\u01b4\u00db\2\u10bd\u10be\7\5\2\2\u10be\u10d5\3\2\2\2\u10bf\u10c0"+
		"\7T\2\2\u10c0\u10c1\7S\2\2\u10c1\u10c2\7\u0182\2\2\u10c2\u10c3\5\u051a"+
		"\u028e\2\u10c3\u10c4\7\u00ad\2\2\u10c4\u10c5\5\u019a\u00ce\2\u10c5\u10c6"+
		"\7v\2\2\u10c6\u10c7\5\u0516\u028c\2\u10c7\u10c8\5\u01b8\u00dd\2\u10c8"+
		"\u10c9\5\u01ba\u00de\2\u10c9\u10ca\7d\2\2\u10ca\u10cb\7\u00e6\2\2\u10cb"+
		"\u10cc\7\u01bb\2\2\u10cc\u10cd\5\u01b0\u00d9\2\u10cd\u10ce\7\u00f0\2\2"+
		"\u10ce\u10cf\5\u01b2\u00da\2\u10cf\u10d0\5\u0520\u0291\2\u10d0\u10d1\7"+
		"\4\2\2\u10d1\u10d2\5\u01b4\u00db\2\u10d2\u10d3\7\5\2\2\u10d3\u10d5\3\2"+
		"\2\2\u10d4\u10ae\3\2\2\2\u10d4\u10bf\3\2\2\2\u10d5\u0197\3\2\2\2\u10d6"+
		"\u10db\7\u00b7\2\2\u10d7\u10db\7\u00ad\2\2\u10d8\u10d9\7\u010f\2\2\u10d9"+
		"\u10db\7\u0130\2\2\u10da\u10d6\3\2\2\2\u10da\u10d7\3\2\2\2\u10da\u10d8"+
		"\3\2\2\2\u10db\u0199\3\2\2\2\u10dc\u10dd\b\u00ce\1\2\u10dd\u10de\5\u019c"+
		"\u00cf\2\u10de\u10e4\3\2\2\2\u10df\u10e0\f\3\2\2\u10e0\u10e1\7x\2\2\u10e1"+
		"\u10e3\5\u019c\u00cf\2\u10e2\u10df\3\2\2\2\u10e3\u10e6\3\2\2\2\u10e4\u10e2"+
		"\3\2\2\2\u10e4\u10e5\3\2\2\2\u10e5\u019b\3\2\2\2\u10e6\u10e4\3\2\2\2\u10e7"+
		"\u10ef\7\u010e\2\2\u10e8\u10ef\7\u00dc\2\2\u10e9\u10ef\7\u018e\2\2\u10ea"+
		"\u10eb\7\u018e\2\2\u10eb\u10ec\7\u0130\2\2\u10ec\u10ef\5\u00dan\2\u10ed"+
		"\u10ef\7\u0183\2\2\u10ee\u10e7\3\2\2\2\u10ee\u10e8\3\2\2\2\u10ee\u10e9"+
		"\3\2\2\2\u10ee\u10ea\3\2\2\2\u10ee\u10ed\3\2\2\2\u10ef\u019d\3\2\2\2\u10f0"+
		"\u10f1\7\u01dd\2\2\u10f1\u10f4\5\u01a0\u00d1\2\u10f2\u10f4\3\2\2\2\u10f3"+
		"\u10f0\3\2\2\2\u10f3\u10f2\3\2\2\2\u10f4\u019f\3\2\2\2\u10f5\u10f6\b\u00d1"+
		"\1\2\u10f6\u10f7\5\u01a2\u00d2\2\u10f7\u10fc\3\2\2\2\u10f8\u10f9\f\3\2"+
		"\2\u10f9\u10fb\5\u01a2\u00d2\2\u10fa\u10f8\3\2\2\2\u10fb\u10fe\3\2\2\2"+
		"\u10fc\u10fa\3\2\2\2\u10fc\u10fd\3\2\2\2\u10fd\u01a1\3\2\2\2\u10fe\u10fc"+
		"\3\2\2\2\u10ff\u1100\5\u01a4\u00d3\2\u1100\u1101\5\u01a6\u00d4\2\u1101"+
		"\u1102\5\u0344\u01a3\2\u1102\u1103\5\u01a8\u00d5\2\u1103\u01a3\3\2\2\2"+
		"\u1104\u1105\t\b\2\2\u1105\u01a5\3\2\2\2\u1106\u1107\t\t\2\2\u1107\u01a7"+
		"\3\2\2\2\u1108\u1109\5\u053a\u029e\2\u1109\u01a9\3\2\2\2\u110a\u110b\7"+
		"d\2\2\u110b\u110c\5\u01ac\u00d7\2\u110c\u110d\5\u01ae\u00d8\2\u110d\u1110"+
		"\3\2\2\2\u110e\u1110\3\2\2\2\u110f\u110a\3\2\2\2\u110f\u110e\3\2\2\2\u1110"+
		"\u01ab\3\2\2\2\u1111\u1114\7\u00e6\2\2\u1112\u1114\3\2\2\2\u1113\u1111"+
		"\3\2\2\2\u1113\u1112\3\2\2\2\u1114\u01ad\3\2\2\2\u1115\u1116\t\n\2\2\u1116"+
		"\u01af\3\2\2\2\u1117\u1118\7\u008c\2\2\u1118\u1119\7\4\2\2\u1119\u111a"+
		"\5\u0488\u0245\2\u111a\u111b\7\5\2\2\u111b\u111e\3\2\2\2\u111c\u111e\3"+
		"\2\2\2\u111d\u1117\3\2\2\2\u111d\u111c\3\2\2\2\u111e\u01b1\3\2\2\2\u111f"+
		"\u1120\t\13\2\2\u1120\u01b3\3\2\2\2\u1121\u1122\b\u00db\1\2\u1122\u1125"+
		"\5\u01b6\u00dc\2\u1123\u1125\3\2\2\2\u1124\u1121\3\2\2\2\u1124\u1123\3"+
		"\2\2\2\u1125\u112b\3\2\2\2\u1126\u1127\f\4\2\2\u1127\u1128\7\b\2\2\u1128"+
		"\u112a\5\u01b6\u00dc\2\u1129\u1126\3\2\2\2\u112a\u112d\3\2\2\2\u112b\u1129"+
		"\3\2\2\2\u112b\u112c\3\2\2\2\u112c\u01b5\3\2\2\2\u112d\u112b\3\2\2\2\u112e"+
		"\u1133\5\u052a\u0296\2\u112f\u1133\5\u0528\u0295\2\u1130\u1133\5\u052c"+
		"\u0297\2\u1131\u1133\5\u0540\u02a1\2\u1132\u112e\3\2\2\2\u1132\u112f\3"+
		"\2\2\2\u1132\u1130\3\2\2\2\u1132\u1131\3\2\2\2\u1133\u01b7\3\2\2\2\u1134"+
		"\u1135\7f\2\2\u1135\u1138\5\u0516\u028c\2\u1136\u1138\3\2\2\2\u1137\u1134"+
		"\3\2\2\2\u1137\u1136\3\2\2\2\u1138\u01b9\3\2\2\2\u1139\u113e\b\u00de\1"+
		"\2\u113a\u113b\f\3\2\2\u113b\u113d\5\u01bc\u00df\2\u113c\u113a\3\2\2\2"+
		"\u113d\u1140\3\2\2\2\u113e\u113c\3\2\2\2\u113e\u113f\3\2\2\2\u113f\u01bb"+
		"\3\2\2\2\u1140\u113e\3\2\2\2\u1141\u1142\7s\2\2\u1142\u114d\7\\\2\2\u1143"+
		"\u114d\7\\\2\2\u1144\u1145\7k\2\2\u1145\u114d\7\u0103\2\2\u1146\u1147"+
		"\7k\2\2\u1147\u114d\7\u00da\2\2\u1148\u1149\7s\2\2\u1149\u114d\7\u0190"+
		"\2\2\u114a\u114b\7\u012a\2\2\u114b\u114d\7\u010a\2\2\u114c\u1141\3\2\2"+
		"\2\u114c\u1143\3\2\2\2\u114c\u1144\3\2\2\2\u114c\u1146\3\2\2\2\u114c\u1148"+
		"\3\2\2\2\u114c\u114a\3\2\2\2\u114d\u01bd\3\2\2\2\u114e\u114f\7T\2\2\u114f"+
		"\u1150\7\u00ec\2\2\u1150\u1151\7\u0182\2\2\u1151\u1152\5\u051a\u028e\2"+
		"\u1152\u1153\7v\2\2\u1153\u1154\5\u0540\u02a1\2\u1154\u1155\7\u00f0\2"+
		"\2\u1155\u1156\5\u01b2\u00da\2\u1156\u1157\5\u0520\u0291\2\u1157\u1158"+
		"\7\4\2\2\u1158\u1159\7\5\2\2\u1159\u1169\3\2\2\2\u115a\u115b\7T\2\2\u115b"+
		"\u115c\7\u00ec\2\2\u115c\u115d\7\u0182\2\2\u115d\u115e\5\u051a\u028e\2"+
		"\u115e\u115f\7v\2\2\u115f\u1160\5\u0540\u02a1\2\u1160\u1161\7\u008c\2"+
		"\2\u1161\u1162\5\u01c0\u00e1\2\u1162\u1163\7\u00f0\2\2\u1163\u1164\5\u01b2"+
		"\u00da\2\u1164\u1165\5\u0520\u0291\2\u1165\u1166\7\4\2\2\u1166\u1167\7"+
		"\5\2\2\u1167\u1169\3\2\2\2\u1168\u114e\3\2\2\2\u1168\u115a\3\2\2\2\u1169"+
		"\u01bf\3\2\2\2\u116a\u116b\b\u00e1\1\2\u116b\u116c\5\u01c2\u00e2\2\u116c"+
		"\u1172\3\2\2\2\u116d\u116e\f\3\2\2\u116e\u116f\7G\2\2\u116f\u1171\5\u01c2"+
		"\u00e2\2\u1170\u116d\3\2\2\2\u1171\u1174\3\2\2\2\u1172\u1170\3\2\2\2\u1172"+
		"\u1173\3\2\2\2\u1173\u01c1\3\2\2\2\u1174\u1172\3\2\2\2\u1175\u1176\5\u053a"+
		"\u029e\2\u1176\u1177\7j\2\2\u1177\u1178\7\4\2\2\u1178\u1179\5\u01c4\u00e3"+
		"\2\u1179\u117a\7\5\2\2\u117a\u01c3\3\2\2\2\u117b\u117c\b\u00e3\1\2\u117c"+
		"\u117d\5\u052c\u0297\2\u117d\u1183\3\2\2\2\u117e\u117f\f\3\2\2\u117f\u1180"+
		"\7\b\2\2\u1180\u1182\5\u052c\u0297\2\u1181\u117e\3\2\2\2\u1182\u1185\3"+
		"\2\2\2\u1183\u1181\3\2\2\2\u1183\u1184\3\2\2\2\u1184\u01c5\3\2\2\2\u1185"+
		"\u1183\3\2\2\2\u1186\u1187\7\u00b0\2\2\u1187\u1188\7\u00ec\2\2\u1188\u1189"+
		"\7\u0182\2\2\u1189\u118a\5\u051a\u028e\2\u118a\u118b\5\u01c8\u00e5\2\u118b"+
		"\u01c7\3\2\2\2\u118c\u1193\7\u00e7\2\2\u118d\u118e\7\u00e7\2\2\u118e\u1193"+
		"\7\u0155\2\2\u118f\u1190\7\u00e7\2\2\u1190\u1193\7\u00b1\2\2\u1191\u1193"+
		"\7\u00e0\2\2\u1192\u118c\3\2\2\2\u1192\u118d\3\2\2\2\u1192\u118f\3\2\2"+
		"\2\u1192\u1191\3\2\2\2\u1193\u01c9\3\2\2\2\u1194\u1195\7T\2\2\u1195\u1196"+
		"\7\u00b2\2\2\u1196\u1197\5\u020e\u0108\2\u1197\u1198\7P\2\2\u1198\u1199"+
		"\7\4\2\2\u1199\u119a\5\u0488\u0245\2\u119a\u119b\7\5\2\2\u119b\u119c\5"+
		"\u01ba\u00de\2\u119c\u01cb\3\2\2\2\u119d\u119e\7T\2\2\u119e\u119f\5\u026c"+
		"\u0137\2\u119f\u11a0\7\u00ae\2\2\u11a0\u11a1\5\u0520\u0291\2\u11a1\u11a2"+
		"\5\u0288\u0145\2\u11a2\u11a3\5\u01ce\u00e8\2\u11a3\u120c\3\2\2\2\u11a4"+
		"\u11a5\7T\2\2\u11a5\u11a6\5\u026c\u0137\2\u11a6\u11a7\7\u00ae\2\2\u11a7"+
		"\u11a8\5\u0520\u0291\2\u11a8\u11a9\5\u01d6\u00ec\2\u11a9\u120c\3\2\2\2"+
		"\u11aa\u11ab\7T\2\2\u11ab\u11ad\7\u0133\2\2\u11ac\u11ae\5\u02ae\u0158"+
		"\2\u11ad\u11ac\3\2\2\2\u11ae\u11af\3\2\2\2\u11af\u11ad\3\2\2\2\u11af\u11b0"+
		"\3\2\2\2\u11b0\u11b1\3\2\2\2\u11b1\u11b2\5\u01ce\u00e8\2\u11b2\u120c\3"+
		"\2\2\2\u11b3\u11b4\7T\2\2\u11b4\u11b5\7\u0185\2\2\u11b5\u11b6\5\u020e"+
		"\u0108\2\u11b6\u11b7\5\u01ce\u00e8\2\u11b7\u120c\3\2\2\2\u11b8\u11b9\7"+
		"T\2\2\u11b9\u11ba\7\u0185\2\2\u11ba\u120c\5\u020e\u0108\2\u11bb\u11bc"+
		"\7T\2\2\u11bc\u11bd\7\u0185\2\2\u11bd\u11be\5\u020e\u0108\2\u11be\u11bf"+
		"\7J\2\2\u11bf\u11c0\7\4\2\2\u11c0\u11c1\5\u0444\u0223\2\u11c1\u11c2\7"+
		"\5\2\2\u11c2\u120c\3\2\2\2\u11c3\u11c4\7T\2\2\u11c4\u11c5\7\u0185\2\2"+
		"\u11c5\u11c6\5\u020e\u0108\2\u11c6\u11c7\7J\2\2\u11c7\u11c8\7\u00ea\2"+
		"\2\u11c8\u11c9\7\4\2\2\u11c9\u11ca\5\u01dc\u00ef\2\u11ca\u11cb\7\5\2\2"+
		"\u11cb\u120c\3\2\2\2\u11cc\u11cd\7T\2\2\u11cd\u11ce\7\u0185\2\2\u11ce"+
		"\u11cf\5\u020e\u0108\2\u11cf\u11d0\7J\2\2\u11d0\u11d1\7\u0148\2\2\u11d1"+
		"\u11d2\5\u01ce\u00e8\2\u11d2\u120c\3\2\2\2\u11d3\u11d4\7T\2\2\u11d4\u11d5"+
		"\7\u0180\2\2\u11d5\u11d6\7\u0162\2\2\u11d6\u11d7\7\u0138\2\2\u11d7\u11d8"+
		"\5\u020e\u0108\2\u11d8\u11d9\5\u01ce\u00e8\2\u11d9\u120c\3\2\2\2\u11da"+
		"\u11db\7T\2\2\u11db\u11dc\7\u0180\2\2\u11dc\u11dd\7\u0162\2\2\u11dd\u11de"+
		"\7\u00df\2\2\u11de\u11df\5\u020e\u0108\2\u11df\u11e0\5\u01ce\u00e8\2\u11e0"+
		"\u120c\3\2\2\2\u11e1\u11e2\7T\2\2\u11e2\u11e3\7\u0180\2\2\u11e3\u11e4"+
		"\7\u0162\2\2\u11e4\u11e5\7\u017e\2\2\u11e5\u11e6\5\u020e\u0108\2\u11e6"+
		"\u11e7\5\u01ce\u00e8\2\u11e7\u120c\3\2\2\2\u11e8\u11e9\7T\2\2\u11e9\u11ea"+
		"\7\u0180\2\2\u11ea\u11eb\7\u0162\2\2\u11eb\u11ec\7\u00c9\2\2\u11ec\u11ed"+
		"\5\u020e\u0108\2\u11ed\u11ee\5\u01ce\u00e8\2\u11ee\u120c\3\2\2\2\u11ef"+
		"\u11f0\7T\2\2\u11f0\u11f1\7\u0092\2\2\u11f1\u11f2\5\u020e\u0108\2\u11f2"+
		"\u11f3\5\u01ce\u00e8\2\u11f3\u120c\3\2\2\2\u11f4\u11f5\7T\2\2\u11f5\u11f6"+
		"\7\u0092\2\2\u11f6\u11f7\7\u0102\2\2\u11f7\u11f8\7s\2\2\u11f8\u11f9\7"+
		"\u01a9\2\2\u11f9\u11fa\5\u020e\u0108\2\u11fa\u11fb\5\u01ce\u00e8\2\u11fb"+
		"\u120c\3\2\2\2\u11fc\u11fd\7T\2\2\u11fd\u11fe\7\u0092\2\2\u11fe\u11ff"+
		"\5\u020e\u0108\2\u11ff\u1200\7f\2\2\u1200\u1201\5\u020e\u0108\2\u1201"+
		"\u120c\3\2\2\2\u1202\u1203\7T\2\2\u1203\u1204\7\u0092\2\2\u1204\u1205"+
		"\7\u0102\2\2\u1205\u1206\7s\2\2\u1206\u1207\7\u01a9\2\2\u1207\u1208\5"+
		"\u020e\u0108\2\u1208\u1209\7f\2\2\u1209\u120a\5\u020e\u0108\2\u120a\u120c"+
		"\3\2\2\2\u120b\u119d\3\2\2\2\u120b\u11a4\3\2\2\2\u120b\u11aa\3\2\2\2\u120b"+
		"\u11b3\3\2\2\2\u120b\u11b8\3\2\2\2\u120b\u11bb\3\2\2\2\u120b\u11c3\3\2"+
		"\2\2\u120b\u11cc\3\2\2\2\u120b\u11d3\3\2\2\2\u120b\u11da\3\2\2\2\u120b"+
		"\u11e1\3\2\2\2\u120b\u11e8\3\2\2\2\u120b\u11ef\3\2\2\2\u120b\u11f4\3\2"+
		"\2\2\u120b\u11fc\3\2\2\2\u120b\u1202\3\2\2\2\u120c\u01cd\3\2\2\2\u120d"+
		"\u120e\7\4\2\2\u120e\u120f\5\u01d0\u00e9\2\u120f\u1210\7\5\2\2\u1210\u01cf"+
		"\3\2\2\2\u1211\u1212\b\u00e9\1\2\u1212\u1213\5\u01d2\u00ea\2\u1213\u1219"+
		"\3\2\2\2\u1214\u1215\f\3\2\2\u1215\u1216\7\b\2\2\u1216\u1218\5\u01d2\u00ea"+
		"\2\u1217\u1214\3\2\2\2\u1218\u121b\3\2\2\2\u1219\u1217\3\2\2\2\u1219\u121a"+
		"\3\2\2\2\u121a\u01d1\3\2\2\2\u121b\u1219\3\2\2\2\u121c\u121d\5\u0540\u02a1"+
		"\2\u121d\u121e\7\f\2\2\u121e\u121f\5\u01d4\u00eb\2\u121f\u1222\3\2\2\2"+
		"\u1220\u1222\5\u0540\u02a1\2\u1221\u121c\3\2\2\2\u1221\u1220\3\2\2\2\u1222"+
		"\u01d3\3\2\2\2\u1223\u122e\5\u0282\u0142\2\u1224\u122e\5\u054c\u02a7\2"+
		"\u1225\u1227\5\u04d8\u026d\2\u1226\u1225\3\2\2\2\u1227\u1228\3\2\2\2\u1228"+
		"\u1226\3\2\2\2\u1228\u1229\3\2\2\2\u1229\u122e\3\2\2\2\u122a\u122e\5\u0126"+
		"\u0094\2\u122b\u122e\5\u052c\u0297\2\u122c\u122e\7\u01b4\2\2\u122d\u1223"+
		"\3\2\2\2\u122d\u1224\3\2\2\2\u122d\u1226\3\2\2\2\u122d\u122a\3\2\2\2\u122d"+
		"\u122b\3\2\2\2\u122d\u122c\3\2\2\2\u122e\u01d5\3\2\2\2\u122f\u1230\7\4"+
		"\2\2\u1230\u1231\5\u01d8\u00ed\2\u1231\u1232\7\5\2\2\u1232\u01d7\3\2\2"+
		"\2\u1233\u1234\b\u00ed\1\2\u1234\u1235\5\u01da\u00ee\2\u1235\u123b\3\2"+
		"\2\2\u1236\u1237\f\3\2\2\u1237\u1238\7\b\2\2\u1238\u123a\5\u01da\u00ee"+
		"\2\u1239\u1236\3\2\2\2\u123a\u123d\3\2\2\2\u123b\u1239\3\2\2\2\u123b\u123c"+
		"\3\2\2\2\u123c\u01d9\3\2\2\2\u123d\u123b\3\2\2\2\u123e\u123f\5\u0542\u02a2"+
		"\2\u123f\u1240\7\f\2\2\u1240\u1241\5\u01d4\u00eb\2\u1241\u01db\3\2\2\2"+
		"\u1242\u1245\5\u01de\u00f0\2\u1243\u1245\3\2\2\2\u1244\u1242\3\2\2\2\u1244"+
		"\u1243\3\2\2\2\u1245\u01dd\3\2\2\2\u1246\u1247\b\u00f0\1\2\u1247\u1248"+
		"\5\u052c\u0297\2\u1248\u124e\3\2\2\2\u1249\u124a\f\3\2\2\u124a\u124b\7"+
		"\b\2\2\u124b\u124d\5\u052c\u0297\2\u124c\u1249\3\2\2\2\u124d\u1250\3\2"+
		"\2\2\u124e\u124c\3\2\2\2\u124e\u124f\3\2\2\2\u124f\u01df\3\2\2\2\u1250"+
		"\u124e\3\2\2\2\u1251\u1252\7\u00b0\2\2\u1252\u1253\7\u0185\2\2\u1253\u1254"+
		"\5\u020e\u0108\2\u1254\u1255\7\u00ab\2\2\u1255\u1256\7\u01e0\2\2\u1256"+
		"\u1257\5\u01e2\u00f2\2\u1257\u1258\5\u052c\u0297\2\u1258\u1277\3\2\2\2"+
		"\u1259\u125a\7\u00b0\2\2\u125a\u125b\7\u0185\2\2\u125b\u125c\5\u020e\u0108"+
		"\2\u125c\u125d\7\u00ab\2\2\u125d\u125e\7\u01e0\2\2\u125e\u125f\5\u01e2"+
		"\u00f2\2\u125f\u1260\5\u052c\u0297\2\u1260\u1261\7\u00b7\2\2\u1261\u1262"+
		"\5\u052c\u0297\2\u1262\u1277\3\2\2\2\u1263\u1264\7\u00b0\2\2\u1264\u1265"+
		"\7\u0185\2\2\u1265\u1266\5\u020e\u0108\2\u1266\u1267\7\u00ab\2\2\u1267"+
		"\u1268\7\u01e0\2\2\u1268\u1269\5\u01e2\u00f2\2\u1269\u126a\5\u052c\u0297"+
		"\2\u126a\u126b\7\u00ad\2\2\u126b\u126c\5\u052c\u0297\2\u126c\u1277\3\2"+
		"\2\2\u126d\u126e\7\u00b0\2\2\u126e\u126f\7\u0185\2\2\u126f\u1270\5\u020e"+
		"\u0108\2\u1270\u1271\7\u0152\2\2\u1271\u1272\7\u01e0\2\2\u1272\u1273\5"+
		"\u052c\u0297\2\u1273\u1274\7\u0084\2\2\u1274\u1275\5\u052c\u0297\2\u1275"+
		"\u1277\3\2\2\2\u1276\u1251\3\2\2\2\u1276\u1259\3\2\2\2\u1276\u1263\3\2"+
		"\2\2\u1276\u126d\3\2\2\2\u1277\u01e1\3\2\2\2\u1278\u1279\7\u0102\2\2\u1279"+
		"\u127a\7s\2\2\u127a\u127d\7\u01a9\2\2\u127b\u127d\3\2\2\2\u127c\u1278"+
		"\3\2\2\2\u127c\u127b\3\2\2\2\u127d\u01e3\3\2\2\2\u127e\u127f\7T\2\2\u127f"+
		"\u1280\7\u0133\2\2\u1280\u1281\7\u00c2\2\2\u1281\u1282\5\u020e\u0108\2"+
		"\u1282\u1283\5\u01ea\u00f6\2\u1283\u1284\7d\2\2\u1284\u1285\7\u0185\2"+
		"\2\u1285\u1286\5\u0458\u022d\2\u1286\u1287\7\u008a\2\2\u1287\u1288\5\u051a"+
		"\u028e\2\u1288\u1289\5\u01ec\u00f7\2\u1289\u128a\7J\2\2\u128a\u128b\5"+
		"\u01e6\u00f4\2\u128b\u01e5\3\2\2\2\u128c\u128d\b\u00f4\1\2\u128d\u128e"+
		"\5\u01e8\u00f5\2\u128e\u1294\3\2\2\2\u128f\u1290\f\3\2\2\u1290\u1291\7"+
		"\b\2\2\u1291\u1293\5\u01e8\u00f5\2\u1292\u128f\3\2\2\2\u1293\u1296\3\2"+
		"\2\2\u1294\u1292\3\2\2\2\u1294\u1295\3\2\2\2\u1295\u01e7\3\2\2\2\u1296"+
		"\u1294\3\2\2\2\u1297\u1298\7\u0133\2\2\u1298\u129a\5\u052a\u0296\2\u1299"+
		"\u129b\5\u02ae\u0158\2\u129a\u1299\3\2\2\2\u129b\u129c\3\2\2\2\u129c\u129a"+
		"\3\2\2\2\u129c\u129d\3\2\2\2\u129d\u129e\3\2\2\2\u129e\u129f\5\u01ee\u00f8"+
		"\2\u129f\u12a0\5\u01f0\u00f9\2\u12a0\u12b5\3\2\2\2\u12a1\u12a2\7\u0133"+
		"\2\2\u12a2\u12a3\5\u052a\u0296\2\u12a3\u12a4\5\u02b2\u015a\2\u12a4\u12a5"+
		"\5\u01ee\u00f8\2\u12a5\u12a6\5\u01f0\u00f9\2\u12a6\u12b5\3\2\2\2\u12a7"+
		"\u12a8\7\u00f9\2\2\u12a8\u12a9\5\u052a\u0296\2\u12a9\u12aa\5\u0274\u013b"+
		"\2\u12aa\u12b5\3\2\2\2\u12ab\u12ac\7\u00f9\2\2\u12ac\u12ad\5\u052a\u0296"+
		"\2\u12ad\u12ae\7\4\2\2\u12ae\u12af\5\u04e2\u0272\2\u12af\u12b0\7\5\2\2"+
		"\u12b0\u12b1\5\u0274\u013b\2\u12b1\u12b5\3\2\2\2\u12b2\u12b3\7\u0176\2"+
		"\2\u12b3\u12b5\5\u0458\u022d\2\u12b4\u1297\3\2\2\2\u12b4\u12a1\3\2\2\2"+
		"\u12b4\u12a7\3\2\2\2\u12b4\u12ab\3\2\2\2\u12b4\u12b2\3\2\2\2\u12b5\u01e9"+
		"\3\2\2\2\u12b6\u12b9\7[\2\2\u12b7\u12b9\3\2\2\2\u12b8\u12b6\3\2\2\2\u12b8"+
		"\u12b7\3\2\2\2\u12b9\u01eb\3\2\2\2\u12ba\u12bb\7\u00f4\2\2\u12bb\u12be"+
		"\5\u020e\u0108\2\u12bc\u12be\3\2\2\2\u12bd\u12ba\3\2\2\2\u12bd\u12bc\3"+
		"\2\2\2\u12be\u01ed\3\2\2\2\u12bf\u12c0\7d\2\2\u12c0\u12c7\7\u0162\2\2"+
		"\u12c1\u12c2\7d\2\2\u12c2\u12c3\7y\2\2\u12c3\u12c4\7\u00b9\2\2\u12c4\u12c7"+
		"\5\u020e\u0108\2\u12c5\u12c7\3\2\2\2\u12c6\u12bf\3\2\2\2\u12c6\u12c1\3"+
		"\2\2\2\u12c6\u12c5\3\2\2\2\u12c7\u01ef\3\2\2\2\u12c8\u12cb\7\u014b\2\2"+
		"\u12c9\u12cb\3\2\2\2\u12ca\u12c8\3\2\2\2\u12ca\u12c9\3\2\2\2\u12cb\u01f1"+
		"\3\2\2\2\u12cc\u12cd\7T\2\2\u12cd\u12ce\7\u0133\2\2\u12ce\u12cf\7\u00f4"+
		"\2\2\u12cf\u12d0\5\u020e\u0108\2\u12d0\u12d1\7\u008a\2\2\u12d1\u12d2\5"+
		"\u051a\u028e\2\u12d2\u01f3\3\2\2\2\u12d3\u12d4\7\u00b0\2\2\u12d4\u12d5"+
		"\7\u0133\2\2\u12d5\u12d6\7\u00f4\2\2\u12d6\u12d7\5\u020e\u0108\2\u12d7"+
		"\u12d8\7\u008a\2\2\u12d8\u12d9\5\u051a\u028e\2\u12d9\u12da\7\u00ab\2\2"+
		"\u12da\u12db\5\u01e6\u00f4\2\u12db\u12e6\3\2\2\2\u12dc\u12dd\7\u00b0\2"+
		"\2\u12dd\u12de\7\u0133\2\2\u12de\u12df\7\u00f4\2\2\u12df\u12e0\5\u020e"+
		"\u0108\2\u12e0\u12e1\7\u008a\2\2\u12e1\u12e2\5\u051a\u028e\2\u12e2\u12e3"+
		"\7\u00e5\2\2\u12e3\u12e4\5\u01f6\u00fc\2\u12e4\u12e6\3\2\2\2\u12e5\u12d3"+
		"\3\2\2\2\u12e5\u12dc\3\2\2\2\u12e6\u01f5\3\2\2\2\u12e7\u12e8\b\u00fc\1"+
		"\2\u12e8\u12e9\5\u01f8\u00fd\2\u12e9\u12ef\3\2\2\2\u12ea\u12eb\f\3\2\2"+
		"\u12eb\u12ec\7\b\2\2\u12ec\u12ee\5\u01f8\u00fd\2\u12ed\u12ea\3\2\2\2\u12ee"+
		"\u12f1\3\2\2\2\u12ef\u12ed\3\2\2\2\u12ef\u12f0\3\2\2\2\u12f0\u01f7\3\2"+
		"\2\2\u12f1\u12ef\3\2\2\2\u12f2\u12f3\7\u0133\2\2\u12f3\u12f4\5\u052a\u0296"+
		"\2\u12f4\u12f5\7\4\2\2\u12f5\u12f6\5\u04e2\u0272\2\u12f6\u12f7\7\5\2\2"+
		"\u12f7\u12ff\3\2\2\2\u12f8\u12f9\7\u00f9\2\2\u12f9\u12fa\5\u052a\u0296"+
		"\2\u12fa\u12fb\7\4\2\2\u12fb\u12fc\5\u04e2\u0272\2\u12fc\u12fd\7\5\2\2"+
		"\u12fd\u12ff\3\2\2\2\u12fe\u12f2\3\2\2\2\u12fe\u12f8\3\2\2\2\u12ff\u01f9"+
		"\3\2\2\2\u1300\u1301\7\u00e5\2\2\u1301\u1302\7\u0133\2\2\u1302\u1303\7"+
		"\u00c2\2\2\u1303\u1304\5\u020e\u0108\2\u1304\u1305\7\u008a\2\2\u1305\u1306"+
		"\5\u051a\u028e\2\u1306\u1307\5n8\2\u1307\u1313\3\2\2\2\u1308\u1309\7\u00e5"+
		"\2\2\u1309\u130a\7\u0133\2\2\u130a\u130b\7\u00c2\2\2\u130b\u130c\7\u0102"+
		"\2\2\u130c\u130d\7\u01a9\2\2\u130d\u130e\5\u020e\u0108\2\u130e\u130f\7"+
		"\u008a\2\2\u130f\u1310\5\u051a\u028e\2\u1310\u1311\5n8\2\u1311\u1313\3"+
		"\2\2\2\u1312\u1300\3\2\2\2\u1312\u1308\3\2\2\2\u1313\u01fb\3\2\2\2\u1314"+
		"\u1315\7\u00e5\2\2\u1315\u1316\7\u0133\2\2\u1316\u1317\7\u00f4\2\2\u1317"+
		"\u1318\5\u020e\u0108\2\u1318\u1319\7\u008a\2\2\u1319\u131a\5\u051a\u028e"+
		"\2\u131a\u131b\5n8\2\u131b\u1327\3\2\2\2\u131c\u131d\7\u00e5\2\2\u131d"+
		"\u131e\7\u0133\2\2\u131e\u131f\7\u00f4\2\2\u131f\u1320\7\u0102\2\2\u1320"+
		"\u1321\7\u01a9\2\2\u1321\u1322\5\u020e\u0108\2\u1322\u1323\7\u008a\2\2"+
		"\u1323\u1324\5\u051a\u028e\2\u1324\u1325\5n8\2\u1325\u1327\3\2\2\2\u1326"+
		"\u1314\3\2\2\2\u1326\u131c\3\2\2\2\u1327\u01fd\3\2\2\2\u1328\u1329\7\u00e5"+
		"\2\2\u1329\u132a\7\u0136\2\2\u132a\u132b\7\u00b9\2\2\u132b\u132c\5\u0538"+
		"\u029d\2\u132c\u132d\5n8\2\u132d\u01ff\3\2\2\2\u132e\u132f\7\u014a\2\2"+
		"\u132f\u1330\7\u0136\2\2\u1330\u1331\7\u00b9\2\2\u1331\u1332\5\u0538\u029d"+
		"\2\u1332\u1333\7\u0084\2\2\u1333\u1334\5\u0536\u029c\2\u1334\u0201\3\2"+
		"\2\2\u1335\u1336\7\u00e5\2\2\u1336\u1337\5\u0204\u0103\2\u1337\u1338\7"+
		"\u0102\2\2\u1338\u1339\7\u01a9\2\2\u1339\u133a\5\u020c\u0107\2\u133a\u133b"+
		"\5n8\2\u133b\u1384\3\2\2\2\u133c\u133d\7\u00e5\2\2\u133d\u133e\5\u0204"+
		"\u0103\2\u133e\u133f\5\u020c\u0107\2\u133f\u1340\5n8\2\u1340\u1384\3\2"+
		"\2\2\u1341\u1342\7\u00e5\2\2\u1342\u1343\5\u0208\u0105\2\u1343\u1344\7"+
		"\u0102\2\2\u1344\u1345\7\u01a9\2\2\u1345\u1346\5\u0518\u028d\2\u1346\u1347"+
		"\5n8\2\u1347\u1384\3\2\2\2\u1348\u1349\7\u00e5\2\2\u1349\u134a\5\u0208"+
		"\u0105\2\u134a\u134b\5\u0518\u028d\2\u134b\u134c\5n8\2\u134c\u1384\3\2"+
		"\2\2\u134d\u134e\7\u00e5\2\2\u134e\u134f\5\u020a\u0106\2\u134f\u1350\5"+
		"\u051a\u028e\2\u1350\u1351\7v\2\2\u1351\u1352\5\u020e\u0108\2\u1352\u1353"+
		"\5n8\2\u1353\u1384\3\2\2\2\u1354\u1355\7\u00e5\2\2\u1355\u1356\5\u020a"+
		"\u0106\2\u1356\u1357\7\u0102\2\2\u1357\u1358\7\u01a9\2\2\u1358\u1359\5"+
		"\u051a\u028e\2\u1359\u135a\7v\2\2\u135a\u135b\5\u020e\u0108\2\u135b\u135c"+
		"\5n8\2\u135c\u1384\3\2\2\2\u135d\u135e\7\u00e5\2\2\u135e\u135f\7\u0185"+
		"\2\2\u135f\u1360\5\u0212\u010a\2\u1360\u1361\5n8\2\u1361\u1384\3\2\2\2"+
		"\u1362\u1363\7\u00e5\2\2\u1363\u1364\7\u0185\2\2\u1364\u1365\7\u0102\2"+
		"\2\u1365\u1366\7\u01a9\2\2\u1366\u1367\5\u0212\u010a\2\u1367\u1368\5n"+
		"8\2\u1368\u1384\3\2\2\2\u1369\u136a\7\u00e5\2\2\u136a\u136b\7\u00e3\2"+
		"\2\u136b\u136c\5\u0212\u010a\2\u136c\u136d\5n8\2\u136d\u1384\3\2\2\2\u136e"+
		"\u136f\7\u00e5\2\2\u136f\u1370\7\u00e3\2\2\u1370\u1371\7\u0102\2\2\u1371"+
		"\u1372\7\u01a9\2\2\u1372\u1373\5\u0212\u010a\2\u1373\u1374\5n8\2\u1374"+
		"\u1384\3\2\2\2\u1375\u1376\7\u00e5\2\2\u1376\u1377\7\u0108\2\2\u1377\u1378"+
		"\7\u0093\2\2\u1378\u1379\5\u020c\u0107\2\u1379\u137a\5n8\2\u137a\u1384"+
		"\3\2\2\2\u137b\u137c\7\u00e5\2\2\u137c\u137d\7\u0108\2\2\u137d\u137e\7"+
		"\u0093\2\2\u137e\u137f\7\u0102\2\2\u137f\u1380\7\u01a9\2\2\u1380\u1381"+
		"\5\u020c\u0107\2\u1381\u1382\5n8\2\u1382\u1384\3\2\2\2\u1383\u1335\3\2"+
		"\2\2\u1383\u133c\3\2\2\2\u1383\u1341\3\2\2\2\u1383\u1348\3\2\2\2\u1383"+
		"\u134d\3\2\2\2\u1383\u1354\3\2\2\2\u1383\u135d\3\2\2\2\u1383\u1362\3\2"+
		"\2\2\u1383\u1369\3\2\2\2\u1383\u136e\3\2\2\2\u1383\u1375\3\2\2\2\u1383"+
		"\u137b\3\2\2\2\u1384\u0203\3\2\2\2\u1385\u139d\7\u0082\2\2\u1386\u139d"+
		"\7\u0165\2\2\u1387\u139d\7\u0195\2\2\u1388\u1389\7\u0120\2\2\u1389\u139d"+
		"\7\u0195\2\2\u138a\u139d\7\u0108\2\2\u138b\u138c\7e\2\2\u138c\u139d\7"+
		"\u0082\2\2\u138d\u139d\7\u0092\2\2\u138e\u139d\7\u00ce\2\2\u138f\u139d"+
		"\7\u0173\2\2\u1390\u1391\7\u0180\2\2\u1391\u1392\7\u0162\2\2\u1392\u139d"+
		"\7\u0138\2\2\u1393\u1394\7\u0180\2\2\u1394\u1395\7\u0162\2\2\u1395\u139d"+
		"\7\u00df\2\2\u1396\u1397\7\u0180\2\2\u1397\u1398\7\u0162\2\2\u1398\u139d"+
		"\7\u017e\2\2\u1399\u139a\7\u0180\2\2\u139a\u139b\7\u0162\2\2\u139b\u139d"+
		"\7\u00c9\2\2\u139c\u1385\3\2\2\2\u139c\u1386\3\2\2\2\u139c\u1387\3\2\2"+
		"\2\u139c\u1388\3\2\2\2\u139c\u138a\3\2\2\2\u139c\u138b\3\2\2\2\u139c\u138d"+
		"\3\2\2\2\u139c\u138e\3\2\2\2\u139c\u138f\3\2\2\2\u139c\u1390\3\2\2\2\u139c"+
		"\u1393\3\2\2\2\u139c\u1396\3\2\2\2\u139c\u1399\3\2\2\2\u139d\u0205\3\2"+
		"\2\2\u139e\u13a4\5\u0208\u0105\2\u139f\u13a4\7\u00d5\2\2\u13a0\u13a4\7"+
		"\u015b\2\2\u13a1\u13a4\7\u01e1\2\2\u13a2\u13a4\7\u017c\2\2\u13a3\u139e"+
		"\3\2\2\2\u13a3\u139f\3\2\2\2\u13a3\u13a0\3\2\2\2\u13a3\u13a1\3\2\2\2\u13a3"+
		"\u13a2\3\2\2\2\u13a4\u0207\3\2\2\2\u13a5\u13a6\7\u00a9\2\2\u13a6\u13b4"+
		"\7\u01dc\2\2\u13a7\u13a8\7\u00ec\2\2\u13a8\u13b4\7\u0182\2\2\u13a9\u13b4"+
		"\7\u00f2\2\2\u13aa\u13ab\7e\2\2\u13ab\u13ac\7\u00d4\2\2\u13ac\u13b4\7"+
		"\u019a\2\2\u13ad\u13ae\5\u0136\u009c\2\u13ae\u13af\7\u0114\2\2\u13af\u13b4"+
		"\3\2\2\2\u13b0\u13b4\7\u01e2\2\2\u13b1\u13b4\7\u0160\2\2\u13b2\u13b4\7"+
		"\u0168\2\2\u13b3\u13a5\3\2\2\2\u13b3\u13a7\3\2\2\2\u13b3\u13a9\3\2\2\2"+
		"\u13b3\u13aa\3\2\2\2\u13b3\u13ad\3\2\2\2\u13b3\u13b0\3\2\2\2\u13b3\u13b1"+
		"\3\2\2\2\u13b3\u13b2\3\2\2\2\u13b4\u0209\3\2\2\2\u13b5\u13b6\t\f\2\2\u13b6"+
		"\u020b\3\2\2\2\u13b7\u13b8\b\u0107\1\2\u13b8\u13b9\5\u020e\u0108\2\u13b9"+
		"\u13bf\3\2\2\2\u13ba\u13bb\f\3\2\2\u13bb\u13bc\7\b\2\2\u13bc\u13be\5\u020e"+
		"\u0108\2\u13bd\u13ba\3\2\2\2\u13be\u13c1\3\2\2\2\u13bf\u13bd\3\2\2\2\u13bf"+
		"\u13c0\3\2\2\2\u13c0\u020d\3\2\2\2\u13c1\u13bf\3\2\2\2\u13c2\u13c7\5\u053a"+
		"\u029e\2\u13c3\u13c4\5\u053a\u029e\2\u13c4\u13c5\5\u0210\u0109\2\u13c5"+
		"\u13c7\3\2\2\2\u13c6\u13c2\3\2\2\2\u13c6\u13c3\3\2\2\2\u13c7\u020f\3\2"+
		"\2\2\u13c8\u13c9\b\u0109\1\2\u13c9\u13ca\7\r\2\2\u13ca\u13cb\5\u051c\u028f"+
		"\2\u13cb\u13d1\3\2\2\2\u13cc\u13cd\f\3\2\2\u13cd\u13ce\7\r\2\2\u13ce\u13d0"+
		"\5\u051c\u028f\2\u13cf\u13cc\3\2\2\2\u13d0\u13d3\3\2\2\2\u13d1\u13cf\3"+
		"\2\2\2\u13d1\u13d2\3\2\2\2\u13d2\u0211\3\2\2\2\u13d3\u13d1\3\2\2\2\u13d4"+
		"\u13d5\b\u010a\1\2\u13d5\u13d6\5\u0458\u022d\2\u13d6\u13dc\3\2\2\2\u13d7"+
		"\u13d8\f\3\2\2\u13d8\u13d9\7\b\2\2\u13d9\u13db\5\u0458\u022d\2\u13da\u13d7"+
		"\3\2\2\2\u13db\u13de\3\2\2\2\u13dc\u13da\3\2\2\2\u13dc\u13dd\3\2\2\2\u13dd"+
		"\u0213\3\2\2\2\u13de\u13dc\3\2\2\2\u13df\u13e0\7\u0183\2\2\u13e0\u13e1"+
		"\5\u03d8\u01ed\2\u13e1\u13e2\5\u042e\u0218\2\u13e2\u13e3\5\u0216\u010c"+
		"\2\u13e3\u13e4\5n8\2\u13e4\u0215\3\2\2\2\u13e5\u13e6\7\u00cd\2\2\u13e6"+
		"\u13eb\7\u0101\2\2\u13e7\u13e8\7\u0157\2\2\u13e8\u13eb\7\u0101\2\2\u13e9"+
		"\u13eb\3\2\2\2\u13ea\u13e5\3\2\2\2\u13ea\u13e7\3\2\2\2\u13ea\u13e9\3\2"+
		"\2\2\u13eb\u0217\3\2\2\2\u13ec\u13ed\7\u00c5\2\2\u13ed\u13ee\7v\2\2\u13ee"+
		"\u13ef\5\u0204\u0103\2\u13ef\u13f0\5\u020e\u0108\2\u13f0\u13f1\7\u009a"+
		"\2\2\u13f1\u13f2\5\u021a\u010e\2\u13f2\u1480\3\2\2\2\u13f3\u13f4\7\u00c5"+
		"\2\2\u13f4\u13f5\7v\2\2\u13f5\u13f6\7R\2\2\u13f6\u13f7\5\u020e\u0108\2"+
		"\u13f7\u13f8\7\u009a\2\2\u13f8\u13f9\5\u021a\u010e\2\u13f9\u1480\3\2\2"+
		"\2\u13fa\u13fb\7\u00c5\2\2\u13fb\u13fc\7v\2\2\u13fc\u13fd\5\u0206\u0104"+
		"\2\u13fd\u13fe\5\u051a\u028e\2\u13fe\u13ff\7\u009a\2\2\u13ff\u1400\5\u021a"+
		"\u010e\2\u1400\u1480\3\2\2\2\u1401\u1402\7\u00c5\2\2\u1402\u1403\7v\2"+
		"\2\u1403\u1404\7\u0185\2\2\u1404\u1405\5\u0458\u022d\2\u1405\u1406\7\u009a"+
		"\2\2\u1406\u1407\5\u021a\u010e\2\u1407\u1480\3\2\2\2\u1408\u1409\7\u00c5"+
		"\2\2\u1409\u140a\7v\2\2\u140a\u140b\7\u00e3\2\2\u140b\u140c\5\u0458\u022d"+
		"\2\u140c\u140d\7\u009a\2\2\u140d\u140e\5\u021a\u010e\2\u140e\u1480\3\2"+
		"\2\2\u140f\u1410\7\u00c5\2\2\u1410\u1411\7v\2\2\u1411\u1412\7\u00ae\2"+
		"\2\u1412\u1413\5\u028c\u0147\2\u1413\u1414\7\u009a\2\2\u1414\u1415\5\u021a"+
		"\u010e\2\u1415\u1480\3\2\2\2\u1416\u1417\7\u00c5\2\2\u1417\u1418\7v\2"+
		"\2\u1418\u1419\7\u00f9\2\2\u1419\u141a\5\u0274\u013b\2\u141a\u141b\7\u009a"+
		"\2\2\u141b\u141c\5\u021a\u010e\2\u141c\u1480\3\2\2\2\u141d\u141e\7\u00c5"+
		"\2\2\u141e\u141f\7v\2\2\u141f\u1420\7\u0133\2\2\u1420\u1421\5\u02b2\u015a"+
		"\2\u1421\u1422\7\u009a\2\2\u1422\u1423\5\u021a\u010e\2\u1423\u1480\3\2"+
		"\2\2\u1424\u1425\7\u00c5\2\2\u1425\u1426\7v\2\2\u1426\u1427\7S\2\2\u1427"+
		"\u1428\5\u051a\u028e\2\u1428\u1429\7v\2\2\u1429\u142a\5\u020e\u0108\2"+
		"\u142a\u142b\7\u009a\2\2\u142b\u142c\5\u021a\u010e\2\u142c\u1480\3\2\2"+
		"\2\u142d\u142e\7\u00c5\2\2\u142e\u142f\7v\2\2\u142f\u1430\7S\2\2\u1430"+
		"\u1431\5\u051a\u028e\2\u1431\u1432\7v\2\2\u1432\u1433\7\u00e3\2\2\u1433"+
		"\u1434\5\u020e\u0108\2\u1434\u1435\7\u009a\2\2\u1435\u1436\5\u021a\u010e"+
		"\2\u1436\u1480\3\2\2\2\u1437\u1438\7\u00c5\2\2\u1438\u1439\7v\2\2\u1439"+
		"\u143a\5\u020a\u0106\2\u143a\u143b\5\u051a\u028e\2\u143b\u143c\7v\2\2"+
		"\u143c\u143d\5\u020e\u0108\2\u143d\u143e\7\u009a\2\2\u143e\u143f\5\u021a"+
		"\u010e\2\u143f\u1480\3\2\2\2\u1440\u1441\7\u00c5\2\2\u1441\u1442\7v\2"+
		"\2\u1442\u1443\7\u0145\2\2\u1443\u1444\5\u0274\u013b\2\u1444\u1445\7\u009a"+
		"\2\2\u1445\u1446\5\u021a\u010e\2\u1446\u1480\3\2\2\2\u1447\u1448\7\u00c5"+
		"\2\2\u1448\u1449\7v\2\2\u1449\u144a\7\u01d8\2\2\u144a\u144b\5\u0274\u013b"+
		"\2\u144b\u144c\7\u009a\2\2\u144c\u144d\5\u021a\u010e\2\u144d\u1480\3\2"+
		"\2\2\u144e\u144f\7\u00c5\2\2\u144f\u1450\7v\2\2\u1450\u1451\7\u01d9\2"+
		"\2\u1451\u1452\7d\2\2\u1452\u1453\5\u0458\u022d\2\u1453\u1454\7\u0114"+
		"\2\2\u1454\u1455\5\u051a\u028e\2\u1455\u1456\7\u009a\2\2\u1456\u1457\5"+
		"\u021a\u010e\2\u1457\u1480\3\2\2\2\u1458\u1459\7\u00c5\2\2\u1459\u145a"+
		"\7v\2\2\u145a\u145b\7\u0133\2\2\u145b\u145c\7\u00c2\2\2\u145c\u145d\5"+
		"\u020e\u0108\2\u145d\u145e\7\u008a\2\2\u145e\u145f\5\u051a\u028e\2\u145f"+
		"\u1460\7\u009a\2\2\u1460\u1461\5\u021a\u010e\2\u1461\u1480\3\2\2\2\u1462"+
		"\u1463\7\u00c5\2\2\u1463\u1464\7v\2\2\u1464\u1465\7\u0133\2\2\u1465\u1466"+
		"\7\u00f4\2\2\u1466\u1467\5\u020e\u0108\2\u1467\u1468\7\u008a\2\2\u1468"+
		"\u1469\5\u051a\u028e\2\u1469\u146a\7\u009a\2\2\u146a\u146b\5\u021a\u010e"+
		"\2\u146b\u1480\3\2\2\2\u146c\u146d\7\u00c5\2\2\u146d\u146e\7v\2\2\u146e"+
		"\u146f\7\u0115\2\2\u146f\u1470\7\u012f\2\2\u1470\u1471\5\u0126\u0094\2"+
		"\u1471\u1472\7\u009a\2\2\u1472\u1473\5\u021a\u010e\2\u1473\u1480\3\2\2"+
		"\2\u1474\u1475\7\u00c5\2\2\u1475\u1476\7v\2\2\u1476\u1477\7O\2\2\u1477"+
		"\u1478\7\4\2\2\u1478\u1479\5\u0458\u022d\2\u1479\u147a\7J\2\2\u147a\u147b"+
		"\5\u0458\u022d\2\u147b\u147c\7\5\2\2\u147c\u147d\7\u009a\2\2\u147d\u147e"+
		"\5\u021a\u010e\2\u147e\u1480\3\2\2\2\u147f\u13ec\3\2\2\2\u147f\u13f3\3"+
		"\2\2\2\u147f\u13fa\3\2\2\2\u147f\u1401\3\2\2\2\u147f\u1408\3\2\2\2\u147f"+
		"\u140f\3\2\2\2\u147f\u1416\3\2\2\2\u147f\u141d\3\2\2\2\u147f\u1424\3\2"+
		"\2\2\u147f\u142d\3\2\2\2\u147f\u1437\3\2\2\2\u147f\u1440\3\2\2\2\u147f"+
		"\u1447\3\2\2\2\u147f\u144e\3\2\2\2\u147f\u1458\3\2\2\2\u147f\u1462\3\2"+
		"\2\2\u147f\u146c\3\2\2\2\u147f\u1474\3\2\2\2\u1480\u0219\3\2\2\2\u1481"+
		"\u1484\5\u052c\u0297\2\u1482\u1484\7t\2\2\u1483\u1481\3\2\2\2\u1483\u1482"+
		"\3\2\2\2\u1484\u021b\3\2\2\2\u1485\u1486\7\u0164\2\2\u1486\u1487\7\u0113"+
		"\2\2\u1487\u1488\5\u021e\u0110\2\u1488\u1489\7v\2\2\u1489\u148a\5\u0204"+
		"\u0103\2\u148a\u148b\5\u020e\u0108\2\u148b\u148c\7\u009a\2\2\u148c\u148d"+
		"\5\u0220\u0111\2\u148d\u14e1\3\2\2\2\u148e\u148f\7\u0164\2\2\u148f\u1490"+
		"\7\u0113\2\2\u1490\u1491\5\u021e\u0110\2\u1491\u1492\7v\2\2\u1492\u1493"+
		"\7R\2\2\u1493\u1494\5\u020e\u0108\2\u1494\u1495\7\u009a\2\2\u1495\u1496"+
		"\5\u0220\u0111\2\u1496\u14e1\3\2\2\2\u1497\u1498\7\u0164\2\2\u1498\u1499"+
		"\7\u0113\2\2\u1499\u149a\5\u021e\u0110\2\u149a\u149b\7v\2\2\u149b\u149c"+
		"\5\u0206\u0104\2\u149c\u149d\5\u051a\u028e\2\u149d\u149e\7\u009a\2\2\u149e"+
		"\u149f\5\u0220\u0111\2\u149f\u14e1\3\2\2\2\u14a0\u14a1\7\u0164\2\2\u14a1"+
		"\u14a2\7\u0113\2\2\u14a2\u14a3\5\u021e\u0110\2\u14a3\u14a4\7v\2\2\u14a4"+
		"\u14a5\7\u0185\2\2\u14a5\u14a6\5\u0458\u022d\2\u14a6\u14a7\7\u009a\2\2"+
		"\u14a7\u14a8\5\u0220\u0111\2\u14a8\u14e1\3\2\2\2\u14a9\u14aa\7\u0164\2"+
		"\2\u14aa\u14ab\7\u0113\2\2\u14ab\u14ac\5\u021e\u0110\2\u14ac\u14ad\7v"+
		"\2\2\u14ad\u14ae\7\u00e3\2\2\u14ae\u14af\5\u0458\u022d\2\u14af\u14b0\7"+
		"\u009a\2\2\u14b0\u14b1\5\u0220\u0111\2\u14b1\u14e1\3\2\2\2\u14b2\u14b3"+
		"\7\u0164\2\2\u14b3\u14b4\7\u0113\2\2\u14b4\u14b5\5\u021e\u0110\2\u14b5"+
		"\u14b6\7v\2\2\u14b6\u14b7\7\u00ae\2\2\u14b7\u14b8\5\u028c\u0147\2\u14b8"+
		"\u14b9\7\u009a\2\2\u14b9\u14ba\5\u0220\u0111\2\u14ba\u14e1\3\2\2\2\u14bb"+
		"\u14bc\7\u0164\2\2\u14bc\u14bd\7\u0113\2\2\u14bd\u14be\5\u021e\u0110\2"+
		"\u14be\u14bf\7v\2\2\u14bf\u14c0\7\u00f9\2\2\u14c0\u14c1\5\u0274\u013b"+
		"\2\u14c1\u14c2\7\u009a\2\2\u14c2\u14c3\5\u0220\u0111\2\u14c3\u14e1\3\2"+
		"\2\2\u14c4\u14c5\7\u0164\2\2\u14c5\u14c6\7\u0113\2\2\u14c6\u14c7\5\u021e"+
		"\u0110\2\u14c7\u14c8\7v\2\2\u14c8\u14c9\7\u0115\2\2\u14c9\u14ca\7\u012f"+
		"\2\2\u14ca\u14cb\5\u0126\u0094\2\u14cb\u14cc\7\u009a\2\2\u14cc\u14cd\5"+
		"\u0220\u0111\2\u14cd\u14e1\3\2\2\2\u14ce\u14cf\7\u0164\2\2\u14cf\u14d0"+
		"\7\u0113\2\2\u14d0\u14d1\5\u021e\u0110\2\u14d1\u14d2\7v\2\2\u14d2\u14d3"+
		"\7\u0145\2\2\u14d3\u14d4\5\u0274\u013b\2\u14d4\u14d5\7\u009a\2\2\u14d5"+
		"\u14d6\5\u0220\u0111\2\u14d6\u14e1\3\2\2\2\u14d7\u14d8\7\u0164\2\2\u14d8"+
		"\u14d9\7\u0113\2\2\u14d9\u14da\5\u021e\u0110\2\u14da\u14db\7v\2\2\u14db"+
		"\u14dc\7\u01d8\2\2\u14dc\u14dd\5\u0274\u013b\2\u14dd\u14de\7\u009a\2\2"+
		"\u14de\u14df\5\u0220\u0111\2\u14df\u14e1\3\2\2\2\u14e0\u1485\3\2\2\2\u14e0"+
		"\u148e\3\2\2\2\u14e0\u1497\3\2\2\2\u14e0\u14a0\3\2\2\2\u14e0\u14a9\3\2"+
		"\2\2\u14e0\u14b2\3\2\2\2\u14e0\u14bb\3\2\2\2\u14e0\u14c4\3\2\2\2\u14e0"+
		"\u14ce\3\2\2\2\u14e0\u14d7\3\2\2\2\u14e1\u021d\3\2\2\2\u14e2\u14e3\7d"+
		"\2\2\u14e3\u14e6\5J&\2\u14e4\u14e6\3\2\2\2\u14e5\u14e2\3\2\2\2\u14e5\u14e4"+
		"\3\2\2\2\u14e6\u021f\3\2\2\2\u14e7\u14ea\5\u052c\u0297\2\u14e8\u14ea\7"+
		"t\2\2\u14e9\u14e7\3\2\2\2\u14e9\u14e8\3\2\2\2\u14ea\u0221\3\2\2\2\u14eb"+
		"\u14ec\7c\2\2\u14ec\u14f0\5\u0224\u0113\2\u14ed\u14ee\7\u0126\2\2\u14ee"+
		"\u14f0\5\u0224\u0113\2\u14ef\u14eb\3\2\2\2\u14ef\u14ed\3\2\2\2\u14f0\u0223"+
		"\3\2\2\2\u14f1\u1534\5\u03b4\u01db\2\u14f2\u14f3\5\u0226\u0114\2\u14f3"+
		"\u14f4\5\u03b4\u01db\2\u14f4\u1534\3\2\2\2\u14f5\u14f6\7\u0129\2\2\u14f6"+
		"\u14f7\5\u0228\u0115\2\u14f7\u14f8\5\u03b4\u01db\2\u14f8\u1534\3\2\2\2"+
		"\u14f9\u14fa\7\u0142\2\2\u14fa\u14fb\5\u0228\u0115\2\u14fb\u14fc\5\u03b4"+
		"\u01db\2\u14fc\u1534\3\2\2\2\u14fd\u14fe\7\u00f5\2\2\u14fe\u14ff\5\u0228"+
		"\u0115\2\u14ff\u1500\5\u03b4\u01db\2\u1500\u1534\3\2\2\2\u1501\u1502\7"+
		"\u0116\2\2\u1502\u1503\5\u0228\u0115\2\u1503\u1504\5\u03b4\u01db\2\u1504"+
		"\u1534\3\2\2\2\u1505\u1506\7\u00a8\2\2\u1506\u1507\5\u0532\u029a\2\u1507"+
		"\u1508\5\u0228\u0115\2\u1508\u1509\5\u03b4\u01db\2\u1509\u1534\3\2\2\2"+
		"\u150a\u150b\7\u0150\2\2\u150b\u150c\5\u0532\u029a\2\u150c\u150d\5\u0228"+
		"\u0115\2\u150d\u150e\5\u03b4\u01db\2\u150e\u1534\3\2\2\2\u150f\u1510\5"+
		"\u0532\u029a\2\u1510\u1511\5\u0228\u0115\2\u1511\u1512\5\u03b4\u01db\2"+
		"\u1512\u1534\3\2\2\2\u1513\u1514\7D\2\2\u1514\u1515\5\u0228\u0115\2\u1515"+
		"\u1516\5\u03b4\u01db\2\u1516\u1534\3\2\2\2\u1517\u1518\7\u00f8\2\2\u1518"+
		"\u1519\5\u0228\u0115\2\u1519\u151a\5\u03b4\u01db\2\u151a\u1534\3\2\2\2"+
		"\u151b\u151c\7\u00f8\2\2\u151c\u151d\5\u0532\u029a\2\u151d\u151e\5\u0228"+
		"\u0115\2\u151e\u151f\5\u03b4\u01db\2\u151f\u1534\3\2\2\2\u1520\u1521\7"+
		"\u00f8\2\2\u1521\u1522\7D\2\2\u1522\u1523\5\u0228\u0115\2\u1523\u1524"+
		"\5\u03b4\u01db\2\u1524\u1534\3\2\2\2\u1525\u1526\7\u00b6\2\2\u1526\u1527"+
		"\5\u0228\u0115\2\u1527\u1528\5\u03b4\u01db\2\u1528\u1534\3\2\2\2\u1529"+
		"\u152a\7\u00b6\2\2\u152a\u152b\5\u0532\u029a\2\u152b\u152c\5\u0228\u0115"+
		"\2\u152c\u152d\5\u03b4\u01db\2\u152d\u1534\3\2\2\2\u152e\u152f\7\u00b6"+
		"\2\2\u152f\u1530\7D\2\2\u1530\u1531\5\u0228\u0115\2\u1531\u1532\5\u03b4"+
		"\u01db\2\u1532\u1534\3\2\2\2\u1533\u14f1\3\2\2\2\u1533\u14f2\3\2\2\2\u1533"+
		"\u14f5\3\2\2\2\u1533\u14f9\3\2\2\2\u1533\u14fd\3\2\2\2\u1533\u1501\3\2"+
		"\2\2\u1533\u1505\3\2\2\2\u1533\u150a\3\2\2\2\u1533\u150f\3\2\2\2\u1533"+
		"\u1513\3\2\2\2\u1533\u1517\3\2\2\2\u1533\u151b\3\2\2\2\u1533\u1520\3\2"+
		"\2\2\u1533\u1525\3\2\2\2\u1533\u1529\3\2\2\2\u1533\u152e\3\2\2\2\u1534"+
		"\u0225\3\2\2\2\u1535\u1536\t\r\2\2\u1536\u0227\3\2\2\2\u1537\u153a\5\u0226"+
		"\u0114\2\u1538\u153a\3\2\2\2\u1539\u1537\3\2\2\2\u1539\u1538\3\2\2\2\u153a"+
		"\u0229\3\2\2\2\u153b\u153c\7g\2\2\u153c\u153d\5\u022e\u0118\2\u153d\u153e"+
		"\7v\2\2\u153e\u153f\5\u0234\u011b\2\u153f\u1540\7\u0084\2\2\u1540\u1541"+
		"\5\u0236\u011c\2\u1541\u1542\5\u023a\u011e\2\u1542\u022b\3\2\2\2\u1543"+
		"\u1544\7\u015a\2\2\u1544\u1545\5\u022e\u0118\2\u1545\u1546\7v\2\2\u1546"+
		"\u1547\5\u0234\u011b\2\u1547\u1548\7f\2\2\u1548\u1549\5\u0236\u011c\2"+
		"\u1549\u154a\5n8\2\u154a\u1557\3\2\2\2\u154b\u154c\7\u015a\2\2\u154c\u154d"+
		"\7g\2\2\u154d\u154e\7\u0134\2\2\u154e\u154f\7d\2\2\u154f\u1550\5\u022e"+
		"\u0118\2\u1550\u1551\7v\2\2\u1551\u1552\5\u0234\u011b\2\u1552\u1553\7"+
		"f\2\2\u1553\u1554\5\u0236\u011c\2\u1554\u1555\5n8\2\u1555\u1557\3\2\2"+
		"\2\u1556\u1543\3\2\2\2\u1556\u154b\3\2\2\2\u1557\u022d\3\2\2\2\u1558\u1568"+
		"\5\u0230\u0119\2\u1559\u1568\7D\2\2\u155a\u155b\7D\2\2\u155b\u1568\7\u0143"+
		"\2\2\u155c\u155d\7D\2\2\u155d\u155e\7\4\2\2\u155e\u155f\5\u00dan\2\u155f"+
		"\u1560\7\5\2\2\u1560\u1568\3\2\2\2\u1561\u1562\7D\2\2\u1562\u1563\7\u0143"+
		"\2\2\u1563\u1564\7\4\2\2\u1564\u1565\5\u00dan\2\u1565\u1566\7\5\2\2\u1566"+
		"\u1568\3\2\2\2\u1567\u1558\3\2\2\2\u1567\u1559\3\2\2\2\u1567\u155a\3\2"+
		"\2\2\u1567\u155c\3\2\2\2\u1567\u1561\3\2\2\2\u1568\u022f\3\2\2\2\u1569"+
		"\u156a\b\u0119\1\2\u156a\u156b\5\u0232\u011a\2\u156b\u1571\3\2\2\2\u156c"+
		"\u156d\f\3\2\2\u156d\u156e\7\b\2\2\u156e\u1570\5\u0232\u011a\2\u156f\u156c"+
		"\3\2\2\2\u1570\u1573\3\2\2\2\u1571\u156f\3\2\2\2\u1571\u1572\3\2\2\2\u1572"+
		"\u0231\3\2\2\2\u1573\u1571\3\2\2\2\u1574\u1575\7~\2\2\u1575\u157e\5\u00d8"+
		"m\2\u1576\u1577\7|\2\2\u1577\u157e\5\u00d8m\2\u1578\u1579\7T\2\2\u1579"+
		"\u157e\5\u00d8m\2\u157a\u157b\5\u053a\u029e\2\u157b\u157c\5\u00d8m\2\u157c"+
		"\u157e\3\2\2\2\u157d\u1574\3\2\2\2\u157d\u1576\3\2\2\2\u157d\u1578\3\2"+
		"\2\2\u157d\u157a\3\2\2\2\u157e\u0233\3\2\2\2\u157f\u15ba\5\u0514\u028b"+
		"\2\u1580\u1581\7\u0082\2\2\u1581\u15ba\5\u0514\u028b\2\u1582\u1583\7\u0165"+
		"\2\2\u1583\u15ba\5\u0514\u028b\2\u1584\u1585\7e\2\2\u1585\u1586\7\u00d4"+
		"\2\2\u1586\u1587\7\u019a\2\2\u1587\u15ba\5\u0518\u028d\2\u1588\u1589\7"+
		"e\2\2\u1589\u158a\7\u0168\2\2\u158a\u15ba\5\u0518\u028d\2\u158b\u158c"+
		"\7\u00f9\2\2\u158c\u15ba\5\u0272\u013a\2\u158d\u158e\7\u0145\2\2\u158e"+
		"\u15ba\5\u0272\u013a\2\u158f\u1590\7\u01d8\2\2\u1590\u15ba\5\u0272\u013a"+
		"\2\u1591\u1592\7\u00d5\2\2\u1592\u15ba\5\u0518\u028d\2\u1593\u1594\7\u00e3"+
		"\2\2\u1594\u15ba\5\u020c\u0107\2\u1595\u1596\7\u0114\2\2\u1596\u15ba\5"+
		"\u0518\u028d\2\u1597\u1598\7\u0115\2\2\u1598\u1599\7\u012f\2\2\u1599\u15ba"+
		"\5\u0128\u0095\2\u159a\u159b\7\u0160\2\2\u159b\u15ba\5\u0518\u028d\2\u159c"+
		"\u159d\7\u017c\2\2\u159d\u15ba\5\u0518\u028d\2\u159e\u159f\7\u0185\2\2"+
		"\u159f\u15ba\5\u020c\u0107\2\u15a0\u15a1\7D\2\2\u15a1\u15a2\7\u017b\2"+
		"\2\u15a2\u15a3\7j\2\2\u15a3\u15a4\7\u0160\2\2\u15a4\u15ba\5\u0518\u028d"+
		"\2\u15a5\u15a6\7D\2\2\u15a6\u15a7\7\u0166\2\2\u15a7\u15a8\7j\2\2\u15a8"+
		"\u15a9\7\u0160\2\2\u15a9\u15ba\5\u0518\u028d\2\u15aa\u15ab\7D\2\2\u15ab"+
		"\u15ac\7\u00fa\2\2\u15ac\u15ad\7j\2\2\u15ad\u15ae\7\u0160\2\2\u15ae\u15ba"+
		"\5\u0518\u028d\2\u15af\u15b0\7D\2\2\u15b0\u15b1\7\u01e7\2\2\u15b1\u15b2"+
		"\7j\2\2\u15b2\u15b3\7\u0160\2\2\u15b3\u15ba\5\u0518\u028d\2\u15b4\u15b5"+
		"\7D\2\2\u15b5\u15b6\7\u01e5\2\2\u15b6\u15b7\7j\2\2\u15b7\u15b8\7\u0160"+
		"\2\2\u15b8\u15ba\5\u0518\u028d\2\u15b9\u157f\3\2\2\2\u15b9\u1580\3\2\2"+
		"\2\u15b9\u1582\3\2\2\2\u15b9\u1584\3\2\2\2\u15b9\u1588\3\2\2\2\u15b9\u158b"+
		"\3\2\2\2\u15b9\u158d\3\2\2\2\u15b9\u158f\3\2\2\2\u15b9\u1591\3\2\2\2\u15b9"+
		"\u1593\3\2\2\2\u15b9\u1595\3\2\2\2\u15b9\u1597\3\2\2\2\u15b9\u159a\3\2"+
		"\2\2\u15b9\u159c\3\2\2\2\u15b9\u159e\3\2\2\2\u15b9\u15a0\3\2\2\2\u15b9"+
		"\u15a5\3\2\2\2\u15b9\u15aa\3\2\2\2\u15b9\u15af\3\2\2\2\u15b9\u15b4\3\2"+
		"\2\2\u15ba\u0235\3\2\2\2\u15bb\u15bc\b\u011c\1\2\u15bc\u15bd\5\u0238\u011d"+
		"\2\u15bd\u15c3\3\2\2\2\u15be\u15bf\f\3\2\2\u15bf\u15c0\7\b\2\2\u15c0\u15c2"+
		"\5\u0238\u011d\2\u15c1\u15be\3\2\2\2\u15c2\u15c5\3\2\2\2\u15c3\u15c1\3"+
		"\2\2\2\u15c3\u15c4\3\2\2\2\u15c4\u0237\3\2\2\2\u15c5\u15c3\3\2\2\2\u15c6"+
		"\u15ca\5\u0536\u029c\2\u15c7\u15c8\7h\2\2\u15c8\u15ca\5\u0536\u029c\2"+
		"\u15c9\u15c6\3\2\2\2\u15c9\u15c7\3\2\2\2\u15ca\u0239\3\2\2\2\u15cb\u15cc"+
		"\7\u008f\2\2\u15cc\u15cd\7g\2\2\u15cd\u15d0\7\u0134\2\2\u15ce\u15d0\3"+
		"\2\2\2\u15cf\u15cb\3\2\2\2\u15cf\u15ce\3\2\2\2\u15d0\u023b\3\2\2\2\u15d1"+
		"\u15d2\7g\2\2\u15d2\u15d3\5\u0230\u0119\2\u15d3\u15d4\7\u0084\2\2\u15d4"+
		"\u15d5\5\u0538\u029d\2\u15d5\u15d6\5\u0240\u0121\2\u15d6\u15d7\5\u0242"+
		"\u0122\2\u15d7\u023d\3\2\2\2\u15d8\u15d9\7\u015a\2\2\u15d9\u15da\5\u0230"+
		"\u0119\2\u15da\u15db\7f\2\2\u15db\u15dc\5\u0538\u029d\2\u15dc\u15dd\5"+
		"\u0242\u0122\2\u15dd\u15de\5n8\2\u15de\u15ea\3\2\2\2\u15df\u15e0\7\u015a"+
		"\2\2\u15e0\u15e1\7\u00ac\2\2\u15e1\u15e2\7\u0134\2\2\u15e2\u15e3\7d\2"+
		"\2\u15e3\u15e4\5\u0230\u0119\2\u15e4\u15e5\7f\2\2\u15e5\u15e6\5\u0538"+
		"\u029d\2\u15e6\u15e7\5\u0242\u0122\2\u15e7\u15e8\5n8\2\u15e8\u15ea\3\2"+
		"\2\2\u15e9\u15d8\3\2\2\2\u15e9\u15df\3\2\2\2\u15ea\u023f\3\2\2\2\u15eb"+
		"\u15ec\7\u008f\2\2\u15ec\u15ed\7\u00ac\2\2\u15ed\u15f0\7\u0134\2\2\u15ee"+
		"\u15f0\3\2\2\2\u15ef\u15eb\3\2\2\2\u15ef\u15ee\3\2\2\2\u15f0\u0241\3\2"+
		"\2\2\u15f1\u15f2\7\u00fc\2\2\u15f2\u15f3\7\u00b9\2\2\u15f3\u15f6\5\u0536"+
		"\u029c\2\u15f4\u15f6\3\2\2\2\u15f5\u15f1\3\2\2\2\u15f5\u15f4\3\2\2\2\u15f6"+
		"\u0243\3\2\2\2\u15f7\u15f8\7\u00b0\2\2\u15f8\u15f9\7[\2\2\u15f9\u15fa"+
		"\7\u0143\2\2\u15fa\u15fb\5\u0246\u0124\2\u15fb\u15fc\5\u024a\u0126\2\u15fc"+
		"\u0245\3\2\2\2\u15fd\u1602\b\u0124\1\2\u15fe\u15ff\f\4\2\2\u15ff\u1601"+
		"\5\u0248\u0125\2\u1600\u15fe\3\2\2\2\u1601\u1604\3\2\2\2\u1602\u1600\3"+
		"\2\2\2\u1602\u1603\3\2\2\2\u1603\u0247\3\2\2\2\u1604\u1602\3\2\2\2\u1605"+
		"\u1606\7j\2\2\u1606\u1607\7\u0160\2\2\u1607\u160f\5\u0518\u028d\2\u1608"+
		"\u1609\7d\2\2\u1609\u160a\7\u015b\2\2\u160a\u160f\5\u0538\u029d\2\u160b"+
		"\u160c\7d\2\2\u160c\u160d\7\u0089\2\2\u160d\u160f\5\u0538\u029d\2\u160e"+
		"\u1605\3\2\2\2\u160e\u1608\3\2\2\2\u160e\u160b\3\2\2\2\u160f\u0249\3\2"+
		"\2\2\u1610\u1611\7g\2\2\u1611\u1612\5\u022e\u0118\2\u1612\u1613\7v\2\2"+
		"\u1613\u1614\5\u024c\u0127\2\u1614\u1615\7\u0084\2\2\u1615\u1616\5\u0236"+
		"\u011c\2\u1616\u1617\5\u023a\u011e\2\u1617\u162c\3\2\2\2\u1618\u1619\7"+
		"\u015a\2\2\u1619\u161a\5\u022e\u0118\2\u161a\u161b\7v\2\2\u161b\u161c"+
		"\5\u024c\u0127\2\u161c\u161d\7f\2\2\u161d\u161e\5\u0236\u011c\2\u161e"+
		"\u161f\5n8\2\u161f\u162c\3\2\2\2\u1620\u1621\7\u015a\2\2\u1621\u1622\7"+
		"g\2\2\u1622\u1623\7\u0134\2\2\u1623\u1624\7d\2\2\u1624\u1625\5\u022e\u0118"+
		"\2\u1625\u1626\7v\2\2\u1626\u1627\5\u024c\u0127\2\u1627\u1628\7f\2\2\u1628"+
		"\u1629\5\u0236\u011c\2\u1629\u162a\5n8\2\u162a\u162c\3\2\2\2\u162b\u1610"+
		"\3\2\2\2\u162b\u1618\3\2\2\2\u162b\u1620\3\2\2\2\u162c\u024b\3\2\2\2\u162d"+
		"\u162e\t\16\2\2\u162e\u024d\3\2\2\2\u162f\u1630\7T\2\2\u1630\u1631\5\u0250"+
		"\u0129\2\u1631\u1632\7\u0108\2\2\u1632\u1633\5\u0252\u012a\2\u1633\u1634"+
		"\5\u0254\u012b\2\u1634\u1635\7v\2\2\u1635\u1636\5\u042c\u0217\2\u1636"+
		"\u1637\5\u0256\u012c\2\u1637\u1638\7\4\2\2\u1638\u1639\5\u0258\u012d\2"+
		"\u1639\u163a\7\5\2\2\u163a\u163b\5\u025e\u0130\2\u163b\u163c\5x=\2\u163c"+
		"\u163d\5\u0100\u0081\2\u163d\u163e\5\u0440\u0221\2\u163e\u1653\3\2\2\2"+
		"\u163f\u1640\7T\2\2\u1640\u1641\5\u0250\u0129\2\u1641\u1642\7\u0108\2"+
		"\2\u1642\u1643\5\u0252\u012a\2\u1643\u1644\7\u0102\2\2\u1644\u1645\7s"+
		"\2\2\u1645\u1646\7\u01a9\2\2\u1646\u1647\5\u051a\u028e\2\u1647\u1648\7"+
		"v\2\2\u1648\u1649\5\u042c\u0217\2\u1649\u164a\5\u0256\u012c\2\u164a\u164b"+
		"\7\4\2\2\u164b\u164c\5\u0258\u012d\2\u164c\u164d\7\5\2\2\u164d\u164e\5"+
		"\u025e\u0130\2\u164e\u164f\5x=\2\u164f\u1650\5\u0100\u0081\2\u1650\u1651"+
		"\5\u0440\u0221\2\u1651\u1653\3\2\2\2\u1652\u162f\3\2\2\2\u1652\u163f\3"+
		"\2\2\2\u1653\u024f\3\2\2\2\u1654\u1657\7\u0088\2\2\u1655\u1657\3\2\2\2"+
		"\u1656\u1654\3\2\2\2\u1656\u1655\3\2\2\2\u1657\u0251\3\2\2\2\u1658\u165b"+
		"\7\u0093\2\2\u1659\u165b\3\2\2\2\u165a\u1658\3\2\2\2\u165a\u1659\3\2\2"+
		"\2\u165b\u0253\3\2\2\2\u165c\u165f\5\u051a\u028e\2\u165d\u165f\3\2\2\2"+
		"\u165e\u165c\3\2\2\2\u165e\u165d\3\2\2\2\u165f\u0255\3\2\2\2\u1660\u1661"+
		"\7\u008a\2\2\u1661\u1664\5\u051a\u028e\2\u1662\u1664\3\2\2\2\u1663\u1660"+
		"\3\2\2\2\u1663\u1662\3\2\2\2\u1664\u0257\3\2\2\2\u1665\u1666\b\u012d\1"+
		"\2\u1666\u1667\5\u025c\u012f\2\u1667\u166d\3\2\2\2\u1668\u1669\f\3\2\2"+
		"\u1669\u166a\7\b\2\2\u166a\u166c\5\u025c\u012f\2\u166b\u1668\3\2\2\2\u166c"+
		"\u166f\3\2\2\2\u166d\u166b\3\2\2\2\u166d\u166e\3\2\2\2\u166e\u0259\3\2"+
		"\2\2\u166f\u166d\3\2\2\2\u1670\u1671\5\u0262\u0132\2\u1671\u1672\5\u0264"+
		"\u0133\2\u1672\u1673\5\u0266\u0134\2\u1673\u1674\5\u0268\u0135\2\u1674"+
		"\u167c\3\2\2\2\u1675\u1676\5\u0262\u0132\2\u1676\u1677\5\u020e\u0108\2"+
		"\u1677\u1678\5v<\2\u1678\u1679\5\u0266\u0134\2\u1679\u167a\5\u0268\u0135"+
		"\2\u167a\u167c\3\2\2\2\u167b\u1670\3\2\2\2\u167b\u1675\3\2\2\2\u167c\u025b"+
		"\3\2\2\2\u167d\u167e\5\u053a\u029e\2\u167e\u167f\5\u025a\u012e\2\u167f"+
		"\u1689\3\2\2\2\u1680\u1681\5\u0496\u024c\2\u1681\u1682\5\u025a\u012e\2"+
		"\u1682\u1689\3\2\2\2\u1683\u1684\7\4\2\2\u1684\u1685\5\u0488\u0245\2\u1685"+
		"\u1686\7\5\2\2\u1686\u1687\5\u025a\u012e\2\u1687\u1689\3\2\2\2\u1688\u167d"+
		"\3\2\2\2\u1688\u1680\3\2\2\2\u1688\u1683\3\2\2\2\u1689\u025d\3\2\2\2\u168a"+
		"\u168b\7\u01d7\2\2\u168b\u168c\7\4\2\2\u168c\u168d\5\u0260\u0131\2\u168d"+
		"\u168e\7\5\2\2\u168e\u1691\3\2\2\2\u168f\u1691\3\2\2\2\u1690\u168a\3\2"+
		"\2\2\u1690\u168f\3\2\2\2\u1691\u025f\3\2\2\2\u1692\u1693\b\u0131\1\2\u1693"+
		"\u1694\5\u025c\u012f\2\u1694\u169a\3\2\2\2\u1695\u1696\f\3\2\2\u1696\u1697"+
		"\7\b\2\2\u1697\u1699\5\u025c\u012f\2\u1698\u1695\3\2\2\2\u1699\u169c\3"+
		"\2\2\2\u169a\u1698\3\2\2\2\u169a\u169b\3\2\2\2\u169b\u0261\3\2\2\2\u169c"+
		"\u169a\3\2\2\2\u169d\u169e\7Q\2\2\u169e\u16a1\5\u020e\u0108\2\u169f\u16a1"+
		"\3\2\2\2\u16a0\u169d\3\2\2\2\u16a0\u169f\3\2\2\2\u16a1\u0263\3\2\2\2\u16a2"+
		"\u16a5\5\u020e\u0108\2\u16a3\u16a5\3\2\2\2\u16a4\u16a2\3\2\2\2\u16a4\u16a3"+
		"\3\2\2\2\u16a5\u0265\3\2\2\2\u16a6\u16aa\7K\2\2\u16a7\u16aa\7]\2\2\u16a8"+
		"\u16aa\3\2\2\2\u16a9\u16a6\3\2\2\2\u16a9\u16a7\3\2\2\2\u16a9\u16a8\3\2"+
		"\2\2\u16aa\u0267\3\2\2\2\u16ab\u16ac\7\u012e\2\2\u16ac\u16b1\7\u00f5\2"+
		"\2\u16ad\u16ae\7\u012e\2\2\u16ae\u16b1\7\u0116\2\2\u16af\u16b1\3\2\2\2"+
		"\u16b0\u16ab\3\2\2\2\u16b0\u16ad\3\2\2\2\u16b0\u16af\3\2\2\2\u16b1\u0269"+
		"\3\2\2\2\u16b2\u16b3\7T\2\2\u16b3\u16b4\5\u026c\u0137\2\u16b4\u16b5\7"+
		"\u00f9\2\2\u16b5\u16b6\5\u0520\u0291\2\u16b6\u16b7\5\u0276\u013c\2\u16b7"+
		"\u16b8\7\u0159\2\2\u16b8\u16b9\5\u0280\u0141\2\u16b9\u16ba\5\u0290\u0149"+
		"\2\u16ba\u16d6\3\2\2\2\u16bb\u16bc\7T\2\2\u16bc\u16bd\5\u026c\u0137\2"+
		"\u16bd\u16be\7\u00f9\2\2\u16be\u16bf\5\u0520\u0291\2\u16bf\u16c0\5\u0276"+
		"\u013c\2\u16c0\u16c1\7\u0159\2\2\u16c1\u16c2\7\u0082\2\2\u16c2\u16c3\7"+
		"\4\2\2\u16c3\u16c4\5\u029e\u0150\2\u16c4\u16c5\7\5\2\2\u16c5\u16c6\5\u0290"+
		"\u0149\2\u16c6\u16d6\3\2\2\2\u16c7\u16c8\7T\2\2\u16c8\u16c9\5\u026c\u0137"+
		"\2\u16c9\u16ca\7\u00f9\2\2\u16ca\u16cb\5\u0520\u0291\2\u16cb\u16cc\5\u0276"+
		"\u013c\2\u16cc\u16cd\5\u0290\u0149\2\u16cd\u16d6\3\2\2\2\u16ce\u16cf\7"+
		"T\2\2\u16cf\u16d0\5\u026c\u0137\2\u16d0\u16d1\7\u0145\2\2\u16d1\u16d2"+
		"\5\u0520\u0291\2\u16d2\u16d3\5\u0276\u013c\2\u16d3\u16d4\5\u0290\u0149"+
		"\2\u16d4\u16d6\3\2\2\2\u16d5\u16b2\3\2\2\2\u16d5\u16bb\3\2\2\2\u16d5\u16c7"+
		"\3\2\2\2\u16d5\u16ce\3\2\2\2\u16d6\u026b\3\2\2\2\u16d7\u16d8\7x\2\2\u16d8"+
		"\u16db\7\u0154\2\2\u16d9\u16db\3\2\2\2\u16da\u16d7\3\2\2\2\u16da\u16d9"+
		"\3\2\2\2\u16db\u026d\3\2\2\2\u16dc\u16dd\7\4\2\2\u16dd\u16de\5\u0270\u0139"+
		"\2\u16de\u16df\7\5\2\2\u16df\u16e3\3\2\2\2\u16e0\u16e1\7\4\2\2\u16e1\u16e3"+
		"\7\5\2\2\u16e2\u16dc\3\2\2\2\u16e2\u16e0\3\2\2\2\u16e3\u026f\3\2\2\2\u16e4"+
		"\u16e5\b\u0139\1\2\u16e5\u16e6\5\u027a\u013e\2\u16e6\u16ec\3\2\2\2\u16e7"+
		"\u16e8\f\3\2\2\u16e8\u16e9\7\b\2\2\u16e9\u16eb\5\u027a\u013e\2\u16ea\u16e7"+
		"\3\2\2\2\u16eb\u16ee\3\2\2\2\u16ec\u16ea\3\2\2\2\u16ec\u16ed\3\2\2\2\u16ed"+
		"\u0271\3\2\2\2\u16ee\u16ec\3\2\2\2\u16ef\u16f0\b\u013a\1\2\u16f0\u16f1"+
		"\5\u0274\u013b\2\u16f1\u16f7\3\2\2\2\u16f2\u16f3\f\3\2\2\u16f3\u16f4\7"+
		"\b\2\2\u16f4\u16f6\5\u0274\u013b\2\u16f5\u16f2\3\2\2\2\u16f6\u16f9\3\2"+
		"\2\2\u16f7\u16f5\3\2\2\2\u16f7\u16f8\3\2\2\2\u16f8\u0273\3\2\2\2\u16f9"+
		"\u16f7\3\2\2\2\u16fa\u16fb\5\u0520\u0291\2\u16fb\u16fc\5\u026e\u0138\2"+
		"\u16fc\u1703\3\2\2\2\u16fd\u1703\5\u054a\u02a6\2\u16fe\u1703\5\u053a\u029e"+
		"\2\u16ff\u1700\5\u053a\u029e\2\u1700\u1701\5\u0508\u0285\2\u1701\u1703"+
		"\3\2\2\2\u1702\u16fa\3\2\2\2\u1702\u16fd\3\2\2\2\u1702\u16fe\3\2\2\2\u1702"+
		"\u16ff\3\2\2\2\u1703\u0275\3\2\2\2\u1704\u1705\7\4\2\2\u1705\u1706\5\u0278"+
		"\u013d\2\u1706\u1707\7\5\2\2\u1707\u170b\3\2\2\2\u1708\u1709\7\4\2\2\u1709"+
		"\u170b\7\5\2\2\u170a\u1704\3\2\2\2\u170a\u1708\3\2\2\2\u170b\u0277\3\2"+
		"\2\2\u170c\u170d\b\u013d\1\2\u170d\u170e\5\u0284\u0143\2\u170e\u1714\3"+
		"\2\2\2\u170f\u1710\f\3\2\2\u1710\u1711\7\b\2\2\u1711\u1713\5\u0284\u0143"+
		"\2\u1712\u170f\3\2\2\2\u1713\u1716\3\2\2\2\u1714\u1712\3\2\2\2\u1714\u1715"+
		"\3\2\2\2\u1715\u0279\3\2\2\2\u1716\u1714\3\2\2\2\u1717\u1718\5\u027c\u013f"+
		"\2\u1718\u1719\5\u027e\u0140\2\u1719\u171a\5\u0282\u0142\2\u171a\u1727"+
		"\3\2\2\2\u171b\u171c\5\u027e\u0140\2\u171c\u171d\5\u027c\u013f\2\u171d"+
		"\u171e\5\u0282\u0142\2\u171e\u1727\3\2\2\2\u171f\u1720\5\u027e\u0140\2"+
		"\u1720\u1721\5\u0282\u0142\2\u1721\u1727\3\2\2\2\u1722\u1723\5\u027c\u013f"+
		"\2\u1723\u1724\5\u0282\u0142\2\u1724\u1727\3\2\2\2\u1725\u1727\5\u0282"+
		"\u0142\2\u1726\u1717\3\2\2\2\u1726\u171b\3\2\2\2\u1726\u171f\3\2\2\2\u1726"+
		"\u1722\3\2\2\2\u1726\u1725\3\2\2\2\u1727\u027b\3\2\2\2\u1728\u172f\7j"+
		"\2\2\u1729\u172f\7\u01e3\2\2\u172a\u172f\7\u01ad\2\2\u172b\u172c\7j\2"+
		"\2\u172c\u172f\7\u01e3\2\2\u172d\u172f\7\u008b\2\2\u172e\u1728\3\2\2\2"+
		"\u172e\u1729\3\2\2\2\u172e\u172a\3\2\2\2\u172e\u172b\3\2\2\2\u172e\u172d"+
		"\3\2\2\2\u172f\u027d\3\2\2\2\u1730\u1731\5\u053c\u029f\2\u1731\u027f\3"+
		"\2\2\2\u1732\u1733\5\u0282\u0142\2\u1733\u0281\3\2\2\2\u1734\u1741\5\u0458"+
		"\u022d\2\u1735\u1736\5\u053c\u029f\2\u1736\u1737\5\u0210\u0109\2\u1737"+
		"\u1738\7 \2\2\u1738\u1739\7\u0185\2\2\u1739\u1741\3\2\2\2\u173a\u173b"+
		"\7\u01bc\2\2\u173b\u173c\5\u053c\u029f\2\u173c\u173d\5\u0210\u0109\2\u173d"+
		"\u173e\7 \2\2\u173e\u173f\7\u0185\2\2\u173f\u1741\3\2\2\2\u1740\u1734"+
		"\3\2\2\2\u1740\u1735\3\2\2\2\u1740\u173a\3\2\2\2\u1741\u0283\3\2\2\2\u1742"+
		"\u174c\5\u027a\u013e\2\u1743\u1744\5\u027a\u013e\2\u1744\u1745\7[\2\2"+
		"\u1745\u1746\5\u0488\u0245\2\u1746\u174c\3\2\2\2\u1747\u1748\5\u027a\u013e"+
		"\2\u1748\u1749\7\f\2\2\u1749\u174a\5\u0488\u0245\2\u174a\u174c\3\2\2\2"+
		"\u174b\u1742\3\2\2\2\u174b\u1743\3\2\2\2\u174b\u1747\3\2\2\2\u174c\u0285"+
		"\3\2\2\2\u174d\u174e\5\u027a\u013e\2\u174e\u0287\3\2\2\2\u174f\u1750\7"+
		"\4\2\2\u1750\u1751\7\13\2\2\u1751\u1764\7\5\2\2\u1752\u1753\7\4\2\2\u1753"+
		"\u1754\5\u028a\u0146\2\u1754\u1755\7\5\2\2\u1755\u1764\3\2\2\2\u1756\u1757"+
		"\7\4\2\2\u1757\u1758\7y\2\2\u1758\u1759\7\u00b9\2\2\u1759\u175a\5\u028a"+
		"\u0146\2\u175a\u175b\7\5\2\2\u175b\u1764\3\2\2\2\u175c\u175d\7\4\2\2\u175d"+
		"\u175e\5\u028a\u0146\2\u175e\u175f\7y\2\2\u175f\u1760\7\u00b9\2\2\u1760"+
		"\u1761\5\u028a\u0146\2\u1761\u1762\7\5\2\2\u1762\u1764\3\2\2\2\u1763\u174f"+
		"\3\2\2\2\u1763\u1752\3\2\2\2\u1763\u1756\3\2\2\2\u1763\u175c\3\2\2\2\u1764"+
		"\u0289\3\2\2\2\u1765\u1766\b\u0146\1\2\u1766\u1767\5\u0286\u0144\2\u1767"+
		"\u176d\3\2\2\2\u1768\u1769\f\3\2\2\u1769\u176a\7\b\2\2\u176a\u176c\5\u0286"+
		"\u0144\2\u176b\u1768\3\2\2\2\u176c\u176f\3\2\2\2\u176d\u176b\3\2\2\2\u176d"+
		"\u176e\3\2\2\2\u176e\u028b\3\2\2\2\u176f\u176d\3\2\2\2\u1770\u1771\5\u0520"+
		"\u0291\2\u1771\u1772\5\u0288\u0145\2\u1772\u028d\3\2\2\2\u1773\u1774\b"+
		"\u0148\1\2\u1774\u1775\5\u028c\u0147\2\u1775\u177b\3\2\2\2\u1776\u1777"+
		"\f\3\2\2\u1777\u1778\7\b\2\2\u1778\u177a\5\u028c\u0147\2\u1779\u1776\3"+
		"\2\2\2\u177a\u177d\3\2\2\2\u177b\u1779\3\2\2\2\u177b\u177c\3\2\2\2\u177c"+
		"\u028f\3\2\2\2\u177d\u177b\3\2\2\2\u177e\u1780\5\u0294\u014b\2\u177f\u177e"+
		"\3\2\2\2\u1780\u1781\3\2\2\2\u1781\u177f\3\2\2\2\u1781\u1782\3\2\2\2\u1782"+
		"\u0291\3\2\2\2\u1783\u1784\7\u00bb\2\2\u1784\u1785\7v\2\2\u1785\u1786"+
		"\7t\2\2\u1786\u17a7\7\u01e8\2\2\u1787\u1788\7\u0159\2\2\u1788\u1789\7"+
		"t\2\2\u1789\u178a\7v\2\2\u178a\u178b\7t\2\2\u178b\u17a7\7\u01e8\2\2\u178c"+
		"\u17a7\7\u0177\2\2\u178d\u17a7\7\u0104\2\2\u178e\u17a7\7\u016f\2\2\u178f"+
		"\u17a7\7\u0196\2\2\u1790\u1791\7\u00f3\2\2\u1791\u1792\7\u0164\2\2\u1792"+
		"\u17a7\7\u00db\2\2\u1793\u1794\7\u00f3\2\2\u1794\u1795\7\u0164\2\2\u1795"+
		"\u17a7\7\u0110\2\2\u1796\u1797\7\u0164\2\2\u1797\u17a7\7\u00db\2\2\u1798"+
		"\u1799\7\u0164\2\2\u1799\u17a7\7\u0110\2\2\u179a\u17a7\7\u0117\2\2\u179b"+
		"\u179c\7s\2\2\u179c\u17a7\7\u0117\2\2\u179d\u179e\7\u00d0\2\2\u179e\u17a7"+
		"\5\u0126\u0094\2\u179f\u17a0\7\u015d\2\2\u17a0\u17a7\5\u0126\u0094\2\u17a1"+
		"\u17a2\7\u01e9\2\2\u17a2\u17a7\5\u020e\u0108\2\u17a3\u17a7\5T+\2\u17a4"+
		"\u17a5\7\u01ea\2\2\u17a5\u17a7\5\u053a\u029e\2\u17a6\u1783\3\2\2\2\u17a6"+
		"\u1787\3\2\2\2\u17a6\u178c\3\2\2\2\u17a6\u178d\3\2\2\2\u17a6\u178e\3\2"+
		"\2\2\u17a6\u178f\3\2\2\2\u17a6\u1790\3\2\2\2\u17a6\u1793\3\2\2\2\u17a6"+
		"\u1796\3\2\2\2\u17a6\u1798\3\2\2\2\u17a6\u179a\3\2\2\2\u17a6\u179b\3\2"+
		"\2\2\u17a6\u179d\3\2\2\2\u17a6\u179f\3\2\2\2\u17a6\u17a1\3\2\2\2\u17a6"+
		"\u17a3\3\2\2\2\u17a6\u17a4\3\2\2\2\u17a7\u0293\3\2\2\2\u17a8\u17a9\7J"+
		"\2\2\u17a9\u17b1\5\u0296\u014c\2\u17aa\u17ab\7\u0114\2\2\u17ab\u17b1\5"+
		"J&\2\u17ac\u17ad\7\u01d9\2\2\u17ad\u17b1\5\u0298\u014d\2\u17ae\u17b1\7"+
		"\u008e\2\2\u17af\u17b1\5\u0292\u014a\2\u17b0\u17a8\3\2\2\2\u17b0\u17aa"+
		"\3\2\2\2\u17b0\u17ac\3\2\2\2\u17b0\u17ae\3\2\2\2\u17b0\u17af\3\2\2\2\u17b1"+
		"\u0295\3\2\2\2\u17b2\u17b3\5\u052c\u0297\2\u17b3\u17b4\b\u014c\1\2\u17b4"+
		"\u17ba\3\2\2\2\u17b5\u17b6\5\u052c\u0297\2\u17b6\u17b7\7\b\2\2\u17b7\u17b8"+
		"\5\u052c\u0297\2\u17b8\u17ba\3\2\2\2\u17b9\u17b2\3\2\2\2\u17b9\u17b5\3"+
		"\2\2\2\u17ba\u0297\3\2\2\2\u17bb\u17bc\b\u014d\1\2\u17bc\u17bd\7d\2\2"+
		"\u17bd\u17be\7\u0185\2\2\u17be\u17bf\5\u0458\u022d\2\u17bf\u17c7\3\2\2"+
		"\2\u17c0\u17c1\f\3\2\2\u17c1\u17c2\7\b\2\2\u17c2\u17c3\7d\2\2\u17c3\u17c4"+
		"\7\u0185\2\2\u17c4\u17c6\5\u0458\u022d\2\u17c5\u17c0\3\2\2\2\u17c6\u17c9"+
		"\3\2\2\2\u17c7\u17c5\3\2\2\2\u17c7\u17c8\3\2\2\2\u17c8\u0299\3\2\2\2\u17c9"+
		"\u17c7\3\2\2\2\u17ca\u17cb\7\u008f\2\2\u17cb\u17ce\5\u01ce\u00e8\2\u17cc"+
		"\u17ce\3\2\2\2\u17cd\u17ca\3\2\2\2\u17cd\u17cc\3\2\2\2\u17ce\u029b\3\2"+
		"\2\2\u17cf\u17d0\5\u027e\u0140\2\u17d0\u17d1\5\u0282\u0142\2\u17d1\u029d"+
		"\3\2\2\2\u17d2\u17d3\b\u0150\1\2\u17d3\u17d4\5\u029c\u014f\2\u17d4\u17da"+
		"\3\2\2\2\u17d5\u17d6\f\3\2\2\u17d6\u17d7\7\b\2\2\u17d7\u17d9\5\u029c\u014f"+
		"\2\u17d8\u17d5\3\2\2\2\u17d9\u17dc\3\2\2\2\u17da\u17d8\3\2\2\2\u17da\u17db"+
		"\3\2\2\2\u17db\u029f\3\2\2\2\u17dc\u17da\3\2\2\2\u17dd\u17de\7\u00b0\2"+
		"\2\u17de\u17df\7\u00f9\2\2\u17df\u17e0\5\u0274\u013b\2\u17e0\u17e1\5\u02a2"+
		"\u0152\2\u17e1\u17e2\5\u02a4\u0153\2\u17e2\u17f0\3\2\2\2\u17e3\u17e4\7"+
		"\u00b0\2\2\u17e4\u17e5\7\u0145\2\2\u17e5\u17e6\5\u0274\u013b\2\u17e6\u17e7"+
		"\5\u02a2\u0152\2\u17e7\u17e8\5\u02a4\u0153\2\u17e8\u17f0\3\2\2\2\u17e9"+
		"\u17ea\7\u00b0\2\2\u17ea\u17eb\7\u01d8\2\2\u17eb\u17ec\5\u0274\u013b\2"+
		"\u17ec\u17ed\5\u02a2\u0152\2\u17ed\u17ee\5\u02a4\u0153\2\u17ee\u17f0\3"+
		"\2\2\2\u17ef\u17dd\3\2\2\2\u17ef\u17e3\3\2\2\2\u17ef\u17e9\3\2\2\2\u17f0"+
		"\u02a1\3\2\2\2\u17f1\u17f2\b\u0152\1\2\u17f2\u17f3\5\u0292\u014a\2\u17f3"+
		"\u17f8\3\2\2\2\u17f4\u17f5\f\3\2\2\u17f5\u17f7\5\u0292\u014a\2\u17f6\u17f4"+
		"\3\2\2\2\u17f7\u17fa\3\2\2\2\u17f8\u17f6\3\2\2\2\u17f8\u17f9\3\2\2\2\u17f9"+
		"\u02a3\3\2\2\2\u17fa\u17f8\3\2\2\2\u17fb\u17fe\7\u0158\2\2\u17fc\u17fe"+
		"\3\2\2\2\u17fd\u17fb\3\2\2\2\u17fd\u17fc\3\2\2\2\u17fe\u02a5\3\2\2\2\u17ff"+
		"\u1800\7\u00e5\2\2\u1800\u1801\7\u00f9\2\2\u1801\u1802\5\u0272\u013a\2"+
		"\u1802\u1803\5n8\2\u1803\u1824\3\2\2\2\u1804\u1805\7\u00e5\2\2\u1805\u1806"+
		"\7\u00f9\2\2\u1806\u1807\7\u0102\2\2\u1807\u1808\7\u01a9\2\2\u1808\u1809"+
		"\5\u0272\u013a\2\u1809\u180a\5n8\2\u180a\u1824\3\2\2\2\u180b\u180c\7\u00e5"+
		"\2\2\u180c\u180d\7\u0145\2\2\u180d\u180e\5\u0272\u013a\2\u180e\u180f\5"+
		"n8\2\u180f\u1824\3\2\2\2\u1810\u1811\7\u00e5\2\2\u1811\u1812\7\u0145\2"+
		"\2\u1812\u1813\7\u0102\2\2\u1813\u1814\7\u01a9\2\2\u1814\u1815\5\u0272"+
		"\u013a\2\u1815\u1816\5n8\2\u1816\u1824\3\2\2\2\u1817\u1818\7\u00e5\2\2"+
		"\u1818\u1819\7\u01d8\2\2\u1819\u181a\5\u0272\u013a\2\u181a\u181b\5n8\2"+
		"\u181b\u1824\3\2\2\2\u181c\u181d\7\u00e5\2\2\u181d\u181e\7\u01d8\2\2\u181e"+
		"\u181f\7\u0102\2\2\u181f\u1820\7\u01a9\2\2\u1820\u1821\5\u0272\u013a\2"+
		"\u1821\u1822\5n8\2\u1822\u1824\3\2\2\2\u1823\u17ff\3\2\2\2\u1823\u1804"+
		"\3\2\2\2\u1823\u180b\3\2\2\2\u1823\u1810\3\2\2\2\u1823\u1817\3\2\2\2\u1823"+
		"\u181c\3\2\2\2\u1824\u02a7\3\2\2\2\u1825\u1826\7\u00e5\2\2\u1826\u1827"+
		"\7\u00ae\2\2\u1827\u1828\5\u028e\u0148\2\u1828\u1829\5n8\2\u1829\u1832"+
		"\3\2\2\2\u182a\u182b\7\u00e5\2\2\u182b\u182c\7\u00ae\2\2\u182c\u182d\7"+
		"\u0102\2\2\u182d\u182e\7\u01a9\2\2\u182e\u182f\5\u028e\u0148\2\u182f\u1830"+
		"\5n8\2\u1830\u1832\3\2\2\2\u1831\u1825\3\2\2\2\u1831\u182a\3\2\2\2\u1832"+
		"\u02a9\3\2\2\2\u1833\u1834\7\u00e5\2\2\u1834\u1835\7\u0133\2\2\u1835\u1836"+
		"\5\u02b0\u0159\2\u1836\u1837\5n8\2\u1837\u1840\3\2\2\2\u1838\u1839\7\u00e5"+
		"\2\2\u1839\u183a\7\u0133\2\2\u183a\u183b\7\u0102\2\2\u183b\u183c\7\u01a9"+
		"\2\2\u183c\u183d\5\u02b0\u0159\2\u183d\u183e\5n8\2\u183e\u1840\3\2\2\2"+
		"\u183f\u1833\3\2\2\2\u183f\u1838\3\2\2\2\u1840\u02ab\3\2\2\2\u1841\u1842"+
		"\7\4\2\2\u1842\u1843\5\u0458\u022d\2\u1843\u1844\7\5\2\2\u1844\u1858\3"+
		"\2\2\2\u1845\u1846\7\4\2\2\u1846\u1847\5\u0458\u022d\2\u1847\u1848\7\b"+
		"\2\2\u1848\u1849\5\u0458\u022d\2\u1849\u184a\7\5\2\2\u184a\u1858\3\2\2"+
		"\2\u184b\u184c\7\4\2\2\u184c\u184d\7\u01b4\2\2\u184d\u184e\7\b\2\2\u184e"+
		"\u184f\5\u0458\u022d\2\u184f\u1850\7\5\2\2\u1850\u1858\3\2\2\2\u1851\u1852"+
		"\7\4\2\2\u1852\u1853\5\u0458\u022d\2\u1853\u1854\7\b\2\2\u1854\u1855\7"+
		"\u01b4\2\2\u1855\u1856\7\5\2\2\u1856\u1858\3\2\2\2\u1857\u1841\3\2\2\2"+
		"\u1857\u1845\3\2\2\2\u1857\u184b\3\2\2\2\u1857\u1851\3\2\2\2\u1858\u02ad"+
		"\3\2\2\2\u1859\u185f\5\u04ce\u0268\2\u185a\u185b\5\u053a\u029e\2\u185b"+
		"\u185c\7\r\2\2\u185c\u185d\5\u02ae\u0158\2\u185d\u185f\3\2\2\2\u185e\u1859"+
		"\3\2\2\2\u185e\u185a\3\2\2\2\u185f\u02af\3\2\2\2\u1860\u1861\b\u0159\1"+
		"\2\u1861\u1862\5\u02b2\u015a\2\u1862\u1868\3\2\2\2\u1863\u1864\f\3\2\2"+
		"\u1864\u1865\7\b\2\2\u1865\u1867\5\u02b2\u015a\2\u1866\u1863\3\2\2\2\u1867"+
		"\u186a\3\2\2\2\u1868\u1866\3\2\2\2\u1868\u1869\3\2\2\2\u1869\u02b1\3\2"+
		"\2\2\u186a\u1868\3\2\2\2\u186b\u186d\5\u02ae\u0158\2\u186c\u186b\3\2\2"+
		"\2\u186d\u186e\3\2\2\2\u186e\u186c\3\2\2\2\u186e\u186f\3\2\2\2\u186f\u1870"+
		"\3\2\2\2\u1870\u1871\5\u02ac\u0157\2\u1871\u02b3\3\2\2\2\u1872\u1873\7"+
		"_\2\2\u1873\u1874\5\u02b6\u015c\2\u1874\u02b5\3\2\2\2\u1875\u1876\b\u015c"+
		"\1\2\u1876\u1877\5\u02b8\u015d\2\u1877\u187c\3\2\2\2\u1878\u1879\f\3\2"+
		"\2\u1879\u187b\5\u02b8\u015d\2\u187a\u1878\3\2\2\2\u187b\u187e\3\2\2\2"+
		"\u187c\u187a\3\2\2\2\u187c\u187d\3\2\2\2\u187d\u02b7\3\2\2\2\u187e\u187c"+
		"\3\2\2\2\u187f\u1883\5\u052c\u0297\2\u1880\u1881\7\u0114\2\2\u1881\u1883"+
		"\5J&\2\u1882\u187f\3\2\2\2\u1882\u1880\3\2\2\2\u1883\u02b9\3\2\2\2\u1884"+
		"\u1885\7T\2\2\u1885\u1886\7O\2\2\u1886\u1887\7\4\2\2\u1887\u1888\5\u0458"+
		"\u022d\2\u1888\u1889\7J\2\2\u1889\u188a\5\u0458\u022d\2\u188a\u188b\7"+
		"\5\2\2\u188b\u188c\7\u008f\2\2\u188c\u188d\7\u00f9\2\2\u188d\u188e\5\u0274"+
		"\u013b\2\u188e\u188f\5\u02bc\u015f\2\u188f\u18a7\3\2\2\2\u1890\u1891\7"+
		"T\2\2\u1891\u1892\7O\2\2\u1892\u1893\7\4\2\2\u1893\u1894\5\u0458\u022d"+
		"\2\u1894\u1895\7J\2\2\u1895\u1896\5\u0458\u022d\2\u1896\u1897\7\5\2\2"+
		"\u1897\u1898\7\u0198\2\2\u1898\u1899\7\u00f9\2\2\u1899\u189a\5\u02bc\u015f"+
		"\2\u189a\u18a7\3\2\2\2\u189b\u189c\7T\2\2\u189c\u189d\7O\2\2\u189d\u189e"+
		"\7\4\2\2\u189e\u189f\5\u0458\u022d\2\u189f\u18a0\7J\2\2\u18a0\u18a1\5"+
		"\u0458\u022d\2\u18a1\u18a2\7\5\2\2\u18a2\u18a3\7\u008f\2\2\u18a3\u18a4"+
		"\7\u01ad\2\2\u18a4\u18a5\5\u02bc\u015f\2\u18a5\u18a7\3\2\2\2\u18a6\u1884"+
		"\3\2\2\2\u18a6\u1890\3\2\2\2\u18a6\u189b\3\2\2\2\u18a7\u02bb\3\2\2\2\u18a8"+
		"\u18a9\7J\2\2\u18a9\u18ae\7\u0105\2\2\u18aa\u18ab\7J\2\2\u18ab\u18ae\7"+
		"\u00b3\2\2\u18ac\u18ae\3\2\2\2\u18ad\u18a8\3\2\2\2\u18ad\u18aa\3\2\2\2"+
		"\u18ad\u18ac\3\2\2\2\u18ae\u02bd\3\2\2\2\u18af\u18b0\7\u00e5\2\2\u18b0"+
		"\u18b1\7O\2\2\u18b1\u18b2\5\u02c0\u0161\2\u18b2\u18b3\7\4\2\2\u18b3\u18b4"+
		"\5\u0458\u022d\2\u18b4\u18b5\7J\2\2\u18b5\u18b6\5\u0458\u022d\2\u18b6"+
		"\u18b7\7\5\2\2\u18b7\u18b8\5n8\2\u18b8\u02bf\3\2\2\2\u18b9\u18ba\7\u0102"+
		"\2\2\u18ba\u18bd\7\u01a9\2\2\u18bb\u18bd\3\2\2\2\u18bc\u18b9\3\2\2\2\u18bc"+
		"\u18bb\3\2\2\2\u18bd\u02c1\3\2\2\2\u18be\u18bf\7T\2\2\u18bf\u18c0\5\u026c"+
		"\u0137\2\u18c0\u18c1\7\u01d9\2\2\u18c1\u18c2\7d\2\2\u18c2\u18c3\5\u0458"+
		"\u022d\2\u18c3\u18c4\7\u0114\2\2\u18c4\u18c5\5\u051a\u028e\2\u18c5\u18c6"+
		"\7\4\2\2\u18c6\u18c7\5\u02c4\u0163\2\u18c7\u18c8\7\5\2\2\u18c8\u02c3\3"+
		"\2\2\2\u18c9\u18ca\7f\2\2\u18ca\u18cb\7\u01eb\2\2\u18cb\u18cc\7\u008f"+
		"\2\2\u18cc\u18cd\7\u00f9\2\2\u18cd\u18ce\5\u0274\u013b\2\u18ce\u18cf\7"+
		"\b\2\2\u18cf\u18d0\7\u0084\2\2\u18d0\u18d1\7\u01eb\2\2\u18d1\u18d2\7\u008f"+
		"\2\2\u18d2\u18d3\7\u00f9\2\2\u18d3\u18d4\5\u0274\u013b\2\u18d4\u18ec\3"+
		"\2\2\2\u18d5\u18d6\7\u0084\2\2\u18d6\u18d7\7\u01eb\2\2\u18d7\u18d8\7\u008f"+
		"\2\2\u18d8\u18d9\7\u00f9\2\2\u18d9\u18da\5\u0274\u013b\2\u18da\u18db\7"+
		"\b\2\2\u18db\u18dc\7f\2\2\u18dc\u18dd\7\u01eb\2\2\u18dd\u18de\7\u008f"+
		"\2\2\u18de\u18df\7\u00f9\2\2\u18df\u18e0\5\u0274\u013b\2\u18e0\u18ec\3"+
		"\2\2\2\u18e1\u18e2\7f\2\2\u18e2\u18e3\7\u01eb\2\2\u18e3\u18e4\7\u008f"+
		"\2\2\u18e4\u18e5\7\u00f9\2\2\u18e5\u18ec\5\u0274\u013b\2\u18e6\u18e7\7"+
		"\u0084\2\2\u18e7\u18e8\7\u01eb\2\2\u18e8\u18e9\7\u008f\2\2\u18e9\u18ea"+
		"\7\u00f9\2\2\u18ea\u18ec\5\u0274\u013b\2\u18eb\u18c9\3\2\2\2\u18eb\u18d5"+
		"\3\2\2\2\u18eb\u18e1\3\2\2\2\u18eb\u18e6\3\2\2\2\u18ec\u02c5\3\2\2\2\u18ed"+
		"\u18ee\7\u00e5\2\2\u18ee\u18ef\7\u01d9\2\2\u18ef\u18f0\5\u02c0\u0161\2"+
		"\u18f0\u18f1\7d\2\2\u18f1\u18f2\5\u0458\u022d\2\u18f2\u18f3\7\u0114\2"+
		"\2\u18f3\u18f4\5\u051a\u028e\2\u18f4\u18f5\5n8\2\u18f5\u02c7\3\2\2\2\u18f6"+
		"\u18f7\7\u014f\2\2\u18f7\u18f8\5\u02ca\u0166\2\u18f8\u18f9\5\u0252\u012a"+
		"\2\u18f9\u18fa\5\u0516\u028c\2\u18fa\u1911\3\2\2\2\u18fb\u18fc\7\u014f"+
		"\2\2\u18fc\u18fd\5\u02cc\u0167\2\u18fd\u18fe\5\u0252\u012a\2\u18fe\u18ff"+
		"\5\u051a\u028e\2\u18ff\u1911\3\2\2\2\u1900\u1901\7\u014f\2\2\u1901\u1902"+
		"\7\4\2\2\u1902\u1903\5\u02ce\u0168\2\u1903\u1904\7\5\2\2\u1904\u1905\5"+
		"\u02ca\u0166\2\u1905\u1906\5\u0252\u012a\2\u1906\u1907\5\u0516\u028c\2"+
		"\u1907\u1911\3\2\2\2\u1908\u1909\7\u014f\2\2\u1909\u190a\7\4\2\2\u190a"+
		"\u190b\5\u02ce\u0168\2\u190b\u190c\7\5\2\2\u190c\u190d\5\u02cc\u0167\2"+
		"\u190d\u190e\5\u0252\u012a\2\u190e\u190f\5\u051a\u028e\2\u190f\u1911\3"+
		"\2\2\2\u1910\u18f6\3\2\2\2\u1910\u18fb\3\2\2\2\u1910\u1900\3\2\2\2\u1910"+
		"\u1908\3\2\2\2\u1911\u02c9\3\2\2\2\u1912\u1913\t\7\2\2\u1913\u02cb\3\2"+
		"\2\2\u1914\u1915\t\17\2\2\u1915\u02cd\3\2\2\2\u1916\u1917\b\u0168\1\2"+
		"\u1917\u1918\5\u02d0\u0169\2\u1918\u191e\3\2\2\2\u1919\u191a\f\3\2\2\u191a"+
		"\u191b\7\b\2\2\u191b\u191d\5\u02d0\u0169\2\u191c\u1919\3\2\2\2\u191d\u1920"+
		"\3\2\2\2\u191e\u191c\3\2\2\2\u191e\u191f\3\2\2\2\u191f\u02cf\3\2\2\2\u1920"+
		"\u191e\3\2\2\2\u1921\u1922\7\u00a6\2\2\u1922\u02d1\3\2\2\2\u1923\u1924"+
		"\7\u00b0\2\2\u1924\u1925\7\u017c\2\2\u1925\u1926\5\u051a\u028e\2\u1926"+
		"\u1927\7\u016a\2\2\u1927\u1928\5v<\2\u1928\u1930\3\2\2\2\u1929\u192a\7"+
		"\u00b0\2\2\u192a\u192b\7\u017c\2\2\u192b\u192c\5\u051a\u028e\2\u192c\u192d"+
		"\7\u0156\2\2\u192d\u192e\5v<\2\u192e\u1930\3\2\2\2\u192f\u1923\3\2\2\2"+
		"\u192f\u1929\3\2\2\2\u1930\u02d3\3\2\2\2\u1931\u1932\7\u00b0\2\2\u1932"+
		"\u1933\7\u00ae\2\2\u1933\u1934\5\u028c\u0147\2\u1934\u1935\7\u0152\2\2"+
		"\u1935\u1936\7\u0084\2\2\u1936\u1937\5\u051a\u028e\2\u1937\u1b06\3\2\2"+
		"\2\u1938\u1939\7\u00b0\2\2\u1939\u193a\7\u0092\2\2\u193a\u193b\5\u020e"+
		"\u0108\2\u193b\u193c\7\u0152\2\2\u193c\u193d\7\u0084\2\2\u193d\u193e\5"+
		"\u051a\u028e\2\u193e\u1b06\3\2\2\2\u193f\u1940\7\u00b0\2\2\u1940\u1941"+
		"\7\u00ce\2\2\u1941\u1942\5\u020e\u0108\2\u1942\u1943\7\u0152\2\2\u1943"+
		"\u1944\7\u0084\2\2\u1944\u1945\5\u051a\u028e\2\u1945\u1b06\3\2\2\2\u1946"+
		"\u1947\7\u00b0\2\2\u1947\u1948\7\u00d5\2\2\u1948\u1949\5\u051a\u028e\2"+
		"\u1949\u194a\7\u0152\2\2\u194a\u194b\7\u0084\2\2\u194b\u194c\5\u051a\u028e"+
		"\2\u194c\u1b06\3\2\2\2\u194d\u194e\7\u00b0\2\2\u194e\u194f\7\u00e3\2\2"+
		"\u194f\u1950\5\u020e\u0108\2\u1950\u1951\7\u0152\2\2\u1951\u1952\7\u0084"+
		"\2\2\u1952\u1953\5\u051a\u028e\2\u1953\u1b06\3\2\2\2\u1954\u1955\7\u00b0"+
		"\2\2\u1955\u1956\7\u00e3\2\2\u1956\u1957\5\u020e\u0108\2\u1957\u1958\7"+
		"\u0152\2\2\u1958\u1959\7S\2\2\u1959\u195a\5\u051a\u028e\2\u195a\u195b"+
		"\7\u0084\2\2\u195b\u195c\5\u051a\u028e\2\u195c\u1b06\3\2\2\2\u195d\u195e"+
		"\7\u00b0\2\2\u195e\u195f\7e\2\2\u195f\u1960\7\u00d4\2\2\u1960\u1961\7"+
		"\u019a\2\2\u1961\u1962\5\u051a\u028e\2\u1962\u1963\7\u0152\2\2\u1963\u1964"+
		"\7\u0084\2\2\u1964\u1965\5\u051a\u028e\2\u1965\u1b06\3\2\2\2\u1966\u1967"+
		"\7\u00b0\2\2\u1967\u1968\7\u00f9\2\2\u1968\u1969\5\u0274\u013b\2\u1969"+
		"\u196a\7\u0152\2\2\u196a\u196b\7\u0084\2\2\u196b\u196c\5\u051a\u028e\2"+
		"\u196c\u1b06\3\2\2\2\u196d\u196e\7\u00b0\2\2\u196e\u196f\7h\2\2\u196f"+
		"\u1970\5\u0534\u029b\2\u1970\u1971\7\u0152\2\2\u1971\u1972\7\u0084\2\2"+
		"\u1972\u1973\5\u0534\u029b\2\u1973\u1b06\3\2\2\2\u1974\u1975\7\u00b0\2"+
		"\2\u1975\u1976\5\u0136\u009c\2\u1976\u1977\7\u0114\2\2\u1977\u1978\5\u051a"+
		"\u028e\2\u1978\u1979\7\u0152\2\2\u1979\u197a\7\u0084\2\2\u197a\u197b\5"+
		"\u051a\u028e\2\u197b\u1b06\3\2\2\2\u197c\u197d\7\u00b0\2\2\u197d\u197e"+
		"\7\u0133\2\2\u197e\u197f\7\u00c2\2\2\u197f\u1980\5\u020e\u0108\2\u1980"+
		"\u1981\7\u008a\2\2\u1981\u1982\5\u051a\u028e\2\u1982\u1983\7\u0152\2\2"+
		"\u1983\u1984\7\u0084\2\2\u1984\u1985\5\u051a\u028e\2\u1985\u1b06\3\2\2"+
		"\2\u1986\u1987\7\u00b0\2\2\u1987\u1988\7\u0133\2\2\u1988\u1989\7\u00f4"+
		"\2\2\u1989\u198a\5\u020e\u0108\2\u198a\u198b\7\u008a\2\2\u198b\u198c\5"+
		"\u051a\u028e\2\u198c\u198d\7\u0152\2\2\u198d\u198e\7\u0084\2\2\u198e\u198f"+
		"\5\u051a\u028e\2\u198f\u1b06\3\2\2\2\u1990\u1991\7\u00b0\2\2\u1991\u1992"+
		"\7\u01db\2\2\u1992\u1993\5\u051a\u028e\2\u1993\u1994\7v\2\2\u1994\u1995"+
		"\5\u0516\u028c\2\u1995\u1996\7\u0152\2\2\u1996\u1997\7\u0084\2\2\u1997"+
		"\u1998\5\u051a\u028e\2\u1998\u1b06\3\2\2\2\u1999\u199a\7\u00b0\2\2\u199a"+
		"\u199b\7\u01db\2\2\u199b\u199c\7\u0102\2\2\u199c\u199d\7\u01a9\2\2\u199d"+
		"\u199e\5\u051a\u028e\2\u199e\u199f\7v\2\2\u199f\u19a0\5\u0516\u028c\2"+
		"\u19a0\u19a1\7\u0152\2\2\u19a1\u19a2\7\u0084\2\2\u19a2\u19a3\5\u051a\u028e"+
		"\2\u19a3\u1b06\3\2\2\2\u19a4\u19a5\7\u00b0\2\2\u19a5\u19a6\7\u0145\2\2"+
		"\u19a6\u19a7\5\u0274\u013b\2\u19a7\u19a8\7\u0152\2\2\u19a8\u19a9\7\u0084"+
		"\2\2\u19a9\u19aa\5\u051a\u028e\2\u19aa\u1b06\3\2\2\2\u19ab\u19ac\7\u00b0"+
		"\2\2\u19ac\u19ad\7\u01e2\2\2\u19ad\u19ae\5\u051a\u028e\2\u19ae\u19af\7"+
		"\u0152\2\2\u19af\u19b0\7\u0084\2\2\u19b0\u19b1\5\u051a\u028e\2\u19b1\u1b06"+
		"\3\2\2\2\u19b2\u19b3\7\u00b0\2\2\u19b3\u19b4\7\u01d8\2\2\u19b4\u19b5\5"+
		"\u0274\u013b\2\u19b5\u19b6\7\u0152\2\2\u19b6\u19b7\7\u0084\2\2\u19b7\u19b8"+
		"\5\u051a\u028e\2\u19b8\u1b06\3\2\2\2\u19b9\u19ba\7\u00b0\2\2\u19ba\u19bb"+
		"\7\u0160\2\2\u19bb\u19bc\5\u051a\u028e\2\u19bc\u19bd\7\u0152\2\2\u19bd"+
		"\u19be\7\u0084\2\2\u19be\u19bf\5\u051a\u028e\2\u19bf\u1b06\3\2\2\2\u19c0"+
		"\u19c1\7\u00b0\2\2\u19c1\u19c2\7\u0168\2\2\u19c2\u19c3\5\u051a\u028e\2"+
		"\u19c3\u19c4\7\u0152\2\2\u19c4\u19c5\7\u0084\2\2\u19c5\u19c6\5\u051a\u028e"+
		"\2\u19c6\u1b06\3\2\2\2\u19c7\u19c8\7\u00b0\2\2\u19c8\u19c9\7\u01e1\2\2"+
		"\u19c9\u19ca\5\u051a\u028e\2\u19ca\u19cb\7\u0152\2\2\u19cb\u19cc\7\u0084"+
		"\2\2\u19cc\u19cd\5\u051a\u028e\2\u19cd\u1b06\3\2\2\2\u19ce\u19cf\7\u00b0"+
		"\2\2\u19cf\u19d0\7\u0082\2\2\u19d0\u19d1\5\u042c\u0217\2\u19d1\u19d2\7"+
		"\u0152\2\2\u19d2\u19d3\7\u0084\2\2\u19d3\u19d4\5\u051a\u028e\2\u19d4\u1b06"+
		"\3\2\2\2\u19d5\u19d6\7\u00b0\2\2\u19d6\u19d7\7\u0082\2\2\u19d7\u19d8\7"+
		"\u0102\2\2\u19d8\u19d9\7\u01a9\2\2\u19d9\u19da\5\u042c\u0217\2\u19da\u19db"+
		"\7\u0152\2\2\u19db\u19dc\7\u0084\2\2\u19dc\u19dd\5\u051a\u028e\2\u19dd"+
		"\u1b06\3\2\2\2\u19de\u19df\7\u00b0\2\2\u19df\u19e0\7\u0165\2\2\u19e0\u19e1"+
		"\5\u0516\u028c\2\u19e1\u19e2\7\u0152\2\2\u19e2\u19e3\7\u0084\2\2\u19e3"+
		"\u19e4\5\u051a\u028e\2\u19e4\u1b06\3\2\2\2\u19e5\u19e6\7\u00b0\2\2";
	private static final String _serializedATNSegment3 =
		"\u19e6\u19e7\7\u0165\2\2\u19e7\u19e8\7\u0102\2\2\u19e8\u19e9\7\u01a9\2"+
		"\2\u19e9\u19ea\5\u0516\u028c\2\u19ea\u19eb\7\u0152\2\2\u19eb\u19ec\7\u0084"+
		"\2\2\u19ec\u19ed\5\u051a\u028e\2\u19ed\u1b06\3\2\2\2\u19ee\u19ef\7\u00b0"+
		"\2\2\u19ef\u19f0\7\u0195\2\2\u19f0\u19f1\5\u0516\u028c\2\u19f1\u19f2\7"+
		"\u0152\2\2\u19f2\u19f3\7\u0084\2\2\u19f3\u19f4\5\u051a\u028e\2\u19f4\u1b06"+
		"\3\2\2\2\u19f5\u19f6\7\u00b0\2\2\u19f6\u19f7\7\u0195\2\2\u19f7\u19f8\7"+
		"\u0102\2\2\u19f8\u19f9\7\u01a9\2\2\u19f9\u19fa\5\u0516\u028c\2\u19fa\u19fb"+
		"\7\u0152\2\2\u19fb\u19fc\7\u0084\2\2\u19fc\u19fd\5\u051a\u028e\2\u19fd"+
		"\u1b06\3\2\2\2\u19fe\u19ff\7\u00b0\2\2\u19ff\u1a00\7\u0120\2\2\u1a00\u1a01"+
		"\7\u0195\2\2\u1a01\u1a02\5\u0516\u028c\2\u1a02\u1a03\7\u0152\2\2\u1a03"+
		"\u1a04\7\u0084\2\2\u1a04\u1a05\5\u051a\u028e\2\u1a05\u1b06\3\2\2\2\u1a06"+
		"\u1a07\7\u00b0\2\2\u1a07\u1a08\7\u0120\2\2\u1a08\u1a09\7\u0195\2\2\u1a09"+
		"\u1a0a\7\u0102\2\2\u1a0a\u1a0b\7\u01a9\2\2\u1a0b\u1a0c\5\u0516\u028c\2"+
		"\u1a0c\u1a0d\7\u0152\2\2\u1a0d\u1a0e\7\u0084\2\2\u1a0e\u1a0f\5\u051a\u028e"+
		"\2\u1a0f\u1b06\3\2\2\2\u1a10\u1a11\7\u00b0\2\2\u1a11\u1a12\7\u0108\2\2"+
		"\u1a12\u1a13\5\u0516\u028c\2\u1a13\u1a14\7\u0152\2\2\u1a14\u1a15\7\u0084"+
		"\2\2\u1a15\u1a16\5\u051a\u028e\2\u1a16\u1b06\3\2\2\2\u1a17\u1a18\7\u00b0"+
		"\2\2\u1a18\u1a19\7\u0108\2\2\u1a19\u1a1a\7\u0102\2\2\u1a1a\u1a1b\7\u01a9"+
		"\2\2\u1a1b\u1a1c\5\u0516\u028c\2\u1a1c\u1a1d\7\u0152\2\2\u1a1d\u1a1e\7"+
		"\u0084\2\2\u1a1e\u1a1f\5\u051a\u028e\2\u1a1f\u1b06\3\2\2\2\u1a20\u1a21"+
		"\7\u00b0\2\2\u1a21\u1a22\7e\2\2\u1a22\u1a23\7\u0082\2\2\u1a23\u1a24\5"+
		"\u042c\u0217\2\u1a24\u1a25\7\u0152\2\2\u1a25\u1a26\7\u0084\2\2\u1a26\u1a27"+
		"\5\u051a\u028e\2\u1a27\u1b06\3\2\2\2\u1a28\u1a29\7\u00b0\2\2\u1a29\u1a2a"+
		"\7e\2\2\u1a2a\u1a2b\7\u0082\2\2\u1a2b\u1a2c\7\u0102\2\2\u1a2c\u1a2d\7"+
		"\u01a9\2\2\u1a2d\u1a2e\5\u042c\u0217\2\u1a2e\u1a2f\7\u0152\2\2\u1a2f\u1a30"+
		"\7\u0084\2\2\u1a30\u1a31\5\u051a\u028e\2\u1a31\u1b06\3\2\2\2\u1a32\u1a33"+
		"\7\u00b0\2\2\u1a33\u1a34\7\u0082\2\2\u1a34\u1a35\5\u042c\u0217\2\u1a35"+
		"\u1a36\7\u0152\2\2\u1a36\u1a37\5\u02d6\u016c\2\u1a37\u1a38\5\u051a\u028e"+
		"\2\u1a38\u1a39\7\u0084\2\2\u1a39\u1a3a\5\u051a\u028e\2\u1a3a\u1b06\3\2"+
		"\2\2\u1a3b\u1a3c\7\u00b0\2\2\u1a3c\u1a3d\7\u0082\2\2\u1a3d\u1a3e\7\u0102"+
		"\2\2\u1a3e\u1a3f\7\u01a9\2\2\u1a3f\u1a40\5\u042c\u0217\2\u1a40\u1a41\7"+
		"\u0152\2\2\u1a41\u1a42\5\u02d6\u016c\2\u1a42\u1a43\5\u051a\u028e\2\u1a43"+
		"\u1a44\7\u0084\2\2\u1a44\u1a45\5\u051a\u028e\2\u1a45\u1b06\3\2\2\2\u1a46"+
		"\u1a47\7\u00b0\2\2\u1a47\u1a48\7\u0195\2\2\u1a48\u1a49\5\u0516\u028c\2"+
		"\u1a49\u1a4a\7\u0152\2\2\u1a4a\u1a4b\5\u02d6\u016c\2\u1a4b\u1a4c\5\u051a"+
		"\u028e\2\u1a4c\u1a4d\7\u0084\2\2\u1a4d\u1a4e\5\u051a\u028e\2\u1a4e\u1b06"+
		"\3\2\2\2\u1a4f\u1a50\7\u00b0\2\2\u1a50\u1a51\7\u0195\2\2\u1a51\u1a52\7"+
		"\u0102\2\2\u1a52\u1a53\7\u01a9\2\2\u1a53\u1a54\5\u0516\u028c\2\u1a54\u1a55"+
		"\7\u0152\2\2\u1a55\u1a56\5\u02d6\u016c\2\u1a56\u1a57\5\u051a\u028e\2\u1a57"+
		"\u1a58\7\u0084\2\2\u1a58\u1a59\5\u051a\u028e\2\u1a59\u1b06\3\2\2\2\u1a5a"+
		"\u1a5b\7\u00b0\2\2\u1a5b\u1a5c\7\u0120\2\2\u1a5c\u1a5d\7\u0195\2\2\u1a5d"+
		"\u1a5e\5\u0516\u028c\2\u1a5e\u1a5f\7\u0152\2\2\u1a5f\u1a60\5\u02d6\u016c"+
		"\2\u1a60\u1a61\5\u051a\u028e\2\u1a61\u1a62\7\u0084\2\2\u1a62\u1a63\5\u051a"+
		"\u028e\2\u1a63\u1b06\3\2\2\2\u1a64\u1a65\7\u00b0\2\2\u1a65\u1a66\7\u0120"+
		"\2\2\u1a66\u1a67\7\u0195\2\2\u1a67\u1a68\7\u0102\2\2\u1a68\u1a69\7\u01a9"+
		"\2\2\u1a69\u1a6a\5\u0516\u028c\2\u1a6a\u1a6b\7\u0152\2\2\u1a6b\u1a6c\5"+
		"\u02d6\u016c\2\u1a6c\u1a6d\5\u051a\u028e\2\u1a6d\u1a6e\7\u0084\2\2\u1a6e"+
		"\u1a6f\5\u051a\u028e\2\u1a6f\u1b06\3\2\2\2\u1a70\u1a71\7\u00b0\2\2\u1a71"+
		"\u1a72\7\u0082\2\2\u1a72\u1a73\5\u042c\u0217\2\u1a73\u1a74\7\u0152\2\2"+
		"\u1a74\u1a75\7S\2\2\u1a75\u1a76\5\u051a\u028e\2\u1a76\u1a77\7\u0084\2"+
		"\2\u1a77\u1a78\5\u051a\u028e\2\u1a78\u1b06\3\2\2\2\u1a79\u1a7a\7\u00b0"+
		"\2\2\u1a7a\u1a7b\7\u0082\2\2\u1a7b\u1a7c\7\u0102\2\2\u1a7c\u1a7d\7\u01a9"+
		"\2\2\u1a7d\u1a7e\5\u042c\u0217\2\u1a7e\u1a7f\7\u0152\2\2\u1a7f\u1a80\7"+
		"S\2\2\u1a80\u1a81\5\u051a\u028e\2\u1a81\u1a82\7\u0084\2\2\u1a82\u1a83"+
		"\5\u051a\u028e\2\u1a83\u1b06\3\2\2\2\u1a84\u1a85\7\u00b0\2\2\u1a85\u1a86"+
		"\7e\2\2\u1a86\u1a87\7\u0082\2\2\u1a87\u1a88\5\u042c\u0217\2\u1a88\u1a89"+
		"\7\u0152\2\2\u1a89\u1a8a\5\u02d6\u016c\2\u1a8a\u1a8b\5\u051a\u028e\2\u1a8b"+
		"\u1a8c\7\u0084\2\2\u1a8c\u1a8d\5\u051a\u028e\2\u1a8d\u1b06\3\2\2\2\u1a8e"+
		"\u1a8f\7\u00b0\2\2\u1a8f\u1a90\7e\2\2\u1a90\u1a91\7\u0082\2\2\u1a91\u1a92"+
		"\7\u0102\2\2\u1a92\u1a93\7\u01a9\2\2\u1a93\u1a94\5\u042c\u0217\2\u1a94"+
		"\u1a95\7\u0152\2\2\u1a95\u1a96\5\u02d6\u016c\2\u1a96\u1a97\5\u051a\u028e"+
		"\2\u1a97\u1a98\7\u0084\2\2\u1a98\u1a99\5\u051a\u028e\2\u1a99\u1b06\3\2"+
		"\2\2\u1a9a\u1a9b\7\u00b0\2\2\u1a9b\u1a9c\7\u015e\2\2\u1a9c\u1a9d\5\u051a"+
		"\u028e\2\u1a9d\u1a9e\7v\2\2\u1a9e\u1a9f\5\u0516\u028c\2\u1a9f\u1aa0\7"+
		"\u0152\2\2\u1aa0\u1aa1\7\u0084\2\2\u1aa1\u1aa2\5\u051a\u028e\2\u1aa2\u1b06"+
		"\3\2\2\2\u1aa3\u1aa4\7\u00b0\2\2\u1aa4\u1aa5\7\u0182\2\2\u1aa5\u1aa6\5"+
		"\u051a\u028e\2\u1aa6\u1aa7\7v\2\2\u1aa7\u1aa8\5\u0516\u028c\2\u1aa8\u1aa9"+
		"\7\u0152\2\2\u1aa9\u1aaa\7\u0084\2\2\u1aaa\u1aab\5\u051a\u028e\2\u1aab"+
		"\u1b06\3\2\2\2\u1aac\u1aad\7\u00b0\2\2\u1aad\u1aae\7\u00ec\2\2\u1aae\u1aaf"+
		"\7\u0182\2\2\u1aaf\u1ab0\5\u051a\u028e\2\u1ab0\u1ab1\7\u0152\2\2\u1ab1"+
		"\u1ab2\7\u0084\2\2\u1ab2\u1ab3\5\u051a\u028e\2\u1ab3\u1b06\3\2\2\2\u1ab4"+
		"\u1ab5\7\u00b0\2\2\u1ab5\u1ab6\7\u015b\2\2\u1ab6\u1ab7\5\u0534\u029b\2"+
		"\u1ab7\u1ab8\7\u0152\2\2\u1ab8\u1ab9\7\u0084\2\2\u1ab9\u1aba\5\u0534\u029b"+
		"\2\u1aba\u1b06\3\2\2\2\u1abb\u1abc\7\u00b0\2\2\u1abc\u1abd\7\u0089\2\2"+
		"\u1abd\u1abe\5\u0534\u029b\2\u1abe\u1abf\7\u0152\2\2\u1abf\u1ac0\7\u0084"+
		"\2\2\u1ac0\u1ac1\5\u0534\u029b\2\u1ac1\u1b06\3\2\2\2\u1ac2\u1ac3\7\u00b0"+
		"\2\2\u1ac3\u1ac4\7\u017c\2\2\u1ac4\u1ac5\5\u051a\u028e\2\u1ac5\u1ac6\7"+
		"\u0152\2\2\u1ac6\u1ac7\7\u0084\2\2\u1ac7\u1ac8\5\u051a\u028e\2\u1ac8\u1b06"+
		"\3\2\2\2\u1ac9\u1aca\7\u00b0\2\2\u1aca\u1acb\7\u0173\2\2\u1acb\u1acc\5"+
		"\u020e\u0108\2\u1acc\u1acd\7\u0152\2\2\u1acd\u1ace\7\u0084\2\2\u1ace\u1acf"+
		"\5\u051a\u028e\2\u1acf\u1b06\3\2\2\2\u1ad0\u1ad1\7\u00b0\2\2\u1ad1\u1ad2"+
		"\7\u0180\2\2\u1ad2\u1ad3\7\u0162\2\2\u1ad3\u1ad4\7\u0138\2\2\u1ad4\u1ad5"+
		"\5\u020e\u0108\2\u1ad5\u1ad6\7\u0152\2\2\u1ad6\u1ad7\7\u0084\2\2\u1ad7"+
		"\u1ad8\5\u051a\u028e\2\u1ad8\u1b06\3\2\2\2\u1ad9\u1ada\7\u00b0\2\2\u1ada"+
		"\u1adb\7\u0180\2\2\u1adb\u1adc\7\u0162\2\2\u1adc\u1add\7\u00df\2\2\u1add"+
		"\u1ade\5\u020e\u0108\2\u1ade\u1adf\7\u0152\2\2\u1adf\u1ae0\7\u0084\2\2"+
		"\u1ae0\u1ae1\5\u051a\u028e\2\u1ae1\u1b06\3\2\2\2\u1ae2\u1ae3\7\u00b0\2"+
		"\2\u1ae3\u1ae4\7\u0180\2\2\u1ae4\u1ae5\7\u0162\2\2\u1ae5\u1ae6\7\u017e"+
		"\2\2\u1ae6\u1ae7\5\u020e\u0108\2\u1ae7\u1ae8\7\u0152\2\2\u1ae8\u1ae9\7"+
		"\u0084\2\2\u1ae9\u1aea\5\u051a\u028e\2\u1aea\u1b06\3\2\2\2\u1aeb\u1aec"+
		"\7\u00b0\2\2\u1aec\u1aed\7\u0180\2\2\u1aed\u1aee\7\u0162\2\2\u1aee\u1aef"+
		"\7\u00c9\2\2\u1aef\u1af0\5\u020e\u0108\2\u1af0\u1af1\7\u0152\2\2\u1af1"+
		"\u1af2\7\u0084\2\2\u1af2\u1af3\5\u051a\u028e\2\u1af3\u1b06\3\2\2\2\u1af4"+
		"\u1af5\7\u00b0\2\2\u1af5\u1af6\7\u0185\2\2\u1af6\u1af7\5\u020e\u0108\2"+
		"\u1af7\u1af8\7\u0152\2\2\u1af8\u1af9\7\u0084\2\2\u1af9\u1afa\5\u051a\u028e"+
		"\2\u1afa\u1b06\3\2\2\2\u1afb\u1afc\7\u00b0\2\2\u1afc\u1afd\7\u0185\2\2"+
		"\u1afd\u1afe\5\u020e\u0108\2\u1afe\u1aff\7\u0152\2\2\u1aff\u1b00\7\u00b5"+
		"\2\2\u1b00\u1b01\5\u051a\u028e\2\u1b01\u1b02\7\u0084\2\2\u1b02\u1b03\5"+
		"\u051a\u028e\2\u1b03\u1b04\5n8\2\u1b04\u1b06\3\2\2\2\u1b05\u1931\3\2\2"+
		"\2\u1b05\u1938\3\2\2\2\u1b05\u193f\3\2\2\2\u1b05\u1946\3\2\2\2\u1b05\u194d"+
		"\3\2\2\2\u1b05\u1954\3\2\2\2\u1b05\u195d\3\2\2\2\u1b05\u1966\3\2\2\2\u1b05"+
		"\u196d\3\2\2\2\u1b05\u1974\3\2\2\2\u1b05\u197c\3\2\2\2\u1b05\u1986\3\2"+
		"\2\2\u1b05\u1990\3\2\2\2\u1b05\u1999\3\2\2\2\u1b05\u19a4\3\2\2\2\u1b05"+
		"\u19ab\3\2\2\2\u1b05\u19b2\3\2\2\2\u1b05\u19b9\3\2\2\2\u1b05\u19c0\3\2"+
		"\2\2\u1b05\u19c7\3\2\2\2\u1b05\u19ce\3\2\2\2\u1b05\u19d5\3\2\2\2\u1b05"+
		"\u19de\3\2\2\2\u1b05\u19e5\3\2\2\2\u1b05\u19ee\3\2\2\2\u1b05\u19f5\3\2"+
		"\2\2\u1b05\u19fe\3\2\2\2\u1b05\u1a06\3\2\2\2\u1b05\u1a10\3\2\2\2\u1b05"+
		"\u1a17\3\2\2\2\u1b05\u1a20\3\2\2\2\u1b05\u1a28\3\2\2\2\u1b05\u1a32\3\2"+
		"\2\2\u1b05\u1a3b\3\2\2\2\u1b05\u1a46\3\2\2\2\u1b05\u1a4f\3\2\2\2\u1b05"+
		"\u1a5a\3\2\2\2\u1b05\u1a64\3\2\2\2\u1b05\u1a70\3\2\2\2\u1b05\u1a79\3\2"+
		"\2\2\u1b05\u1a84\3\2\2\2\u1b05\u1a8e\3\2\2\2\u1b05\u1a9a\3\2\2\2\u1b05"+
		"\u1aa3\3\2\2\2\u1b05\u1aac\3\2\2\2\u1b05\u1ab4\3\2\2\2\u1b05\u1abb\3\2"+
		"\2\2\u1b05\u1ac2\3\2\2\2\u1b05\u1ac9\3\2\2\2\u1b05\u1ad0\3\2\2\2\u1b05"+
		"\u1ad9\3\2\2\2\u1b05\u1ae2\3\2\2\2\u1b05\u1aeb\3\2\2\2\u1b05\u1af4\3\2"+
		"\2\2\u1b05\u1afb\3\2\2\2\u1b06\u02d5\3\2\2\2\u1b07\u1b0a\7R\2\2\u1b08"+
		"\u1b0a\3\2\2\2\u1b09\u1b07\3\2\2\2\u1b09\u1b08\3\2\2\2\u1b0a\u02d7\3\2"+
		"\2\2\u1b0b\u1b0c\7\u016a\2\2\u1b0c\u1b0f\7\u00d4\2\2\u1b0d\u1b0f\3\2\2"+
		"\2\u1b0e\u1b0b\3\2\2\2\u1b0e\u1b0d\3\2\2\2\u1b0f\u02d9\3\2\2\2\u1b10\u1b11"+
		"\7\u00b0\2\2\u1b11\u1b12\7\u00f9\2\2\u1b12\u1b13\5\u0274\u013b\2\u1b13"+
		"\u1b14\5\u02dc\u016f\2\u1b14\u1b15\7\u01ec\2\2\u1b15\u1b16\7v\2\2\u1b16"+
		"\u1b17\7\u00f2\2\2\u1b17\u1b18\5\u051a\u028e\2\u1b18\u1b4a\3\2\2\2\u1b19"+
		"\u1b1a\7\u00b0\2\2\u1b1a\u1b1b\7\u0145\2\2\u1b1b\u1b1c\5\u0274\u013b\2"+
		"\u1b1c\u1b1d\5\u02dc\u016f\2\u1b1d\u1b1e\7\u01ec\2\2\u1b1e\u1b1f\7v\2"+
		"\2\u1b1f\u1b20\7\u00f2\2\2\u1b20\u1b21\5\u051a\u028e\2\u1b21\u1b4a\3\2"+
		"\2\2\u1b22\u1b23\7\u00b0\2\2\u1b23\u1b24\7\u01d8\2\2\u1b24\u1b25\5\u0274"+
		"\u013b\2\u1b25\u1b26\5\u02dc\u016f\2\u1b26\u1b27\7\u01ec\2\2\u1b27\u1b28"+
		"\7v\2\2\u1b28\u1b29\7\u00f2\2\2\u1b29\u1b2a\5\u051a\u028e\2\u1b2a\u1b4a"+
		"\3\2\2\2\u1b2b\u1b2c\7\u00b0\2\2\u1b2c\u1b2d\7\u0182\2\2\u1b2d\u1b2e\5"+
		"\u051a\u028e\2\u1b2e\u1b2f\7v\2\2\u1b2f\u1b30\5\u0516\u028c\2\u1b30\u1b31"+
		"\5\u02dc\u016f\2\u1b31\u1b32\7\u01ec\2\2\u1b32\u1b33\7v\2\2\u1b33\u1b34"+
		"\7\u00f2\2\2\u1b34\u1b35\5\u051a\u028e\2\u1b35\u1b4a\3\2\2\2\u1b36\u1b37"+
		"\7\u00b0\2\2\u1b37\u1b38\7\u0120\2\2\u1b38\u1b39\7\u0195\2\2\u1b39\u1b3a"+
		"\5\u0516\u028c\2\u1b3a\u1b3b\5\u02dc\u016f\2\u1b3b\u1b3c\7\u01ec\2\2\u1b3c"+
		"\u1b3d\7v\2\2\u1b3d\u1b3e\7\u00f2\2\2\u1b3e\u1b3f\5\u051a\u028e\2\u1b3f"+
		"\u1b4a\3\2\2\2\u1b40\u1b41\7\u00b0\2\2\u1b41\u1b42\7\u0108\2\2\u1b42\u1b43"+
		"\5\u0516\u028c\2\u1b43\u1b44\5\u02dc\u016f\2\u1b44\u1b45\7\u01ec\2\2\u1b45"+
		"\u1b46\7v\2\2\u1b46\u1b47\7\u00f2\2\2\u1b47\u1b48\5\u051a\u028e\2\u1b48"+
		"\u1b4a\3\2\2\2\u1b49\u1b10\3\2\2\2\u1b49\u1b19\3\2\2\2\u1b49\u1b22\3\2"+
		"\2\2\u1b49\u1b2b\3\2\2\2\u1b49\u1b36\3\2\2\2\u1b49\u1b40\3\2\2\2\u1b4a"+
		"\u02db\3\2\2\2\u1b4b\u1b4e\7\u012a\2\2\u1b4c\u1b4e\3\2\2\2\u1b4d\u1b4b"+
		"\3\2\2\2\u1b4d\u1b4c\3\2\2\2\u1b4e\u02dd\3\2\2\2\u1b4f\u1b50\7\u00b0\2"+
		"\2\u1b50\u1b51\7\u00ae\2\2\u1b51\u1b52\5\u028c\u0147\2\u1b52\u1b53\7\u016a"+
		"\2\2\u1b53\u1b54\7\u0160\2\2\u1b54\u1b55\5\u051a\u028e\2\u1b55\u1c29\3"+
		"\2\2\2\u1b56\u1b57\7\u00b0\2\2\u1b57\u1b58\7\u0092\2\2\u1b58\u1b59\5\u020e"+
		"\u0108\2\u1b59\u1b5a\7\u016a\2\2\u1b5a\u1b5b\7\u0160\2\2\u1b5b\u1b5c\5"+
		"\u051a\u028e\2\u1b5c\u1c29\3\2\2\2\u1b5d\u1b5e\7\u00b0\2\2\u1b5e\u1b5f"+
		"\7\u00ce\2\2\u1b5f\u1b60\5\u020e\u0108\2\u1b60\u1b61\7\u016a\2\2\u1b61"+
		"\u1b62\7\u0160\2\2\u1b62\u1b63\5\u051a\u028e\2\u1b63\u1c29\3\2\2\2\u1b64"+
		"\u1b65\7\u00b0\2\2\u1b65\u1b66\7\u00e3\2\2\u1b66\u1b67\5\u020e\u0108\2"+
		"\u1b67\u1b68\7\u016a\2\2\u1b68\u1b69\7\u0160\2\2\u1b69\u1b6a\5\u051a\u028e"+
		"\2\u1b6a\u1c29\3\2\2\2\u1b6b\u1b6c\7\u00b0\2\2\u1b6c\u1b6d\7\u00f2\2\2"+
		"\u1b6d\u1b6e\5\u051a\u028e\2\u1b6e\u1b6f\7\u016a\2\2\u1b6f\u1b70\7\u0160"+
		"\2\2\u1b70\u1b71\5\u051a\u028e\2\u1b71\u1c29\3\2\2\2\u1b72\u1b73\7\u00b0"+
		"\2\2\u1b73\u1b74\7\u00f9\2\2\u1b74\u1b75\5\u0274\u013b\2\u1b75\u1b76\7"+
		"\u016a\2\2\u1b76\u1b77\7\u0160\2\2\u1b77\u1b78\5\u051a\u028e\2\u1b78\u1c29"+
		"\3\2\2\2\u1b79\u1b7a\7\u00b0\2\2\u1b7a\u1b7b\7\u0133\2\2\u1b7b\u1b7c\5"+
		"\u02b2\u015a\2\u1b7c\u1b7d\7\u016a\2\2\u1b7d\u1b7e\7\u0160\2\2\u1b7e\u1b7f"+
		"\5\u051a\u028e\2\u1b7f\u1c29\3\2\2\2\u1b80\u1b81\7\u00b0\2\2\u1b81\u1b82"+
		"\7\u0133\2\2\u1b82\u1b83\7\u00c2\2\2\u1b83\u1b84\5\u020e\u0108\2\u1b84"+
		"\u1b85\7\u008a\2\2\u1b85\u1b86\5\u051a\u028e\2\u1b86\u1b87\7\u016a\2\2"+
		"\u1b87\u1b88\7\u0160\2\2\u1b88\u1b89\5\u051a\u028e\2\u1b89\u1c29\3\2\2"+
		"\2\u1b8a\u1b8b\7\u00b0\2\2\u1b8b\u1b8c\7\u0133\2\2\u1b8c\u1b8d\7\u00f4"+
		"\2\2\u1b8d\u1b8e\5\u020e\u0108\2\u1b8e\u1b8f\7\u008a\2\2\u1b8f\u1b90\5"+
		"\u051a\u028e\2\u1b90\u1b91\7\u016a\2\2\u1b91\u1b92\7\u0160\2\2\u1b92\u1b93"+
		"\5\u051a\u028e\2\u1b93\u1c29\3\2\2\2\u1b94\u1b95\7\u00b0\2\2\u1b95\u1b96"+
		"\7\u0145\2\2\u1b96\u1b97\5\u0274\u013b\2\u1b97\u1b98\7\u016a\2\2\u1b98"+
		"\u1b99\7\u0160\2\2\u1b99\u1b9a\5\u051a\u028e\2\u1b9a\u1c29\3\2\2\2\u1b9b"+
		"\u1b9c\7\u00b0\2\2\u1b9c\u1b9d\7\u01d8\2\2\u1b9d\u1b9e\5\u0274\u013b\2"+
		"\u1b9e\u1b9f\7\u016a\2\2\u1b9f\u1ba0\7\u0160\2\2\u1ba0\u1ba1\5\u051a\u028e"+
		"\2\u1ba1\u1c29\3\2\2\2\u1ba2\u1ba3\7\u00b0\2\2\u1ba3\u1ba4\7\u0082\2\2"+
		"\u1ba4\u1ba5\5\u042c\u0217\2\u1ba5\u1ba6\7\u016a\2\2\u1ba6\u1ba7\7\u0160"+
		"\2\2\u1ba7\u1ba8\5\u051a\u028e\2\u1ba8\u1c29\3\2\2\2\u1ba9\u1baa\7\u00b0"+
		"\2\2\u1baa\u1bab\7\u0082\2\2\u1bab\u1bac\7\u0102\2\2\u1bac\u1bad\7\u01a9"+
		"\2\2\u1bad\u1bae\5\u042c\u0217\2\u1bae\u1baf\7\u016a\2\2\u1baf\u1bb0\7"+
		"\u0160\2\2\u1bb0\u1bb1\5\u051a\u028e\2\u1bb1\u1c29\3\2\2\2\u1bb2\u1bb3"+
		"\7\u00b0\2\2\u1bb3\u1bb4\7\u0173\2\2\u1bb4\u1bb5\5\u020e\u0108\2\u1bb5"+
		"\u1bb6\7\u016a\2\2\u1bb6\u1bb7\7\u0160\2\2\u1bb7\u1bb8\5\u051a\u028e\2"+
		"\u1bb8\u1c29\3\2\2\2\u1bb9\u1bba\7\u00b0\2\2\u1bba\u1bbb\7\u0180\2\2\u1bbb"+
		"\u1bbc\7\u0162\2\2\u1bbc\u1bbd\7\u0138\2\2\u1bbd\u1bbe\5\u020e\u0108\2"+
		"\u1bbe\u1bbf\7\u016a\2\2\u1bbf\u1bc0\7\u0160\2\2\u1bc0\u1bc1\5\u051a\u028e"+
		"\2\u1bc1\u1c29\3\2\2\2\u1bc2\u1bc3\7\u00b0\2\2\u1bc3\u1bc4\7\u0180\2\2"+
		"\u1bc4\u1bc5\7\u0162\2\2\u1bc5\u1bc6\7\u00df\2\2\u1bc6\u1bc7\5\u020e\u0108"+
		"\2\u1bc7\u1bc8\7\u016a\2\2\u1bc8\u1bc9\7\u0160\2\2\u1bc9\u1bca\5\u051a"+
		"\u028e\2\u1bca\u1c29\3\2\2\2\u1bcb\u1bcc\7\u00b0\2\2\u1bcc\u1bcd\7\u0180"+
		"\2\2\u1bcd\u1bce\7\u0162\2\2\u1bce\u1bcf\7\u017e\2\2\u1bcf\u1bd0\5\u020e"+
		"\u0108\2\u1bd0\u1bd1\7\u016a\2\2\u1bd1\u1bd2\7\u0160\2\2\u1bd2\u1bd3\5"+
		"\u051a\u028e\2\u1bd3\u1c29\3\2\2\2\u1bd4\u1bd5\7\u00b0\2\2\u1bd5\u1bd6"+
		"\7\u0180\2\2\u1bd6\u1bd7\7\u0162\2\2\u1bd7\u1bd8\7\u00c9\2\2\u1bd8\u1bd9"+
		"\5\u020e\u0108\2\u1bd9\u1bda\7\u016a\2\2\u1bda\u1bdb\7\u0160\2\2\u1bdb"+
		"\u1bdc\5\u051a\u028e\2\u1bdc\u1c29\3\2\2\2\u1bdd\u1bde\7\u00b0\2\2\u1bde"+
		"\u1bdf\7\u0165\2\2\u1bdf\u1be0\5\u0516\u028c\2\u1be0\u1be1\7\u016a\2\2"+
		"\u1be1\u1be2\7\u0160\2\2\u1be2\u1be3\5\u051a\u028e\2\u1be3\u1c29\3\2\2"+
		"\2\u1be4\u1be5\7\u00b0\2\2\u1be5\u1be6\7\u0165\2\2\u1be6\u1be7\7\u0102"+
		"\2\2\u1be7\u1be8\7\u01a9\2\2\u1be8\u1be9\5\u0516\u028c\2\u1be9\u1bea\7"+
		"\u016a\2\2\u1bea\u1beb\7\u0160\2\2\u1beb\u1bec\5\u051a\u028e\2\u1bec\u1c29"+
		"\3\2\2\2\u1bed\u1bee\7\u00b0\2\2\u1bee\u1bef\7\u0195\2\2\u1bef\u1bf0\5"+
		"\u0516\u028c\2\u1bf0\u1bf1\7\u016a\2\2\u1bf1\u1bf2\7\u0160\2\2\u1bf2\u1bf3"+
		"\5\u051a\u028e\2\u1bf3\u1c29\3\2\2\2\u1bf4\u1bf5\7\u00b0\2\2\u1bf5\u1bf6"+
		"\7\u0195\2\2\u1bf6\u1bf7\7\u0102\2\2\u1bf7\u1bf8\7\u01a9\2\2\u1bf8\u1bf9"+
		"\5\u0516\u028c\2\u1bf9\u1bfa\7\u016a\2\2\u1bfa\u1bfb\7\u0160\2\2\u1bfb"+
		"\u1bfc\5\u051a\u028e\2\u1bfc\u1c29\3\2\2\2\u1bfd\u1bfe\7\u00b0\2\2\u1bfe"+
		"\u1bff\7\u0120\2\2\u1bff\u1c00\7\u0195\2\2\u1c00\u1c01\5\u0516\u028c\2"+
		"\u1c01\u1c02\7\u016a\2\2\u1c02\u1c03\7\u0160\2\2\u1c03\u1c04\5\u051a\u028e"+
		"\2\u1c04\u1c29\3\2\2\2\u1c05\u1c06\7\u00b0\2\2\u1c06\u1c07\7\u0120\2\2"+
		"\u1c07\u1c08\7\u0195\2\2\u1c08\u1c09\7\u0102\2\2\u1c09\u1c0a\7\u01a9\2"+
		"\2\u1c0a\u1c0b\5\u0516\u028c\2\u1c0b\u1c0c\7\u016a\2\2\u1c0c\u1c0d\7\u0160"+
		"\2\2\u1c0d\u1c0e\5\u051a\u028e\2\u1c0e\u1c29\3\2\2\2\u1c0f\u1c10\7\u00b0"+
		"\2\2\u1c10\u1c11\7e\2\2\u1c11\u1c12\7\u0082\2\2\u1c12\u1c13\5\u042c\u0217"+
		"\2\u1c13\u1c14\7\u016a\2\2\u1c14\u1c15\7\u0160\2\2\u1c15\u1c16\5\u051a"+
		"\u028e\2\u1c16\u1c29\3\2\2\2\u1c17\u1c18\7\u00b0\2\2\u1c18\u1c19\7e\2"+
		"\2\u1c19\u1c1a\7\u0082\2\2\u1c1a\u1c1b\7\u0102\2\2\u1c1b\u1c1c\7\u01a9"+
		"\2\2\u1c1c\u1c1d\5\u042c\u0217\2\u1c1d\u1c1e\7\u016a\2\2\u1c1e\u1c1f\7"+
		"\u0160\2\2\u1c1f\u1c20\5\u051a\u028e\2\u1c20\u1c29\3\2\2\2\u1c21\u1c22"+
		"\7\u00b0\2\2\u1c22\u1c23\7\u0185\2\2\u1c23\u1c24\5\u020e\u0108\2\u1c24"+
		"\u1c25\7\u016a\2\2\u1c25\u1c26\7\u0160\2\2\u1c26\u1c27\5\u051a\u028e\2"+
		"\u1c27\u1c29\3\2\2\2\u1c28\u1b4f\3\2\2\2\u1c28\u1b56\3\2\2\2\u1c28\u1b5d"+
		"\3\2\2\2\u1c28\u1b64\3\2\2\2\u1c28\u1b6b\3\2\2\2\u1c28\u1b72\3\2\2\2\u1c28"+
		"\u1b79\3\2\2\2\u1c28\u1b80\3\2\2\2\u1c28\u1b8a\3\2\2\2\u1c28\u1b94\3\2"+
		"\2\2\u1c28\u1b9b\3\2\2\2\u1c28\u1ba2\3\2\2\2\u1c28\u1ba9\3\2\2\2\u1c28"+
		"\u1bb2\3\2\2\2\u1c28\u1bb9\3\2\2\2\u1c28\u1bc2\3\2\2\2\u1c28\u1bcb\3\2"+
		"\2\2\u1c28\u1bd4\3\2\2\2\u1c28\u1bdd\3\2\2\2\u1c28\u1be4\3\2\2\2\u1c28"+
		"\u1bed\3\2\2\2\u1c28\u1bf4\3\2\2\2\u1c28\u1bfd\3\2\2\2\u1c28\u1c05\3\2"+
		"\2\2\u1c28\u1c0f\3\2\2\2\u1c28\u1c17\3\2\2\2\u1c28\u1c21\3\2\2\2\u1c29"+
		"\u02df\3\2\2\2\u1c2a\u1c2b\7\u00b0\2\2\u1c2b\u1c2c\7\u0133\2\2\u1c2c\u1c2d"+
		"\5\u02b2\u015a\2\u1c2d\u1c2e\7\u016a\2\2\u1c2e\u1c2f\7\4\2\2\u1c2f\u1c30"+
		"\5\u02e2\u0172\2\u1c30\u1c31\7\5\2\2\u1c31\u02e1\3\2\2\2\u1c32\u1c33\b"+
		"\u0172\1\2\u1c33\u1c34\5\u02e4\u0173\2\u1c34\u1c3a\3\2\2\2\u1c35\u1c36"+
		"\f\3\2\2\u1c36\u1c37\7\b\2\2\u1c37\u1c39\5\u02e4\u0173\2\u1c38\u1c35\3"+
		"\2\2\2\u1c39\u1c3c\3\2\2\2\u1c3a\u1c38\3\2\2\2\u1c3a\u1c3b\3\2\2\2\u1c3b"+
		"\u02e3\3\2\2\2\u1c3c\u1c3a\3\2\2\2\u1c3d\u1c3e\5\u0540\u02a1\2\u1c3e\u1c3f"+
		"\7\f\2\2\u1c3f\u1c40\7\u01b4\2\2\u1c40\u1c46\3\2\2\2\u1c41\u1c42\5\u0540"+
		"\u02a1\2\u1c42\u1c43\7\f\2\2\u1c43\u1c44\5\u02e6\u0174\2\u1c44\u1c46\3"+
		"\2\2\2\u1c45\u1c3d\3\2\2\2\u1c45\u1c41\3\2\2\2\u1c46\u02e5\3\2\2\2\u1c47"+
		"\u1c51\5\u0282\u0142\2\u1c48\u1c51\5\u054c\u02a7\2\u1c49\u1c4b\5\u04d8"+
		"\u026d\2\u1c4a\u1c49\3\2\2\2\u1c4b\u1c4c\3\2\2\2\u1c4c\u1c4a\3\2\2\2\u1c4c"+
		"\u1c4d\3\2\2\2\u1c4d\u1c51\3\2\2\2\u1c4e\u1c51\5\u0126\u0094\2\u1c4f\u1c51"+
		"\5\u052c\u0297\2\u1c50\u1c47\3\2\2\2\u1c50\u1c48\3\2\2\2\u1c50\u1c4a\3"+
		"\2\2\2\u1c50\u1c4e\3\2\2\2\u1c50\u1c4f\3\2\2\2\u1c51\u02e7\3\2\2\2\u1c52"+
		"\u1c53\7\u00b0\2\2\u1c53\u1c54\7\u0185\2\2\u1c54\u1c55\5\u020e\u0108\2"+
		"\u1c55\u1c56\7\u016a\2\2\u1c56\u1c57\7\4\2\2\u1c57\u1c58\5\u02e2\u0172"+
		"\2\u1c58\u1c59\7\5\2\2\u1c59\u02e9\3\2\2\2\u1c5a\u1c5b\7\u00b0\2\2\u1c5b"+
		"\u1c5c\7\u00ae\2\2\u1c5c\u1c5d\5\u028c\u0147\2\u1c5d\u1c5e\7\u0137\2\2"+
		"\u1c5e\u1c5f\7\u0084\2\2\u1c5f\u1c60\5\u0536\u029c\2\u1c60\u1d12\3\2\2"+
		"\2\u1c61\u1c62\7\u00b0\2\2\u1c62\u1c63\7\u0092\2\2\u1c63\u1c64\5\u020e"+
		"\u0108\2\u1c64\u1c65\7\u0137\2\2\u1c65\u1c66\7\u0084\2\2\u1c66\u1c67\5"+
		"\u0536\u029c\2\u1c67\u1d12\3\2\2\2\u1c68\u1c69\7\u00b0\2\2\u1c69\u1c6a"+
		"\7\u00ce\2\2\u1c6a\u1c6b\5\u020e\u0108\2\u1c6b\u1c6c\7\u0137\2\2\u1c6c"+
		"\u1c6d\7\u0084\2\2\u1c6d\u1c6e\5\u0536\u029c\2\u1c6e\u1d12\3\2\2\2\u1c6f"+
		"\u1c70\7\u00b0\2\2\u1c70\u1c71\7\u00d5\2\2\u1c71\u1c72\5\u051a\u028e\2"+
		"\u1c72\u1c73\7\u0137\2\2\u1c73\u1c74\7\u0084\2\2\u1c74\u1c75\5\u0536\u029c"+
		"\2\u1c75\u1d12\3\2\2\2\u1c76\u1c77\7\u00b0\2\2\u1c77\u1c78\7\u00e3\2\2"+
		"\u1c78\u1c79\5\u020e\u0108\2\u1c79\u1c7a\7\u0137\2\2\u1c7a\u1c7b\7\u0084"+
		"\2\2\u1c7b\u1c7c\5\u0536\u029c\2\u1c7c\u1d12\3\2\2\2\u1c7d\u1c7e\7\u00b0"+
		"\2\2\u1c7e\u1c7f\7\u00f9\2\2\u1c7f\u1c80\5\u0274\u013b\2\u1c80\u1c81\7"+
		"\u0137\2\2\u1c81\u1c82\7\u0084\2\2\u1c82\u1c83\5\u0536\u029c\2\u1c83\u1d12"+
		"\3\2\2\2\u1c84\u1c85\7\u00b0\2\2\u1c85\u1c86\5\u0136\u009c\2\u1c86\u1c87"+
		"\7\u0114\2\2\u1c87\u1c88\5\u051a\u028e\2\u1c88\u1c89\7\u0137\2\2\u1c89"+
		"\u1c8a\7\u0084\2\2\u1c8a\u1c8b\5\u0536\u029c\2\u1c8b\u1d12\3\2\2\2\u1c8c"+
		"\u1c8d\7\u00b0\2\2\u1c8d\u1c8e\7\u0115\2\2\u1c8e\u1c8f\7\u012f\2\2\u1c8f"+
		"\u1c90\5\u0126\u0094\2\u1c90\u1c91\7\u0137\2\2\u1c91\u1c92\7\u0084\2\2"+
		"\u1c92\u1c93\5\u0536\u029c\2\u1c93\u1d12\3\2\2\2\u1c94\u1c95\7\u00b0\2"+
		"\2\u1c95\u1c96\7\u0133\2\2\u1c96\u1c97\5\u02b2\u015a\2\u1c97\u1c98\7\u0137"+
		"\2\2\u1c98\u1c99\7\u0084\2\2\u1c99\u1c9a\5\u0536\u029c\2\u1c9a\u1d12\3"+
		"\2\2\2\u1c9b\u1c9c\7\u00b0\2\2\u1c9c\u1c9d\7\u0133\2\2\u1c9d\u1c9e\7\u00c2"+
		"\2\2\u1c9e\u1c9f\5\u020e\u0108\2\u1c9f\u1ca0\7\u008a\2\2\u1ca0\u1ca1\5"+
		"\u051a\u028e\2\u1ca1\u1ca2\7\u0137\2\2\u1ca2\u1ca3\7\u0084\2\2\u1ca3\u1ca4"+
		"\5\u0536\u029c\2\u1ca4\u1d12\3\2\2\2\u1ca5\u1ca6\7\u00b0\2\2\u1ca6\u1ca7"+
		"\7\u0133\2\2\u1ca7\u1ca8\7\u00f4\2\2\u1ca8\u1ca9\5\u020e\u0108\2\u1ca9"+
		"\u1caa\7\u008a\2\2\u1caa\u1cab\5\u051a\u028e\2\u1cab\u1cac\7\u0137\2\2"+
		"\u1cac\u1cad\7\u0084\2\2\u1cad\u1cae\5\u0536\u029c\2\u1cae\u1d12\3\2\2"+
		"\2\u1caf\u1cb0\7\u00b0\2\2\u1cb0\u1cb1\7\u0145\2\2\u1cb1\u1cb2\5\u0274"+
		"\u013b\2\u1cb2\u1cb3\7\u0137\2\2\u1cb3\u1cb4\7\u0084\2\2\u1cb4\u1cb5\5"+
		"\u0536\u029c\2\u1cb5\u1d12\3\2\2\2\u1cb6\u1cb7\7\u00b0\2\2\u1cb7\u1cb8"+
		"\7\u01d8\2\2\u1cb8\u1cb9\5\u0274\u013b\2\u1cb9\u1cba\7\u0137\2\2\u1cba"+
		"\u1cbb\7\u0084\2\2\u1cbb\u1cbc\5\u0536\u029c\2\u1cbc\u1d12\3\2\2\2\u1cbd"+
		"\u1cbe\7\u00b0\2\2\u1cbe\u1cbf\7\u0160\2\2\u1cbf\u1cc0\5\u051a\u028e\2"+
		"\u1cc0\u1cc1\7\u0137\2\2\u1cc1\u1cc2\7\u0084\2\2\u1cc2\u1cc3\5\u0536\u029c"+
		"\2\u1cc3\u1d12\3\2\2\2\u1cc4\u1cc5\7\u00b0\2\2\u1cc5\u1cc6\7\u0185\2\2"+
		"\u1cc6\u1cc7\5\u020e\u0108\2\u1cc7\u1cc8\7\u0137\2\2\u1cc8\u1cc9\7\u0084"+
		"\2\2\u1cc9\u1cca\5\u0536\u029c\2\u1cca\u1d12\3\2\2\2\u1ccb\u1ccc\7\u00b0"+
		"\2\2\u1ccc\u1ccd\7\u017c\2\2\u1ccd\u1cce\5\u051a\u028e\2\u1cce\u1ccf\7"+
		"\u0137\2\2\u1ccf\u1cd0\7\u0084\2\2\u1cd0\u1cd1\5\u0536\u029c\2\u1cd1\u1d12"+
		"\3\2\2\2\u1cd2\u1cd3\7\u00b0\2\2\u1cd3\u1cd4\7\u0173\2\2\u1cd4\u1cd5\5"+
		"\u020e\u0108\2\u1cd5\u1cd6\7\u0137\2\2\u1cd6\u1cd7\7\u0084\2\2\u1cd7\u1cd8"+
		"\5\u0536\u029c\2\u1cd8\u1d12\3\2\2\2\u1cd9\u1cda\7\u00b0\2\2\u1cda\u1cdb"+
		"\7\u0180\2\2\u1cdb\u1cdc\7\u0162\2\2\u1cdc\u1cdd\7\u00df\2\2\u1cdd\u1cde"+
		"\5\u020e\u0108\2\u1cde\u1cdf\7\u0137\2\2\u1cdf\u1ce0\7\u0084\2\2\u1ce0"+
		"\u1ce1\5\u0536\u029c\2\u1ce1\u1d12\3\2\2\2\u1ce2\u1ce3\7\u00b0\2\2\u1ce3"+
		"\u1ce4\7\u0180\2\2\u1ce4\u1ce5\7\u0162\2\2\u1ce5\u1ce6\7\u00c9\2\2\u1ce6"+
		"\u1ce7\5\u020e\u0108\2\u1ce7\u1ce8\7\u0137\2\2\u1ce8\u1ce9\7\u0084\2\2"+
		"\u1ce9\u1cea\5\u0536\u029c\2\u1cea\u1d12\3\2\2\2\u1ceb\u1cec\7\u00b0\2"+
		"\2\u1cec\u1ced\7e\2\2\u1ced\u1cee\7\u00d4\2\2\u1cee\u1cef\7\u019a\2\2"+
		"\u1cef\u1cf0\5\u051a\u028e\2\u1cf0\u1cf1\7\u0137\2\2\u1cf1\u1cf2\7\u0084"+
		"\2\2\u1cf2\u1cf3\5\u0536\u029c\2\u1cf3\u1d12\3\2\2\2\u1cf4\u1cf5\7\u00b0"+
		"\2\2\u1cf5\u1cf6\7\u0168\2\2\u1cf6\u1cf7\5\u051a\u028e\2\u1cf7\u1cf8\7"+
		"\u0137\2\2\u1cf8\u1cf9\7\u0084\2\2\u1cf9\u1cfa\5\u0536\u029c\2\u1cfa\u1d12"+
		"\3\2\2\2\u1cfb\u1cfc\7\u00b0\2\2\u1cfc\u1cfd\7\u00ec\2\2\u1cfd\u1cfe\7"+
		"\u0182\2\2\u1cfe\u1cff\5\u051a\u028e\2\u1cff\u1d00\7\u0137\2\2\u1d00\u1d01"+
		"\7\u0084\2\2\u1d01\u1d02\5\u0536\u029c\2\u1d02\u1d12\3\2\2\2\u1d03\u1d04"+
		"\7\u00b0\2\2\u1d04\u1d05\7\u01e2\2\2\u1d05\u1d06\5\u051a\u028e\2\u1d06"+
		"\u1d07\7\u0137\2\2\u1d07\u1d08\7\u0084\2\2\u1d08\u1d09\5\u0536\u029c\2"+
		"\u1d09\u1d12\3\2\2\2\u1d0a\u1d0b\7\u00b0\2\2\u1d0b\u1d0c\7\u01e1\2\2\u1d0c"+
		"\u1d0d\5\u051a\u028e\2\u1d0d\u1d0e\7\u0137\2\2\u1d0e\u1d0f\7\u0084\2\2"+
		"\u1d0f\u1d10\5\u0536\u029c\2\u1d10\u1d12\3\2\2\2\u1d11\u1c5a\3\2\2\2\u1d11"+
		"\u1c61\3\2\2\2\u1d11\u1c68\3\2\2\2\u1d11\u1c6f\3\2\2\2\u1d11\u1c76\3\2"+
		"\2\2\u1d11\u1c7d\3\2\2\2\u1d11\u1c84\3\2\2\2\u1d11\u1c8c\3\2\2\2\u1d11"+
		"\u1c94\3\2\2\2\u1d11\u1c9b\3\2\2\2\u1d11\u1ca5\3\2\2\2\u1d11\u1caf\3\2"+
		"\2\2\u1d11\u1cb6\3\2\2\2\u1d11\u1cbd\3\2\2\2\u1d11\u1cc4\3\2\2\2\u1d11"+
		"\u1ccb\3\2\2\2\u1d11\u1cd2\3\2\2\2\u1d11\u1cd9\3\2\2\2\u1d11\u1ce2\3\2"+
		"\2\2\u1d11\u1ceb\3\2\2\2\u1d11\u1cf4\3\2\2\2\u1d11\u1cfb\3\2\2\2\u1d11"+
		"\u1d03\3\2\2\2\u1d11\u1d0a\3\2\2\2\u1d12\u02eb\3\2\2\2\u1d13\u1d14\7T"+
		"\2\2\u1d14\u1d15\7\u01e2\2\2\u1d15\u1d16\5\u051a\u028e\2\u1d16\u1d17\5"+
		"\u02ee\u0178\2\u1d17\u1d18\5\u029a\u014e\2\u1d18\u02ed\3\2\2\2\u1d19\u1d1c"+
		"\5\u02f0\u0179\2\u1d1a\u1d1c\3\2\2\2\u1d1b\u1d19\3\2\2\2\u1d1b\u1d1a\3"+
		"\2\2\2\u1d1c\u02ef\3\2\2\2\u1d1d\u1d1e\7d\2\2\u1d1e\u1d1f\7\u0082\2\2"+
		"\u1d1f\u1d24\5\u042e\u0218\2\u1d20\u1d21\7d\2\2\u1d21\u1d22\7D\2\2\u1d22"+
		"\u1d24\7\u017b\2\2\u1d23\u1d1d\3\2\2\2\u1d23\u1d20\3\2\2\2\u1d24\u02f1"+
		"\3\2\2\2\u1d25\u1d26\7\u00b0\2\2\u1d26\u1d27\7\u01e2\2\2\u1d27\u1d28\5"+
		"\u051a\u028e\2\u1d28\u1d29\7\u016a\2\2\u1d29\u1d2a\5\u01ce\u00e8\2\u1d2a"+
		"\u1d41\3\2\2\2\u1d2b\u1d2c\7\u00b0\2\2\u1d2c\u1d2d\7\u01e2\2\2\u1d2d\u1d2e"+
		"\5\u051a\u028e\2\u1d2e\u1d2f\7\u00ab\2\2\u1d2f\u1d30\7\u0082\2\2\u1d30"+
		"\u1d31\5\u042e\u0218\2\u1d31\u1d41\3\2\2\2\u1d32\u1d33\7\u00b0\2\2\u1d33"+
		"\u1d34\7\u01e2\2\2\u1d34\u1d35\5\u051a\u028e\2\u1d35\u1d36\7\u016a\2\2"+
		"\u1d36\u1d37\7\u0082\2\2\u1d37\u1d38\5\u042e\u0218\2\u1d38\u1d41\3\2\2"+
		"\2\u1d39\u1d3a\7\u00b0\2\2\u1d3a\u1d3b\7\u01e2\2\2\u1d3b\u1d3c\5\u051a"+
		"\u028e\2\u1d3c\u1d3d\7\u00e5\2\2\u1d3d\u1d3e\7\u0082\2\2\u1d3e\u1d3f\5"+
		"\u042e\u0218\2\u1d3f\u1d41\3\2\2\2\u1d40\u1d25\3\2\2\2\u1d40\u1d2b\3\2"+
		"\2\2\u1d40\u1d32\3\2\2\2\u1d40\u1d39\3\2\2\2\u1d41\u02f3\3\2\2\2\u1d42"+
		"\u1d43\7T\2\2\u1d43\u1d44\7\u01e1\2\2\u1d44\u1d45\5\u051a\u028e\2\u1d45"+
		"\u1d46\7\u00ca\2\2\u1d46\u1d47\5\u052c\u0297\2\u1d47\u1d48\7\u01e2\2\2"+
		"\u1d48\u1d49\5\u02f6\u017c\2\u1d49\u1d4a\5\u029a\u014e\2\u1d4a\u02f5\3"+
		"\2\2\2\u1d4b\u1d4c\b\u017c\1\2\u1d4c\u1d4d\5\u02f8\u017d\2\u1d4d\u1d53"+
		"\3\2\2\2\u1d4e\u1d4f\f\3\2\2\u1d4f\u1d50\7\b\2\2\u1d50\u1d52\5\u02f8\u017d"+
		"\2\u1d51\u1d4e\3\2\2\2\u1d52\u1d55\3\2\2\2\u1d53\u1d51\3\2\2\2\u1d53\u1d54"+
		"\3\2\2\2\u1d54\u02f7\3\2\2\2\u1d55\u1d53\3\2\2\2\u1d56\u1d57\5\u0540\u02a1"+
		"\2\u1d57\u02f9\3\2\2\2\u1d58\u1d59\7\u00b0\2\2\u1d59\u1d5a\7\u01e1\2\2"+
		"\u1d5a\u1d5b\5\u051a\u028e\2\u1d5b\u1d5c\7\u016a\2\2\u1d5c\u1d5d\5\u01ce"+
		"\u00e8\2\u1d5d\u1d7e\3\2\2\2\u1d5e\u1d5f\7\u00b0\2\2\u1d5f\u1d60\7\u01e1"+
		"\2\2\u1d60\u1d61\5\u051a\u028e\2\u1d61\u1d62\7\u00ca\2\2\u1d62\u1d63\5"+
		"\u052c\u0297\2\u1d63\u1d7e\3\2\2\2\u1d64\u1d65\7\u00b0\2\2\u1d65\u1d66"+
		"\7\u01e1\2\2\u1d66\u1d67\5\u051a\u028e\2\u1d67\u1d68\7\u014e\2\2\u1d68"+
		"\u1d69\7\u01e2\2\2\u1d69\u1d6a\5\u029a\u014e\2\u1d6a\u1d7e\3\2\2\2\u1d6b"+
		"\u1d6c\7\u00b0\2\2\u1d6c\u1d6d\7\u01e1\2\2\u1d6d\u1d6e\5\u051a\u028e\2"+
		"\u1d6e\u1d6f\7\u016a\2\2\u1d6f\u1d70\7\u01e2\2\2\u1d70\u1d71\5\u02f6\u017c"+
		"\2\u1d71\u1d72\5\u029a\u014e\2\u1d72\u1d7e\3\2\2\2\u1d73\u1d74\7\u00b0"+
		"\2\2\u1d74\u1d75\7\u01e1\2\2\u1d75\u1d76\5\u051a\u028e\2\u1d76\u1d77\7"+
		"\u00e7\2\2\u1d77\u1d7e\3\2\2\2\u1d78\u1d79\7\u00b0\2\2\u1d79\u1d7a\7\u01e1"+
		"\2\2\u1d7a\u1d7b\5\u051a\u028e\2\u1d7b\u1d7c\7\u00e0\2\2\u1d7c\u1d7e\3"+
		"\2\2\2\u1d7d\u1d58\3\2\2\2\u1d7d\u1d5e\3\2\2\2\u1d7d\u1d64\3\2\2\2\u1d7d"+
		"\u1d6b\3\2\2\2\u1d7d\u1d73\3\2\2\2\u1d7d\u1d78\3\2\2\2\u1d7e\u02fb\3\2"+
		"\2\2\u1d7f\u1d80\7\u00e5\2\2\u1d80\u1d81\7\u01e1\2\2\u1d81\u1d82\5\u051a"+
		"\u028e\2\u1d82\u1d83\5n8\2\u1d83\u1d8c\3\2\2\2\u1d84\u1d85\7\u00e5\2\2"+
		"\u1d85\u1d86\7\u01e1\2\2\u1d86\u1d87\7\u0102\2\2\u1d87\u1d88\7\u01a9\2"+
		"\2\u1d88\u1d89\5\u051a\u028e\2\u1d89\u1d8a\5n8\2\u1d8a\u1d8c\3\2\2\2\u1d8b"+
		"\u1d7f\3\2\2\2\u1d8b\u1d84\3\2\2\2\u1d8c\u02fd\3\2\2\2\u1d8d\u1d8e\7T"+
		"\2\2\u1d8e\u1d8f\5\u026c\u0137\2\u1d8f\u1d90\7\u015e\2\2\u1d90\u1d91\5"+
		"\u051a\u028e\2\u1d91\u1d92\7J\2\2\u1d92\u1d93\7v\2\2\u1d93\u1d94\5\u0308"+
		"\u0185\2\u1d94\u1d95\7\u0084\2\2\u1d95\u1d96\5\u0516\u028c\2\u1d96\u1d97"+
		"\5\u0440\u0221\2\u1d97\u1d98\7_\2\2\u1d98\u1d99\5\u030a\u0186\2\u1d99"+
		"\u1d9a\5\u0300\u0181\2\u1d9a\u02ff\3\2\2\2\u1d9b\u1da2\7\u012b\2\2\u1d9c"+
		"\u1da2\5\u0304\u0183\2\u1d9d\u1d9e\7\4\2\2\u1d9e\u1d9f\5\u0302\u0182\2"+
		"\u1d9f\u1da0\7\5\2\2\u1da0\u1da2\3\2\2\2\u1da1\u1d9b\3\2\2\2\u1da1\u1d9c"+
		"\3\2\2\2\u1da1\u1d9d\3\2\2\2\u1da2\u0301\3\2\2\2\u1da3\u1da4\b\u0182\1"+
		"\2\u1da4\u1da5\5\u0306\u0184\2\u1da5\u1dab\3\2\2\2\u1da6\u1da7\f\4\2\2"+
		"\u1da7\u1da8\7\t\2\2\u1da8\u1daa\5\u0306\u0184\2\u1da9\u1da6\3\2\2\2\u1daa"+
		"\u1dad\3\2\2\2\u1dab\u1da9\3\2\2\2\u1dab\u1dac\3\2\2\2\u1dac\u0303\3\2"+
		"\2\2\u1dad\u1dab\3\2\2\2\u1dae\u1db4\5\u03ba\u01de\2\u1daf\u1db4\5\u0388"+
		"\u01c5\2\u1db0\u1db4\5\u03a8\u01d5\2\u1db1\u1db4\5\u039a\u01ce\2\u1db2"+
		"\u1db4\5\u030c\u0187\2\u1db3\u1dae\3\2\2\2\u1db3\u1daf\3\2\2\2\u1db3\u1db0"+
		"\3\2\2\2\u1db3\u1db1\3\2\2\2\u1db3\u1db2\3\2\2\2\u1db4\u0305\3\2\2\2\u1db5"+
		"\u1db8\5\u0304\u0183\2\u1db6\u1db8\3\2\2\2\u1db7\u1db5\3\2\2\2\u1db7\u1db6"+
		"\3\2\2\2\u1db8\u0307\3\2\2\2\u1db9\u1dba\t\20\2\2\u1dba\u0309\3\2\2\2"+
		"\u1dbb\u1dbf\7\u010f\2\2\u1dbc\u1dbf\7\u00af\2\2\u1dbd\u1dbf\3\2\2\2\u1dbe"+
		"\u1dbb\3\2\2\2\u1dbe\u1dbc\3\2\2\2\u1dbe\u1dbd\3\2\2\2\u1dbf\u030b\3\2"+
		"\2\2\u1dc0\u1dc1\7\u012c\2\2\u1dc1\u1dc2\5\u053a\u029e\2\u1dc2\u1dc3\5"+
		"\u030e\u0188\2\u1dc3\u030d\3\2\2\2\u1dc4\u1dc5\7\b\2\2\u1dc5\u1dc8\5\u052c"+
		"\u0297\2\u1dc6\u1dc8\3\2\2\2\u1dc7\u1dc4\3\2\2\2\u1dc7\u1dc6\3\2\2\2\u1dc8"+
		"\u030f\3\2\2\2\u1dc9\u1dca\7\u0119\2\2\u1dca\u1dcb\5\u053a\u029e\2\u1dcb"+
		"\u0311\3\2\2\2\u1dcc\u1dcd\7\u018b\2\2\u1dcd\u1dd1\5\u053a\u029e\2\u1dce"+
		"\u1dcf\7\u018b\2\2\u1dcf\u1dd1\7\13\2\2\u1dd0\u1dcc\3\2\2\2\u1dd0\u1dce"+
		"\3\2\2\2\u1dd1\u0313\3\2\2\2\u1dd2\u1dd3\7\u00a7\2\2\u1dd3\u1dd4\5\u0316"+
		"\u018c\2\u1dd4\u1dd5\5\u031e\u0190\2\u1dd5\u1e05\3\2\2\2\u1dd6\u1dd7\7"+
		"\u00b8\2\2\u1dd7\u1dd8\5\u0316\u018c\2\u1dd8\u1dd9\5\u031c\u018f\2\u1dd9"+
		"\u1e05\3\2\2\2\u1dda\u1ddb\7\u0171\2\2\u1ddb\u1ddc\7\u0181\2\2\u1ddc\u1e05"+
		"\5\u031c\u018f\2\u1ddd\u1dde\7\u00c7\2\2\u1dde\u1ddf\5\u0316\u018c\2\u1ddf"+
		"\u1de0\5\u031e\u0190\2\u1de0\u1e05\3\2\2\2\u1de1\u1de2\7\u01e4\2\2\u1de2"+
		"\u1de3\5\u0316\u018c\2\u1de3\u1de4\5\u031e\u0190\2\u1de4\u1e05\3\2\2\2"+
		"\u1de5\u1de6\7\u015c\2\2\u1de6\u1de7\5\u0316\u018c\2\u1de7\u1de8\5\u031e"+
		"\u0190\2\u1de8\u1e05\3\2\2\2\u1de9\u1dea\7\u015f\2\2\u1dea\u1e05\5\u053a"+
		"\u029e\2\u1deb\u1dec\7\u0151\2\2\u1dec\u1ded\7\u015f\2\2\u1ded\u1e05\5"+
		"\u053a\u029e\2\u1dee\u1def\7\u0151\2\2\u1def\u1e05\5\u053a\u029e\2\u1df0"+
		"\u1df1\7\u015c\2\2\u1df1\u1df2\5\u0316\u018c\2\u1df2\u1df3\7\u0084\2\2"+
		"\u1df3\u1df4\7\u015f\2\2\u1df4\u1df5\5\u053a\u029e\2\u1df5\u1e05\3\2\2"+
		"\2\u1df6\u1df7\7\u015c\2\2\u1df7\u1df8\5\u0316\u018c\2\u1df8\u1df9\7\u0084"+
		"\2\2\u1df9\u1dfa\5\u053a\u029e\2\u1dfa\u1e05\3\2\2\2\u1dfb\u1dfc\7\u013f"+
		"\2\2\u1dfc\u1dfd\7\u0181\2\2\u1dfd\u1e05\5\u052c\u0297\2\u1dfe\u1dff\7"+
		"\u00c7\2\2\u1dff\u1e00\7\u0140\2\2\u1e00\u1e05\5\u052c\u0297\2\u1e01\u1e02"+
		"\7\u015c\2\2\u1e02\u1e03\7\u0140\2\2\u1e03\u1e05\5\u052c\u0297\2\u1e04"+
		"\u1dd2\3\2\2\2\u1e04\u1dd6\3\2\2\2\u1e04\u1dda\3\2\2\2\u1e04\u1ddd\3\2"+
		"\2\2\u1e04\u1de1\3\2\2\2\u1e04\u1de5\3\2\2\2\u1e04\u1de9\3\2\2\2\u1e04"+
		"\u1deb\3\2\2\2\u1e04\u1dee\3\2\2\2\u1e04\u1df0\3\2\2\2\u1e04\u1df6\3\2"+
		"\2\2\u1e04\u1dfb\3\2\2\2\u1e04\u1dfe\3\2\2\2\u1e04\u1e01\3\2\2\2\u1e05"+
		"\u0315\3\2\2\2\u1e06\u1e0a\7\u0199\2\2\u1e07\u1e0a\7\u0181\2\2\u1e08\u1e0a"+
		"\3\2\2\2\u1e09\u1e06\3\2\2\2\u1e09\u1e07\3\2\2\2\u1e09\u1e08\3\2\2\2\u1e0a"+
		"\u0317\3\2\2\2\u1e0b\u1e0c\7\u0111\2\2\u1e0c\u1e0d\7\u0118\2\2\u1e0d\u1e16"+
		"\5B\"\2\u1e0e\u1e0f\7\u0149\2\2\u1e0f\u1e16\7w\2\2\u1e10\u1e11\7\u0149"+
		"\2\2\u1e11\u1e16\7\u019b\2\2\u1e12\u1e16\7\\\2\2\u1e13\u1e14\7s\2\2\u1e14"+
		"\u1e16\7\\\2\2\u1e15\u1e0b\3\2\2\2\u1e15\u1e0e\3\2\2\2\u1e15\u1e10\3\2"+
		"\2\2\u1e15\u1e12\3\2\2\2\u1e15\u1e13\3\2\2\2\u1e16\u0319\3\2\2\2\u1e17"+
		"\u1e18\b\u018e\1\2\u1e18\u1e19\5\u0318\u018d\2\u1e19\u1e21\3\2\2\2\u1e1a"+
		"\u1e1b\f\4\2\2\u1e1b\u1e1c\7\b\2\2\u1e1c\u1e20\5\u0318\u018d\2\u1e1d\u1e1e"+
		"\f\3\2\2\u1e1e\u1e20\5\u0318\u018d\2\u1e1f\u1e1a\3\2\2\2\u1e1f\u1e1d\3"+
		"\2\2\2\u1e20\u1e23\3\2\2\2\u1e21\u1e1f\3\2\2\2\u1e21\u1e22\3\2\2\2\u1e22"+
		"\u031b\3\2\2\2\u1e23\u1e21\3\2\2\2\u1e24\u1e27\5\u031a\u018e\2\u1e25\u1e27"+
		"\3\2\2\2\u1e26\u1e24\3\2\2\2\u1e26\u1e25\3\2\2\2\u1e27\u031d\3\2\2\2\u1e28"+
		"\u1e29\7G\2\2\u1e29\u1e2f\7\u00bf\2\2\u1e2a\u1e2b\7G\2\2\u1e2b\u1e2c\7"+
		"\u012a\2\2\u1e2c\u1e2f\7\u00bf\2\2\u1e2d\u1e2f\3\2\2\2\u1e2e\u1e28\3\2"+
		"\2\2\u1e2e\u1e2a\3\2\2\2\u1e2e\u1e2d\3\2\2\2\u1e2f\u031f\3\2\2\2\u1e30"+
		"\u1e31\7T\2\2\u1e31\u1e32\5\u00b0Y\2\u1e32\u1e33\7\u0195\2\2\u1e33\u1e34"+
		"\5\u0516\u028c\2\u1e34\u1e35\5\u00d8m\2\u1e35\u1e36\5x=\2\u1e36\u1e37"+
		"\7J\2\2\u1e37\u1e38\5\u03ba\u01de\2\u1e38\u1e39\5\u0322\u0192\2\u1e39"+
		"\u1e63\3\2\2\2\u1e3a\u1e3b\7T\2\2\u1e3b\u1e3c\7x\2\2\u1e3c\u1e3d\7\u0154"+
		"\2\2\u1e3d\u1e3e\5\u00b0Y\2\u1e3e\u1e3f\7\u0195\2\2\u1e3f\u1e40\5\u0516"+
		"\u028c\2\u1e40\u1e41\5\u00d8m\2\u1e41\u1e42\5x=\2\u1e42\u1e43\7J\2\2\u1e43"+
		"\u1e44\5\u03ba\u01de\2\u1e44\u1e45\5\u0322\u0192\2\u1e45\u1e63\3\2\2\2"+
		"\u1e46\u1e47\7T\2\2\u1e47\u1e48\5\u00b0Y\2\u1e48\u1e49\7\u014c\2\2\u1e49"+
		"\u1e4a\7\u0195\2\2\u1e4a\u1e4b\5\u0516\u028c\2\u1e4b\u1e4c\7\4\2\2\u1e4c"+
		"\u1e4d\5\u00dan\2\u1e4d\u1e4e\7\5\2\2\u1e4e\u1e4f\5x=\2\u1e4f\u1e50\7"+
		"J\2\2\u1e50\u1e51\5\u03ba\u01de\2\u1e51\u1e52\5\u0322\u0192\2\u1e52\u1e63"+
		"\3\2\2\2\u1e53\u1e54\7T\2\2\u1e54\u1e55\7x\2\2\u1e55\u1e56\7\u0154\2\2"+
		"\u1e56\u1e57\5\u00b0Y\2\u1e57\u1e58\7\u014c\2\2\u1e58\u1e59\7\u0195\2"+
		"\2\u1e59\u1e5a\5\u0516\u028c\2\u1e5a\u1e5b\7\4\2\2\u1e5b\u1e5c\5\u00da"+
		"n\2\u1e5c\u1e5d\7\5\2\2\u1e5d\u1e5e\5x=\2\u1e5e\u1e5f\7J\2\2\u1e5f\u1e60"+
		"\5\u03ba\u01de\2\u1e60\u1e61\5\u0322\u0192\2\u1e61\u1e63\3\2\2\2\u1e62"+
		"\u1e30\3\2\2\2\u1e62\u1e3a\3\2\2\2\u1e62\u1e46\3\2\2\2\u1e62\u1e53\3\2"+
		"\2\2\u1e63\u0321\3\2\2\2\u1e64\u1e65\7\u008f\2\2\u1e65\u1e66\7P\2\2\u1e66"+
		"\u1e71\7\u0134\2\2\u1e67\u1e68\7\u008f\2\2\u1e68\u1e69\7\u00bd\2\2\u1e69"+
		"\u1e6a\7P\2\2\u1e6a\u1e71\7\u0134\2\2\u1e6b\u1e6c\7\u008f\2\2\u1e6c\u1e6d"+
		"\7\u011b\2\2\u1e6d\u1e6e\7P\2\2\u1e6e\u1e71\7\u0134\2\2\u1e6f\u1e71\3"+
		"\2\2\2\u1e70\u1e64\3\2\2\2\u1e70\u1e67\3\2\2\2\u1e70\u1e6b\3\2\2\2\u1e70"+
		"\u1e6f\3\2\2\2\u1e71\u0323\3\2\2\2\u1e72\u1e73\7\u011a\2\2\u1e73\u1e74"+
		"\5\u051e\u0290\2\u1e74\u0325\3\2\2\2\u1e75\u1e76\7T\2\2\u1e76\u1e77\7"+
		"\u00d5\2\2\u1e77\u1e78\5\u051a\u028e\2\u1e78\u1e79\5\22\n\2\u1e79\u1e7a"+
		"\5\u0328\u0195\2\u1e7a\u0327\3\2\2\2\u1e7b\u1e7e\5\u032a\u0196\2\u1e7c"+
		"\u1e7e\3\2\2\2\u1e7d\u1e7b\3\2\2\2\u1e7d\u1e7c\3\2\2\2\u1e7e\u0329\3\2"+
		"\2\2\u1e7f\u1e80\b\u0196\1\2\u1e80\u1e81\5\u032c\u0197\2\u1e81\u1e86\3"+
		"\2\2\2\u1e82\u1e83\f\3\2\2\u1e83\u1e85\5\u032c\u0197\2\u1e84\u1e82\3\2"+
		"\2\2\u1e85\u1e88\3\2\2\2\u1e86\u1e84\3\2\2\2\u1e86\u1e87\3\2\2\2\u1e87"+
		"\u032b\3\2\2\2\u1e88\u1e86\3\2\2\2\u1e89\u1e8a\5\u032e\u0198\2\u1e8a\u1e8b"+
		"\5\u0330\u0199\2\u1e8b\u1e8c\5\u0532\u029a\2\u1e8c\u1e96\3\2\2\2\u1e8d"+
		"\u1e8e\5\u032e\u0198\2\u1e8e\u1e8f\5\u0330\u0199\2\u1e8f\u1e90\5D#\2\u1e90"+
		"\u1e96\3\2\2\2\u1e91\u1e92\5\u032e\u0198\2\u1e92\u1e93\5\u0330\u0199\2"+
		"\u1e93\u1e94\7[\2\2\u1e94\u1e96\3\2\2\2\u1e95\u1e89\3\2\2\2\u1e95\u1e8d"+
		"\3\2\2\2\u1e95\u1e91\3\2\2\2\u1e96\u032d\3\2\2\2\u1e97\u1ea0\5\u0542\u02a2"+
		"\2\u1e98\u1e99\7\u00ca\2\2\u1e99\u1ea0\7p\2\2\u1e9a\u1ea0\7\u00e8\2\2"+
		"\u1e9b\u1ea0\7\u011c\2\2\u1e9c\u1ea0\7\u0137\2\2\u1e9d\u1ea0\7\u017c\2"+
		"\2\u1e9e\u1ea0\7\u017e\2\2\u1e9f\u1e97\3\2\2\2\u1e9f\u1e98\3\2\2\2\u1e9f"+
		"\u1e9a\3\2\2\2\u1e9f\u1e9b\3\2\2\2\u1e9f\u1e9c\3\2\2\2\u1e9f\u1e9d\3\2"+
		"\2\2\u1e9f\u1e9e\3\2\2\2\u1ea0\u032f\3\2\2\2\u1ea1\u1ea4\7\f\2\2\u1ea2"+
		"\u1ea4\3\2\2\2\u1ea3\u1ea1\3\2\2\2\u1ea3\u1ea2\3\2\2\2\u1ea4\u0331\3\2"+
		"\2\2\u1ea5\u1ea6\7\u00b0\2\2\u1ea6\u1ea7\7\u00d5\2\2\u1ea7\u1ea8\5\u051a"+
		"\u028e\2\u1ea8\u1ea9\7\u008f\2\2\u1ea9\u1eaa\5\u0328\u0195\2\u1eaa\u1eb8"+
		"\3\2\2\2\u1eab\u1eac\7\u00b0\2\2\u1eac\u1ead\7\u00d5\2\2\u1ead\u1eae\5"+
		"\u051a\u028e\2\u1eae\u1eaf\5\u0328\u0195\2\u1eaf\u1eb8\3\2\2\2\u1eb0\u1eb1"+
		"\7\u00b0\2\2\u1eb1\u1eb2\7\u00d5\2\2\u1eb2\u1eb3\5\u051a\u028e\2\u1eb3"+
		"\u1eb4\7\u016a\2\2\u1eb4\u1eb5\7\u017c\2\2\u1eb5\u1eb6\5\u051a\u028e\2"+
		"\u1eb6\u1eb8\3\2\2\2\u1eb7\u1ea5\3\2\2\2\u1eb7\u1eab\3\2\2\2\u1eb7\u1eb0"+
		"\3\2\2\2\u1eb8\u0333\3\2\2\2\u1eb9\u1eba\7\u00b0\2\2\u1eba\u1ebb\7\u00d5"+
		"\2\2\u1ebb\u1ebc\5\u051a\u028e\2\u1ebc\u1ebd\5R*\2\u1ebd\u0335\3\2\2\2"+
		"\u1ebe\u1ebf\7\u00e5\2\2\u1ebf\u1ec0\7\u00d5\2\2\u1ec0\u1ed9\5\u051a\u028e"+
		"\2\u1ec1\u1ec2\7\u00e5\2\2\u1ec2\u1ec3\7\u00d5\2\2\u1ec3\u1ec4\7\u0102"+
		"\2\2\u1ec4\u1ec5\7\u01a9\2\2\u1ec5\u1ed9\5\u051a\u028e\2\u1ec6\u1ec7\7"+
		"\u00e5\2\2\u1ec7\u1ec8\7\u00d5\2\2\u1ec8\u1ec9\5\u051a\u028e\2\u1ec9\u1eca"+
		"\5\22\n\2\u1eca\u1ecb\7\4\2\2\u1ecb\u1ecc\5\u0338\u019d\2\u1ecc\u1ecd"+
		"\7\5\2\2\u1ecd\u1ed9\3\2\2\2\u1ece\u1ecf\7\u00e5\2\2\u1ecf\u1ed0\7\u00d5"+
		"\2\2\u1ed0\u1ed1\7\u0102\2\2\u1ed1\u1ed2\7\u01a9\2\2\u1ed2\u1ed3\5\u051a"+
		"\u028e\2\u1ed3\u1ed4\5\22\n\2\u1ed4\u1ed5\7\4\2\2\u1ed5\u1ed6\5\u0338"+
		"\u019d\2\u1ed6\u1ed7\7\5\2\2\u1ed7\u1ed9\3\2\2\2\u1ed8\u1ebe\3\2\2\2\u1ed8"+
		"\u1ec1\3\2\2\2\u1ed8\u1ec6\3\2\2\2\u1ed8\u1ece\3\2\2\2\u1ed9\u0337\3\2"+
		"\2\2\u1eda\u1edb\b\u019d\1\2\u1edb\u1edc\5\u033a\u019e\2\u1edc\u1ee2\3"+
		"\2\2\2\u1edd\u1ede\f\3\2\2\u1ede\u1edf\7\b\2\2\u1edf\u1ee1\5\u033a\u019e"+
		"\2\u1ee0\u1edd\3\2\2\2\u1ee1\u1ee4\3\2\2\2\u1ee2\u1ee0\3\2\2\2\u1ee2\u1ee3"+
		"\3\2\2\2\u1ee3\u0339\3\2\2\2\u1ee4\u1ee2\3\2\2\2\u1ee5\u1ee6\7\u00f7\2"+
		"\2\u1ee6\u033b\3\2\2\2\u1ee7\u1ee8\7\u00b0\2\2\u1ee8\u1ee9\7\u0092\2\2"+
		"\u1ee9\u1eea\5\u020e\u0108\2\u1eea\u1eeb\7\u014e\2\2\u1eeb\u1eec\7\u0194"+
		"\2\2\u1eec\u033d\3\2\2\2\u1eed\u1eee\7\u00b0\2\2\u1eee\u1eef\7\u017a\2"+
		"\2\u1eef\u1ef0\7\u016a\2\2\u1ef0\u1ef6\58\35\2\u1ef1\u1ef2\7\u00b0\2\2"+
		"\u1ef2\u1ef3\7\u017a\2\2\u1ef3\u1ef4\7\u0156\2\2\u1ef4\u1ef6\5P)\2\u1ef5"+
		"\u1eed\3\2\2\2\u1ef5\u1ef1\3\2\2\2\u1ef6\u033f\3\2\2\2\u1ef7\u1ef8\7T"+
		"\2\2\u1ef8\u1ef9\7\u00e3\2\2\u1ef9\u1efa\5\u020e\u0108\2\u1efa\u1efb\5"+
		"\u0344\u01a3\2\u1efb\u1efc\5\u0458\u022d\2\u1efc\u1efd\5\u00c2b\2\u1efd"+
		"\u0341\3\2\2\2\u1efe\u1eff\7\u00b0\2\2\u1eff\u1f00\7\u00e3\2\2\u1f00\u1f01"+
		"\5\u020e\u0108\2\u1f01\u1f02\5l\67\2\u1f02\u1f31\3\2\2\2\u1f03\u1f04\7"+
		"\u00b0\2\2\u1f04\u1f05\7\u00e3\2\2\u1f05\u1f06\5\u020e\u0108\2\u1f06\u1f07"+
		"\7\u00e5\2\2\u1f07\u1f08\7s\2\2\u1f08\u1f09\7t\2\2\u1f09\u1f31\3\2\2\2"+
		"\u1f0a\u1f0b\7\u00b0\2\2\u1f0b\u1f0c\7\u00e3\2\2\u1f0c\u1f0d\5\u020e\u0108"+
		"\2\u1f0d\u1f0e\7\u016a\2\2\u1f0e\u1f0f\7s\2\2\u1f0f\u1f10\7t\2\2\u1f10"+
		"\u1f31\3\2\2\2\u1f11\u1f12\7\u00b0\2\2\u1f12\u1f13\7\u00e3\2\2\u1f13\u1f14"+
		"\5\u020e\u0108\2\u1f14\u1f15\7\u00ab\2\2\u1f15\u1f16\5\u00d2j\2\u1f16"+
		"\u1f31\3\2\2\2\u1f17\u1f18\7\u00b0\2\2\u1f18\u1f19\7\u00e3\2\2\u1f19\u1f1a"+
		"\5\u020e\u0108\2\u1f1a\u1f1b\7\u00e5\2\2\u1f1b\u1f1c\7S\2\2\u1f1c\u1f1d"+
		"\5\u051a\u028e\2\u1f1d\u1f1e\5n8\2\u1f1e\u1f31\3\2\2\2\u1f1f\u1f20\7\u00b0"+
		"\2\2\u1f20\u1f21\7\u00e3\2\2\u1f21\u1f22\5\u020e\u0108\2\u1f22\u1f23\7"+
		"\u00e5\2\2\u1f23\u1f24\7S\2\2\u1f24\u1f25\7\u0102\2\2\u1f25\u1f26\7\u01a9"+
		"\2\2\u1f26\u1f27\5\u051a\u028e\2\u1f27\u1f28\5n8\2\u1f28\u1f31\3\2\2\2"+
		"\u1f29\u1f2a\7\u00b0\2\2\u1f2a\u1f2b\7\u00e3\2\2\u1f2b\u1f2c\5\u020e\u0108"+
		"\2\u1f2c\u1f2d\7\u0191\2\2\u1f2d\u1f2e\7S\2\2\u1f2e\u1f2f\5\u051a\u028e"+
		"\2\u1f2f\u1f31\3\2\2\2\u1f30\u1efe\3\2\2\2\u1f30\u1f03\3\2\2\2\u1f30\u1f0a"+
		"\3\2\2\2\u1f30\u1f11\3\2\2\2\u1f30\u1f17\3\2\2\2\u1f30\u1f1f\3\2\2\2\u1f30"+
		"\u1f29\3\2\2\2\u1f31\u0343\3\2\2\2\u1f32\u1f35\7J\2\2\u1f33\u1f35\3\2"+
		"\2\2\u1f34\u1f32\3\2\2\2\u1f34\u1f33\3\2\2\2\u1f35\u0345\3\2\2\2\u1f36"+
		"\u1f37\7\u00b0\2\2\u1f37\u1f38\7\u0180\2\2\u1f38\u1f39\7\u0162\2\2\u1f39"+
		"\u1f3a\7\u00df\2\2\u1f3a\u1f3b\5\u020e\u0108\2\u1f3b\u1f3c\5\u01ce\u00e8"+
		"\2\u1f3c\u0347\3\2\2\2\u1f3d\u1f3e\7\u00b0\2\2\u1f3e\u1f3f\7\u0180\2\2"+
		"\u1f3f\u1f40\7\u0162\2\2\u1f40\u1f41\7\u00c9\2\2\u1f41\u1f42\5\u020e\u0108"+
		"\2\u1f42\u1f43\7\u00ab\2\2\u1f43\u1f44\7\u011e\2\2\u1f44\u1f45\7d\2\2"+
		"\u1f45\u1f46\5\u0518\u028d\2\u1f46\u1f47\5\u034a\u01a6\2\u1f47\u1f48\5"+
		"\u020c\u0107\2\u1f48\u1f86\3\2\2\2\u1f49\u1f4a\7\u00b0\2\2\u1f4a\u1f4b"+
		"\7\u0180\2\2\u1f4b\u1f4c\7\u0162\2\2\u1f4c\u1f4d\7\u00c9\2\2\u1f4d\u1f4e"+
		"\5\u020e\u0108\2\u1f4e\u1f4f\7\u00b0\2\2\u1f4f\u1f50\7\u011e\2\2\u1f50"+
		"\u1f51\7d\2\2\u1f51\u1f52\5\u0518\u028d\2\u1f52\u1f53\5\u034a\u01a6\2"+
		"\u1f53\u1f54\5\u020c\u0107\2\u1f54\u1f86\3\2\2\2\u1f55\u1f56\7\u00b0\2"+
		"\2\u1f56\u1f57\7\u0180\2\2\u1f57\u1f58\7\u0162\2\2\u1f58\u1f59\7\u00c9"+
		"\2\2\u1f59\u1f5a\5\u020e\u0108\2\u1f5a\u1f5b\7\u00b0\2\2\u1f5b\u1f5c\7"+
		"\u011e\2\2\u1f5c\u1f5d\7\u0154\2\2\u1f5d\u1f5e\5\u020e\u0108\2\u1f5e\u1f5f"+
		"\5\u034a\u01a6\2\u1f5f\u1f60\5\u020e\u0108\2\u1f60\u1f86\3\2\2\2\u1f61"+
		"\u1f62\7\u00b0\2\2\u1f62\u1f63\7\u0180\2\2\u1f63\u1f64\7\u0162\2\2\u1f64"+
		"\u1f65\7\u00c9\2\2\u1f65\u1f66\5\u020e\u0108\2\u1f66\u1f67\7\u00b0\2\2"+
		"\u1f67\u1f68\7\u011e\2\2\u1f68\u1f69\7d\2\2\u1f69\u1f6a\5\u0518\u028d"+
		"\2\u1f6a\u1f6b\7\u0154\2\2\u1f6b\u1f6c\5\u020e\u0108\2\u1f6c\u1f6d\5\u034a"+
		"\u01a6\2\u1f6d\u1f6e\5\u020e\u0108\2\u1f6e\u1f86\3\2\2\2\u1f6f\u1f70\7"+
		"\u00b0\2\2\u1f70\u1f71\7\u0180\2\2\u1f71\u1f72\7\u0162\2\2\u1f72\u1f73"+
		"\7\u00c9\2\2\u1f73\u1f74\5\u020e\u0108\2\u1f74\u1f75\7\u00e5\2\2\u1f75"+
		"\u1f76\7\u011e\2\2\u1f76\u1f77\7d\2\2\u1f77\u1f78\5\u0518\u028d\2\u1f78"+
		"\u1f86\3\2\2\2\u1f79\u1f7a\7\u00b0\2\2\u1f7a\u1f7b\7\u0180\2\2\u1f7b\u1f7c"+
		"\7\u0162\2\2\u1f7c\u1f7d\7\u00c9\2\2\u1f7d\u1f7e\5\u020e\u0108\2\u1f7e"+
		"\u1f7f\7\u00e5\2\2\u1f7f\u1f80\7\u011e\2\2\u1f80\u1f81\7\u0102\2\2\u1f81"+
		"\u1f82\7\u01a9\2\2\u1f82\u1f83\7d\2\2\u1f83\u1f84\5\u0518\u028d\2\u1f84"+
		"\u1f86\3\2\2\2\u1f85\u1f3d\3\2\2\2\u1f85\u1f49\3\2\2\2\u1f85\u1f55\3\2"+
		"\2\2\u1f85\u1f61\3\2\2\2\u1f85\u1f6f\3\2\2\2\u1f85\u1f79\3\2\2\2\u1f86"+
		"\u0349\3\2\2\2\u1f87\u1f88\7\u008f\2\2\u1f88\u034b\3\2\2\2\u1f89\u1f8a"+
		"\7T\2\2\u1f8a\u1f8b\5\u01ea\u00f6\2\u1f8b\u1f8c\7\u00ce\2\2\u1f8c\u1f8d"+
		"\5\u020e\u0108\2\u1f8d\u1f8e\7d\2\2\u1f8e\u1f8f\5\u052c\u0297\2\u1f8f"+
		"\u1f90\7\u0084\2\2\u1f90\u1f91\5\u052c\u0297\2\u1f91\u1f92\7f\2\2\u1f92"+
		"\u1f93\5\u020e\u0108\2\u1f93\u034d\3\2\2\2\u1f94\u1f95\7\u00c4\2\2\u1f95"+
		"\u1f96\5\u0362\u01b2\2\u1f96\u1f97\5\u0516\u028c\2\u1f97\u1f98\5\u0350"+
		"\u01a9\2\u1f98\u1fa2\3\2\2\2\u1f99\u1f9a\7\u00c4\2\2\u1f9a\u1fa2\5\u0362"+
		"\u01b2\2\u1f9b\u1f9c\7\u00c4\2\2\u1f9c\u1f9d\5\u0362\u01b2\2\u1f9d\u1f9e"+
		"\5\u051a\u028e\2\u1f9e\u1f9f\7v\2\2\u1f9f\u1fa0\5\u0516\u028c\2\u1fa0"+
		"\u1fa2\3\2\2\2\u1fa1\u1f94\3\2\2\2\u1fa1\u1f99\3\2\2\2\u1fa1\u1f9b\3\2"+
		"\2\2\u1fa2\u034f\3\2\2\2\u1fa3\u1fa4\7\u008a\2\2\u1fa4\u1fa7\5\u051a\u028e"+
		"\2\u1fa5\u1fa7\3\2\2\2\u1fa6\u1fa3\3\2\2\2\u1fa6\u1fa5\3\2\2\2\u1fa7\u0351"+
		"\3\2\2\2\u1fa8\u1fa9\7\u018f\2\2\u1fa9\u1faa\5\u0364\u01b3\2\u1faa\u1fab"+
		"\5\u0366\u01b4\2\u1fab\u1fac\5\u0362\u01b2\2\u1fac\u1fad\5\u0360\u01b1"+
		"\2\u1fad\u1fae\5\u036e\u01b8\2\u1fae\u1fb6\3\2\2\2\u1faf\u1fb0\7\u018f"+
		"\2\2\u1fb0\u1fb1\7\4\2\2\u1fb1\u1fb2\5\u0356\u01ac\2\u1fb2\u1fb3\7\5\2"+
		"\2\u1fb3\u1fb4\5\u036e\u01b8\2\u1fb4\u1fb6\3\2\2\2\u1fb5\u1fa8\3\2\2\2"+
		"\u1fb5\u1faf\3\2\2\2\u1fb6\u0353\3\2\2\2\u1fb7\u1fb8\5\u0358\u01ad\2\u1fb8"+
		"\u1fb9\5\u0362\u01b2\2\u1fb9\u1fba\5\u036e\u01b8\2\u1fba\u1fc2\3\2\2\2"+
		"\u1fbb\u1fbc\5\u0358\u01ad\2\u1fbc\u1fbd\7\4\2\2\u1fbd\u1fbe\5\u0356\u01ac"+
		"\2\u1fbe\u1fbf\7\5\2\2\u1fbf\u1fc0\5\u036e\u01b8\2\u1fc0\u1fc2\3\2\2\2"+
		"\u1fc1\u1fb7\3\2\2\2\u1fc1\u1fbb\3\2\2\2\u1fc2\u0355\3\2\2\2\u1fc3\u1fc4"+
		"\b\u01ac\1\2\u1fc4\u1fc5\5\u035a\u01ae\2\u1fc5\u1fcb\3\2\2\2\u1fc6\u1fc7"+
		"\f\3\2\2\u1fc7\u1fc8\7\b\2\2\u1fc8\u1fca\5\u035a\u01ae\2\u1fc9\u1fc6\3"+
		"\2\2\2\u1fca\u1fcd\3\2\2\2\u1fcb\u1fc9\3\2\2\2\u1fcb\u1fcc\3\2\2\2\u1fcc"+
		"\u0357\3\2\2\2\u1fcd\u1fcb\3\2\2\2\u1fce\u1fcf\t\21\2\2\u1fcf\u0359\3"+
		"\2\2\2\u1fd0\u1fd1\5\u035c\u01af\2\u1fd1\u1fd2\5\u035e\u01b0\2\u1fd2\u035b"+
		"\3\2\2\2\u1fd3\u1fd6\5\u053e\u02a0\2\u1fd4\u1fd6\5\u0358\u01ad\2\u1fd5"+
		"\u1fd3\3\2\2\2\u1fd5\u1fd4\3\2\2\2\u1fd6\u035d\3\2\2\2\u1fd7\u1fdb\5D"+
		"#\2\u1fd8\u1fdb\5\u0126\u0094\2\u1fd9\u1fdb\3\2\2\2\u1fda\u1fd7\3\2\2"+
		"\2\u1fda\u1fd8\3\2\2\2\u1fda\u1fd9\3\2\2\2\u1fdb\u035f\3\2\2\2\u1fdc\u1fdf"+
		"\5\u0358\u01ad\2\u1fdd\u1fdf\3\2\2\2\u1fde\u1fdc\3\2\2\2\u1fde\u1fdd\3"+
		"\2\2\2\u1fdf\u0361\3\2\2\2\u1fe0\u1fe3\7\u00a6\2\2\u1fe1\u1fe3\3\2\2\2"+
		"\u1fe2\u1fe0\3\2\2\2\u1fe2\u1fe1\3\2\2\2\u1fe3\u0363\3\2\2\2\u1fe4\u1fe7"+
		"\7\u0097\2\2\u1fe5\u1fe7\3\2\2\2\u1fe6\u1fe4\3\2\2\2\u1fe6\u1fe5\3\2\2"+
		"\2\u1fe7\u0365\3\2\2\2\u1fe8\u1feb\7\u0096\2\2\u1fe9\u1feb\3\2\2\2\u1fea"+
		"\u1fe8\3\2\2\2\u1fea\u1fe9\3\2\2\2\u1feb\u0367\3\2\2\2\u1fec\u1fed\7\4"+
		"\2\2\u1fed\u1fee\5\u0518\u028d\2\u1fee\u1fef\7\5\2\2\u1fef\u1ff2\3\2\2"+
		"\2\u1ff0\u1ff2\3\2\2\2\u1ff1\u1fec\3\2\2\2\u1ff1\u1ff0\3\2\2\2\u1ff2\u0369"+
		"\3\2\2\2\u1ff3\u1ff4\5\u0516\u028c\2\u1ff4\u1ff5\5\u0368\u01b5\2\u1ff5"+
		"\u036b\3\2\2\2\u1ff6\u1ff7\b\u01b7\1\2\u1ff7\u1ff8\5\u036a\u01b6\2\u1ff8"+
		"\u1ffe\3\2\2\2\u1ff9\u1ffa\f\3\2\2\u1ffa\u1ffb\7\b\2\2\u1ffb\u1ffd\5\u036a"+
		"\u01b6\2\u1ffc\u1ff9\3\2\2\2\u1ffd\u2000\3\2\2\2\u1ffe\u1ffc\3\2\2\2\u1ffe"+
		"\u1fff\3\2\2\2\u1fff\u036d\3\2\2\2\u2000\u1ffe\3\2\2\2\u2001\u2004\5\u036c"+
		"\u01b7\2\u2002\u2004\3\2\2\2\u2003\u2001\3\2\2\2\u2003\u2002\3\2\2\2\u2004"+
		"\u036f\3\2\2\2\u2005\u2006\7\u00f1\2\2\u2006\u2016\5\u0372\u01ba\2\u2007"+
		"\u2008\7\u00f1\2\2\u2008\u2009\5\u0358\u01ad\2\u2009\u200a\5\u0362\u01b2"+
		"\2\u200a\u200b\5\u0372\u01ba\2\u200b\u2016\3\2\2\2\u200c\u200d\7\u00f1"+
		"\2\2\u200d\u200e\7\u00a6\2\2\u200e\u2016\5\u0372\u01ba\2\u200f\u2010\7"+
		"\u00f1\2\2\u2010\u2011\7\4\2\2\u2011\u2012\5\u0374\u01bb\2\u2012\u2013"+
		"\7\5\2\2\u2013\u2014\5\u0372\u01ba\2\u2014\u2016\3\2\2\2\u2015\u2005\3"+
		"\2\2\2\u2015\u2007\3\2\2\2\u2015\u200c\3\2\2\2\u2015\u200f\3\2\2\2\u2016"+
		"\u0371\3\2\2\2\u2017\u2021\5\u03ba\u01de\2\u2018\u2021\5\u0388\u01c5\2"+
		"\u2019\u2021\5\u03a8\u01d5\2\u201a\u2021\5\u039a\u01ce\2\u201b\u2021\5"+
		"\u03b2\u01da\2\u201c\u2021\5\u010a\u0086\2\u201d\u2021\5\u0110\u0089\2"+
		"\u201e\u2021\5\u0116\u008c\2\u201f\u2021\5\u0382\u01c2\2\u2020\u2017\3"+
		"\2\2\2\u2020\u2018\3\2\2\2\u2020\u2019\3\2\2\2\u2020\u201a\3\2\2\2\u2020"+
		"\u201b\3\2\2\2\u2020\u201c\3\2\2\2\u2020\u201d\3\2\2\2\u2020\u201e\3\2"+
		"\2\2\u2020\u201f\3\2\2\2\u2021\u0373\3\2\2\2\u2022\u2023\b\u01bb\1\2\u2023"+
		"\u2024\5\u0376\u01bc\2\u2024\u202a\3\2\2\2\u2025\u2026\f\3\2\2\u2026\u2027"+
		"\7\b\2\2\u2027\u2029\5\u0376\u01bc\2\u2028\u2025\3\2\2\2\u2029\u202c\3"+
		"\2\2\2\u202a\u2028\3\2\2\2\u202a\u202b\3\2\2\2\u202b\u0375\3\2\2\2\u202c"+
		"\u202a\3\2\2\2\u202d\u202e\5\u0378\u01bd\2\u202e\u202f\5\u037a\u01be\2"+
		"\u202f\u0377\3\2\2\2\u2030\u2033\5\u053e\u02a0\2\u2031\u2033\5\u0358\u01ad"+
		"\2\u2032\u2030\3\2\2\2\u2032\u2031\3\2\2\2\u2033\u0379\3\2\2\2\u2034\u2038"+
		"\5D#\2\u2035\u2038\5\u0126\u0094\2\u2036\u2038\3\2\2\2\u2037\u2034\3\2"+
		"\2\2\u2037\u2035\3\2\2\2\u2037\u2036\3\2\2\2\u2038\u037b\3\2\2\2\u2039"+
		"\u203a\7\u013f\2\2\u203a\u203b\5\u051a\u028e\2\u203b\u203c\5\u037e\u01c0"+
		"\2\u203c\u203d\7J\2\2\u203d\u203e\5\u0380\u01c1\2\u203e\u037d\3\2\2\2"+
		"\u203f\u2040\7\4\2\2\u2040\u2041\5\u04e2\u0272\2\u2041\u2042\7\5\2\2\u2042"+
		"\u2045\3\2\2\2\u2043\u2045\3\2\2\2\u2044\u203f\3\2\2\2\u2044\u2043\3\2"+
		"\2\2\u2045\u037f\3\2\2\2\u2046\u204b\5\u03ba\u01de\2\u2047\u204b\5\u0388"+
		"\u01c5\2\u2048\u204b\5\u03a8\u01d5\2\u2049\u204b\5\u039a\u01ce\2\u204a"+
		"\u2046\3\2\2\2\u204a\u2047\3\2\2\2\u204a\u2048\3\2\2\2\u204a\u2049\3\2"+
		"\2\2\u204b\u0381\3\2\2\2\u204c\u204d\7\u00f0\2\2\u204d\u204e\5\u051a\u028e"+
		"\2\u204e\u204f\5\u0384\u01c3\2\u204f\u2068\3\2\2\2\u2050\u2051\7T\2\2"+
		"\u2051\u2052\5\u00b0Y\2\u2052\u2053\7\u0082\2\2\u2053\u2054\5\u010c\u0087"+
		"\2\u2054\u2055\7J\2\2\u2055\u2056\7\u00f0\2\2\u2056\u2057\5\u051a\u028e"+
		"\2\u2057\u2058\5\u0384\u01c3\2\u2058\u2059\5\u010e\u0088\2\u2059\u2068"+
		"\3\2\2\2\u205a\u205b\7T\2\2\u205b\u205c\5\u00b0Y\2\u205c\u205d\7\u0082"+
		"\2\2\u205d\u205e\7\u0102\2\2\u205e\u205f\7s\2\2\u205f\u2060\7\u01a9\2"+
		"\2\u2060\u2061\5\u010c\u0087\2\u2061\u2062\7J\2\2\u2062\u2063\7\u00f0"+
		"\2\2\u2063\u2064\5\u051a\u028e\2\u2064\u2065\5\u0384\u01c3\2\u2065\u2066"+
		"\5\u010e\u0088\2\u2066\u2068\3\2\2\2\u2067\u204c\3\2\2\2\u2067\u2050\3"+
		"\2\2\2\u2067\u205a\3\2\2\2\u2068\u0383\3\2\2\2\u2069\u206a\7\4\2\2\u206a"+
		"\u206b\5\u04dc\u026f\2\u206b\u206c\7\5\2\2\u206c\u206f\3\2\2\2\u206d\u206f"+
		"\3\2\2\2\u206e\u2069\3\2\2\2\u206e\u206d\3\2\2\2\u206f\u0385\3\2\2\2\u2070"+
		"\u2071\7\u00d7\2\2\u2071\u207b\5\u051a\u028e\2\u2072\u2073\7\u00d7\2\2"+
		"\u2073\u2074\7\u013f\2\2\u2074\u207b\5\u051a\u028e\2\u2075\u2076\7\u00d7"+
		"\2\2\u2076\u207b\7D\2\2\u2077\u2078\7\u00d7\2\2\u2078\u2079\7\u013f\2"+
		"\2\u2079\u207b\7D\2\2\u207a\u2070\3\2\2\2\u207a\u2072\3\2\2\2\u207a\u2075"+
		"\3\2\2\2\u207a\u2077\3\2\2\2\u207b\u0387\3\2\2\2\u207c\u207d\5\u03d0\u01e9"+
		"\2\u207d\u207e\7\u010e\2\2\u207e\u207f\7m\2\2\u207f\u2080\5\u038a\u01c6"+
		"\2\u2080\u2081\5\u038c\u01c7\2\u2081\u2082\5\u0394\u01cb\2\u2082\u2083"+
		"\5\u0398\u01cd\2\u2083\u0389\3\2\2\2\u2084\u208a\5\u0516\u028c\2\u2085"+
		"\u2086\5\u0516\u028c\2\u2086\u2087\7J\2\2\u2087\u2088\5\u053a\u029e\2"+
		"\u2088\u208a\3\2\2\2\u2089\u2084\3\2\2\2\u2089\u2085\3\2\2\2\u208a\u038b"+
		"\3\2\2\2\u208b\u20a1\5\u03ba\u01de\2\u208c\u208d\7\u01ed\2\2\u208d\u208e"+
		"\5\u038e\u01c8\2\u208e\u208f\7\u01e0\2\2\u208f\u2090\5\u03ba\u01de\2\u2090"+
		"\u20a1\3\2\2\2\u2091\u2092\7\4\2\2\u2092\u2093\5\u0390\u01c9\2\u2093\u2094"+
		"\7\5\2\2\u2094\u2095\5\u03ba\u01de\2\u2095\u20a1\3\2\2\2\u2096\u2097\7"+
		"\4\2\2\u2097\u2098\5\u0390\u01c9\2\u2098\u2099\7\5\2\2\u2099\u209a\7\u01ed"+
		"\2\2\u209a\u209b\5\u038e\u01c8\2\u209b\u209c\7\u01e0\2\2\u209c\u209d\5"+
		"\u03ba\u01de\2\u209d\u20a1\3\2\2\2\u209e\u209f\7[\2\2\u209f\u20a1\7\u01c3"+
		"\2\2\u20a0\u208b\3\2\2\2\u20a0\u208c\3\2\2\2\u20a0\u2091\3\2\2\2\u20a0"+
		"\u2096\3\2\2\2\u20a0\u209e\3\2\2\2\u20a1\u038d\3\2\2\2\u20a2\u20a3\t\22"+
		"\2\2\u20a3\u038f\3\2\2\2\u20a4\u20a5\b\u01c9\1\2\u20a5\u20a6\5\u0392\u01ca"+
		"\2\u20a6\u20ac\3\2\2\2\u20a7\u20a8\f\3\2\2\u20a8\u20a9\7\b\2\2\u20a9\u20ab"+
		"\5\u0392\u01ca\2\u20aa\u20a7\3\2\2\2\u20ab\u20ae\3\2\2\2\u20ac\u20aa\3"+
		"\2\2\2\u20ac\u20ad\3\2\2\2\u20ad\u0391\3\2\2\2\u20ae\u20ac\3\2\2\2\u20af"+
		"\u20b0\5\u053a\u029e\2\u20b0\u20b1\5\u050a\u0286\2\u20b1\u0393\3\2\2\2"+
		"\u20b2\u20b3\7v\2\2\u20b3\u20b4\7\u01ee\2\2\u20b4\u20b5\5\u0396\u01cc"+
		"\2\u20b5\u20b6\7_\2\2\u20b6\u20b7\7\u018e\2\2\u20b7\u20b8\7\u016a\2\2"+
		"\u20b8\u20b9\5\u03aa\u01d6\2\u20b9\u20ba\5\u0440\u0221\2\u20ba\u20c3\3"+
		"\2\2\2\u20bb\u20bc\7v\2\2\u20bc\u20bd\7\u01ee\2\2\u20bd\u20be\5\u0396"+
		"\u01cc\2\u20be\u20bf\7_\2\2\u20bf\u20c0\7\u012b\2\2\u20c0\u20c3\3\2\2"+
		"\2\u20c1\u20c3\3\2\2\2\u20c2\u20b2\3\2\2\2\u20c2\u20bb\3\2\2\2\u20c2\u20c1"+
		"\3\2\2\2\u20c3\u0395\3\2\2\2\u20c4\u20c5\7\4\2\2\u20c5\u20c6\5\u0258\u012d"+
		"\2\u20c6\u20c7\7\5\2\2\u20c7\u20c8\5\u0440\u0221\2\u20c8\u20ce\3\2\2\2"+
		"\u20c9\u20ca\7v\2\2\u20ca\u20cb\7S\2\2\u20cb\u20ce\5\u051a\u028e\2\u20cc"+
		"\u20ce\3\2\2\2\u20cd\u20c4\3\2\2\2\u20cd\u20c9\3\2\2\2\u20cd\u20cc\3\2"+
		"\2\2\u20ce\u0397\3\2\2\2\u20cf\u20d0\7}\2\2\u20d0\u20d3\5\u0510\u0289"+
		"\2\u20d1\u20d3\3\2\2\2\u20d2\u20cf\3\2\2\2\u20d2\u20d1\3\2\2\2\u20d3\u0399"+
		"\3\2\2\2\u20d4\u20d5\5\u03d0\u01e9\2\u20d5\u20d6\7\u00dc\2\2\u20d6\u20d7"+
		"\7f\2\2\u20d7\u20d8\5\u0430\u0219\2\u20d8\u20d9\5\u039c\u01cf\2\u20d9"+
		"\u20da\5\u0442\u0222\2\u20da\u20db\5\u0398\u01cd\2\u20db\u039b\3\2\2\2"+
		"\u20dc\u20dd\7\u008a\2\2\u20dd\u20e0\5\u041c\u020f\2\u20de\u20e0\3\2\2"+
		"\2\u20df\u20dc\3\2\2\2\u20df\u20de\3\2\2\2\u20e0\u039d\3\2\2\2\u20e1\u20e2"+
		"\7\u011d\2\2\u20e2\u20e3\5\u03d8\u01ed\2\u20e3\u20e4\5\u042e\u0218\2\u20e4"+
		"\u20e5\5\u03a0\u01d1\2\u20e5\u20e6\5\u03a4\u01d3\2\u20e6\u039f\3\2\2\2"+
		"\u20e7\u20e8\7j\2\2\u20e8\u20e9\5\u03a2\u01d2\2\u20e9\u20ea\7\u0124\2"+
		"\2\u20ea\u20ed\3\2\2\2\u20eb\u20ed\3\2\2\2\u20ec\u20e7\3\2\2\2\u20ec\u20eb"+
		"\3\2\2\2\u20ed\u03a1\3\2\2\2\u20ee\u20ef\7\u00a9\2\2\u20ef\u20ff\7\u016b"+
		"\2\2\u20f0\u20f1\7\u01bb\2\2\u20f1\u20ff\7\u016b\2\2\u20f2\u20f3\7\u01bb"+
		"\2\2\u20f3\u20ff\7\u00ef\2\2\u20f4\u20f5\7\u016b\2\2\u20f5\u20f6\7\u018e"+
		"\2\2\u20f6\u20ff\7\u00ef\2\2\u20f7\u20ff\7\u016b\2\2\u20f8\u20f9\7\u016b"+
		"\2\2\u20f9\u20fa\7\u01bb\2\2\u20fa\u20ff\7\u00ef\2\2\u20fb\u20ff\7\u00ef"+
		"\2\2\u20fc\u20fd\7\u00a9\2\2\u20fd\u20ff\7\u00ef\2\2\u20fe\u20ee\3\2\2"+
		"\2\u20fe\u20f0\3\2\2\2\u20fe\u20f2\3\2\2\2\u20fe\u20f4\3\2\2\2\u20fe\u20f7"+
		"\3\2\2\2\u20fe\u20f8\3\2\2\2\u20fe\u20fb\3\2\2\2\u20fe\u20fc\3\2\2\2\u20ff"+
		"\u03a3\3\2\2\2\u2100\u2103\7\u012d\2\2\u2101\u2103\3\2\2\2\u2102\u2100"+
		"\3\2\2\2\u2102\u2101\3\2\2\2\u2103\u03a5\3\2\2\2\u2104\u2109\7\u012d\2"+
		"\2\u2105\u2106\7\u01ef\2\2\u2106\u2109\7\u01f0\2\2\u2107\u2109\3\2\2\2"+
		"\u2108\u2104\3\2\2\2\u2108\u2105\3\2\2\2\u2108\u2107\3\2\2\2\u2109\u03a7"+
		"\3\2\2\2\u210a\u210b\5\u03d0\u01e9\2\u210b\u210c\7\u018e\2\2\u210c\u210d"+
		"\5\u0430\u0219\2\u210d\u210e\7\u016a\2\2\u210e\u210f\5\u03aa\u01d6\2\u210f"+
		"\u2110\5\u041a\u020e\2\u2110\u2111\5\u0442\u0222\2\u2111\u2112\5\u0398"+
		"\u01cd\2\u2112\u03a9\3\2\2\2\u2113\u2114\b\u01d6\1\2\u2114\u2115\5\u03ac"+
		"\u01d7\2\u2115\u211b\3\2\2\2\u2116\u2117\f\3\2\2\u2117\u2118\7\b\2\2\u2118"+
		"\u211a\5\u03ac\u01d7\2\u2119\u2116\3\2\2\2\u211a\u211d\3\2\2\2\u211b\u2119"+
		"\3\2\2\2\u211b\u211c\3\2\2\2\u211c\u03ab\3\2\2\2\u211d\u211b\3\2\2\2\u211e"+
		"\u211f\5\u03ae\u01d8\2\u211f\u2120\7\f\2\2\u2120\u2121\5\u0488\u0245\2"+
		"\u2121\u2129\3\2\2\2\u2122\u2123\7\4\2\2\u2123\u2124\5\u03b0\u01d9\2\u2124"+
		"\u2125\7\5\2\2\u2125\u2126\7\f\2\2\u2126\u2127\5\u0488\u0245\2\u2127\u2129"+
		"\3\2\2\2\u2128\u211e\3\2\2\2\u2128\u2122\3\2\2\2\u2129\u03ad\3\2\2\2\u212a"+
		"\u212b\5\u053a\u029e\2\u212b\u212c\5\u050a\u0286\2\u212c\u03af\3\2\2\2"+
		"\u212d\u212e\b\u01d9\1\2\u212e\u212f\5\u03ae\u01d8\2\u212f\u2135\3\2\2"+
		"\2\u2130\u2131\f\3\2\2\u2131\u2132\7\b\2\2\u2132\u2134\5\u03ae\u01d8\2"+
		"\u2133\u2130\3\2\2\2\u2134\u2137\3\2\2\2\u2135\u2133\3\2\2\2\u2135\u2136"+
		"\3\2\2\2\u2136\u03b1\3\2\2\2\u2137\u2135\3\2\2\2\u2138\u2139\7\u00d8\2"+
		"\2\u2139\u213a\5\u03b4\u01db\2\u213a\u213b\5\u03b6\u01dc\2\u213b\u213c"+
		"\7\u00d2\2\2\u213c\u213d\5\u03b8\u01dd\2\u213d\u213e\7d\2\2\u213e\u213f"+
		"\5\u03ba\u01de\2\u213f\u03b3\3\2\2\2\u2140\u2141\5\u051a\u028e\2\u2141"+
		"\u03b5\3\2\2\2\u2142\u214e\b\u01dc\1\2\u2143\u2144\f\6\2\2\u2144\u2145"+
		"\7\u012a\2\2\u2145\u214d\7\u0161\2\2\u2146\u2147\f\5\2\2\u2147\u214d\7"+
		"\u0161\2\2\u2148\u2149\f\4\2\2\u2149\u214d\7\u0091\2\2\u214a\u214b\f\3"+
		"\2\2\u214b\u214d\7\u010d\2\2\u214c\u2143\3\2\2\2\u214c\u2146\3\2\2\2\u214c"+
		"\u2148\3\2\2\2\u214c\u214a\3\2\2\2\u214d\u2150\3\2\2\2\u214e\u214c\3\2"+
		"\2\2\u214e\u214f\3\2\2\2\u214f\u03b7\3\2\2\2\u2150\u214e\3\2\2\2\u2151"+
		"\u2157\3\2\2\2\u2152\u2153\7\u008f\2\2\u2153\u2157\7\u00ff\2\2\u2154\u2155"+
		"\7\u0198\2\2\u2155\u2157\7\u00ff\2\2\u2156\u2151\3\2\2\2\u2156\u2152\3"+
		"\2\2\2\u2156\u2154\3\2\2\2\u2157\u03b9\3\2\2\2\u2158\u215b\5\u03be\u01e0"+
		"\2\u2159\u215b\5\u03bc\u01df\2\u215a\u2158\3\2\2\2\u215a\u2159\3\2\2\2"+
		"\u215b\u03bb\3\2\2\2\u215c\u215d\7\4\2\2\u215d\u215e\5\u03be\u01e0\2\u215e"+
		"\u215f\7\5\2\2\u215f\u2165\3\2\2\2\u2160\u2161\7\4\2\2\u2161\u2162\5\u03bc"+
		"\u01df\2\u2162\u2163\7\5\2\2\u2163\u2165\3\2\2\2\u2164\u215c\3\2\2\2\u2164"+
		"\u2160\3\2\2\2\u2165\u03bd\3\2\2\2\u2166\u2188\5\u03c2\u01e2\2\u2167\u2168"+
		"\5\u03c0\u01e1\2\u2168\u2169\5\u03e2\u01f2\2\u2169\u2188\3\2\2\2\u216a"+
		"\u216b\5\u03c0\u01e1\2\u216b\u216c\5\u03e0\u01f1\2\u216c\u216d\5\u040c"+
		"\u0207\2\u216d\u216e\5\u03ea\u01f6\2\u216e\u2188\3\2\2\2\u216f\u2170\5"+
		"\u03c0\u01e1\2\u2170\u2171\5\u03e0\u01f1\2\u2171\u2172\5\u03e8\u01f5\2"+
		"\u2172\u2173\5\u040e\u0208\2\u2173\u2188\3\2\2\2\u2174\u2175\5\u03c8\u01e5"+
		"\2\u2175\u2176\5\u03c0\u01e1\2\u2176\u2188\3\2\2\2\u2177\u2178\5\u03c8"+
		"\u01e5\2\u2178\u2179\5\u03c0\u01e1\2\u2179\u217a\5\u03e2\u01f2\2\u217a"+
		"\u2188\3\2\2\2\u217b\u217c\5\u03c8\u01e5\2\u217c\u217d\5\u03c0\u01e1\2"+
		"\u217d\u217e\5\u03e0\u01f1\2\u217e\u217f\5\u040c\u0207\2\u217f\u2180\5"+
		"\u03ea\u01f6\2\u2180\u2188\3\2\2\2\u2181\u2182\5\u03c8\u01e5\2\u2182\u2183"+
		"\5\u03c0\u01e1\2\u2183\u2184\5\u03e0\u01f1\2\u2184\u2185\5\u03e8\u01f5"+
		"\2\u2185\u2186\5\u040e\u0208\2\u2186\u2188\3\2\2\2\u2187\u2166\3\2\2\2"+
		"\u2187\u2167\3\2\2\2\u2187\u216a\3\2\2\2\u2187\u216f\3\2\2\2\u2187\u2174"+
		"\3\2\2\2\u2187\u2177\3\2\2\2\u2187\u217b\3\2\2\2\u2187\u2181\3\2\2\2\u2188"+
		"\u03bf\3\2\2\2\u2189\u218c\5\u03c2\u01e2\2\u218a\u218c\5\u03bc\u01df\2"+
		"\u218b\u2189\3\2\2\2\u218b\u218a\3\2\2\2\u218c\u03c1\3\2\2\2\u218d\u218e"+
		"\b\u01e2\1\2\u218e\u218f\7~\2\2\u218f\u2190\5\u03de\u01f0\2\u2190\u2191"+
		"\5\u03d2\u01ea\2\u2191\u2192\5\u050e\u0288\2\u2192\u2193\5\u03d2\u01ea"+
		"\2\u2193\u2194\5\u041a\u020e\2\u2194\u2195\5\u0440\u0221\2\u2195\u2196"+
		"\5\u03fc\u01ff\2\u2196\u2197\5\u040a\u0206\2\u2197\u2198\5\u04b0\u0259"+
		"\2\u2198\u21ad\3\2\2\2\u2199\u219a\7~\2\2\u219a\u219b\5\u03dc\u01ef\2"+
		"\u219b\u219c\5\u0510\u0289\2\u219c\u219d\5\u03d2\u01ea\2\u219d\u219e\5"+
		"\u041a\u020e\2\u219e\u219f\5\u0440\u0221\2\u219f\u21a0\5\u03fc\u01ff\2"+
		"\u21a0\u21a1\5\u040a\u0206\2\u21a1\u21a2\5\u04b0\u0259\2\u21a2\u21ad\3"+
		"\2\2\2\u21a3\u21ad\5\u0418\u020d\2\u21a4\u21a5\7\u0082\2\2\u21a5\u21ad"+
		"\5\u042c\u0217\2\u21a6\u21a7\5\u03bc\u01df\2\u21a7\u21aa\5\u03c6\u01e4"+
		"\2\u21a8\u21ab\5\u03c2\u01e2\2\u21a9\u21ab\5\u03bc\u01df\2\u21aa\u21a8"+
		"\3\2\2\2\u21aa\u21a9\3\2\2\2\u21ab\u21ad\3\2\2\2\u21ac\u218d\3\2\2\2\u21ac"+
		"\u2199\3\2\2\2\u21ac\u21a3\3\2\2\2\u21ac\u21a4\3\2\2\2\u21ac\u21a6\3\2"+
		"\2\2\u21ad\u21b6\3\2\2\2\u21ae\u21af\f\4\2\2\u21af\u21b2\5\u03c6\u01e4"+
		"\2\u21b0\u21b3\5\u03c2\u01e2\2\u21b1\u21b3\5\u03bc\u01df\2\u21b2\u21b0"+
		"\3\2\2\2\u21b2\u21b1\3\2\2\2\u21b3\u21b5\3\2\2\2\u21b4\u21ae\3\2\2\2\u21b5"+
		"\u21b8\3\2\2\2\u21b6\u21b4\3\2\2\2\u21b6\u21b7\3\2\2\2\u21b7\u03c3\3\2"+
		"\2\2\u21b8\u21b6\3\2\2\2\u21b9\u21bd\7\u0087\2\2\u21ba\u21bd\7l\2\2\u21bb"+
		"\u21bd\7a\2\2\u21bc\u21b9\3\2\2\2\u21bc\u21ba\3\2\2\2\u21bc\u21bb\3\2"+
		"\2\2\u21bd\u03c5\3\2\2\2\u21be\u21bf\5\u03c4\u01e3\2\u21bf\u21c0\5\u03da"+
		"\u01ee\2\u21c0\u03c7\3\2\2\2\u21c1\u21c2\7\u008f\2\2\u21c2\u21c7\5\u03ca"+
		"\u01e6\2\u21c3\u21c4\7\u008f\2\2\u21c4\u21c5\7\u014c\2\2\u21c5\u21c7\5"+
		"\u03ca\u01e6\2\u21c6\u21c1\3\2\2\2\u21c6\u21c3\3\2\2\2\u21c7\u03c9\3\2"+
		"\2\2\u21c8\u21c9\b\u01e6\1\2\u21c9\u21ca\5\u03cc\u01e7\2\u21ca\u21d0\3"+
		"\2\2\2\u21cb\u21cc\f\3\2\2\u21cc\u21cd\7\b\2\2\u21cd\u21cf\5\u03cc\u01e7"+
		"\2\u21ce\u21cb\3\2\2\2\u21cf\u21d2\3\2\2\2\u21d0\u21ce\3\2\2\2\u21d0\u21d1"+
		"\3\2\2\2\u21d1\u03cb\3\2\2\2\u21d2\u21d0\3\2\2\2\u21d3\u21d4\5\u051a\u028e"+
		"\2\u21d4\u21d5\5\u0368\u01b5\2\u21d5\u21d6\7J\2\2\u21d6\u21d7\5\u03ce"+
		"\u01e8\2\u21d7\u21d8\7\4\2\2\u21d8\u21d9\5\u0380\u01c1\2\u21d9\u21da\7"+
		"\5\2\2\u21da\u03cd\3\2\2\2\u21db\u21e0\7\u0120\2\2\u21dc\u21dd\7s\2\2"+
		"\u21dd\u21e0\7\u0120\2\2\u21de\u21e0\3\2\2\2\u21df\u21db\3\2\2\2\u21df"+
		"\u21dc\3\2\2\2\u21df\u21de\3\2\2\2\u21e0\u03cf\3\2\2\2\u21e1\u21e4\5\u03c8"+
		"\u01e5\2\u21e2\u21e4\3\2\2\2\u21e3\u21e1\3\2\2\2\u21e3\u21e2\3\2\2\2\u21e4"+
		"\u03d1\3\2\2\2\u21e5\u21e6\7m\2\2\u21e6\u21e7\5\u03d4\u01eb\2\u21e7\u21e8"+
		"\5\u03d6\u01ec\2\u21e8\u21ed\3\2\2\2\u21e9\u21ea\7m\2\2\u21ea\u21ed\5"+
		"\u05fc\u02ff\2\u21eb\u21ed\3\2\2\2\u21ec\u21e5\3\2\2\2\u21ec\u21e9\3\2"+
		"\2\2\u21ec\u21eb\3\2\2\2\u21ed\u03d3\3\2\2\2\u21ee\u21f1\3\2\2\2\u21ef"+
		"\u21f1\7\u0177\2\2\u21f0\u21ee\3\2\2\2\u21f0\u21ef\3\2\2\2\u21f1\u03d5"+
		"\3\2\2\2\u21f2\u21f3\7\u017f\2\2\u21f3\u21f4\5\u03d8\u01ed\2\u21f4\u21f5"+
		"\5\u0516\u028c\2\u21f5\u2216\3\2\2\2\u21f6\u21f7\7\u017d\2\2\u21f7\u21f8"+
		"\5\u03d8\u01ed\2\u21f8\u21f9\5\u0516\u028c\2\u21f9\u2216\3\2\2\2\u21fa"+
		"\u21fb\7\u011b\2\2\u21fb\u21fc\7\u017f\2\2\u21fc\u21fd\5\u03d8\u01ed\2"+
		"\u21fd\u21fe\5\u0516\u028c\2\u21fe\u2216\3\2\2\2\u21ff\u2200\7\u011b\2"+
		"\2\u2200\u2201\7\u017d\2\2\u2201\u2202\5\u03d8\u01ed\2\u2202\u2203\5\u0516"+
		"\u028c\2\u2203\u2216\3\2\2\2\u2204\u2205\7\u00fb\2\2\u2205\u2206\7\u017f"+
		"\2\2\u2206\u2207\5\u03d8\u01ed\2\u2207\u2208\5\u0516\u028c\2\u2208\u2216"+
		"\3\2\2\2\u2209\u220a\7\u00fb\2\2\u220a\u220b\7\u017d\2\2\u220b\u220c\5"+
		"\u03d8\u01ed\2\u220c\u220d\5\u0516\u028c\2\u220d\u2216\3\2\2\2\u220e\u220f"+
		"\7\u018c\2\2\u220f\u2210\5\u03d8\u01ed\2\u2210\u2211\5\u0516\u028c\2\u2211"+
		"\u2216\3\2\2\2\u2212\u2213\7\u0082\2\2\u2213\u2216\5\u0516\u028c\2\u2214"+
		"\u2216\5\u0516\u028c\2\u2215\u21f2\3\2\2\2\u2215\u21f6\3\2\2\2\u2215\u21fa"+
		"\3\2\2\2\u2215\u21ff\3\2\2\2\u2215\u2204\3\2\2\2\u2215\u2209\3\2\2\2\u2215"+
		"\u220e\3\2\2\2\u2215\u2212\3\2\2\2\u2215\u2214\3\2\2\2\u2216\u03d7\3\2"+
		"\2\2\u2217\u221a\7\u0082\2\2\u2218\u221a\3\2\2\2\u2219\u2217\3\2\2\2\u2219"+
		"\u2218\3\2\2\2\u221a\u03d9\3\2\2\2\u221b\u221f\7D\2\2\u221c\u221f\7^\2"+
		"\2\u221d\u221f\3\2\2\2\u221e\u221b\3\2\2\2\u221e\u221c\3\2\2\2\u221e\u221d"+
		"\3\2\2\2\u221f\u03db\3\2\2\2\u2220\u2228\7^\2\2\u2221\u2222\7^\2\2\u2222"+
		"\u2223\7v\2\2\u2223\u2224\7\4\2\2\u2224\u2225\5\u04dc\u026f\2\u2225\u2226"+
		"\7\5\2\2\u2226\u2228\3\2\2\2\u2227\u2220\3\2\2\2\u2227\u2221\3\2\2\2\u2228"+
		"\u03dd\3\2\2\2\u2229\u222c\7D\2\2\u222a\u222c\3\2\2\2\u222b\u2229\3\2"+
		"\2\2\u222b\u222a\3\2\2\2\u222c\u03df\3\2\2\2\u222d\u2230\5\u03e2\u01f2"+
		"\2\u222e\u2230\3\2\2\2\u222f\u222d\3\2\2\2\u222f\u222e\3\2\2\2\u2230\u03e1"+
		"\3\2\2\2\u2231\u2232\7y\2\2\u2232\u2233\7\u00b9\2\2\u2233\u2234\5\u03e4"+
		"\u01f3\2\u2234\u03e3\3\2\2\2\u2235\u223a\5\u03e6\u01f4\2\u2236\u2237\7"+
		"\b\2\2\u2237\u2239\5\u03e6\u01f4\2\u2238\u2236\3\2\2\2\u2239\u223c\3\2"+
		"\2\2\u223a\u2238\3\2\2\2\u223a\u223b\3\2\2\2\u223b\u03e5\3\2\2\2\u223c"+
		"\u223a\3\2\2\2\u223d\u223e\5\u0488\u0245\2\u223e\u2241\7\u008a\2\2\u223f"+
		"\u2242\5\u04d0\u0269\2\u2240\u2242\5\u04d8\u026d\2\u2241\u223f\3\2\2\2"+
		"\u2241\u2240\3\2\2\2\u2242\u2243\3\2\2\2\u2243\u2244\5\u0268\u0135\2\u2244"+
		"\u224a\3\2\2\2\u2245\u2246\5\u0488\u0245\2\u2246\u2247\5\u0266\u0134\2"+
		"\u2247\u2248\5\u0268\u0135\2\u2248\u224a\3\2\2\2\u2249\u223d\3\2\2\2\u2249"+
		"\u2245\3\2\2\2\u224a\u03e7\3\2\2\2\u224b\u224c\5\u03ec\u01f7\2\u224c\u224d"+
		"\5\u03ee\u01f8\2\u224d\u2254\3\2\2\2\u224e\u224f\5\u03ee\u01f8\2\u224f"+
		"\u2250\5\u03ec\u01f7\2\u2250\u2254\3\2\2\2\u2251\u2254\5\u03ec\u01f7\2"+
		"\u2252\u2254\5\u03ee\u01f8\2\u2253\u224b\3\2\2\2\u2253\u224e\3\2\2\2\u2253"+
		"\u2251\3\2\2\2\u2253\u2252\3\2\2\2\u2254\u03e9\3\2\2\2\u2255\u2258\5\u03e8"+
		"\u01f5\2\u2256\u2258\3\2\2\2\u2257\u2255\3\2\2\2\u2257\u2256\3\2\2\2\u2258"+
		"\u03eb\3\2\2\2\u2259\u225a\7p\2\2\u225a\u2279\5\u03f0\u01f9\2\u225b\u225c"+
		"\7p\2\2\u225c\u225d\5\u03f0\u01f9\2\u225d\u225e\7\b\2\2\u225e\u225f\5"+
		"\u03f2\u01fa\2\u225f\u2279\3\2\2\2\u2260\u2261\7c\2\2\u2261\u2262\5\u03fa"+
		"\u01fe\2\u2262\u2263\5\u03f4\u01fb\2\u2263\u2264\5\u03f8\u01fd\2\u2264"+
		"\u2265\7w\2\2\u2265\u2279\3\2\2\2\u2266\u2267\7c\2\2\u2267\u2268\5\u03fa"+
		"\u01fe\2\u2268\u2269\5\u03f4\u01fb\2\u2269\u226a\5\u03f8\u01fd\2\u226a"+
		"\u226b\7\u008f\2\2\u226b\u226c\7\u01f1\2\2\u226c\u2279\3\2\2\2\u226d\u226e"+
		"\7c\2\2\u226e\u226f\5\u03fa\u01fe\2\u226f\u2270\5\u03f8\u01fd\2\u2270"+
		"\u2271\7w\2\2\u2271\u2279\3\2\2\2\u2272\u2273\7c\2\2\u2273\u2274\5\u03fa"+
		"\u01fe\2\u2274\u2275\5\u03f8\u01fd\2\u2275\u2276\7\u008f\2\2\u2276\u2277"+
		"\7\u01f1\2\2\u2277\u2279\3\2\2\2\u2278\u2259\3\2\2\2\u2278\u225b\3\2\2"+
		"\2\u2278\u2260\3\2\2\2\u2278\u2266\3\2\2\2\u2278\u226d\3\2\2\2\u2278\u2272"+
		"\3\2\2\2\u2279\u03ed\3\2\2\2\u227a\u227b\7u\2\2\u227b\u2281\5\u03f2\u01fa"+
		"\2\u227c\u227d\7u\2\2\u227d\u227e\5\u03f4\u01fb\2\u227e\u227f\5\u03f8"+
		"\u01fd\2\u227f\u2281\3\2\2\2\u2280\u227a\3\2\2\2\u2280\u227c\3\2\2\2\u2281"+
		"\u03ef\3\2\2\2\u2282\u2285\5\u0488\u0245\2\u2283\u2285\7D\2\2\u2284\u2282"+
		"\3\2\2\2\u2284\u2283\3\2\2\2\u2285\u03f1\3\2\2\2\u2286\u2287\5\u0488\u0245"+
		"\2\u2287\u03f3\3\2\2\2\u2288\u228e\5\u048e\u0248\2\u2289\u228a\7\20\2"+
		"\2\u228a\u228e\5\u03f6\u01fc\2\u228b\u228c\7\21\2\2\u228c\u228e\5\u03f6"+
		"\u01fc\2\u228d\u2288\3\2\2\2\u228d\u2289\3\2\2\2\u228d\u228b\3\2\2\2\u228e"+
		"\u03f5\3\2\2\2\u228f\u2292\5\u052a\u0296\2\u2290\u2292\5\u0528\u0295\2"+
		"\u2291\u228f\3\2\2\2\u2291\u2290\3\2\2\2\u2292\u03f7\3\2\2\2\u2293\u2294"+
		"\t\23\2\2\u2294\u03f9\3\2\2\2\u2295\u2296\t\24\2\2\u2296\u03fb\3\2\2\2"+
		"\u2297\u2298\7h\2\2\u2298\u2299\7\u00b9\2\2\u2299\u229c\5\u03fe\u0200"+
		"\2\u229a\u229c\3\2\2\2\u229b\u2297\3\2\2\2\u229b\u229a\3\2\2\2\u229c\u03fd"+
		"\3\2\2\2\u229d\u229e\b\u0200\1\2\u229e\u229f\5\u0400\u0201\2\u229f\u22a5"+
		"\3\2\2\2\u22a0\u22a1\f\3\2\2\u22a1\u22a2\7\b\2\2\u22a2\u22a4\5\u0400\u0201"+
		"\2\u22a3\u22a0\3\2\2\2\u22a4\u22a7\3\2\2\2\u22a5\u22a3\3\2\2\2\u22a5\u22a6"+
		"\3\2\2\2\u22a6\u03ff\3\2\2\2\u22a7\u22a5\3\2\2\2\u22a8\u22ae\5\u0488\u0245"+
		"\2\u22a9\u22ae\5\u0402\u0202\2\u22aa\u22ae\5\u0406\u0204\2\u22ab\u22ae"+
		"\5\u0404\u0203\2\u22ac\u22ae\5\u0408\u0205\2\u22ad\u22a8\3\2\2\2\u22ad"+
		"\u22a9\3\2\2\2\u22ad\u22aa\3\2\2\2\u22ad\u22ab\3\2\2\2\u22ad\u22ac\3\2"+
		"\2\2\u22ae\u0401\3\2\2\2\u22af\u22b0\7\4\2\2\u22b0\u22b1\7\5\2\2\u22b1"+
		"\u0403\3\2\2\2\u22b2\u22b3\7\u01f2\2\2\u22b3\u22b4\7\4\2\2\u22b4\u22b5"+
		"\5\u04dc\u026f\2\u22b5\u22b6\7\5\2\2\u22b6\u0405\3\2\2\2\u22b7\u22b8\7"+
		"\u01f3\2\2\u22b8\u22b9\7\4\2\2\u22b9\u22ba\5\u04dc\u026f\2\u22ba\u22bb"+
		"\7\5\2\2\u22bb\u0407\3\2\2\2\u22bc\u22bd\7\u01f4\2\2\u22bd\u22be\7\u01f5"+
		"\2\2\u22be\u22bf\7\4\2\2\u22bf\u22c0\5\u03fe\u0200\2\u22c0\u22c1\7\5\2"+
		"\2\u22c1\u0409\3\2\2\2\u22c2\u22c3\7i\2\2\u22c3\u22c6\5\u0488\u0245\2"+
		"\u22c4\u22c6\3\2\2\2\u22c5\u22c2\3\2\2\2\u22c5\u22c4\3\2\2\2\u22c6\u040b"+
		"\3\2\2\2\u22c7\u22cc\5\u0410\u0209\2\u22c8\u22c9\7d\2\2\u22c9\u22ca\7"+
		"\u0149\2\2\u22ca\u22cc\7w\2\2\u22cb\u22c7\3\2\2\2\u22cb\u22c8\3\2\2\2"+
		"\u22cc\u040d\3\2\2\2\u22cd\u22d0\5\u040c\u0207\2\u22ce\u22d0\3\2\2\2\u22cf"+
		"\u22cd\3\2\2\2\u22cf\u22ce\3\2\2\2\u22d0\u040f\3\2\2\2\u22d1\u22d2\b\u0209"+
		"\1\2\u22d2\u22d3\5\u0412\u020a\2\u22d3\u22d8\3\2\2\2\u22d4\u22d5\f\3\2"+
		"\2\u22d5\u22d7\5\u0412\u020a\2\u22d6\u22d4\3\2\2\2\u22d7\u22da\3\2\2\2"+
		"\u22d8\u22d6\3\2\2\2\u22d8\u22d9\3\2\2\2\u22d9\u0411\3\2\2\2\u22da\u22d8"+
		"\3\2\2\2\u22db\u22dc\5\u0414\u020b\2\u22dc\u22dd\5\u0416\u020c\2\u22dd"+
		"\u22de\5\u03a6\u01d4\2\u22de\u0413\3\2\2\2\u22df\u22e0\7d\2\2\u22e0\u22eb"+
		"\7\u018e\2\2\u22e1\u22e2\7d\2\2\u22e2\u22e3\7\u012a\2\2\u22e3\u22e4\7"+
		"\u0112\2\2\u22e4\u22eb\7\u018e\2\2\u22e5\u22e6\7d\2\2\u22e6\u22eb\7\u016b"+
		"\2\2\u22e7\u22e8\7d\2\2\u22e8\u22e9\7\u0112\2\2\u22e9\u22eb\7\u016b\2"+
		"\2\u22ea\u22df\3\2\2\2\u22ea\u22e1\3\2\2\2\u22ea\u22e5\3\2\2\2\u22ea\u22e7"+
		"\3\2\2\2\u22eb\u0415\3\2\2\2\u22ec\u22ed\7\u0130\2\2\u22ed\u22f0\5\u0514"+
		"\u028b\2\u22ee\u22f0\3\2\2\2\u22ef\u22ec\3\2\2\2\u22ef\u22ee\3\2\2\2\u22f0"+
		"\u0417\3\2\2\2\u22f1\u22f2\b\u020d\1\2\u22f2\u22f3\7\u01c3\2\2\u22f3\u22f4"+
		"\7\4\2\2\u22f4\u22f5\5\u04dc\u026f\2\u22f5\u22f6\7\5\2\2\u22f6\u22ff\3"+
		"\2\2\2\u22f7\u22f8\f\3\2\2\u22f8\u22f9\7\b\2\2\u22f9\u22fa\7\4\2\2\u22fa"+
		"\u22fb\5\u04dc\u026f\2\u22fb\u22fc\7\5\2\2\u22fc\u22fe\3\2\2\2\u22fd\u22f7"+
		"\3\2\2\2\u22fe\u2301\3\2\2\2\u22ff\u22fd\3\2\2\2\u22ff\u2300\3\2\2\2\u2300"+
		"\u0419\3\2\2\2\u2301\u22ff\3\2\2\2\u2302\u2303\7f\2\2\u2303\u2306\5\u041c"+
		"\u020f\2\u2304\u2306\3\2\2\2\u2305\u2302\3\2\2\2\u2305\u2304\3\2\2\2\u2306"+
		"\u041b\3\2\2\2\u2307\u230c\5\u041e\u0210\2\u2308\u2309\7\b\2\2\u2309\u230b"+
		"\5\u041e\u0210\2\u230a\u2308\3\2\2\2\u230b\u230e\3\2\2\2\u230c\u230a\3"+
		"\2\2\2\u230c\u230d\3\2\2\2\u230d\u041d\3\2\2\2\u230e\u230c\3\2\2\2\u230f"+
		"\u2310\b\u0210\1\2\u2310\u2311\5\u042c\u0217\2\u2311\u2312\5\u0422\u0212"+
		"\2\u2312\u2353\3\2\2\2\u2313\u2314\5\u042c\u0217\2\u2314\u2315\5\u0422"+
		"\u0212\2\u2315\u2316\5\u0432\u021a\2\u2316\u2353\3\2\2\2\u2317\u2318\5"+
		"\u0436\u021c\2\u2318\u2319\5\u0424\u0213\2\u2319\u2353\3\2\2\2\u231a\u231b"+
		"\7n\2\2\u231b\u231c\5\u0436\u021c\2\u231c\u231d\5\u0424\u0213\2\u231d"+
		"\u2353\3\2\2\2\u231e\u231f\5\u044a\u0226\2\u231f\u2320\5\u0422\u0212\2"+
		"\u2320\u2353\3\2\2\2\u2321\u2322\7n\2\2\u2322\u2323\5\u044a\u0226\2\u2323"+
		"\u2324\5\u0422\u0212\2\u2324\u2353\3\2\2\2\u2325\u2326\5\u03bc\u01df\2"+
		"\u2326\u2327\5\u0422\u0212\2\u2327\u2353\3\2\2\2\u2328\u2329\7n\2\2\u2329"+
		"\u232a\5\u03bc\u01df\2\u232a\u232b\5\u0422\u0212\2\u232b\u2353\3\2\2\2"+
		"\u232c\u232d\7\4\2\2\u232d\u232e\5\u041e\u0210\2\u232e\u232f\7\5\2\2\u232f"+
		"\u2330\5\u0422\u0212\2\u2330\u2353\3\2\2\2\u2331\u234d\7\4\2\2\u2332\u2333"+
		"\5\u041e\u0210\2\u2333\u2334\7\u0094\2\2\u2334\u2335\7\u009c\2\2\u2335"+
		"\u2336\5\u041e\u0210\2\u2336\u234e\3\2\2\2\u2337\u2338\5\u041e\u0210\2"+
		"\u2338\u2339\5\u0426\u0214\2\u2339\u233a\7\u009c\2\2\u233a\u233b\5\u041e"+
		"\u0210\2\u233b\u233c\5\u042a\u0216\2\u233c\u234e\3\2\2\2\u233d\u233e\5"+
		"\u041e\u0210\2\u233e\u233f\7\u009c\2\2\u233f\u2340\5\u041e\u0210\2\u2340"+
		"\u2341\5\u042a\u0216\2\u2341\u234e\3\2\2\2\u2342\u2343\5\u041e\u0210\2"+
		"\u2343\u2344\7\u009f\2\2\u2344\u2345\5\u0426\u0214\2\u2345\u2346\7\u009c"+
		"\2\2\u2346\u2347\5\u041e\u0210\2\u2347\u234e\3\2\2\2\u2348\u2349\5\u041e"+
		"\u0210\2\u2349\u234a\7\u009f\2\2\u234a\u234b\7\u009c\2\2\u234b\u234c\5"+
		"\u041e\u0210\2\u234c\u234e\3\2\2\2\u234d\u2332\3\2\2\2\u234d\u2337\3\2"+
		"\2\2\u234d\u233d\3\2\2\2\u234d\u2342\3\2\2\2\u234d\u2348\3\2\2\2\u234e"+
		"\u234f\3\2\2\2\u234f\u2350\7\5\2\2\u2350\u2351\5\u0422\u0212\2\u2351\u2353"+
		"\3\2\2\2\u2352\u230f\3\2\2\2\u2352\u2313\3\2\2\2\u2352\u2317\3\2\2\2\u2352"+
		"\u231a\3\2\2\2\u2352\u231e\3\2\2\2\u2352\u2321\3\2\2\2\u2352\u2325\3\2"+
		"\2\2\u2352\u2328\3\2\2\2\u2352\u232c\3\2\2\2\u2352\u2331\3\2\2\2\u2353"+
		"\u236f\3\2\2\2\u2354\u2355\f\t\2\2\u2355\u2356\7\u0094\2\2\u2356\u2357"+
		"\7\u009c\2\2\u2357\u236e\5\u041e\u0210\n\u2358\u2359\f\6\2\2\u2359\u235a"+
		"\7\u009f\2\2\u235a\u235b\5\u0426\u0214\2\u235b\u235c\7\u009c\2\2\u235c"+
		"\u235d\5\u041e\u0210\7\u235d\u236e\3\2\2\2\u235e\u235f\f\5\2\2\u235f\u2360"+
		"\7\u009f\2\2\u2360\u2361\7\u009c\2\2\u2361\u236e\5\u041e\u0210\6\u2362"+
		"\u2363\f\b\2\2\u2363\u2364\5\u0426\u0214\2\u2364\u2365\7\u009c\2\2\u2365"+
		"\u2366\5\u041e\u0210\2\u2366\u2367\5\u042a\u0216\2\u2367\u236e\3\2\2\2"+
		"\u2368\u2369\f\7\2\2\u2369\u236a\7\u009c\2\2\u236a\u236b\5\u041e\u0210"+
		"\2\u236b\u236c\5\u042a\u0216\2\u236c\u236e\3\2\2\2\u236d\u2354\3\2\2\2"+
		"\u236d\u2358\3\2\2\2\u236d\u235e\3\2\2\2\u236d\u2362\3\2\2\2\u236d\u2368"+
		"\3\2\2\2\u236e\u2371\3\2\2\2\u236f\u236d\3\2\2\2\u236f\u2370\3\2\2\2\u2370"+
		"\u041f\3\2\2\2\u2371\u236f\3\2\2\2\u2372\u2373\7J\2\2\u2373\u2374\5\u053a"+
		"\u029e\2\u2374\u2375\7\4\2\2\u2375\u2376\5\u0518\u028d\2\u2376\u2377\7"+
		"\5\2\2\u2377\u2381\3\2\2\2\u2378\u2379\7J\2\2\u2379\u2381\5\u053a\u029e"+
		"\2\u237a\u237b\5\u053a\u029e\2\u237b\u237c\7\4\2\2\u237c\u237d\5\u0518"+
		"\u028d\2\u237d\u237e\7\5\2\2\u237e\u2381\3\2\2\2\u237f\u2381\5\u053a\u029e"+
		"\2\u2380\u2372\3\2\2\2\u2380\u2378\3\2\2\2\u2380\u237a\3\2\2\2\u2380\u237f"+
		"\3\2\2\2\u2381\u0421\3\2\2\2\u2382\u2385\5\u0420\u0211\2\u2383\u2385\3"+
		"\2\2\2\u2384\u2382\3\2\2\2\u2384\u2383\3\2\2\2\u2385\u0423\3\2\2\2\u2386"+
		"\u2399\5\u0420\u0211\2\u2387\u2388\7J\2\2\u2388\u2389\7\4\2\2\u2389\u238a"+
		"\5\u0446\u0224\2\u238a\u238b\7\5\2\2\u238b\u2399\3\2\2\2\u238c\u238d\7"+
		"J\2\2\u238d\u238e\5\u053a\u029e\2\u238e\u238f\7\4\2\2\u238f\u2390\5\u0446"+
		"\u0224\2\u2390\u2391\7\5\2\2\u2391\u2399\3\2\2\2\u2392\u2393\5\u053a\u029e"+
		"\2\u2393\u2394\7\4\2\2\u2394\u2395\5\u0446\u0224\2\u2395\u2396\7\5\2\2"+
		"\u2396\u2399\3\2\2\2\u2397\u2399\3\2\2\2\u2398\u2386\3\2\2\2\u2398\u2387"+
		"\3\2\2\2\u2398\u238c\3\2\2\2\u2398\u2392\3\2\2\2\u2398\u2397\3\2\2\2\u2399"+
		"\u0425\3\2\2\2\u239a\u239b\7\u0097\2\2\u239b\u23a2\5\u0428\u0215\2\u239c"+
		"\u239d\7\u009d\2\2\u239d\u23a2\5\u0428\u0215\2\u239e\u239f\7\u00a4\2\2"+
		"\u239f\u23a2\5\u0428\u0215\2\u23a0\u23a2\7\u0099\2\2\u23a1\u239a\3\2\2"+
		"\2\u23a1\u239c\3\2\2\2\u23a1\u239e\3\2\2\2\u23a1\u23a0\3\2\2\2\u23a2\u0427"+
		"\3\2\2\2\u23a3\u23a6\7\u00a1\2\2\u23a4\u23a6\3\2\2\2\u23a5\u23a3\3\2\2"+
		"\2\u23a5\u23a4\3\2\2\2\u23a6\u0429\3\2\2\2\u23a7\u23a8\7\u008a\2\2\u23a8"+
		"\u23a9\7\4\2\2\u23a9\u23aa\5\u0518\u028d\2\u23aa\u23ab\7\5\2\2\u23ab\u23af"+
		"\3\2\2\2\u23ac\u23ad\7v\2\2\u23ad\u23af\5\u0488\u0245\2\u23ae\u23a7\3"+
		"\2\2\2\u23ae\u23ac\3\2\2\2\u23af\u042b\3\2\2\2\u23b0\u23bc\5\u0516\u028c"+
		"\2\u23b1\u23b2\5\u0516\u028c\2\u23b2\u23b3\7\13\2\2\u23b3\u23bc\3\2\2"+
		"\2\u23b4\u23b5\7w\2\2\u23b5\u23bc\5\u0516\u028c\2\u23b6\u23b7\7w\2\2\u23b7"+
		"\u23b8\7\4\2\2\u23b8\u23b9\5\u0516\u028c\2\u23b9\u23ba\7\5\2\2\u23ba\u23bc"+
		"\3\2\2\2\u23bb\u23b0\3\2\2\2\u23bb\u23b1\3\2\2\2\u23bb\u23b4\3\2\2\2\u23bb"+
		"\u23b6\3\2\2\2\u23bc\u042d\3\2\2\2\u23bd\u23be\b\u0218\1\2\u23be\u23bf"+
		"\5\u042c\u0217\2\u23bf\u23c5\3\2\2\2\u23c0\u23c1\f\3\2\2\u23c1\u23c2\7"+
		"\b\2\2\u23c2\u23c4\5\u042c\u0217\2\u23c3\u23c0\3\2\2\2\u23c4\u23c7\3\2"+
		"\2\2\u23c5\u23c3\3\2\2\2\u23c5\u23c6\3\2\2\2\u23c6\u042f\3\2\2\2\u23c7"+
		"\u23c5\3\2\2\2\u23c8\u23d1\5\u042c\u0217\2\u23c9\u23ca\5\u042c\u0217\2"+
		"\u23ca\u23cb\5\u053a\u029e\2\u23cb\u23d1\3\2\2\2\u23cc\u23cd\5\u042c\u0217"+
		"\2\u23cd\u23ce\7J\2\2\u23ce\u23cf\5\u053a\u029e\2\u23cf\u23d1\3\2\2\2"+
		"\u23d0\u23c8\3\2\2\2\u23d0\u23c9\3\2\2\2\u23d0\u23cc\3\2\2\2\u23d1\u0431"+
		"\3\2\2\2\u23d2\u23d3\7\u01f6\2\2\u23d3\u23d4\5\u0520\u0291\2\u23d4\u23d5"+
		"\7\4\2\2\u23d5\u23d6\5\u04dc\u026f\2\u23d6\u23d7\7\5\2\2\u23d7\u23d8\5"+
		"\u0434\u021b\2\u23d8\u0433\3\2\2\2\u23d9\u23da\7\u0153\2\2\u23da\u23db"+
		"\7\4\2\2\u23db\u23dc\5\u0488\u0245\2\u23dc\u23dd\7\5\2\2\u23dd\u23e0\3"+
		"\2\2\2\u23de\u23e0\3\2\2\2\u23df\u23d9\3\2\2\2\u23df\u23de\3\2\2\2\u23e0"+
		"\u0435\3\2\2\2\u23e1\u23e2\5\u0496\u024c\2\u23e2\u23e3\5\u043e\u0220\2"+
		"\u23e3\u23ec\3\2\2\2\u23e4\u23e5\7\u015d\2\2\u23e5\u23e6\7f\2\2\u23e6"+
		"\u23e7\7\4\2\2\u23e7\u23e8\5\u043a\u021e\2\u23e8\u23e9\7\5\2\2\u23e9\u23ea"+
		"\5\u043e\u0220\2\u23ea\u23ec\3\2\2\2\u23eb\u23e1\3\2\2\2\u23eb\u23e4\3"+
		"\2\2\2\u23ec\u0437\3\2\2\2\u23ed\u23ee\5\u0496\u024c\2\u23ee\u23ef\5\u043c"+
		"\u021f\2\u23ef\u0439\3\2\2\2\u23f0\u23f1\b\u021e\1\2\u23f1\u23f2\5\u0438"+
		"\u021d\2\u23f2\u23f8\3\2\2\2\u23f3\u23f4\f\3\2\2\u23f4\u23f5\7\b\2\2\u23f5"+
		"\u23f7\5\u0438\u021d\2\u23f6\u23f3\3\2\2\2\u23f7\u23fa\3\2\2\2\u23f8\u23f6"+
		"\3\2\2\2\u23f8\u23f9\3\2\2\2\u23f9\u043b\3\2\2\2\u23fa\u23f8\3\2\2\2\u23fb"+
		"\u23fc\7J\2\2\u23fc\u23fd\7\4\2\2\u23fd\u23fe\5\u0446\u0224\2\u23fe\u23ff"+
		"\7\5\2\2\u23ff\u2402\3\2\2\2\u2400\u2402\3\2\2\2\u2401\u23fb\3\2\2\2\u2401"+
		"\u2400\3\2\2\2\u2402\u043d\3\2\2\2\u2403\u2404\7\u008f\2\2\u2404\u2407"+
		"\7\u01f7\2\2\u2405\u2407\3\2\2\2\u2406\u2403\3\2\2\2\u2406\u2405\3\2\2"+
		"\2\u2407\u043f\3\2\2\2\u2408\u2409\7\u008d\2\2\u2409\u240c\5\u0488\u0245"+
		"\2\u240a\u240c\3\2\2\2\u240b\u2408\3\2\2\2\u240b\u240a\3\2\2\2\u240c\u0441"+
		"\3\2\2\2\u240d\u240e\7\u008d\2\2\u240e\u2415\5\u0488\u0245\2\u240f\u2410"+
		"\7\u008d\2\2\u2410\u2411\7\u01cf\2\2\u2411\u2412\7\u0130\2\2\u2412\u2415"+
		"\5\u03b4\u01db\2\u2413\u2415\3\2\2\2\u2414\u240d\3\2\2\2\u2414\u240f\3"+
		"\2\2\2\u2414\u2413\3\2\2\2\u2415\u0443\3\2\2\2\u2416\u2419\5\u0446\u0224"+
		"\2\u2417\u2419\3\2\2\2\u2418\u2416\3\2\2\2\u2418\u2417\3\2\2\2\u2419\u0445"+
		"\3\2\2\2\u241a\u241b\b\u0224\1\2\u241b\u241c\5\u0448\u0225\2\u241c\u2422"+
		"\3\2\2\2\u241d\u241e\f\3\2\2\u241e\u241f\7\b\2\2\u241f\u2421\5\u0448\u0225"+
		"\2\u2420\u241d\3\2\2\2\u2421\u2424\3\2\2\2\u2422\u2420\3\2\2\2\u2422\u2423"+
		"\3\2\2\2\u2423\u0447\3\2\2\2\u2424\u2422\3\2\2\2\u2425\u2426\5\u053a\u029e"+
		"\2\u2426\u2427\5\u0458\u022d\2\u2427\u2428\5p9\2\u2428\u0449\3\2\2\2\u2429"+
		"\u242a\7\u01f8\2\2\u242a\u242b\7\4\2\2\u242b\u242c\5\u048e\u0248\2\u242c"+
		"\u242d\5\u04a8\u0255\2\u242d\u242e\7\u01f9\2\2\u242e\u242f\5\u044c\u0227"+
		"\2\u242f\u2430\7\5\2\2\u2430\u243f\3\2\2\2\u2431\u2432\7\u01f8\2\2\u2432"+
		"\u2433\7\4\2\2\u2433\u2434\7\u01fa\2\2\u2434\u2435\7\4\2\2\u2435\u2436"+
		"\5\u0454\u022b\2\u2436\u2437\7\5\2\2\u2437\u2438\7\b\2\2\u2438\u2439\5"+
		"\u048e\u0248\2\u2439\u243a\5\u04a8\u0255\2\u243a\u243b\7\u01f9\2\2\u243b"+
		"\u243c\5\u044c\u0227\2\u243c\u243d\7\5\2\2\u243d\u243f\3\2\2\2\u243e\u2429"+
		"\3\2\2\2\u243e\u2431\3\2\2\2\u243f\u044b\3\2\2\2\u2440\u2441\b\u0227\1"+
		"\2\u2441\u2442\5\u044e\u0228\2\u2442\u2448\3\2\2\2\u2443\u2444\f\3\2\2"+
		"\u2444\u2445\7\b\2\2\u2445\u2447\5\u044e\u0228\2\u2446\u2443\3\2\2\2\u2447"+
		"\u244a\3\2\2\2\u2448\u2446\3\2\2\2\u2448\u2449\3\2\2\2\u2449\u044d\3\2"+
		"\2\2\u244a\u2448\3\2\2\2\u244b\u244c\5\u053a\u029e\2\u244c\u244d\5\u0458"+
		"\u022d\2\u244d\u2457\3\2\2\2\u244e\u244f\5\u053a\u029e\2\u244f\u2450\5"+
		"\u0458\u022d\2\u2450\u2451\5\u0450\u0229\2\u2451\u2457\3\2\2\2\u2452\u2453"+
		"\5\u053a\u029e\2\u2453\u2454\7d\2\2\u2454\u2455\7\u01f7\2\2\u2455\u2457"+
		"\3\2\2\2\u2456\u244b\3\2\2\2\u2456\u244e\3\2\2\2\u2456\u2452\3\2\2\2\u2457"+
		"\u044f\3\2\2\2\u2458\u2459\b\u0229\1\2\u2459\u245a\5\u0452\u022a\2\u245a"+
		"\u245f\3\2\2\2\u245b\u245c\f\3\2\2\u245c\u245e\5\u0452\u022a\2\u245d\u245b"+
		"\3\2\2\2\u245e\u2461\3\2\2\2\u245f\u245d\3\2\2\2\u245f\u2460\3\2\2\2\u2460"+
		"\u0451\3\2\2\2\u2461\u245f\3\2\2\2\u2462\u2463\5\u0542\u02a2\2\u2463\u2464"+
		"\5\u048c\u0247\2\u2464\u246b\3\2\2\2\u2465\u2466\7[\2\2\u2466\u246b\5"+
		"\u048c\u0247\2\u2467\u2468\7s\2\2\u2468\u246b\7t\2\2\u2469\u246b\7t\2"+
		"\2\u246a\u2462\3\2\2\2\u246a\u2465\3\2\2\2\u246a\u2467\3\2\2\2\u246a\u2469"+
		"\3\2\2\2\u246b\u0453\3\2\2\2\u246c\u246d\b\u022b\1\2\u246d\u246e\5\u0456"+
		"\u022c\2\u246e\u2474\3\2\2\2\u246f\u2470\f\3\2\2\u2470\u2471\7\b\2\2\u2471"+
		"\u2473\5\u0456\u022c\2\u2472\u246f\3\2\2\2\u2473\u2476\3\2\2\2\u2474\u2472"+
		"\3\2\2\2\u2474\u2475\3\2\2\2\u2475\u0455\3\2\2\2\u2476\u2474\3\2\2\2\u2477"+
		"\u2478\5\u048c\u0247\2\u2478\u2479\7J\2\2\u2479\u247a\5\u0540\u02a1\2"+
		"\u247a\u247e\3\2\2\2\u247b\u247c\7[\2\2\u247c\u247e\5\u048c\u0247\2\u247d"+
		"\u2477\3\2\2\2\u247d\u247b\3\2\2\2\u247e\u0457\3\2\2\2\u247f\u2480\5\u045c"+
		"\u022f\2\u2480\u2481\5\u045a\u022e\2\u2481\u24a3\3\2\2\2\u2482\u2483\7"+
		"\u01bc\2\2\u2483\u2484\5\u045c\u022f\2\u2484\u2485\5\u045a\u022e\2\u2485"+
		"\u24a3\3\2\2\2\u2486\u2487\5\u045c\u022f\2\u2487\u2488\7I\2\2\u2488\u2489"+
		"\7\6\2\2\u2489\u248a\5\u052a\u0296\2\u248a\u248b\7\7\2\2\u248b\u24a3\3"+
		"\2\2\2\u248c\u248d\7\u01bc\2\2\u248d\u248e\5\u045c\u022f\2\u248e\u248f"+
		"\7I\2\2\u248f\u2490\7\6\2\2\u2490\u2491\5\u052a\u0296\2\u2491\u2492\7"+
		"\7\2\2\u2492\u24a3\3\2\2\2\u2493\u2494\5\u045c\u022f\2\u2494\u2495\7I"+
		"\2\2\u2495\u24a3\3\2\2\2\u2496\u2497\7\u01bc\2\2\u2497\u2498\5\u045c\u022f"+
		"\2\u2498\u2499\7I\2\2\u2499\u24a3\3\2\2\2\u249a\u249b\5\u0516\u028c\2"+
		"\u249b\u249c\7 \2\2\u249c\u249d\7\u01fb\2\2\u249d\u24a3\3\2\2\2\u249e"+
		"\u249f\5\u0516\u028c\2\u249f\u24a0\7 \2\2\u24a0\u24a1\7\u0185\2\2\u24a1"+
		"\u24a3\3\2\2\2\u24a2\u247f\3\2\2\2\u24a2\u2482\3\2\2\2\u24a2\u2486\3\2"+
		"\2\2\u24a2\u248c\3\2\2\2\u24a2\u2493\3\2\2\2\u24a2\u2496\3\2\2\2\u24a2"+
		"\u249a\3\2\2\2\u24a2\u249e\3\2\2\2\u24a3\u0459\3\2\2\2\u24a4\u24af\b\u022e"+
		"\1\2\u24a5\u24a6\f\5\2\2\u24a6\u24a7\7\6\2\2\u24a7\u24ae\7\7\2\2\u24a8"+
		"\u24a9\f\4\2\2\u24a9\u24aa\7\6\2\2\u24aa\u24ab\5\u052a\u0296\2\u24ab\u24ac"+
		"\7\7\2\2\u24ac\u24ae\3\2\2\2\u24ad\u24a5\3\2\2\2\u24ad\u24a8\3\2\2\2\u24ae"+
		"\u24b1\3\2\2\2\u24af\u24ad\3\2\2\2\u24af\u24b0\3\2\2\2\u24b0\u045b\3\2"+
		"\2\2\u24b1\u24af\3\2\2\2\u24b2\u24c0\5\u0460\u0231\2\u24b3\u24c0\5\u0464"+
		"\u0233\2\u24b4\u24c0\5\u0468\u0235\2\u24b5\u24c0\5\u0470\u0239\2\u24b6"+
		"\u24c0\5\u047c\u023f\2\u24b7\u24b8\5\u047e\u0240\2\u24b8\u24b9\5\u0482"+
		"\u0242\2\u24b9\u24c0\3\2\2\2\u24ba\u24bb\5\u047e\u0240\2\u24bb\u24bc\7"+
		"\4\2\2\u24bc\u24bd\5\u052a\u0296\2\u24bd\u24be\7\5\2\2\u24be\u24c0\3\2"+
		"\2\2\u24bf\u24b2\3\2\2\2\u24bf\u24b3\3\2\2\2\u24bf\u24b4\3\2\2\2\u24bf"+
		"\u24b5\3\2\2\2\u24bf\u24b6\3\2\2\2\u24bf\u24b7\3\2\2\2\u24bf\u24ba\3\2"+
		"\2\2\u24c0\u045d\3\2\2\2\u24c1\u24c6\5\u0464\u0233\2\u24c2\u24c6\5\u046a"+
		"\u0236\2\u24c3\u24c6\5\u0472\u023a\2\u24c4\u24c6\5\u047c\u023f\2\u24c5"+
		"\u24c1\3\2\2\2\u24c5\u24c2\3\2\2\2\u24c5\u24c3\3\2\2\2\u24c5\u24c4\3\2"+
		"\2\2\u24c6\u045f\3\2\2\2\u24c7\u24c8\5\u053c\u029f\2\u24c8\u24c9\5\u0462"+
		"\u0232\2\u24c9\u24cf\3\2\2\2\u24ca\u24cb\5\u053c\u029f\2\u24cb\u24cc\5"+
		"\u0210\u0109\2\u24cc\u24cd\5\u0462\u0232\2\u24cd\u24cf\3\2\2\2\u24ce\u24c7"+
		"\3\2\2\2\u24ce\u24ca\3\2\2\2\u24cf\u0461\3\2\2\2\u24d0\u24d1\7\4\2\2\u24d1"+
		"\u24d2\5\u04dc\u026f\2\u24d2\u24d3\7\5\2\2\u24d3\u24d6\3\2\2\2\u24d4\u24d6"+
		"\3\2\2\2\u24d5\u24d0\3\2\2\2\u24d5\u24d4\3\2\2\2\u24d6\u0463\3\2\2\2\u24d7"+
		"\u24e8\7\u01ae\2\2\u24d8\u24e8\7\u01af\2\2\u24d9\u24e8\7\u01bd\2\2\u24da"+
		"\u24e8\7\u01a1\2\2\u24db\u24e8\7\u01ba\2\2\u24dc\u24dd\7\u01ab\2\2\u24dd"+
		"\u24e8\5\u0466\u0234\2\u24de\u24df\7\u00e4\2\2\u24df\u24e8\7\u01b9\2\2"+
		"\u24e0\u24e1\7\u01a8\2\2\u24e1\u24e8\5\u0462\u0232\2\u24e2\u24e3\7\u01a7"+
		"\2\2\u24e3\u24e8\5\u0462\u0232\2\u24e4\u24e5\7\u01b6\2\2\u24e5\u24e8\5"+
		"\u0462\u0232\2\u24e6\u24e8\7\u01a3\2\2\u24e7\u24d7\3\2\2\2\u24e7\u24d8"+
		"\3\2\2\2\u24e7\u24d9\3\2\2\2\u24e7\u24da\3\2\2\2\u24e7\u24db\3\2\2\2\u24e7"+
		"\u24dc\3\2\2\2\u24e7\u24de\3\2\2\2\u24e7\u24e0\3\2\2\2\u24e7\u24e2\3\2"+
		"\2\2\u24e7\u24e4\3\2\2\2\u24e7\u24e6\3\2\2\2\u24e8\u0465\3\2\2\2\u24e9"+
		"\u24ea\7\4\2\2\u24ea\u24eb\5\u052a\u0296\2\u24eb\u24ec\7\5\2\2\u24ec\u24ef"+
		"\3\2\2\2\u24ed\u24ef\3\2\2\2\u24ee\u24e9\3\2\2\2\u24ee\u24ed\3\2\2\2\u24ef"+
		"\u0467\3\2\2\2\u24f0\u24f3\5\u046c\u0237\2\u24f1\u24f3\5\u046e\u0238\2"+
		"\u24f2\u24f0\3\2\2\2\u24f2\u24f1\3\2\2\2\u24f3\u0469\3\2\2\2\u24f4\u24f7"+
		"\5\u046c\u0237\2\u24f5\u24f7\5\u046e\u0238\2\u24f6\u24f4\3\2\2\2\u24f6"+
		"\u24f5\3\2\2\2\u24f7\u046b\3\2\2\2\u24f8\u24f9\7\u01a2\2\2\u24f9\u24fa"+
		"\5\u047a\u023e\2\u24fa\u24fb\7\4\2\2\u24fb\u24fc\5\u04dc\u026f\2\u24fc"+
		"\u24fd\7\5\2\2\u24fd\u046d\3\2\2\2\u24fe\u24ff\7\u01a2\2\2\u24ff\u2500"+
		"\5\u047a\u023e\2\u2500\u046f\3\2\2\2\u2501\u2504\5\u0474\u023b\2\u2502"+
		"\u2504\5\u0476\u023c\2\u2503\u2501\3\2\2\2\u2503\u2502\3\2\2\2\u2504\u0471"+
		"\3\2\2\2\u2505\u2508\5\u0474\u023b\2\u2506\u2508\5\u0476\u023c\2\u2507"+
		"\u2505\3\2\2\2\u2507\u2506\3\2\2\2\u2508\u0473\3\2\2\2\u2509\u250a\5\u0478"+
		"\u023d\2\u250a\u250b\7\4\2\2\u250b\u250c\5\u052a\u0296\2\u250c\u250d\7"+
		"\5\2\2\u250d\u0475\3\2\2\2\u250e\u250f\5\u0478\u023d\2\u250f\u0477\3\2"+
		"\2\2\u2510\u2511\7\u01a5\2\2\u2511\u251e\5\u047a\u023e\2\u2512\u2513\7"+
		"\u01a4\2\2\u2513\u251e\5\u047a\u023e\2\u2514\u251e\7\u01c4\2\2\u2515\u2516"+
		"\7\u01b2\2\2\u2516\u2517\7\u01a5\2\2\u2517\u251e\5\u047a\u023e\2\u2518"+
		"\u2519\7\u01b2\2\2\u2519\u251a\7\u01a4\2\2\u251a\u251e\5\u047a\u023e\2"+
		"\u251b\u251c\7\u01b3\2\2\u251c\u251e\5\u047a\u023e\2\u251d\u2510\3\2\2"+
		"\2\u251d\u2512\3\2\2\2\u251d\u2514\3\2\2\2\u251d\u2515\3\2\2\2\u251d\u2518"+
		"\3\2\2\2\u251d\u251b\3\2\2\2\u251e\u0479\3\2\2\2\u251f\u2522\7\u0193\2"+
		"\2\u2520\u2522\3\2\2\2\u2521\u251f\3\2\2\2\u2521\u2520\3\2\2\2\u2522\u047b"+
		"\3\2\2\2\u2523\u2524\7\u01c0\2\2\u2524\u2525\7\4\2\2\u2525\u2526\5\u052a"+
		"\u0296\2\u2526\u2527\7\5\2\2\u2527\u2528\5\u0480\u0241\2\u2528\u2534\3"+
		"\2\2\2\u2529\u252a\7\u01c0\2\2\u252a\u2534\5\u0480\u0241\2\u252b\u252c"+
		"\7\u01bf\2\2\u252c\u252d\7\4\2\2\u252d\u252e\5\u052a\u0296\2\u252e\u252f"+
		"\7\5\2\2\u252f\u2530\5\u0480\u0241\2\u2530\u2534\3\2\2\2\u2531\u2532\7"+
		"\u01bf\2\2\u2532\u2534\5\u0480\u0241\2\u2533\u2523\3\2\2\2\u2533\u2529"+
		"\3\2\2\2\u2533\u252b\3\2\2\2\u2533\u2531\3\2\2\2\u2534\u047d\3\2\2\2\u2535"+
		"\u2536\7\u01b0\2\2\u2536\u047f\3\2\2\2\u2537\u2538\7\u008f\2\2\u2538\u2539"+
		"\7\u01bf\2\2\u2539\u253f\7\u019f\2\2\u253a\u253b\7\u0198\2\2\u253b\u253c"+
		"\7\u01bf\2\2\u253c\u253f\7\u019f\2\2\u253d\u253f\3\2\2\2\u253e\u2537\3"+
		"\2\2\2\u253e\u253a\3\2\2\2\u253e\u253d\3\2\2\2\u253f\u0481\3\2\2\2\u2540"+
		"\u255d\7\u019d\2\2\u2541\u255d\7\u0125\2\2\u2542\u255d\7\u00d6\2\2\u2543"+
		"\u255d\7\u0100\2\2\u2544\u255d\7\u0122\2\2\u2545\u255d\5\u0484\u0243\2"+
		"\u2546\u2547\7\u019d\2\2\u2547\u2548\7\u0084\2\2\u2548\u255d\7\u0125\2"+
		"\2\u2549\u254a\7\u00d6\2\2\u254a\u254b\7\u0084\2\2\u254b\u255d\7\u0100"+
		"\2\2\u254c\u254d\7\u00d6\2\2\u254d\u254e\7\u0084\2\2\u254e\u255d\7\u0122"+
		"\2\2\u254f\u2550\7\u00d6\2\2\u2550\u2551\7\u0084\2\2\u2551\u255d\5\u0484"+
		"\u0243\2\u2552\u2553\7\u0100\2\2\u2553\u2554\7\u0084\2\2\u2554\u255d\7"+
		"\u0122\2\2\u2555\u2556\7\u0100\2\2\u2556\u2557\7\u0084\2\2\u2557\u255d"+
		"\5\u0484\u0243\2\u2558\u2559\7\u0122\2\2\u2559\u255a\7\u0084\2\2\u255a"+
		"\u255d\5\u0484\u0243\2\u255b\u255d\3\2\2\2\u255c\u2540\3\2\2\2\u255c\u2541"+
		"\3\2\2\2\u255c\u2542\3\2\2\2\u255c\u2543\3\2\2\2\u255c\u2544\3\2\2\2\u255c"+
		"\u2545\3\2\2\2\u255c\u2546\3\2\2\2\u255c\u2549\3\2\2\2\u255c\u254c\3\2"+
		"\2\2\u255c\u254f\3\2\2\2\u255c\u2552\3\2\2\2\u255c\u2555\3\2\2\2\u255c"+
		"\u2558\3\2\2\2\u255c\u255b\3\2\2\2\u255d\u0483\3\2\2\2\u255e\u2565\7\u0163"+
		"\2\2\u255f\u2560\7\u0163\2\2\u2560\u2561\7\4\2\2\u2561\u2562\5\u052a\u0296"+
		"\2\u2562\u2563\7\5\2\2\u2563\u2565\3\2\2\2\u2564\u255e\3\2\2\2\u2564\u255f"+
		"\3\2\2\2\u2565\u0485\3\2\2\2\u2566\u2567\7\u00eb\2\2\u2567\u2568\5\u0488"+
		"\u0245\2\u2568\u0487\3\2\2\2\u2569\u256a\b\u0245\1\2\u256a\u257d\5\u048e"+
		"\u0248\2\u256b\u256c\t\25\2\2\u256c\u257d\5\u0488\u0245\64\u256d\u256e"+
		"\5\u04d6\u026c\2\u256e\u256f\5\u0488\u0245\60\u256f\u257d\3\2\2\2\u2570"+
		"\u2571\5\u04c6\u0264\2\u2571\u2572\7\u00a3\2\2\u2572\u2573\5\u04c6\u0264"+
		"\2\u2573\u257d\3\2\2\2\u2574\u2575\7s\2\2\u2575\u257d\5\u0488\u0245\17"+
		"\u2576\u2577\5\u048a\u0246\2\u2577\u2578\5\u0488\u0245\16\u2578\u257d"+
		"\3\2\2\2\u2579\u257a\7\u0088\2\2\u257a\u257d\5\u03bc\u01df\2\u257b\u257d"+
		"\7[\2\2\u257c\u2569\3\2\2\2\u257c\u256b\3\2\2\2\u257c\u256d\3\2\2\2\u257c"+
		"\u2570\3\2\2\2\u257c\u2574\3\2\2\2\u257c\u2576\3\2\2\2\u257c\u2579\3\2"+
		"\2\2\u257c\u257b\3\2\2\2\u257d\u2654\3\2\2\2\u257e\u257f\f\65\2\2\u257f"+
		"\u2580\7\u00b4\2\2\u2580\u2581\7\u01bf\2\2\u2581\u2582\7\u019f\2\2\u2582"+
		"\u2653\5\u0488\u0245\66\u2583\u2584\f\63\2\2\u2584\u2585\7\23\2\2\u2585"+
		"\u2653\5\u0488\u0245\64\u2586\u2587\f\62\2\2\u2587\u2588\t\26\2\2\u2588"+
		"\u2653\5\u0488\u0245\63\u2589\u258a\f\61\2\2\u258a\u258b\5\u04d6\u026c"+
		"\2\u258b\u258c\5\u0488\u0245\62\u258c\u2653\3\2\2\2\u258d\u258e\f)\2\2"+
		"\u258e\u258f\7\u01a0\2\2\u258f\u2590\5\u050c\u0287\2\u2590\u2591\5\u048c"+
		"\u0247\2\u2591\u2592\7G\2\2\u2592\u2593\5\u0488\u0245*\u2593\u2653\3\2"+
		"\2\2\u2594\u2595\f(\2\2\u2595\u2596\5\u048a\u0246\2\u2596\u2597\7\u01a0"+
		"\2\2\u2597\u2598\5\u050c\u0287\2\u2598\u2599\5\u048c\u0247\2\u2599\u259a"+
		"\7G\2\2\u259a\u259b\5\u0488\u0245)\u259b\u2653\3\2\2\2\u259c\u259d\f\'"+
		"\2\2\u259d\u259e\7\u01a0\2\2\u259e\u259f\7\u0081\2\2\u259f\u25a0\5\u048c"+
		"\u0247\2\u25a0\u25a1\7G\2\2\u25a1\u25a2\5\u0488\u0245(\u25a2\u2653\3\2"+
		"\2\2\u25a3\u25a4\f&\2\2\u25a4\u25a5\5\u048a\u0246\2\u25a5\u25a6\7\u01a0"+
		"\2\2\u25a6\u25a7\7\u0081\2\2\u25a7\u25a8\5\u048c\u0247\2\u25a8\u25a9\7"+
		"G\2\2\u25a9\u25aa\5\u0488\u0245\'\u25aa\u2653\3\2\2\2\u25ab\u25ac\f%\2"+
		"\2\u25ac\u25ad\t\27\2\2\u25ad\u2653\5\u0488\u0245&\u25ae\u25af\f\31\2"+
		"\2\u25af\u25b0\7\u009a\2\2\u25b0\u25b1\7^\2\2\u25b1\u25b2\7f\2\2\u25b2"+
		"\u2653\5\u0488\u0245\32\u25b3\u25b4\f\30\2\2\u25b4\u25b5\7\u009a\2\2\u25b5"+
		"\u25b6\7s\2\2\u25b6\u25b7\7^\2\2\u25b7\u25b8\7f\2\2\u25b8\u2653\5\u0488"+
		"\u0245\31\u25b9\u25ba\f\r\2\2\u25ba\u25bb\7G\2\2\u25bb\u2653\5\u0488\u0245"+
		"\16\u25bc\u25bd\f\f\2\2\u25bd\u25be\7x\2\2\u25be\u2653\5\u0488\u0245\r"+
		"\u25bf\u25c0\f\13\2\2\u25c0\u25c1\7\26\2\2\u25c1\u2653\5\u0488\u0245\f"+
		"\u25c2\u25c3\f\n\2\2\u25c3\u25c4\7\27\2\2\u25c4\u2653\5\u0488\u0245\13"+
		"\u25c5\u25c6\f\67\2\2\u25c6\u25c7\7\37\2\2\u25c7\u2653\5\u0458\u022d\2"+
		"\u25c8\u25c9\f\66\2\2\u25c9\u25ca\7Q\2\2\u25ca\u2653\5\u020e\u0108\2\u25cb"+
		"\u25cc\f/\2\2\u25cc\u25cd\7\u009e\2\2\u25cd\u25cf\5\u0488\u0245\2\u25ce"+
		"\u25d0\5\u0486\u0244\2\u25cf\u25ce\3\2\2\2\u25cf\u25d0\3\2\2\2\u25d0\u2653"+
		"\3\2\2\2\u25d1\u25d2\f.\2\2\u25d2\u25d3\5\u048a\u0246\2\u25d3\u25d4\7"+
		"\u009e\2\2\u25d4\u25d6\5\u0488\u0245\2\u25d5\u25d7\5\u0486\u0244\2\u25d6"+
		"\u25d5\3\2\2\2\u25d6\u25d7\3\2\2\2\u25d7\u2653\3\2\2\2\u25d8\u25d9\f-"+
		"\2\2\u25d9\u25da\7\u0098\2\2\u25da\u25dc\5\u0488\u0245\2\u25db\u25dd\5"+
		"\u0486\u0244\2\u25dc\u25db\3\2\2\2\u25dc\u25dd\3\2\2\2\u25dd\u2653\3\2"+
		"\2\2\u25de\u25df\f,\2\2\u25df\u25e0\5\u048a\u0246\2\u25e0\u25e1\7\u0098"+
		"\2\2\u25e1\u25e3\5\u0488\u0245\2\u25e2\u25e4\5\u0486\u0244\2\u25e3\u25e2"+
		"\3\2\2\2\u25e3\u25e4\3\2\2\2\u25e4\u2653\3\2\2\2\u25e5\u25e6\f+\2\2\u25e6"+
		"\u25e7\7\u00a5\2\2\u25e7\u25e8\7\u0084\2\2\u25e8\u25ea\5\u0488\u0245\2"+
		"\u25e9\u25eb\5\u0486\u0244\2\u25ea\u25e9\3\2\2\2\u25ea\u25eb\3\2\2\2\u25eb"+
		"\u2653\3\2\2\2\u25ec\u25ed\f*\2\2\u25ed\u25ee\5\u048a\u0246\2\u25ee\u25ef"+
		"\7\u00a5\2\2\u25ef\u25f0\7\u0084\2\2\u25f0\u25f2\5\u0488\u0245\2\u25f1"+
		"\u25f3\5\u0486\u0244\2\u25f2\u25f1\3\2\2\2\u25f2\u25f3\3\2\2\2\u25f3\u2653"+
		"\3\2\2\2\u25f4\u25f5\f$\2\2\u25f5\u25f6\7\u009a\2\2\u25f6\u2653\7t\2\2"+
		"\u25f7\u25f8\f#\2\2\u25f8\u2653\7\u009b\2\2\u25f9\u25fa\f\"\2\2\u25fa"+
		"\u25fb\7\u009a\2\2\u25fb\u25fc\7s\2\2\u25fc\u2653\7t\2\2\u25fd\u25fe\f"+
		"!\2\2\u25fe\u2653\7\u00a0\2\2\u25ff\u2600\f\37\2\2\u2600\u2601\7\u009a"+
		"\2\2\u2601\u2653\7\u0086\2\2\u2602\u2603\f\36\2\2\u2603\u2604\7\u009a"+
		"\2\2\u2604\u2605\7s\2\2\u2605\u2653\7\u0086\2\2\u2606\u2607\f\35\2\2\u2607"+
		"\u2608\7\u009a\2\2\u2608\u2653\7b\2\2\u2609\u260a\f\34\2\2\u260a\u260b"+
		"\7\u009a\2\2\u260b\u260c\7s\2\2\u260c\u2653\7b\2\2\u260d\u260e\f\33\2"+
		"\2\u260e\u260f\7\u009a\2\2\u260f\u2653\7\u018a\2\2\u2610\u2611\f\32\2"+
		"\2\u2611\u2612\7\u009a\2\2\u2612\u2613\7s\2\2\u2613\u2653\7\u018a\2\2"+
		"\u2614\u2615\f\27\2\2\u2615\u2616\7\u009a\2\2\u2616\u2617\7\u0130\2\2"+
		"\u2617\u2618\7\4\2\2\u2618\u2619\5\u04e2\u0272\2\u2619\u261a\7\5\2\2\u261a"+
		"\u2653\3\2\2\2\u261b\u261c\f\26\2\2\u261c\u261d\7\u009a\2\2\u261d\u261e"+
		"\7s\2\2\u261e\u261f\7\u0130\2\2\u261f\u2620\7\4\2\2\u2620\u2621\5\u04e2"+
		"\u0272\2\u2621\u2622\7\5\2\2\u2622\u2653\3\2\2\2\u2623\u2624\f\25\2\2"+
		"\u2624\u2625\7\u009a\2\2\u2625\u2653\7\u00e2\2\2\u2626\u2627\f\24\2\2"+
		"\u2627\u2628\7\u009a\2\2\u2628\u2629\7s\2\2\u2629\u2653\7\u00e2\2\2\u262a"+
		"\u262b\f\23\2\2\u262b\u262c\7\u009a\2\2\u262c\u2653\7\u01fc\2\2\u262d"+
		"\u262e\f\22\2\2\u262e\u262f\7\u009a\2\2\u262f\u2630\5\u04ec\u0277\2\u2630"+
		"\u2631\7\u01fc\2\2\u2631\u2653\3\2\2\2\u2632\u2633\f\21\2\2\u2633\u2634"+
		"\7\u009a\2\2\u2634\u2635\7s\2\2\u2635\u2653\7\u01fc\2\2\u2636\u2637\f"+
		"\20\2\2\u2637\u2638\7\u009a\2\2\u2638\u2639\7s\2\2\u2639\u263a\5\u04ec"+
		"\u0277\2\u263a\u263b\7\u01fc\2\2\u263b\u2653\3\2\2\2\u263c\u263d\f\t\2"+
		"\2\u263d\u2653\5\u04d6\u026c\2\u263e\u263f\f\b\2";
	private static final String _serializedATNSegment4 =
		"\2\u263f\u2640\7j\2\2\u2640\u2653\5\u04f6\u027c\2\u2641\u2642\f\7\2\2"+
		"\u2642\u2643\5\u048a\u0246\2\u2643\u2644\7j\2\2\u2644\u2645\5\u04f6\u027c"+
		"\2\u2645\u2653\3\2\2\2\u2646\u2647\f\6\2\2\u2647\u2648\5\u04da\u026e\2"+
		"\u2648\u2649\5\u04cc\u0267\2\u2649\u264a\5\u03bc\u01df\2\u264a\u2653\3"+
		"\2\2\2\u264b\u264c\f\5\2\2\u264c\u264d\5\u04da\u026e\2\u264d\u264e\5\u04cc"+
		"\u0267\2\u264e\u264f\7\4\2\2\u264f\u2650\5\u0488\u0245\2\u2650\u2651\7"+
		"\5\2\2\u2651\u2653\3\2\2\2\u2652\u257e\3\2\2\2\u2652\u2583\3\2\2\2\u2652"+
		"\u2586\3\2\2\2\u2652\u2589\3\2\2\2\u2652\u258d\3\2\2\2\u2652\u2594\3\2"+
		"\2\2\u2652\u259c\3\2\2\2\u2652\u25a3\3\2\2\2\u2652\u25ab\3\2\2\2\u2652"+
		"\u25ae\3\2\2\2\u2652\u25b3\3\2\2\2\u2652\u25b9\3\2\2\2\u2652\u25bc\3\2"+
		"\2\2\u2652\u25bf\3\2\2\2\u2652\u25c2\3\2\2\2\u2652\u25c5\3\2\2\2\u2652"+
		"\u25c8\3\2\2\2\u2652\u25cb\3\2\2\2\u2652\u25d1\3\2\2\2\u2652\u25d8\3\2"+
		"\2\2\u2652\u25de\3\2\2\2\u2652\u25e5\3\2\2\2\u2652\u25ec\3\2\2\2\u2652"+
		"\u25f4\3\2\2\2\u2652\u25f7\3\2\2\2\u2652\u25f9\3\2\2\2\u2652\u25fd\3\2"+
		"\2\2\u2652\u25ff\3\2\2\2\u2652\u2602\3\2\2\2\u2652\u2606\3\2\2\2\u2652"+
		"\u2609\3\2\2\2\u2652\u260d\3\2\2\2\u2652\u2610\3\2\2\2\u2652\u2614\3\2"+
		"\2\2\u2652\u261b\3\2\2\2\u2652\u2623\3\2\2\2\u2652\u2626\3\2\2\2\u2652"+
		"\u262a\3\2\2\2\u2652\u262d\3\2\2\2\u2652\u2632\3\2\2\2\u2652\u2636\3\2"+
		"\2\2\u2652\u263c\3\2\2\2\u2652\u263e\3\2\2\2\u2652\u2641\3\2\2\2\u2652"+
		"\u2646\3\2\2\2\u2652\u264b\3\2\2\2\u2653\u2656\3\2\2\2\u2654\u2652\3\2"+
		"\2\2\u2654\u2655\3\2\2\2\u2655\u0489\3\2\2\2\u2656\u2654\3\2\2\2\u2657"+
		"\u2658\7s\2\2\u2658\u048b\3\2\2\2\u2659\u265a\b\u0247\1\2\u265a\u2661"+
		"\5\u048e\u0248\2\u265b\u265c\t\25\2\2\u265c\u2661\5\u048c\u0247\20\u265d"+
		"\u265e\5\u04d6\u026c\2\u265e\u265f\5\u048c\u0247\n\u265f\u2661\3\2\2\2"+
		"\u2660\u2659\3\2\2\2\u2660\u265b\3\2\2\2\u2660\u265d\3\2\2\2\u2661\u269a"+
		"\3\2\2\2\u2662\u2663\f\17\2\2\u2663\u2664\7\23\2\2\u2664\u2699\5\u048c"+
		"\u0247\20\u2665\u2666\f\16\2\2\u2666\u2667\t\30\2\2\u2667\u2699\5\u048c"+
		"\u0247\17\u2668\u2669\f\r\2\2\u2669\u266a\t\25\2\2\u266a\u2699\5\u048c"+
		"\u0247\16\u266b\u266c\f\f\2\2\u266c\u266d\5\u04d6\u026c\2\u266d\u266e"+
		"\5\u048c\u0247\r\u266e\u2699\3\2\2\2\u266f\u2670\f\13\2\2\u2670\u2671"+
		"\t\31\2\2\u2671\u2699\5\u048c\u0247\f\u2672\u2673\f\b\2\2\u2673\u2674"+
		"\7\u009a\2\2\u2674\u2675\7^\2\2\u2675\u2676\7f\2\2\u2676\u2699\5\u048c"+
		"\u0247\t\u2677\u2678\f\7\2\2\u2678\u2679\7\u009a\2\2\u2679\u267a\7s\2"+
		"\2\u267a\u267b\7^\2\2\u267b\u267c\7f\2\2\u267c\u2699\5\u048c\u0247\b\u267d"+
		"\u267e\f\21\2\2\u267e\u267f\7\37\2\2\u267f\u2699\5\u0458\u022d\2\u2680"+
		"\u2681\f\t\2\2\u2681\u2699\5\u04d6\u026c\2\u2682\u2683\f\6\2\2\u2683\u2684"+
		"\7\u009a\2\2\u2684\u2685\7\u0130\2\2\u2685\u2686\7\4\2\2\u2686\u2687\5"+
		"\u04e2\u0272\2\u2687\u2688\7\5\2\2\u2688\u2699\3\2\2\2\u2689\u268a\f\5"+
		"\2\2\u268a\u268b\7\u009a\2\2\u268b\u268c\7s\2\2\u268c\u268d\7\u0130\2"+
		"\2\u268d\u268e\7\4\2\2\u268e\u268f\5\u04e2\u0272\2\u268f\u2690\7\5\2\2"+
		"\u2690\u2699\3\2\2\2\u2691\u2692\f\4\2\2\u2692\u2693\7\u009a\2\2\u2693"+
		"\u2699\7\u00e2\2\2\u2694\u2695\f\3\2\2\u2695\u2696\7\u009a\2\2\u2696\u2697"+
		"\7s\2\2\u2697\u2699\7\u00e2\2\2\u2698\u2662\3\2\2\2\u2698\u2665\3\2\2"+
		"\2\u2698\u2668\3\2\2\2\u2698\u266b\3\2\2\2\u2698\u266f\3\2\2\2\u2698\u2672"+
		"\3\2\2\2\u2698\u2677\3\2\2\2\u2698\u267d\3\2\2\2\u2698\u2680\3\2\2\2\u2698"+
		"\u2682\3\2\2\2\u2698\u2689\3\2\2\2\u2698\u2691\3\2\2\2\u2698\u2694\3\2"+
		"\2\2\u2699\u269c\3\2\2\2\u269a\u2698\3\2\2\2\u269a\u269b\3\2\2\2\u269b"+
		"\u048d\3\2\2\2\u269c\u269a\3\2\2\2\u269d\u26bb\5\u0502\u0282\2\u269e\u26bb"+
		"\5\u0522\u0292\2\u269f\u26bb\5\u0490\u0249\2\u26a0\u26a1\7!\2\2\u26a1"+
		"\u26bb\5\u050a\u0286\2\u26a2\u26a3\7\4\2\2\u26a3\u26a4\5\u0488\u0245\2"+
		"\u26a4\u26a5\7\5\2\2\u26a5\u26a6\5\u050a\u0286\2\u26a6\u26bb\3\2\2\2\u26a7"+
		"\u26bb\5\u04f8\u027d\2\u26a8\u26bb\5\u0494\u024b\2\u26a9\u26ab\5\u03bc"+
		"\u01df\2\u26aa\u26ac\5\u0508\u0285\2\u26ab\u26aa\3\2\2\2\u26ab\u26ac\3"+
		"\2\2\2\u26ac\u26bb\3\2\2\2\u26ad\u26ae\7\u01a9\2\2\u26ae\u26bb\5\u03bc"+
		"\u01df\2\u26af\u26b0\7I\2\2\u26b0\u26bb\5\u03bc\u01df\2\u26b1\u26b2\7"+
		"I\2\2\u26b2\u26bb\5\u04e4\u0273\2\u26b3\u26bb\5\u04c8\u0265\2\u26b4\u26bb"+
		"\5\u04ca\u0266\2\u26b5\u26b6\7\u01f4\2\2\u26b6\u26b7\7\4\2\2\u26b7\u26b8"+
		"\5\u04dc\u026f\2\u26b8\u26b9\7\5\2\2\u26b9\u26bb\3\2\2\2\u26ba\u269d\3"+
		"\2\2\2\u26ba\u269e\3\2\2\2\u26ba\u269f\3\2\2\2\u26ba\u26a0\3\2\2\2\u26ba"+
		"\u26a2\3\2\2\2\u26ba\u26a7\3\2\2\2\u26ba\u26a8\3\2\2\2\u26ba\u26a9\3\2"+
		"\2\2\u26ba\u26ad\3\2\2\2\u26ba\u26af\3\2\2\2\u26ba\u26b1\3\2\2\2\u26ba"+
		"\u26b3\3\2\2\2\u26ba\u26b4\3\2\2\2\u26ba\u26b5\3\2\2\2\u26bb\u048f\3\2"+
		"\2\2\u26bc\u26bd\7\u0240\2\2\u26bd\u0491\3\2\2\2\u26be\u26bf\5\u0520\u0291"+
		"\2\u26bf\u26c0\7\4\2\2\u26c0\u26c1\7\5\2\2\u26c1\u26ec\3\2\2\2\u26c2\u26c3"+
		"\5\u0520\u0291\2\u26c3\u26c4\7\4\2\2\u26c4\u26c5\5\u04de\u0270\2\u26c5"+
		"\u26c6\5\u03e0\u01f1\2\u26c6\u26c7\7\5\2\2\u26c7\u26ec\3\2\2\2\u26c8\u26c9"+
		"\5\u0520\u0291\2\u26c9\u26ca\7\4\2\2\u26ca\u26cb\7\u008b\2\2\u26cb\u26cc"+
		"\5\u04e0\u0271\2\u26cc\u26cd\5\u03e0\u01f1\2\u26cd\u26ce\7\5\2\2\u26ce"+
		"\u26ec\3\2\2\2\u26cf\u26d0\5\u0520\u0291\2\u26d0\u26d1\7\4\2\2\u26d1\u26d2"+
		"\5\u04de\u0270\2\u26d2\u26d3\7\b\2\2\u26d3\u26d4\7\u008b\2\2\u26d4\u26d5"+
		"\5\u04e0\u0271\2\u26d5\u26d6\5\u03e0\u01f1\2\u26d6\u26d7\7\5\2\2\u26d7"+
		"\u26ec\3\2\2\2\u26d8\u26d9\5\u0520\u0291\2\u26d9\u26da\7\4\2\2\u26da\u26db"+
		"\7D\2\2\u26db\u26dc\5\u04de\u0270\2\u26dc\u26dd\5\u03e0\u01f1\2\u26dd"+
		"\u26de\7\5\2\2\u26de\u26ec\3\2\2\2\u26df\u26e0\5\u0520\u0291\2\u26e0\u26e1"+
		"\7\4\2\2\u26e1\u26e2\7^\2\2\u26e2\u26e3\5\u04de\u0270\2\u26e3\u26e4\5"+
		"\u03e0\u01f1\2\u26e4\u26e5\7\5\2\2\u26e5\u26ec\3\2\2\2\u26e6\u26e7\5\u0520"+
		"\u0291\2\u26e7\u26e8\7\4\2\2\u26e8\u26e9\7\13\2\2\u26e9\u26ea\7\5\2\2"+
		"\u26ea\u26ec\3\2\2\2\u26eb\u26be\3\2\2\2\u26eb\u26c2\3\2\2\2\u26eb\u26c8"+
		"\3\2\2\2\u26eb\u26cf\3\2\2\2\u26eb\u26d8\3\2\2\2\u26eb\u26df\3\2\2\2\u26eb"+
		"\u26e6\3\2\2\2\u26ec\u0493\3\2\2\2\u26ed\u26ee\5\u0492\u024a\2\u26ee\u26ef"+
		"\5\u04ac\u0257\2\u26ef\u26f0\5\u04ae\u0258\2\u26f0\u26f1\5\u04b6\u025c"+
		"\2\u26f1\u26f4\3\2\2\2\u26f2\u26f4\5\u0498\u024d\2\u26f3\u26ed\3\2\2\2"+
		"\u26f3\u26f2\3\2\2\2\u26f4\u0495\3\2\2\2\u26f5\u26f8\5\u0492\u024a\2\u26f6"+
		"\u26f8\5\u0498\u024d\2\u26f7\u26f5\3\2\2\2\u26f7\u26f6\3\2\2\2\u26f8\u0497"+
		"\3\2\2\2\u26f9\u26fa\7\u0092\2\2\u26fa\u26fb\7d\2\2\u26fb\u26fc\7\4\2"+
		"\2\u26fc\u26fd\5\u0488\u0245\2\u26fd\u26fe\7\5\2\2\u26fe\u27d4\3\2\2\2"+
		"\u26ff\u27d4\7V\2\2\u2700\u27d4\7X\2\2\u2701\u2702\7X\2\2\u2702\u2703"+
		"\7\4\2\2\u2703\u2704\5\u052a\u0296\2\u2704\u2705\7\5\2\2\u2705\u27d4\3"+
		"\2\2\2\u2706\u27d4\7Y\2\2\u2707\u2708\7Y\2\2\u2708\u2709\7\4\2\2\u2709"+
		"\u270a\5\u052a\u0296\2\u270a\u270b\7\5\2\2\u270b\u27d4\3\2\2\2\u270c\u27d4"+
		"\7q\2\2\u270d\u270e\7q\2\2\u270e\u270f\7\4\2\2\u270f\u2710\5\u052a\u0296"+
		"\2\u2710\u2711\7\5\2\2\u2711\u27d4\3\2\2\2\u2712\u27d4\7r\2\2\u2713\u2714"+
		"\7r\2\2\u2714\u2715\7\4\2\2\u2715\u2716\5\u052a\u0296\2\u2716\u2717\7"+
		"\5\2\2\u2717\u27d4\3\2\2\2\u2718\u27d4\7W\2\2\u2719\u27d4\7Z\2\2\u271a"+
		"\u27d4\7\177\2\2\u271b\u27d4\7\u0089\2\2\u271c\u27d4\7U\2\2\u271d\u27d4"+
		"\7\u0095\2\2\u271e\u271f\7O\2\2\u271f\u2720\7\4\2\2\u2720\u2721\5\u0488"+
		"\u0245\2\u2721\u2722\7J\2\2\u2722\u2725\5\u0458\u022d\2\u2723\u2724\7"+
		"Q\2\2\u2724\u2726\5\u0488\u0245\2\u2725\u2723\3\2\2\2\u2725\u2726\3\2"+
		"\2\2\u2726\u2727\3\2\2\2\u2727\u2728\7\5\2\2\u2728\u27d4\3\2\2\2\u2729"+
		"\u272a\7\u01aa\2\2\u272a\u272b\7\4\2\2\u272b\u272c\5\u04e8\u0275\2\u272c"+
		"\u272d\7\5\2\2\u272d\u27d4\3\2\2\2\u272e\u272f\7\u0207\2\2\u272f\u2730"+
		"\7\4\2\2\u2730\u2731\5\u0488\u0245\2\u2731\u2732\7\5\2\2\u2732\u27d4\3"+
		"\2\2\2\u2733\u2734\7\u0207\2\2\u2734\u2735\7\4\2\2\u2735\u2736\5\u0488"+
		"\u0245\2\u2736\u2737\7\b\2\2\u2737\u2738\5\u04ec\u0277\2\u2738\u2739\7"+
		"\5\2\2\u2739\u27d4\3\2\2\2\u273a\u273b\7\u01b7\2\2\u273b\u273c\7\4\2\2"+
		"\u273c\u273d\5\u04ee\u0278\2\u273d\u273e\7\5\2\2\u273e\u27d4\3\2\2\2\u273f"+
		"\u2740\7\u01b8\2\2\u2740\u2741\7\4\2\2\u2741\u2742\5\u04f0\u0279\2\u2742"+
		"\u2743\7\5\2\2\u2743\u27d4\3\2\2\2\u2744\u2745\7\u01be\2\2\u2745\u2746"+
		"\7\4\2\2\u2746\u2747\5\u04f2\u027a\2\u2747\u2748\7\5\2\2\u2748\u27d4\3"+
		"\2\2\2\u2749\u274a\7\u01c1\2\2\u274a\u274b\7\4\2\2\u274b\u274c\5\u0488"+
		"\u0245\2\u274c\u274d\7J\2\2\u274d\u274e\5\u0458\u022d\2\u274e\u274f\7"+
		"\5\2\2\u274f\u27d4\3\2\2\2\u2750\u2751\7\u01c2\2\2\u2751\u2752\7\4\2\2"+
		"\u2752\u2753\7M\2\2\u2753\u2754\5\u04f4\u027b\2\u2754\u2755\7\5\2\2\u2755"+
		"\u27d4\3\2\2\2\u2756\u2757\7\u01c2\2\2\u2757\u2758\7\4\2\2\u2758\u2759"+
		"\7o\2\2\u2759\u275a\5\u04f4\u027b\2\u275a\u275b\7\5\2\2\u275b\u27d4\3"+
		"\2\2\2\u275c\u275d\7\u01c2\2\2\u275d\u275e\7\4\2\2\u275e\u275f\7\u0085"+
		"\2\2\u275f\u2760\5\u04f4\u027b\2\u2760\u2761\7\5\2\2\u2761\u27d4\3\2\2"+
		"\2\u2762\u2763\7\u01c2\2\2\u2763\u2764\7\4\2\2\u2764\u2765\5\u04f4\u027b"+
		"\2\u2765\u2766\7\5\2\2\u2766\u27d4\3\2\2\2\u2767\u2768\7\u01b5\2\2\u2768"+
		"\u2769\7\4\2\2\u2769\u276a\5\u0488\u0245\2\u276a\u276b\7\b\2\2\u276b\u276c"+
		"\5\u0488\u0245\2\u276c\u276d\7\5\2\2\u276d\u27d4\3\2\2\2\u276e\u276f\7"+
		"\u01a6\2\2\u276f\u2770\7\4\2\2\u2770\u2771\5\u04dc\u026f\2\u2771\u2772"+
		"\7\5\2\2\u2772\u27d4\3\2\2\2\u2773\u2774\7\u01ac\2\2\u2774\u2775\7\4\2"+
		"\2\u2775\u2776\5\u04dc\u026f\2\u2776\u2777\7\5\2\2\u2777\u27d4\3\2\2\2"+
		"\u2778\u2779\7\u01b1\2\2\u2779\u277a\7\4\2\2\u277a\u277b\5\u04dc\u026f"+
		"\2\u277b\u277c\7\5\2\2\u277c\u27d4\3\2\2\2\u277d\u277e\7\u01c6\2\2\u277e"+
		"\u277f\7\4\2\2\u277f\u2780\5\u04dc\u026f\2\u2780\u2781\7\5\2\2\u2781\u27d4"+
		"\3\2\2\2\u2782\u2783\7\u01c7\2\2\u2783\u2784\7\4\2\2\u2784\u2785\7\u0127"+
		"\2\2\u2785\u2786\5\u0540\u02a1\2\u2786\u2787\7\5\2\2\u2787\u27d4\3\2\2"+
		"\2\u2788\u2789\7\u01c7\2\2\u2789\u278a\7\4\2\2\u278a\u278b\7\u0127\2\2"+
		"\u278b\u278c\5\u0540\u02a1\2\u278c\u278d\7\b\2\2\u278d\u278e\5\u049e\u0250"+
		"\2\u278e\u278f\7\5\2\2\u278f\u27d4\3\2\2\2\u2790\u2791\7\u01c7\2\2\u2791"+
		"\u2792\7\4\2\2\u2792\u2793\7\u0127\2\2\u2793\u2794\5\u0540\u02a1\2\u2794"+
		"\u2795\7\b\2\2\u2795\u2796\5\u04dc\u026f\2\u2796\u2797\7\5\2\2\u2797\u27d4"+
		"\3\2\2\2\u2798\u2799\7\u01c7\2\2\u2799\u279a\7\4\2\2\u279a\u279b\7\u0127"+
		"\2\2\u279b\u279c\5\u0540\u02a1\2\u279c\u279d\7\b\2\2\u279d\u279e\5\u049e"+
		"\u0250\2\u279e\u279f\7\b\2\2\u279f\u27a0\5\u04dc\u026f\2\u27a0\u27a1\7"+
		"\5\2\2\u27a1\u27d4\3\2\2\2\u27a2\u27a3\7\u01c8\2\2\u27a3\u27a4\7\4\2\2"+
		"\u27a4\u27a5\5\u048e\u0248\2\u27a5\u27a6\5\u04a8\u0255\2\u27a6\u27a7\7"+
		"\5\2\2\u27a7\u27d4\3\2\2\2\u27a8\u27a9\7\u01c9\2\2\u27a9\u27aa\7\4\2\2"+
		"\u27aa\u27ab\5\u04a0\u0251\2\u27ab\u27ac\7\5\2\2\u27ac\u27d4\3\2\2\2\u27ad"+
		"\u27ae\7\u01ca\2\2\u27ae\u27af\7\4\2\2\u27af\u27b0\5\u04a4\u0253\2\u27b0"+
		"\u27b1\5\u0488\u0245\2\u27b1\u27b2\5\u04a6\u0254\2\u27b2\u27b3\7\5\2\2"+
		"\u27b3\u27d4\3\2\2\2\u27b4\u27b5\7\u01cb\2\2\u27b5\u27b6\7\4\2\2\u27b6"+
		"\u27b7\7\u0127\2\2\u27b7\u27b8\5\u0540\u02a1\2\u27b8\u27b9\7\5\2\2\u27b9"+
		"\u27d4\3\2\2\2\u27ba\u27bb\7\u01cb\2\2\u27bb\u27bc\7\4\2\2\u27bc\u27bd"+
		"\7\u0127\2\2\u27bd\u27be\5\u0540\u02a1\2\u27be\u27bf\7\b\2\2\u27bf\u27c0"+
		"\5\u0488\u0245\2\u27c0\u27c1\7\5\2\2\u27c1\u27d4\3\2\2\2\u27c2\u27c3\7"+
		"\u01cc\2\2\u27c3\u27c4\7\4\2\2\u27c4\u27c5\7\u019c\2\2\u27c5\u27c6\5\u0488"+
		"\u0245\2\u27c6\u27c7\7\b\2\2\u27c7\u27c8\5\u049a\u024e\2\u27c8\u27c9\5"+
		"\u049c\u024f\2\u27c9\u27ca\7\5\2\2\u27ca\u27d4\3\2\2\2\u27cb\u27cc\7\u01cd"+
		"\2\2\u27cc\u27cd\7\4\2\2\u27cd\u27ce\5\u04a4\u0253\2\u27ce\u27cf\5\u0488"+
		"\u0245\2\u27cf\u27d0\7J\2\2\u27d0\u27d1\5\u045c\u022f\2\u27d1\u27d2\7"+
		"\5\2\2\u27d2\u27d4\3\2\2\2\u27d3\u26f9\3\2\2\2\u27d3\u26ff\3\2\2\2\u27d3"+
		"\u2700\3\2\2\2\u27d3\u2701\3\2\2\2\u27d3\u2706\3\2\2\2\u27d3\u2707\3\2"+
		"\2\2\u27d3\u270c\3\2\2\2\u27d3\u270d\3\2\2\2\u27d3\u2712\3\2\2\2\u27d3"+
		"\u2713\3\2\2\2\u27d3\u2718\3\2\2\2\u27d3\u2719\3\2\2\2\u27d3\u271a\3\2"+
		"\2\2\u27d3\u271b\3\2\2\2\u27d3\u271c\3\2\2\2\u27d3\u271d\3\2\2\2\u27d3"+
		"\u271e\3\2\2\2\u27d3\u2729\3\2\2\2\u27d3\u272e\3\2\2\2\u27d3\u2733\3\2"+
		"\2\2\u27d3\u273a\3\2\2\2\u27d3\u273f\3\2\2\2\u27d3\u2744\3\2\2\2\u27d3"+
		"\u2749\3\2\2\2\u27d3\u2750\3\2\2\2\u27d3\u2756\3\2\2\2\u27d3\u275c\3\2"+
		"\2\2\u27d3\u2762\3\2\2\2\u27d3\u2767\3\2\2\2\u27d3\u276e\3\2\2\2\u27d3"+
		"\u2773\3\2\2\2\u27d3\u2778\3\2\2\2\u27d3\u277d\3\2\2\2\u27d3\u2782\3\2"+
		"\2\2\u27d3\u2788\3\2\2\2\u27d3\u2790\3\2\2\2\u27d3\u2798\3\2\2\2\u27d3"+
		"\u27a2\3\2\2\2\u27d3\u27a8\3\2\2\2\u27d3\u27ad\3\2\2\2\u27d3\u27b4\3\2"+
		"\2\2\u27d3\u27ba\3\2\2\2\u27d3\u27c2\3\2\2\2\u27d3\u27cb\3\2\2\2\u27d4"+
		"\u0499\3\2\2\2\u27d5\u27d6\7\u0194\2\2\u27d6\u27db\5\u0488\u0245\2\u27d7"+
		"\u27d8\7\u0194\2\2\u27d8\u27d9\7\u012a\2\2\u27d9\u27db\7\u01e0\2\2\u27da"+
		"\u27d5\3\2\2\2\u27da\u27d7\3\2\2\2\u27db\u049b\3\2\2\2\u27dc\u27dd\7\b"+
		"\2\2\u27dd\u27de\7\u0170\2\2\u27de\u27e8\7\u019e\2\2\u27df\u27e0\7\b\2"+
		"\2\u27e0\u27e1\7\u0170\2\2\u27e1\u27e8\7\u012a\2\2\u27e2\u27e3\7\b\2\2"+
		"\u27e3\u27e4\7\u0170\2\2\u27e4\u27e5\7\u012a\2\2\u27e5\u27e8\7\u01e0\2"+
		"\2\u27e6\u27e8\3\2\2\2\u27e7\u27dc\3\2\2\2\u27e7\u27df\3\2\2\2\u27e7\u27e2"+
		"\3\2\2\2\u27e7\u27e6\3\2\2\2\u27e8\u049d\3\2\2\2\u27e9\u27ea\7\u01c5\2"+
		"\2\u27ea\u27eb\7\4\2\2\u27eb\u27ec\5\u04a0\u0251\2\u27ec\u27ed\7\5\2\2"+
		"\u27ed\u049f\3\2\2\2\u27ee\u27ef\b\u0251\1\2\u27ef\u27f0\5\u04a2\u0252"+
		"\2\u27f0\u27f6\3\2\2\2\u27f1\u27f2\f\3\2\2\u27f2\u27f3\7\b\2\2\u27f3\u27f5"+
		"\5\u04a2\u0252\2\u27f4\u27f1\3\2\2\2\u27f5\u27f8\3\2\2\2\u27f6\u27f4\3"+
		"\2\2\2\u27f6\u27f7\3\2\2\2\u27f7\u04a1\3\2\2\2\u27f8\u27f6\3\2\2\2\u27f9"+
		"\u27fa\5\u0488\u0245\2\u27fa\u27fb\7J\2\2\u27fb\u27fc\5\u0540\u02a1\2"+
		"\u27fc\u27ff\3\2\2\2\u27fd\u27ff\5\u0488\u0245\2\u27fe\u27f9\3\2\2\2\u27fe"+
		"\u27fd\3\2\2\2\u27ff\u04a3\3\2\2\2\u2800\u2801\t\32\2\2\u2801\u04a5\3"+
		"\2\2\2\u2802\u2803\7\u0141\2\2\u2803\u2808\7\u0197\2\2\u2804\u2805\7\u0178"+
		"\2\2\u2805\u2808\7\u0197\2\2\u2806\u2808\3\2\2\2\u2807\u2802\3\2\2\2\u2807"+
		"\u2804\3\2\2\2\u2807\u2806\3\2\2\2\u2808\u04a7\3\2\2\2\u2809\u280a\7\u013b"+
		"\2\2\u280a\u2819\5\u048e\u0248\2\u280b\u280c\7\u013b\2\2\u280c\u280d\5"+
		"\u048e\u0248\2\u280d\u280e\5\u04aa\u0256\2\u280e\u2819\3\2\2\2\u280f\u2810"+
		"\7\u013b\2\2\u2810\u2811\5\u04aa\u0256\2\u2811\u2812\5\u048e\u0248\2\u2812"+
		"\u2819\3\2\2\2\u2813\u2814\7\u013b\2\2\u2814\u2815\5\u04aa\u0256\2\u2815"+
		"\u2816\5\u048e\u0248\2\u2816\u2817\5\u04aa\u0256\2\u2817\u2819\3\2\2\2"+
		"\u2818\u2809\3\2\2\2\u2818\u280b\3\2\2\2\u2818\u280f\3\2\2\2\u2818\u2813"+
		"\3\2\2\2\u2819\u04a9\3\2\2\2\u281a\u281b\7\u00b9\2\2\u281b\u281f\7\u014d"+
		"\2\2\u281c\u281d\7\u00b9\2\2\u281d\u281f\7\u01e0\2\2\u281e\u281a\3\2\2"+
		"\2\u281e\u281c\3\2\2\2\u281f\u04ab\3\2\2\2\u2820\u2821\7\u01fd\2\2\u2821"+
		"\u2822\7h\2\2\u2822\u2823\7\4\2\2\u2823\u2824\5\u03e2\u01f2\2\u2824\u2825"+
		"\7\5\2\2\u2825\u2828\3\2\2\2\u2826\u2828\3\2\2\2\u2827\u2820\3\2\2\2\u2827"+
		"\u2826\3\2\2\2\u2828\u04ad\3\2\2\2\u2829\u282a\7\u01fe\2\2\u282a\u282b"+
		"\7\4\2\2\u282b\u282c\7\u008d\2\2\u282c\u282d\5\u0488\u0245\2\u282d\u282e"+
		"\7\5\2\2\u282e\u2831\3\2\2\2\u282f\u2831\3\2\2\2\u2830\u2829\3\2\2\2\u2830"+
		"\u282f\3\2\2\2\u2831\u04af\3\2\2\2\u2832\u2833\7\u008e\2\2\u2833\u2836"+
		"\5\u04b2\u025a\2\u2834\u2836\3\2\2\2\u2835\u2832\3\2\2\2\u2835\u2834\3"+
		"\2\2\2\u2836\u04b1\3\2\2\2\u2837\u2838\b\u025a\1\2\u2838\u2839\5\u04b4"+
		"\u025b\2\u2839\u283f\3\2\2\2\u283a\u283b\f\3\2\2\u283b\u283c\7\b\2\2\u283c"+
		"\u283e\5\u04b4\u025b\2\u283d\u283a\3\2\2\2\u283e\u2841\3\2\2\2\u283f\u283d"+
		"\3\2\2\2\u283f\u2840\3\2\2\2\u2840\u04b3\3\2\2\2\u2841\u283f\3\2\2\2\u2842"+
		"\u2843\5\u053a\u029e\2\u2843\u2844\7J\2\2\u2844\u2845\5\u04b8\u025d\2"+
		"\u2845\u04b5\3\2\2\2\u2846\u2847\7\u00a2\2\2\u2847\u284c\5\u04b8\u025d"+
		"\2\u2848\u2849\7\u00a2\2\2\u2849\u284c\5\u053a\u029e\2\u284a\u284c\3\2"+
		"\2\2\u284b\u2846\3\2\2\2\u284b\u2848\3\2\2\2\u284b\u284a\3\2\2\2\u284c"+
		"\u04b7\3\2\2\2\u284d\u284e\7\4\2\2\u284e\u284f\5\u04ba\u025e\2\u284f\u2850"+
		"\5\u04bc\u025f\2\u2850\u2851\5\u03e0\u01f1\2\u2851\u2852\5\u04be\u0260"+
		"\2\u2852\u2853\7\5\2\2\u2853\u04b9\3\2\2\2\u2854\u2857\5\u053a\u029e\2"+
		"\u2855\u2857\3\2\2\2\u2856\u2854\3\2\2\2\u2856\u2855\3\2\2\2\u2857\u04bb"+
		"\3\2\2\2\u2858\u2859\7\u013a\2\2\u2859\u285a\7\u00b9\2\2\u285a\u285d\5"+
		"\u04dc\u026f\2\u285b\u285d\3\2\2\2\u285c\u2858\3\2\2\2\u285c\u285b\3\2"+
		"\2\2\u285d\u04bd\3\2\2\2\u285e\u285f\7\u0148\2\2\u285f\u2860\5\u04c0\u0261"+
		"\2\u2860\u2861\5\u04c4\u0263\2\u2861\u286c\3\2\2\2\u2862\u2863\7\u015d"+
		"\2\2\u2863\u2864\5\u04c0\u0261\2\u2864\u2865\5\u04c4\u0263\2\u2865\u286c"+
		"\3\2\2\2\u2866\u2867\7\u01ff\2\2\u2867\u2868\5\u04c0\u0261\2\u2868\u2869"+
		"\5\u04c4\u0263\2\u2869\u286c\3\2\2\2\u286a\u286c\3\2\2\2\u286b\u285e\3"+
		"\2\2\2\u286b\u2862\3\2\2\2\u286b\u2866\3\2\2\2\u286b\u286a\3\2\2\2\u286c"+
		"\u04bf\3\2\2\2\u286d\u2874\5\u04c2\u0262\2\u286e\u286f\7\u01a0\2\2\u286f"+
		"\u2870\5\u04c2\u0262\2\u2870\u2871\7G\2\2\u2871\u2872\5\u04c2\u0262\2"+
		"\u2872\u2874\3\2\2\2\u2873\u286d\3\2\2\2\u2873\u286e\3\2\2\2\u2874\u04c1"+
		"\3\2\2\2\u2875\u2876\7\u0187\2\2\u2876\u2882\7\u013e\2\2\u2877\u2878\7"+
		"\u0187\2\2\u2878\u2882\7\u00f6\2\2\u2879\u287a\7\u01cf\2\2\u287a\u2882"+
		"\7\u01bb\2\2\u287b\u287c\5\u0488\u0245\2\u287c\u287d\7\u013e\2\2\u287d"+
		"\u2882\3\2\2\2\u287e\u287f\5\u0488\u0245\2\u287f\u2880\7\u00f6\2\2\u2880"+
		"\u2882\3\2\2\2\u2881\u2875\3\2\2\2\u2881\u2877\3\2\2\2\u2881\u2879\3\2"+
		"\2\2\u2881\u287b\3\2\2\2\u2881\u287e\3\2\2\2\u2882\u04c3\3\2\2\2\u2883"+
		"\u2884\7\u00ed\2\2\u2884\u2885\7\u01cf\2\2\u2885\u288f\7\u01bb\2\2\u2886"+
		"\u2887\7\u00ed\2\2\u2887\u288f\7h\2\2\u2888\u2889\7\u00ed\2\2\u2889\u288f"+
		"\7\u01f1\2\2\u288a\u288b\7\u00ed\2\2\u288b\u288c\7\u012a\2\2\u288c\u288f"+
		"\7\u0200\2\2\u288d\u288f\3\2\2\2\u288e\u2883\3\2\2\2\u288e\u2886\3\2\2"+
		"\2\u288e\u2888\3\2\2\2\u288e\u288a\3\2\2\2\u288e\u288d\3\2\2\2\u288f\u04c5"+
		"\3\2\2\2\u2890\u2891\7\u01bb\2\2\u2891\u2892\7\4\2\2\u2892\u2893\5\u04dc"+
		"\u026f\2\u2893\u2894\7\5\2\2\u2894\u289f\3\2\2\2\u2895\u2896\7\u01bb\2"+
		"\2\u2896\u2897\7\4\2\2\u2897\u289f\7\5\2\2\u2898\u2899\7\4\2\2\u2899\u289a"+
		"\5\u04dc\u026f\2\u289a\u289b\7\b\2\2\u289b\u289c\5\u0488\u0245\2\u289c"+
		"\u289d\7\5\2\2\u289d\u289f\3\2\2\2\u289e\u2890\3\2\2\2\u289e\u2895\3\2"+
		"\2\2\u289e\u2898\3\2\2\2\u289f\u04c7\3\2\2\2\u28a0\u28a1\7\u01bb\2\2\u28a1"+
		"\u28a2\7\4\2\2\u28a2\u28a3\5\u04dc\u026f\2\u28a3\u28a4\7\5\2\2\u28a4\u28a9"+
		"\3\2\2\2\u28a5\u28a6\7\u01bb\2\2\u28a6\u28a7\7\4\2\2\u28a7\u28a9\7\5\2"+
		"\2\u28a8\u28a0\3\2\2\2\u28a8\u28a5\3\2\2\2\u28a9\u04c9\3\2\2\2\u28aa\u28ab"+
		"\7\4\2\2\u28ab\u28ac\5\u04dc\u026f\2\u28ac\u28ad\7\b\2\2\u28ad\u28ae\5"+
		"\u0488\u0245\2\u28ae\u28af\7\5\2\2\u28af\u04cb\3\2\2\2\u28b0\u28b1\t\33"+
		"\2\2\u28b1\u04cd\3\2\2\2\u28b2\u28bb\5\u04d4\u026b\2\u28b3\u28bb\7\16"+
		"\2\2\u28b4\u28bb\7\60\2\2\u28b5\u28bb\7.\2\2\u28b6\u28bb\7/\2\2\u28b7"+
		"\u28bb\7\61\2\2\u28b8\u28bb\5\u04d2\u026a\2\u28b9\u28bb\5\u04d0\u0269"+
		"\2\u28ba\u28b2\3\2\2\2\u28ba\u28b3\3\2\2\2\u28ba\u28b4\3\2\2\2\u28ba\u28b5"+
		"\3\2\2\2\u28ba\u28b6\3\2\2\2\u28ba\u28b7\3\2\2\2\u28ba\u28b8\3\2\2\2\u28ba"+
		"\u28b9\3\2\2\2\u28bb\u04cf\3\2\2\2\u28bc\u28bd\t\34\2\2\u28bd\u04d1\3"+
		"\2\2\2\u28be\u28bf\t\35\2\2\u28bf\u04d3\3\2\2\2\u28c0\u28c1\t\36\2\2\u28c1"+
		"\u04d5\3\2\2\2\u28c2\u28c9\5\u0554\u02ab\2\u28c3\u28c4\7\u0133\2\2\u28c4"+
		"\u28c5\7\4\2\2\u28c5\u28c6\5\u02ae\u0158\2\u28c6\u28c7\7\5\2\2\u28c7\u28c9"+
		"\3\2\2\2\u28c8\u28c2\3\2\2\2\u28c8\u28c3\3\2\2\2\u28c9\u04d7\3\2\2\2\u28ca"+
		"\u28d1\5\u04ce\u0268\2\u28cb\u28cc\7\u0133\2\2\u28cc\u28cd\7\4\2\2\u28cd"+
		"\u28ce\5\u02ae\u0158\2\u28ce\u28cf\7\5\2\2\u28cf\u28d1\3\2\2\2\u28d0\u28ca"+
		"\3\2\2\2\u28d0\u28cb\3\2\2\2\u28d1\u04d9\3\2\2\2\u28d2\u28df\5\u04ce\u0268"+
		"\2\u28d3\u28d4\7\u0133\2\2\u28d4\u28d5\7\4\2\2\u28d5\u28d6\5\u02ae\u0158"+
		"\2\u28d6\u28d7\7\5\2\2\u28d7\u28df\3\2\2\2\u28d8\u28df\7\u009e\2\2\u28d9"+
		"\u28da\7s\2\2\u28da\u28df\7\u009e\2\2\u28db\u28df\7\u0098\2\2\u28dc\u28dd"+
		"\7s\2\2\u28dd\u28df\7\u0098\2\2\u28de\u28d2\3\2\2\2\u28de\u28d3\3\2\2"+
		"\2\u28de\u28d8\3\2\2\2\u28de\u28d9\3\2\2\2\u28de\u28db\3\2\2\2\u28de\u28dc"+
		"\3\2\2\2\u28df\u04db\3\2\2\2\u28e0\u28e1\b\u026f\1\2\u28e1\u28e2\5\u0488"+
		"\u0245\2\u28e2\u28e8\3\2\2\2\u28e3\u28e4\f\3\2\2\u28e4\u28e5\7\b\2\2\u28e5"+
		"\u28e7\5\u0488\u0245\2\u28e6\u28e3\3\2\2\2\u28e7\u28ea\3\2\2\2\u28e8\u28e6"+
		"\3\2\2\2\u28e8\u28e9\3\2\2\2\u28e9\u04dd\3\2\2\2\u28ea\u28e8\3\2\2\2\u28eb"+
		"\u28ec\b\u0270\1\2\u28ec\u28ed\5\u04e0\u0271\2\u28ed\u28f3\3\2\2\2\u28ee"+
		"\u28ef\f\3\2\2\u28ef\u28f0\7\b\2\2\u28f0\u28f2\5\u04e0\u0271\2\u28f1\u28ee"+
		"\3\2\2\2\u28f2\u28f5\3\2\2\2\u28f3\u28f1\3\2\2\2\u28f3\u28f4\3\2\2\2\u28f4"+
		"\u04df\3\2\2\2\u28f5\u28f3\3\2\2\2\u28f6\u2900\5\u0488\u0245\2\u28f7\u28f8"+
		"\5\u027e\u0140\2\u28f8\u28f9\7\30\2\2\u28f9\u28fa\5\u0488\u0245\2\u28fa"+
		"\u2900\3\2\2\2\u28fb\u28fc\5\u027e\u0140\2\u28fc\u28fd\7\32\2\2\u28fd"+
		"\u28fe\5\u0488\u0245\2\u28fe\u2900\3\2\2\2\u28ff\u28f6\3\2\2\2\u28ff\u28f7"+
		"\3\2\2\2\u28ff\u28fb\3\2\2\2\u2900\u04e1\3\2\2\2\u2901\u2902\b\u0272\1"+
		"\2\u2902\u2903\5\u0458\u022d\2\u2903\u2909\3\2\2\2\u2904\u2905\f\3\2\2"+
		"\u2905\u2906\7\b\2\2\u2906\u2908\5\u0458\u022d\2\u2907\u2904\3\2\2\2\u2908"+
		"\u290b\3\2\2\2\u2909\u2907\3\2\2\2\u2909\u290a\3\2\2\2\u290a\u04e3\3\2"+
		"\2\2\u290b\u2909\3\2\2\2\u290c\u290d\7\6\2\2\u290d\u290e\5\u04dc\u026f"+
		"\2\u290e\u290f\7\7\2\2\u290f\u2917\3\2\2\2\u2910\u2911\7\6\2\2\u2911\u2912"+
		"\5\u04e6\u0274\2\u2912\u2913\7\7\2\2\u2913\u2917\3\2\2\2\u2914\u2915\7"+
		"\6\2\2\u2915\u2917\7\7\2\2\u2916\u290c\3\2\2\2\u2916\u2910\3\2\2\2\u2916"+
		"\u2914\3\2\2\2\u2917\u04e5\3\2\2\2\u2918\u2919\b\u0274\1\2\u2919\u291a"+
		"\5\u04e4\u0273\2\u291a\u2920\3\2\2\2\u291b\u291c\f\3\2\2\u291c\u291d\7"+
		"\b\2\2\u291d\u291f\5\u04e4\u0273\2\u291e\u291b\3\2\2\2\u291f\u2922\3\2"+
		"\2\2\u2920\u291e\3\2\2\2\u2920\u2921\3\2\2\2\u2921\u04e7\3\2\2\2\u2922"+
		"\u2920\3\2\2\2\u2923\u2924\5\u04ea\u0276\2\u2924\u2925\7f\2\2\u2925\u2926"+
		"\5\u0488\u0245\2\u2926\u2929\3\2\2\2\u2927\u2929\3\2\2\2\u2928\u2923\3"+
		"\2\2\2\u2928\u2927\3\2\2\2\u2929\u04e9\3\2\2\2\u292a\u2933\5\u0542\u02a2"+
		"\2\u292b\u2933\7\u019d\2\2\u292c\u2933\7\u0125\2\2\u292d\u2933\7\u00d6"+
		"\2\2\u292e\u2933\7\u0100\2\2\u292f\u2933\7\u0122\2\2\u2930\u2933\7\u0163"+
		"\2\2\u2931\u2933\5\u052c\u0297\2\u2932\u292a\3\2\2\2\u2932\u292b\3\2\2"+
		"\2\u2932\u292c\3\2\2\2\u2932\u292d\3\2\2\2\u2932\u292e\3\2\2\2\u2932\u292f"+
		"\3\2\2\2\u2932\u2930\3\2\2\2\u2932\u2931\3\2\2\2\u2933\u04eb\3\2\2\2\u2934"+
		"\u2935\t\37\2\2\u2935\u04ed\3\2\2\2\u2936\u2937\5\u0488\u0245\2\u2937"+
		"\u2938\7z\2\2\u2938\u2939\5\u0488\u0245\2\u2939\u293a\7f\2\2\u293a\u293b"+
		"\5\u0488\u0245\2\u293b\u293c\7d\2\2\u293c\u293d\5\u0488\u0245\2\u293d"+
		"\u2945\3\2\2\2\u293e\u293f\5\u0488\u0245\2\u293f\u2940\7z\2\2\u2940\u2941"+
		"\5\u0488\u0245\2\u2941\u2942\7f\2\2\u2942\u2943\5\u0488\u0245\2\u2943"+
		"\u2945\3\2\2\2\u2944\u2936\3\2\2\2\u2944\u293e\3\2\2\2\u2945\u04ef\3\2"+
		"\2\2\u2946\u2947\5\u048c\u0247\2\u2947\u2948\7j\2\2\u2948\u2949\5\u048c"+
		"\u0247\2\u2949\u294c\3\2\2\2\u294a\u294c\3\2\2\2\u294b\u2946\3\2\2\2\u294b"+
		"\u294a\3\2\2\2\u294c\u04f1\3\2\2\2\u294d\u294e\5\u0488\u0245\2\u294e\u294f"+
		"\7f\2\2\u294f\u2950\5\u0488\u0245\2\u2950\u2951\7d\2\2\u2951\u2952\5\u0488"+
		"\u0245\2\u2952\u296a\3\2\2\2\u2953\u2954\5\u0488\u0245\2\u2954\u2955\7"+
		"d\2\2\u2955\u2956\5\u0488\u0245\2\u2956\u2957\7f\2\2\u2957\u2958\5\u0488"+
		"\u0245\2\u2958\u296a\3\2\2\2\u2959\u295a\5\u0488\u0245\2\u295a\u295b\7"+
		"f\2\2\u295b\u295c\5\u0488\u0245\2\u295c\u296a\3\2\2\2\u295d\u295e\5\u0488"+
		"\u0245\2\u295e\u295f\7d\2\2\u295f\u2960\5\u0488\u0245\2\u2960\u296a\3"+
		"\2\2\2\u2961\u2962\5\u0488\u0245\2\u2962\u2963\7\u00a5\2\2\u2963\u2964"+
		"\5\u0488\u0245\2\u2964\u2965\7\u00eb\2\2\u2965\u2966\5\u0488\u0245\2\u2966"+
		"\u296a\3\2\2\2\u2967\u296a\5\u04dc\u026f\2\u2968\u296a\3\2\2\2\u2969\u294d"+
		"\3\2\2\2\u2969\u2953\3\2\2\2\u2969\u2959\3\2\2\2\u2969\u295d\3\2\2\2\u2969"+
		"\u2961\3\2\2\2\u2969\u2967\3\2\2\2\u2969\u2968\3\2\2\2\u296a\u04f3\3\2"+
		"\2\2\u296b\u296c\5\u0488\u0245\2\u296c\u296d\7f\2\2\u296d\u296e\5\u04dc"+
		"\u026f\2\u296e\u2973\3\2\2\2\u296f\u2970\7f\2\2\u2970\u2973\5\u04dc\u026f"+
		"\2\u2971\u2973\5\u04dc\u026f\2\u2972\u296b\3\2\2\2\u2972\u296f\3\2\2\2"+
		"\u2972\u2971\3\2\2\2\u2973\u04f5\3\2\2\2\u2974\u297a\5\u03bc\u01df\2\u2975"+
		"\u2976\7\4\2\2\u2976\u2977\5\u04dc\u026f\2\u2977\u2978\7\5\2\2\u2978\u297a"+
		"\3\2\2\2\u2979\u2974\3\2\2\2\u2979\u2975\3\2\2\2\u297a\u04f7\3\2\2\2\u297b"+
		"\u297c\7N\2\2\u297c\u297d\5\u0500\u0281\2\u297d\u297e\5\u04fa\u027e\2"+
		"\u297e\u297f\5\u04fe\u0280\2\u297f\u2980\7\u01e4\2\2\u2980\u04f9\3\2\2"+
		"\2\u2981\u2982\b\u027e\1\2\u2982\u2983\5\u04fc\u027f\2\u2983\u2988\3\2"+
		"\2\2\u2984\u2985\f\3\2\2\u2985\u2987\5\u04fc\u027f\2\u2986\u2984\3\2\2"+
		"\2\u2987\u298a\3\2\2\2\u2988\u2986\3\2\2\2\u2988\u2989\3\2\2\2\u2989\u04fb"+
		"\3\2\2\2\u298a\u2988\3\2\2\2\u298b\u298c\7\u008c\2\2\u298c\u298d\5\u0488"+
		"\u0245\2\u298d\u298e\7\u0083\2\2\u298e\u298f\5\u0488\u0245\2\u298f\u04fd"+
		"\3\2\2\2\u2990\u2991\7`\2\2\u2991\u2994\5\u0488\u0245\2\u2992\u2994\3"+
		"\2\2\2\u2993\u2990\3\2\2\2\u2993\u2992\3\2\2\2\u2994\u04ff\3\2\2\2\u2995"+
		"\u2998\5\u0488\u0245\2\u2996\u2998\3\2\2\2\u2997\u2995\3\2\2\2\u2997\u2996"+
		"\3\2\2\2\u2998\u0501\3\2\2\2\u2999\u299e\5\u053a\u029e\2\u299a\u299b\5"+
		"\u053a\u029e\2\u299b\u299c\5\u0508\u0285\2\u299c\u299e\3\2\2\2\u299d\u2999"+
		"\3\2\2\2\u299d\u299a\3\2\2\2\u299e\u0503\3\2\2\2\u299f\u29a0\7\r\2\2\u29a0"+
		"\u29ae\5\u051c\u028f\2\u29a1\u29a2\7\r\2\2\u29a2\u29ae\7\13\2\2\u29a3"+
		"\u29a4\7\6\2\2\u29a4\u29a5\5\u0488\u0245\2\u29a5\u29a6\7\7\2\2\u29a6\u29ae"+
		"\3\2\2\2\u29a7\u29a8\7\6\2\2\u29a8\u29a9\5\u0506\u0284\2\u29a9\u29aa\7"+
		"\n\2\2\u29aa\u29ab\5\u0506\u0284\2\u29ab\u29ac\7\7\2\2\u29ac\u29ae\3\2"+
		"\2\2\u29ad\u299f\3\2\2\2\u29ad\u29a1\3\2\2\2\u29ad\u29a3\3\2\2\2\u29ad"+
		"\u29a7\3\2\2\2\u29ae\u0505\3\2\2\2\u29af\u29b2\5\u0488\u0245\2\u29b0\u29b2"+
		"\3\2\2\2\u29b1\u29af\3\2\2\2\u29b1\u29b0\3\2\2\2\u29b2\u0507\3\2\2\2\u29b3"+
		"\u29b4\b\u0285\1\2\u29b4\u29b5\5\u0504\u0283\2\u29b5\u29ba\3\2\2\2\u29b6"+
		"\u29b7\f\3\2\2\u29b7\u29b9\5\u0504\u0283\2\u29b8\u29b6\3\2\2\2\u29b9\u29bc"+
		"\3\2\2\2\u29ba\u29b8\3\2\2\2\u29ba\u29bb\3\2\2\2\u29bb\u0509\3\2\2\2\u29bc"+
		"\u29ba\3\2\2\2\u29bd\u29c2\b\u0286\1\2\u29be\u29bf\f\3\2\2\u29bf\u29c1"+
		"\5\u0504\u0283\2\u29c0\u29be\3\2\2\2\u29c1\u29c4\3\2\2\2\u29c2\u29c0\3"+
		"\2\2\2\u29c2\u29c3\3\2\2\2\u29c3\u050b\3\2\2\2\u29c4\u29c2\3\2\2\2\u29c5"+
		"\u29c8\7L\2\2\u29c6\u29c8\3\2\2\2\u29c7\u29c5\3\2\2\2\u29c7\u29c6\3\2"+
		"\2\2\u29c8\u050d\3\2\2\2\u29c9\u29cc\5\u0510\u0289\2\u29ca\u29cc\3\2\2"+
		"\2\u29cb\u29c9\3\2\2\2\u29cb\u29ca\3\2\2\2\u29cc\u050f\3\2\2\2\u29cd\u29d2"+
		"\5\u0512\u028a\2\u29ce\u29cf\7\b\2\2\u29cf\u29d1\5\u0512\u028a\2\u29d0"+
		"\u29ce\3\2\2\2\u29d1\u29d4\3\2\2\2\u29d2\u29d0\3\2\2\2\u29d2\u29d3\3\2"+
		"\2\2\u29d3\u0511\3\2\2\2\u29d4\u29d2\3\2\2\2\u29d5\u29da\5\u0488\u0245"+
		"\2\u29d6\u29d7\7J\2\2\u29d7\u29db\5\u0540\u02a1\2\u29d8\u29db\5\u0542"+
		"\u02a2\2\u29d9\u29db\3\2\2\2\u29da\u29d6\3\2\2\2\u29da\u29d8\3\2\2\2\u29da"+
		"\u29d9\3\2\2\2\u29db\u29de\3\2\2\2\u29dc\u29de\7\13\2\2\u29dd\u29d5\3"+
		"\2\2\2\u29dd\u29dc\3\2\2\2\u29de\u0513\3\2\2\2\u29df\u29e0\b\u028b\1\2"+
		"\u29e0\u29e1\5\u0516\u028c\2\u29e1\u29e7\3\2\2\2\u29e2\u29e3\f\3\2\2\u29e3"+
		"\u29e4\7\b\2\2\u29e4\u29e6\5\u0516\u028c\2\u29e5\u29e2\3\2\2\2\u29e6\u29e9"+
		"\3\2\2\2\u29e7\u29e5\3\2\2\2\u29e7\u29e8\3\2\2\2\u29e8\u0515\3\2\2\2\u29e9"+
		"\u29e7\3\2\2\2\u29ea\u29ef\5\u053a\u029e\2\u29eb\u29ec\5\u053a\u029e\2"+
		"\u29ec\u29ed\5\u0508\u0285\2\u29ed\u29ef\3\2\2\2\u29ee\u29ea\3\2\2\2\u29ee"+
		"\u29eb\3\2\2\2\u29ef\u0517\3\2\2\2\u29f0\u29f1\b\u028d\1\2\u29f1\u29f2"+
		"\5\u051a\u028e\2\u29f2\u29f8\3\2\2\2\u29f3\u29f4\f\3\2\2\u29f4\u29f5\7"+
		"\b\2\2\u29f5\u29f7\5\u051a\u028e\2\u29f6\u29f3\3\2\2\2\u29f7\u29fa\3\2"+
		"\2\2\u29f8\u29f6\3\2\2\2\u29f8\u29f9\3\2\2\2\u29f9\u0519\3\2\2\2\u29fa"+
		"\u29f8\3\2\2\2\u29fb\u29fc\5\u053a\u029e\2\u29fc\u051b\3\2\2\2\u29fd\u29fe"+
		"\5\u0540\u02a1\2\u29fe\u051d\3\2\2\2\u29ff\u2a00\5\u052c\u0297\2\u2a00"+
		"\u051f\3\2\2\2\u2a01\u2a06\5\u053c\u029f\2\u2a02\u2a03\5\u053a\u029e\2"+
		"\u2a03\u2a04\5\u0508\u0285\2\u2a04\u2a06\3\2\2\2\u2a05\u2a01\3\2\2\2\u2a05"+
		"\u2a02\3\2\2\2\u2a06\u0521\3\2\2\2\u2a07\u2a27\5\u052a\u0296\2\u2a08\u2a27"+
		"\5\u0528\u0295\2\u2a09\u2a27\5\u052c\u0297\2\u2a0a\u2a27\5\u0526\u0294"+
		"\2\u2a0b\u2a27\5\u0524\u0293\2\u2a0c\u2a0d\5\u0520\u0291\2\u2a0d\u2a0e"+
		"\5\u052c\u0297\2\u2a0e\u2a27\3\2\2\2\u2a0f\u2a10\5\u0520\u0291\2\u2a10"+
		"\u2a11\7\4\2\2\u2a11\u2a12\5\u04de\u0270\2\u2a12\u2a13\5\u03e0\u01f1\2"+
		"\u2a13\u2a14\7\5\2\2\u2a14\u2a15\5\u052c\u0297\2\u2a15\u2a27\3\2\2\2\u2a16"+
		"\u2a17\5\u045e\u0230\2\u2a17\u2a18\5\u052c\u0297\2\u2a18\u2a27\3\2\2\2"+
		"\u2a19\u2a1a\5\u047e\u0240\2\u2a1a\u2a1b\5\u052c\u0297\2\u2a1b\u2a1c\5"+
		"\u0482\u0242\2\u2a1c\u2a27\3\2\2\2\u2a1d\u2a1e\5\u047e\u0240\2\u2a1e\u2a1f"+
		"\7\4\2\2\u2a1f\u2a20\5\u052a\u0296\2\u2a20\u2a21\7\5\2\2\u2a21\u2a22\5"+
		"\u052c\u0297\2\u2a22\u2a27\3\2\2\2\u2a23\u2a27\7\u0086\2\2\u2a24\u2a27"+
		"\7b\2\2\u2a25\u2a27\7t\2\2\u2a26\u2a07\3\2\2\2\u2a26\u2a08\3\2\2\2\u2a26"+
		"\u2a09\3\2\2\2\u2a26\u2a0a\3\2\2\2\u2a26\u2a0b\3\2\2\2\u2a26\u2a0c\3\2"+
		"\2\2\u2a26\u2a0f\3\2\2\2\u2a26\u2a16\3\2\2\2\u2a26\u2a19\3\2\2\2\u2a26"+
		"\u2a1d\3\2\2\2\u2a26\u2a23\3\2\2\2\u2a26\u2a24\3\2\2\2\u2a26\u2a25\3\2"+
		"\2\2\u2a27\u0523\3\2\2\2\u2a28\u2a29\7\u0239\2\2\u2a29\u0525\3\2\2\2\u2a2a"+
		"\u2a2b\7\u0235\2\2\u2a2b\u0527\3\2\2\2\u2a2c\u2a2d\7\u023f\2\2\u2a2d\u0529"+
		"\3\2\2\2\u2a2e\u2a2f\7\u023d\2\2\u2a2f\u052b\3\2\2\2\u2a30\u2a31\5\u052e"+
		"\u0298\2\u2a31\u2a32\5\u0530\u0299\2\u2a32\u052d\3\2\2\2\u2a33\u2a35\7"+
		"\u0230\2\2\u2a34\u2a33\3\2\2\2\u2a35\u2a36\3\2\2\2\u2a36\u2a34\3\2\2\2"+
		"\u2a36\u2a37\3\2\2\2\u2a37\u2a43\3\2\2\2\u2a38\u2a43\7\u0232\2\2\u2a39"+
		"\u2a3d\7\u0234\2\2\u2a3a\u2a3c\7\u0250\2\2\u2a3b\u2a3a\3\2\2\2\u2a3c\u2a3f"+
		"\3\2\2\2\u2a3d\u2a3b\3\2\2\2\u2a3d\u2a3e\3\2\2\2\u2a3e\u2a40\3\2\2\2\u2a3f"+
		"\u2a3d\3\2\2\2\u2a40\u2a43\7\u0251\2\2\u2a41\u2a43\7\u024a\2\2\u2a42\u2a34"+
		"\3\2\2\2\u2a42\u2a38\3\2\2\2\u2a42\u2a39\3\2\2\2\u2a42\u2a41\3\2\2\2\u2a43"+
		"\u052f\3\2\2\2\u2a44\u2a45\7\u0205\2\2\u2a45\u2a48\5\u052e\u0298\2\u2a46"+
		"\u2a48\3\2\2\2\u2a47\u2a44\3\2\2\2\u2a47\u2a46\3\2\2\2\u2a48\u0531\3\2"+
		"\2\2\u2a49\u2a4f\5\u052a\u0296\2\u2a4a\u2a4b\7\20\2\2\u2a4b\u2a4f\5\u052a"+
		"\u0296\2\u2a4c\u2a4d\7\21\2\2\u2a4d\u2a4f\5\u052a\u0296\2\u2a4e\u2a49"+
		"\3\2\2\2\u2a4e\u2a4a\3\2\2\2\u2a4e\u2a4c\3\2\2\2\u2a4f\u0533\3\2\2\2\u2a50"+
		"\u2a51\5\u0536\u029c\2\u2a51\u0535\3\2\2\2\u2a52\u2a56\5\u053e\u02a0\2"+
		"\u2a53\u2a56\7Z\2\2\u2a54\u2a56\7\177\2\2\u2a55\u2a52\3\2\2\2\u2a55\u2a53"+
		"\3\2\2\2\u2a55\u2a54\3\2\2\2\u2a56\u0537\3\2\2\2\u2a57\u2a58\b\u029d\1"+
		"\2\u2a58\u2a59\5\u0536\u029c\2\u2a59\u2a5f\3\2\2\2\u2a5a\u2a5b\f\3\2\2"+
		"\u2a5b\u2a5c\7\b\2\2\u2a5c\u2a5e\5\u0536\u029c\2\u2a5d\u2a5a\3\2\2\2\u2a5e"+
		"\u2a61\3\2\2\2\u2a5f\u2a5d\3\2\2\2\u2a5f\u2a60\3\2\2\2\u2a60\u0539\3\2"+
		"\2\2\u2a61\u2a5f\3\2\2\2\u2a62\u2a67\5\u0542\u02a2\2\u2a63\u2a67\5\u0546"+
		"\u02a4\2\u2a64\u2a67\5\u0548\u02a5\2\u2a65\u2a67\5\u0626\u0314\2\u2a66"+
		"\u2a62\3\2\2\2\u2a66\u2a63\3\2\2\2\u2a66\u2a64\3\2\2\2\u2a66\u2a65\3\2"+
		"\2\2\u2a67\u053b\3\2\2\2\u2a68\u2a6d\5\u0542\u02a2\2\u2a69\u2a6d\5\u0546"+
		"\u02a4\2\u2a6a\u2a6d\5\u0626\u0314\2\u2a6b\u2a6d\5\u054a\u02a6\2\u2a6c"+
		"\u2a68\3\2\2\2\u2a6c\u2a69\3\2\2\2\u2a6c\u2a6a\3\2\2\2\u2a6c\u2a6b\3\2"+
		"\2\2\u2a6d\u053d\3\2\2\2\u2a6e\u2a73\5\u0542\u02a2\2\u2a6f\u2a73\5\u0546"+
		"\u02a4\2\u2a70\u2a73\5\u0548\u02a5\2\u2a71\u2a73\5\u054a\u02a6\2\u2a72"+
		"\u2a6e\3\2\2\2\u2a72\u2a6f\3\2\2\2\u2a72\u2a70\3\2\2\2\u2a72\u2a71\3\2"+
		"\2\2\u2a73\u053f\3\2\2\2\u2a74\u2a7b\5\u0542\u02a2\2\u2a75\u2a7b\5\u0626"+
		"\u0314\2\u2a76\u2a7b\5\u0546\u02a4\2\u2a77\u2a7b\5\u0548\u02a5\2\u2a78"+
		"\u2a7b\5\u054a\u02a6\2\u2a79\u2a7b\5\u054c\u02a7\2\u2a7a\u2a74\3\2\2\2"+
		"\u2a7a\u2a75\3\2\2\2\u2a7a\u2a76\3\2\2\2\u2a7a\u2a77\3\2\2\2\u2a7a\u2a78"+
		"\3\2\2\2\u2a7a\u2a79\3\2\2\2\u2a7b\u0541\3\2\2\2\u2a7c\u2a7d\7\u0227\2"+
		"\2\u2a7d\u2a84\5\u0530\u0299\2\u2a7e\u2a84\7\u0228\2\2\u2a7f\u2a84\7\u022c"+
		"\2\2\u2a80\u2a84\5\u0490\u0249\2\u2a81\u2a84\5\u0544\u02a3\2\u2a82\u2a84"+
		"\5\u0626\u0314\2\u2a83\u2a7c\3\2\2\2\u2a83\u2a7e\3\2\2\2\u2a83\u2a7f\3"+
		"\2\2\2\u2a83\u2a80\3\2\2\2\u2a83\u2a81\3\2\2\2\u2a83\u2a82\3\2\2\2\u2a84"+
		"\u0543\3\2\2\2\u2a85\u2a86\7\u0241\2\2\u2a86\u0545\3\2\2\2\u2a87\u2a88"+
		"\t \2\2\u2a88\u0547\3\2\2\2\u2a89\u2abd\7\u01a0\2\2\u2a8a\u2abd\7\u01a1"+
		"\2\2\u2a8b\u2abd\5\u0468\u0235\2\u2a8c\u2abd\7\u01a3\2\2\u2a8d\u2abd\7"+
		"\u01a4\2\2\u2a8e\u2abd\5\u0470\u0239\2\u2a8f\u2abd\7\u01a6\2\2\u2a90\u2abd"+
		"\7\u01a7\2\2\u2a91\u2abd\7\u01a8\2\2\u2a92\u2abd\7\u01a9\2\2\u2a93\u2abd"+
		"\7\u01aa\2\2\u2a94\u2abd\7\u01ab\2\2\u2a95\u2abd\7\u01ac\2\2\u2a96\u2abd"+
		"\7\u01f4\2\2\u2a97\u2abd\7\u01ad\2\2\u2a98\u2abd\7\u01ae\2\2\u2a99\u2abd"+
		"\7\u01af\2\2\u2a9a\u2abd\7\u01b0\2\2\u2a9b\u2abd\7\u01b1\2\2\u2a9c\u2abd"+
		"\7\u01b2\2\2\u2a9d\u2abd\7\u01b3\2\2\u2a9e\u2abd\7\u01b4\2\2\u2a9f\u2abd"+
		"\7\u0207\2\2\u2aa0\u2abd\7\u01b5\2\2\u2aa1\u2abd\5\u0464\u0233\2\u2aa2"+
		"\u2abd\7\u01e3\2\2\u2aa3\u2abd\7\u01b7\2\2\u2aa4\u2abd\7\u01b8\2\2\u2aa5"+
		"\u2abd\7\u01b9\2\2\u2aa6\u2abd\7\u01ba\2\2\u2aa7\u2abd\7\u01bb\2\2\u2aa8"+
		"\u2abd\7\u01bc\2\2\u2aa9\u2abd\7\u01bd\2\2\u2aaa\u2abd\7\u01be\2\2\u2aab"+
		"\u2abd\7\u01bf\2\2\u2aac\u2abd\7\u01c0\2\2\u2aad\u2abd\7\u01c1\2\2\u2aae"+
		"\u2abd\7\u01c2\2\2\u2aaf\u2abd\7\u01c3\2\2\u2ab0\u2abd\7\u01c4\2\2\u2ab1"+
		"\u2abd\7\u01c5\2\2\u2ab2\u2abd\7\u01c6\2\2\u2ab3\u2abd\7\u01c7\2\2\u2ab4"+
		"\u2abd\7\u01c8\2\2\u2ab5\u2abd\7\u01c9\2\2\u2ab6\u2abd\7\u01fa\2\2\u2ab7"+
		"\u2abd\7\u01ca\2\2\u2ab8\u2abd\7\u01cb\2\2\u2ab9\u2abd\7\u01cc\2\2\u2aba"+
		"\u2abd\7\u01cd\2\2\u2abb\u2abd\7\u01f8\2\2\u2abc\u2a89\3\2\2\2\u2abc\u2a8a"+
		"\3\2\2\2\u2abc\u2a8b\3\2\2\2\u2abc\u2a8c\3\2\2\2\u2abc\u2a8d\3\2\2\2\u2abc"+
		"\u2a8e\3\2\2\2\u2abc\u2a8f\3\2\2\2\u2abc\u2a90\3\2\2\2\u2abc\u2a91\3\2"+
		"\2\2\u2abc\u2a92\3\2\2\2\u2abc\u2a93\3\2\2\2\u2abc\u2a94\3\2\2\2\u2abc"+
		"\u2a95\3\2\2\2\u2abc\u2a96\3\2\2\2\u2abc\u2a97\3\2\2\2\u2abc\u2a98\3\2"+
		"\2\2\u2abc\u2a99\3\2\2\2\u2abc\u2a9a\3\2\2\2\u2abc\u2a9b\3\2\2\2\u2abc"+
		"\u2a9c\3\2\2\2\u2abc\u2a9d\3\2\2\2\u2abc\u2a9e\3\2\2\2\u2abc\u2a9f\3\2"+
		"\2\2\u2abc\u2aa0\3\2\2\2\u2abc\u2aa1\3\2\2\2\u2abc\u2aa2\3\2\2\2\u2abc"+
		"\u2aa3\3\2\2\2\u2abc\u2aa4\3\2\2\2\u2abc\u2aa5\3\2\2\2\u2abc\u2aa6\3\2"+
		"\2\2\u2abc\u2aa7\3\2\2\2\u2abc\u2aa8\3\2\2\2\u2abc\u2aa9\3\2\2\2\u2abc"+
		"\u2aaa\3\2\2\2\u2abc\u2aab\3\2\2\2\u2abc\u2aac\3\2\2\2\u2abc\u2aad\3\2"+
		"\2\2\u2abc\u2aae\3\2\2\2\u2abc\u2aaf\3\2\2\2\u2abc\u2ab0\3\2\2\2\u2abc"+
		"\u2ab1\3\2\2\2\u2abc\u2ab2\3\2\2\2\u2abc\u2ab3\3\2\2\2\u2abc\u2ab4\3\2"+
		"\2\2\u2abc\u2ab5\3\2\2\2\u2abc\u2ab6\3\2\2\2\u2abc\u2ab7\3\2\2\2\u2abc"+
		"\u2ab8\3\2\2\2\u2abc\u2ab9\3\2\2\2\u2abc\u2aba\3\2\2\2\u2abc\u2abb\3\2"+
		"\2\2\u2abd\u0549\3\2\2\2\u2abe\u2abf\t!\2\2\u2abf\u054b\3\2\2\2\u2ac0"+
		"\u2ac1\t\"\2\2\u2ac1\u054d\3\2\2\2\u2ac2\u2ac3\5\u0550\u02a9\2\u2ac3\u2ac4"+
		"\5\u055c\u02af\2\u2ac4\u2ac5\5\u055a\u02ae\2\u2ac5\u054f\3\2\2\2\u2ac6"+
		"\u2acb\b\u02a9\1\2\u2ac7\u2ac8\f\3\2\2\u2ac8\u2aca\5\u0552\u02aa\2\u2ac9"+
		"\u2ac7\3\2\2\2\u2aca\u2acd\3\2\2\2\u2acb\u2ac9\3\2\2\2\u2acb\u2acc\3\2"+
		"\2\2\u2acc\u0551\3\2\2\2\u2acd\u2acb\3\2\2\2\u2ace\u2acf\5\u0556\u02ac"+
		"\2\u2acf\u2ad0\7\u0134\2\2\u2ad0\u2ad1\7\u0208\2\2\u2ad1\u2ae3\3\2\2\2"+
		"\u2ad2\u2ad3\5\u0556\u02ac\2\u2ad3\u2ad4\7\u0209\2\2\u2ad4\u2ad5\5\u0558"+
		"\u02ad\2\u2ad5\u2ae3\3\2\2\2\u2ad6\u2ad7\5\u0556\u02ac\2\u2ad7\u2ad8\7"+
		"\u020a\2\2\u2ad8\u2ad9\7\u020b\2\2\u2ad9\u2ae3\3\2\2\2\u2ada\u2adb\5\u0556"+
		"\u02ac\2\u2adb\u2adc\7\u020a\2\2\u2adc\u2add\7\u020c\2\2\u2add\u2ae3\3"+
		"\2\2\2\u2ade\u2adf\5\u0556\u02ac\2\u2adf\u2ae0\7\u020a\2\2\u2ae0\u2ae1"+
		"\7\u020d\2\2\u2ae1\u2ae3\3\2\2\2\u2ae2\u2ace\3\2\2\2\u2ae2\u2ad2\3\2\2"+
		"\2\u2ae2\u2ad6\3\2\2\2\u2ae2\u2ada\3\2\2\2\u2ae2\u2ade\3\2\2\2\u2ae3\u0553"+
		"\3\2\2\2\u2ae4\u2aff\7\20\2\2\u2ae5\u2aff\7\21\2\2\u2ae6\u2aff\7\13\2"+
		"\2\u2ae7\u2aff\7\22\2\2\u2ae8\u2aff\7 \2\2\u2ae9\u2aff\7\23\2\2\u2aea"+
		"\u2aff\7\24\2\2\u2aeb\u2aff\7\25\2\2\u2aec\u2aff\7\f\2\2\u2aed\u2aff\7"+
		"\31\2\2\u2aee\u2aff\7\33\2\2\u2aef\u2aff\7\35\2\2\u2af0\u2aff\7 \2\2\u2af1"+
		"\u2aff\7\35\2\2\u2af2\u2aff\7\36\2\2\u2af3\u2aff\7\"\2\2\u2af4\u2aff\7"+
		"#\2\2\u2af5\u2aff\7$\2\2\u2af6\u2aff\7%\2\2\u2af7\u2aff\7&\2\2\u2af8\u2aff"+
		"\7\'\2\2\u2af9\u2aff\7(\2\2\u2afa\u2aff\7)\2\2\u2afb\u2aff\7\16\2\2\u2afc"+
		"\u2aff\5\u04d0\u0269\2\u2afd\u2aff\5\u04d2\u026a\2\u2afe\u2ae4\3\2\2\2"+
		"\u2afe\u2ae5\3\2\2\2\u2afe\u2ae6\3\2\2\2\u2afe\u2ae7\3\2\2\2\u2afe\u2ae8"+
		"\3\2\2\2\u2afe\u2ae9\3\2\2\2\u2afe\u2aea\3\2\2\2\u2afe\u2aeb\3\2\2\2\u2afe"+
		"\u2aec\3\2\2\2\u2afe\u2aed\3\2\2\2\u2afe\u2aee\3\2\2\2\u2afe\u2aef\3\2"+
		"\2\2\u2afe\u2af0\3\2\2\2\u2afe\u2af1\3\2\2\2\u2afe\u2af2\3\2\2\2\u2afe"+
		"\u2af3\3\2\2\2\u2afe\u2af4\3\2\2\2\u2afe\u2af5\3\2\2\2\u2afe\u2af6\3\2"+
		"\2\2\u2afe\u2af7\3\2\2\2\u2afe\u2af8\3\2\2\2\u2afe\u2af9\3\2\2\2\u2afe"+
		"\u2afa\3\2\2\2\u2afe\u2afb\3\2\2\2\u2afe\u2afc\3\2\2\2\u2afe\u2afd\3\2"+
		"\2\2\u2aff\u0555\3\2\2\2\u2b00\u2b01\5\u0554\u02ab\2\u2b01\u0557\3\2\2"+
		"\2\u2b02\u2b07\5\u052c\u0297\2\u2b03\u2b07\5\u054c\u02a7\2\u2b04\u2b07"+
		"\5\u0626\u0314\2\u2b05\u2b07\5\u0546\u02a4\2\u2b06\u2b02\3\2\2\2\u2b06"+
		"\u2b03\3\2\2\2\u2b06\u2b04\3\2\2\2\u2b06\u2b05\3\2\2\2\u2b07\u0559\3\2"+
		"\2\2\u2b08\u2b0b\3\2\2\2\u2b09\u2b0b\7\t\2\2\u2b0a\u2b08\3\2\2\2\u2b0a"+
		"\u2b09\3\2\2\2\u2b0b\u055b\3\2\2\2\u2b0c\u2b0d\5\u055e\u02b0\2\u2b0d\u2b0e"+
		"\7\u00b8\2\2\u2b0e\u2b0f\5\u0588\u02c5\2\u2b0f\u2b10\5\u0612\u030a\2\u2b10"+
		"\u2b11\7\u01e4\2\2\u2b11\u2b12\5\u0620\u0311\2\u2b12\u055d\3\2\2\2\u2b13"+
		"\u2b1c\5\u061c\u030f\2\u2b14\u2b15\5\u061c\u030f\2\u2b15\u2b16\5\u0560"+
		"\u02b1\2\u2b16\u2b1c\3\2\2\2\u2b17\u2b18\5\u061c\u030f\2\u2b18\u2b19\5"+
		"\u0560\u02b1\2\u2b19\u2b1a\5\u0562\u02b2\2\u2b1a\u2b1c\3\2\2\2\u2b1b\u2b13"+
		"\3\2\2\2\u2b1b\u2b14\3\2\2\2\u2b1b\u2b17\3\2\2\2\u2b1c\u055f\3\2\2\2\u2b1d"+
		"\u2b1e\7\u00d8\2\2\u2b1e\u0561\3\2\2\2\u2b1f\u2b20\b\u02b2\1\2\u2b20\u2b21"+
		"\5\u0566\u02b4\2\u2b21\u2b26\3\2\2\2\u2b22\u2b23\f\4\2\2\u2b23\u2b25\5"+
		"\u0566\u02b4\2\u2b24\u2b22\3\2\2\2\u2b25\u2b28\3\2\2\2\u2b26\u2b24\3\2"+
		"\2\2\u2b26\u2b27\3\2\2\2\u2b27\u0563\3\2\2\2\u2b28\u2b26\3\2\2\2\u2b29"+
		"\u2b2a\7\26\2\2\u2b2a\u2b2b\5\u0624\u0313\2\u2b2b\u2b2c\7\27\2\2\u2b2c"+
		"\u0565\3\2\2\2\u2b2d\u2b31\5\u0568\u02b5\2\u2b2e\u2b31\7\u00d8\2\2\u2b2f"+
		"\u2b31\5\u0564\u02b3\2\u2b30\u2b2d\3\2\2\2\u2b30\u2b2e\3\2\2\2\u2b30\u2b2f"+
		"\3\2\2\2\u2b31\u0567\3\2\2\2\u2b32\u2b33\5\u0578\u02bd\2\u2b33\u2b34\7"+
		"\u020e\2\2\u2b34\u2b35\7d\2\2\u2b35\u2b36\5\u0576\u02bc\2\u2b36\u2b37"+
		"\7\t\2\2\u2b37\u2b49\3\2\2\2\u2b38\u2b39\5\u0578\u02bd\2\u2b39\u2b3a\5"+
		"\u057a\u02be\2\u2b3a\u2b3b\5\u057c\u02bf\2\u2b3b\u2b3c\5\u057e\u02c0\2"+
		"\u2b3c\u2b3d\5\u0580\u02c1\2\u2b3d\u2b3e\5\u0582\u02c2\2\u2b3e\u2b3f\7"+
		"\t\2\2\u2b3f\u2b49\3\2\2\2\u2b40\u2b41\5\u0578\u02bd\2\u2b41\u2b42\5\u056a"+
		"\u02b6\2\u2b42\u2b43\7\u00d2\2\2\u2b43\u2b44\5\u056e\u02b8\2\u2b44\u2b45"+
		"\5\u0574\u02bb\2\u2b45\u2b46\5\u056c\u02b7\2\u2b46\u2b47\7\t\2\2\u2b47"+
		"\u2b49\3\2\2\2\u2b48\u2b32\3\2\2\2\u2b48\u2b38\3\2\2\2\u2b48\u2b40\3\2"+
		"\2\2\u2b49\u0569\3\2\2\2\u2b4a\u2b4f\3\2\2\2\u2b4b\u2b4c\7\u012a\2\2\u2b4c"+
		"\u2b4f\7\u0161\2\2\u2b4d\u2b4f\7\u0161\2\2\u2b4e\u2b4a\3\2\2\2\u2b4e\u2b4b"+
		"\3\2\2\2\u2b4e\u2b4d\3\2\2\2\u2b4f\u056b\3\2\2\2\u2b50\u2b51\5\u03ba\u01de"+
		"\2\u2b51\u056d\3\2\2\2\u2b52\u2b58\3\2\2\2\u2b53\u2b54\7\4\2\2\u2b54\u2b55"+
		"\5\u0570\u02b9\2\u2b55\u2b56\7\5\2\2\u2b56\u2b58\3\2\2\2\u2b57\u2b52\3"+
		"\2\2\2\u2b57\u2b53\3\2\2\2\u2b58\u056f\3\2\2\2\u2b59\u2b5a\b\u02b9\1\2"+
		"\u2b5a\u2b5b\5\u0572\u02ba\2\u2b5b\u2b61\3\2\2\2\u2b5c\u2b5d\f\3\2\2\u2b5d"+
		"\u2b5e\7\b\2\2\u2b5e\u2b60\5\u0572\u02ba\2\u2b5f\u2b5c\3\2\2\2\u2b60\u2b63"+
		"\3\2\2\2\u2b61\u2b5f\3\2\2\2\u2b61\u2b62\3\2\2\2\u2b62\u0571\3\2\2\2\u2b63"+
		"\u2b61\3\2\2\2\u2b64\u2b65\5\u0578\u02bd\2\u2b65\u2b66\5\u057c\u02bf\2"+
		"\u2b66\u0573\3\2\2\2\u2b67\u2b68\t#\2\2\u2b68\u0575\3\2\2\2\u2b69\u2b6c"+
		"\7!\2\2\u2b6a\u2b6c\5\u053a\u029e\2\u2b6b\u2b69\3\2\2\2\u2b6b\u2b6a\3"+
		"\2\2\2\u2b6c\u0577\3\2\2\2\u2b6d\u2b6e\5\u0624\u0313\2\u2b6e\u0579\3\2"+
		"\2\2\u2b6f\u2b72\3\2\2\2\u2b70\u2b72\7\u020f\2\2\u2b71\u2b6f\3\2\2\2\u2b71"+
		"\u2b70\3\2\2\2\u2b72\u057b\3\2\2\2\u2b73\u2b74\5\u0458\u022d\2\u2b74\u057d"+
		"\3\2\2\2\u2b75\u2b79\3\2\2\2\u2b76\u2b77\7Q\2\2\u2b77\u2b79\5\u020e\u0108"+
		"\2\u2b78\u2b75\3\2\2\2\u2b78\u2b76\3\2\2\2\u2b79\u057f\3\2\2\2\u2b7a\u2b7e"+
		"\3\2\2\2\u2b7b\u2b7c\7s\2\2\u2b7c\u2b7e\7t\2\2\u2b7d\u2b7a\3\2\2\2\u2b7d"+
		"\u2b7b\3\2\2\2\u2b7e\u0581\3\2\2\2\u2b7f\u2b84\3\2\2\2\u2b80\u2b81\5\u0584"+
		"\u02c3\2\u2b81\u2b82\5\u0628\u0315\2\u2b82\u2b84\3\2\2\2\u2b83\u2b7f\3"+
		"\2\2\2\u2b83\u2b80\3\2\2\2\u2b84\u0583\3\2\2\2\u2b85\u2b88\5\u0586\u02c4"+
		"\2\u2b86\u2b88\7[\2\2\u2b87\u2b85\3\2\2\2\u2b87\u2b86\3\2\2\2\u2b88\u0585"+
		"\3\2\2\2\u2b89\u2b8a\t$\2\2\u2b8a\u0587\3\2\2\2\u2b8b\u2b90\b\u02c5\1"+
		"\2\u2b8c\u2b8d\f\3\2\2\u2b8d\u2b8f\5\u058a\u02c6\2\u2b8e\u2b8c\3\2\2\2"+
		"\u2b8f\u2b92\3\2\2\2\u2b90\u2b8e\3\2\2\2\u2b90\u2b91\3\2\2\2\u2b91\u0589"+
		"\3\2\2\2\u2b92\u2b90\3\2\2\2\u2b93\u2b94\5\u055c\u02af\2\u2b94\u2b95\7"+
		"\t\2\2\u2b95\u2baf\3\2\2\2\u2b96\u2baf\5\u05cc\u02e7\2\u2b97\u2baf\5\u05d0"+
		"\u02e9\2\u2b98\u2baf\5\u0592\u02ca\2\u2b99\u2baf\5\u05a2\u02d2\2\u2b9a"+
		"\u2baf\5\u05a8\u02d5\2\u2b9b\u2baf\5\u05b2\u02da\2\u2b9c\u2baf\5\u05b4"+
		"\u02db\2\u2b9d\u2baf\5\u05b6\u02dc\2\u2b9e\u2baf\5\u05c4\u02e3\2\u2b9f"+
		"\u2baf\5\u05c8\u02e5\2\u2ba0\u2baf\5\u05dc\u02ef\2\u2ba1\u2baf\5\u05e2"+
		"\u02f2\2\u2ba2\u2baf\5\u05e4\u02f3\2\u2ba3\u2baf\5\u058c\u02c7\2\u2ba4"+
		"\u2baf\5\u058e\u02c8\2\u2ba5\u2baf\5\u0594\u02cb\2\u2ba6\u2baf\5\u05ec"+
		"\u02f7\2\u2ba7\u2baf\5\u05fa\u02fe\2\u2ba8\u2baf\5\u0602\u0302\2\u2ba9"+
		"\u2baf\5\u0604\u0303\2\u2baa\u2baf\5\u0606\u0304\2\u2bab\u2baf\5\u0608"+
		"\u0305\2\u2bac\u2baf\5\u060a\u0306\2\u2bad\u2baf\5\u060e\u0308\2\u2bae"+
		"\u2b93\3\2\2\2\u2bae\u2b96\3\2\2\2\u2bae\u2b97\3\2\2\2\u2bae\u2b98\3\2"+
		"\2\2\u2bae\u2b99\3\2\2\2\u2bae\u2b9a\3\2\2\2\u2bae\u2b9b\3\2\2\2\u2bae"+
		"\u2b9c\3\2\2\2\u2bae\u2b9d\3\2\2\2\u2bae\u2b9e\3\2\2\2\u2bae\u2b9f\3\2"+
		"\2\2\u2bae\u2ba0\3\2\2\2\u2bae\u2ba1\3\2\2\2\u2bae\u2ba2\3\2\2\2\u2bae"+
		"\u2ba3\3\2\2\2\u2bae\u2ba4\3\2\2\2\u2bae\u2ba5\3\2\2\2\u2bae\u2ba6\3\2"+
		"\2\2\u2bae\u2ba7\3\2\2\2\u2bae\u2ba8\3\2\2\2\u2bae\u2ba9\3\2\2\2\u2bae"+
		"\u2baa\3\2\2\2\u2bae\u2bab\3\2\2\2\u2bae\u2bac\3\2\2\2\u2bae\u2bad\3\2"+
		"\2\2\u2baf\u058b\3\2\2\2\u2bb0\u2bb1\7\u0210\2\2\u2bb1\u2bb2\5\u062c\u0317"+
		"\2\u2bb2\u2bb3\7\t\2\2\u2bb3\u058d\3\2\2\2\u2bb4\u2bb5\7\u01ce\2\2\u2bb5"+
		"\u2bb6\5\u0624\u0313\2\u2bb6\u2bb7\7\4\2\2\u2bb7\u2bb8\5\u0590\u02c9\2"+
		"\u2bb8\u2bb9\7\5\2\2\u2bb9\u2bba\7\t\2\2\u2bba\u2bc3\3\2\2\2\u2bbb\u2bbc"+
		"\7_\2\2\u2bbc\u2bbd\5\u0624\u0313\2\u2bbd\u2bbe\7\4\2\2\u2bbe\u2bbf\5"+
		"\u0590\u02c9\2\u2bbf\u2bc0\7\5\2\2\u2bc0\u2bc1\7\t\2\2\u2bc1\u2bc3\3\2"+
		"\2\2\u2bc2\u2bb4\3\2\2\2\u2bc2\u2bbb\3\2\2\2\u2bc3\u058f\3\2\2\2\u2bc4"+
		"\u2bc7\3\2\2\2\u2bc5\u2bc7\5\u04dc\u026f\2\u2bc6\u2bc4\3\2\2\2\u2bc6\u2bc5"+
		"\3\2\2\2\u2bc7\u0591\3\2\2\2\u2bc8\u2bc9\5\u05a0\u02d1\2\u2bc9\u2bca\5"+
		"\u0586\u02c4\2\u2bca\u2bcb\5\u0628\u0315\2\u2bcb\u2bcc\7\t\2\2\u2bcc\u0593"+
		"\3\2\2\2\u2bcd\u2bce\7\u0211\2\2\u2bce\u2bcf\5\u0596\u02cc\2\u2bcf\u2bd0"+
		"\7\u0212\2\2\u2bd0\u2bd1\5\u0598\u02cd\2\u2bd1\u2bd2\7\t\2\2\u2bd2\u0595"+
		"\3\2\2\2\u2bd3\u2bd7\3\2\2\2\u2bd4\u2bd7\7\u01cf\2\2\u2bd5\u2bd7\7\u0213"+
		"\2\2\u2bd6\u2bd3\3\2\2\2\u2bd6\u2bd4\3\2\2\2\u2bd6\u2bd5\3\2\2\2\u2bd7"+
		"\u0597\3\2\2\2\u2bd8\u2bd9\b\u02cd\1\2\u2bd9\u2bda\5\u059a\u02ce\2\u2bda"+
		"\u2be0\3\2\2\2\u2bdb\u2bdc\f\4\2\2\u2bdc\u2bdd\7\b\2\2\u2bdd\u2bdf\5\u059a"+
		"\u02ce\2\u2bde\u2bdb\3\2\2\2\u2bdf\u2be2\3\2\2\2\u2be0\u2bde\3\2\2\2\u2be0"+
		"\u2be1\3\2\2\2\u2be1\u0599\3\2\2\2\u2be2\u2be0\3\2\2\2\u2be3\u2be4\5\u059e"+
		"\u02d0\2\u2be4\u2be5\5\u0586\u02c4\2\u2be5\u2be6\5\u059c\u02cf\2\u2be6"+
		"\u059b\3\2\2\2\u2be7\u2be8\5\u053a\u029e\2\u2be8\u059d\3\2\2\2\u2be9\u2bea"+
		"\5\u05a0\u02d1\2\u2bea\u059f\3\2\2\2\u2beb\u2bec\b\u02d1\1\2\u2bec\u2bef"+
		"\5\u020e\u0108\2\u2bed\u2bef\7!\2\2\u2bee\u2beb\3\2\2\2\u2bee\u2bed\3"+
		"\2\2\2\u2bef\u2bf7\3\2\2\2\u2bf0\u2bf1\f\3\2\2\u2bf1\u2bf2\7\6\2\2\u2bf2"+
		"\u2bf3\5\u062e\u0318\2\u2bf3\u2bf4\7\7\2\2\u2bf4\u2bf6\3\2\2\2\u2bf5\u2bf0"+
		"\3\2\2\2\u2bf6\u2bf9\3\2\2\2\u2bf7\u2bf5\3\2\2\2\u2bf7\u2bf8\3\2\2\2\u2bf8"+
		"\u05a1\3\2\2\2\u2bf9\u2bf7\3\2\2\2\u2bfa\u2bfb\7\u0102\2\2\u2bfb\u2bfc"+
		"\5\u062a\u0316\2\u2bfc\u2bfd\7\u0083\2\2\u2bfd\u2bfe\5\u0588\u02c5\2\u2bfe"+
		"\u2bff\5\u05a4\u02d3\2\u2bff\u2c00\5\u05a6\u02d4\2\u2c00\u2c01\7\u01e4"+
		"\2\2\u2c01\u2c02\7\u0102\2\2\u2c02\u2c03\7\t\2\2\u2c03\u05a3\3\2\2\2\u2c04"+
		"\u2c0d\b\u02d3\1\2\u2c05\u2c06\f\3\2\2\u2c06\u2c07\7\u0214\2\2\u2c07\u2c08"+
		"\5\u0488\u0245\2\u2c08\u2c09\7\u0083\2\2\u2c09\u2c0a\5\u0588\u02c5\2\u2c0a"+
		"\u2c0c\3\2\2\2\u2c0b\u2c05\3\2\2\2\u2c0c\u2c0f\3\2\2\2\u2c0d\u2c0b\3\2"+
		"\2\2\u2c0d\u2c0e\3\2\2\2\u2c0e\u05a5\3\2\2\2\u2c0f\u2c0d\3\2\2\2\u2c10"+
		"\u2c14\3\2\2\2\u2c11\u2c12\7`\2\2\u2c12\u2c14\5\u0588\u02c5\2\u2c13\u2c10"+
		"\3\2\2\2\u2c13\u2c11\3\2\2\2\u2c14\u05a7\3\2\2\2\u2c15\u2c16\7N\2\2\u2c16"+
		"\u2c17\5\u05aa\u02d6\2\u2c17\u2c18\5\u05ac\u02d7\2\u2c18\u2c19\5\u05b0"+
		"\u02d9\2\u2c19\u2c1a\7\u01e4\2\2\u2c1a\u2c1b\7N\2\2\u2c1b\u2c1c\7\t\2"+
		"\2\u2c1c\u05a9\3\2\2\2\u2c1d\u2c20\3\2\2\2\u2c1e\u2c20\5\u0628\u0315\2"+
		"\u2c1f\u2c1d\3\2\2\2\u2c1f\u2c1e\3\2\2\2\u2c20\u05ab\3\2\2\2\u2c21\u2c22"+
		"\b\u02d7\1\2\u2c22\u2c23\5\u05ae\u02d8\2\u2c23\u2c28\3\2\2\2\u2c24\u2c25"+
		"\f\4\2\2\u2c25\u2c27\5\u05ae\u02d8\2\u2c26\u2c24\3\2\2\2\u2c27\u2c2a\3"+
		"\2\2\2\u2c28\u2c26\3\2\2\2\u2c28\u2c29\3\2\2\2\u2c29\u05ad\3\2\2\2\u2c2a"+
		"\u2c28\3\2\2\2\u2c2b\u2c2c\7\u008c\2\2\u2c2c\u2c2d\5\u04dc\u026f\2\u2c2d"+
		"\u2c2e\7\u0083\2\2\u2c2e\u2c2f\5\u0588\u02c5\2\u2c2f\u05af\3\2\2\2\u2c30"+
		"\u2c34\3\2\2\2\u2c31\u2c32\7`\2\2\u2c32\u2c34\5\u0588\u02c5\2\u2c33\u2c30"+
		"\3\2\2\2\u2c33\u2c31\3\2\2\2\u2c34\u05b1\3\2\2\2\u2c35\u2c36\5\u061e\u0310"+
		"\2\u2c36\u2c37\5\u05e0\u02f1\2\u2c37\u05b3\3\2\2\2\u2c38\u2c39\5\u061e"+
		"\u0310\2\u2c39\u2c3a\7\u0215\2\2\u2c3a\u2c3b\5\u0630\u0319\2\u2c3b\u2c3c"+
		"\5\u05e0\u02f1\2\u2c3c\u05b5\3\2\2\2\u2c3d\u2c3e\5\u061e\u0310\2\u2c3e"+
		"\u2c3f\7d\2\2\u2c3f\u2c40\5\u05b8\u02dd\2\u2c40\u2c41\5\u05e0\u02f1\2"+
		"\u2c41\u05b7\3\2\2\2\u2c42\u2c43\5\u05c2\u02e2\2\u2c43\u2c44\7j\2\2\u2c44"+
		"\u2c45\5\u05be\u02e0\2\u2c45\u2c46\5\u0488\u0245\2\u2c46\u2c47\7\34\2"+
		"\2\u2c47\u2c48\5\u0488\u0245\2\u2c48\u2c49\5\u05c0\u02e1\2\u2c49\u2c5e"+
		"\3\2\2\2\u2c4a\u2c4b\5\u05c2\u02e2\2\u2c4b\u2c4c\7j\2\2\u2c4c\u2c4d\5"+
		"\u03b4\u01db\2\u2c4d\u2c4e\5\u05bc\u02df\2\u2c4e\u2c5e\3\2\2\2\u2c4f\u2c50"+
		"\5\u05c2\u02e2\2\u2c50\u2c51\7j\2\2\u2c51\u2c52\5\u03ba\u01de\2\u2c52"+
		"\u2c5e\3\2\2\2\u2c53\u2c54\5\u05c2\u02e2\2\u2c54\u2c55\7j\2\2\u2c55\u2c56"+
		"\7\u00f0\2\2\u2c56\u2c57\5\u0488\u0245\2\u2c57\u2c58\5\u05ba\u02de\2\u2c58"+
		"\u2c5e\3\2\2\2\u2c59\u2c5a\5\u05c2\u02e2\2\u2c5a\u2c5b\7j\2\2\u2c5b\u2c5c"+
		"\5\u0370\u01b9\2\u2c5c\u2c5e\3\2\2\2\u2c5d\u2c42\3\2\2\2\u2c5d\u2c4a\3"+
		"\2\2\2\u2c5d\u2c4f\3\2\2\2\u2c5d\u2c53\3\2\2\2\u2c5d\u2c59\3\2\2\2\u2c5e"+
		"\u05b9\3\2\2\2\u2c5f\u2c63\3\2\2\2\u2c60\u2c61\7\u008a\2\2\u2c61\u2c63"+
		"\5\u04dc\u026f\2\u2c62\u2c5f\3\2\2\2\u2c62\u2c60\3\2\2\2\u2c63\u05bb\3"+
		"\2\2\2\u2c64\u2c71\3\2\2\2\u2c65\u2c66\7\4\2\2\u2c66\u2c6b\5\u0488\u0245"+
		"\2\u2c67\u2c68\7\b\2\2\u2c68\u2c6a\5\u0488\u0245\2\u2c69\u2c67\3\2\2\2"+
		"\u2c6a\u2c6d\3\2\2\2\u2c6b\u2c69\3\2\2\2\u2c6b\u2c6c\3\2\2\2\u2c6c\u2c6e"+
		"\3\2\2\2\u2c6d\u2c6b\3\2\2\2\u2c6e\u2c6f\7\5\2\2\u2c6f\u2c71\3\2\2\2\u2c70"+
		"\u2c64\3\2\2\2\u2c70\u2c65\3\2\2\2\u2c71\u05bd\3\2\2\2\u2c72\u2c75\3\2"+
		"\2\2\u2c73\u2c75\7\u0216\2\2\u2c74\u2c72\3\2\2\2\u2c74\u2c73\3\2\2\2\u2c75"+
		"\u05bf\3\2\2\2\u2c76\u2c7a\3\2\2\2\u2c77\u2c78\7\u00b9\2\2\u2c78\u2c7a"+
		"\5\u0488\u0245\2\u2c79\u2c76\3\2\2\2\u2c79\u2c77\3\2\2\2\u2c7a\u05c1\3"+
		"\2\2\2\u2c7b\u2c7c\5\u020c\u0107\2\u2c7c\u05c3\3\2\2\2\u2c7d\u2c7e\5\u061e"+
		"\u0310\2\u2c7e\u2c7f\7\u0217\2\2\u2c7f\u2c80\5\u05c2\u02e2\2\u2c80\u2c81"+
		"\5\u05c6\u02e4\2\u2c81\u2c82\7j\2\2\u2c82\u2c83\7I\2\2\u2c83\u2c84\5\u0488"+
		"\u0245\2\u2c84\u2c85\5\u05e0\u02f1\2\u2c85\u05c5\3\2\2\2\u2c86\u2c8a\3"+
		"\2\2\2\u2c87\u2c88\7\u0218\2\2\u2c88\u2c8a\5\u052a\u0296\2\u2c89\u2c86"+
		"\3\2\2\2\u2c89\u2c87\3\2\2\2\u2c8a\u05c7\3\2\2\2\u2c8b\u2c8c\5\u05ca\u02e6"+
		"\2\u2c8c\u2c8d\5\u0620\u0311\2\u2c8d\u2c8e\5\u0622\u0312\2\u2c8e\u05c9"+
		"\3\2\2\2\u2c8f\u2c90\t%\2\2\u2c90\u05cb\3\2\2\2\u2c91\u2c92\7\u021a\2"+
		"\2\u2c92\u2c93\7\u0129\2\2\u2c93\u2c94\5\u0628\u0315\2\u2c94\u2c95\7\t"+
		"\2\2\u2c95\u2ca7\3\2\2\2\u2c96\u2c97\7\u021a\2\2\u2c97\u2c98\7\u021b\2"+
		"\2\u2c98\u2c99\7\u00f0\2\2\u2c99\u2c9a\5\u0488\u0245\2\u2c9a\u2c9b\5\u05ba"+
		"\u02de\2\u2c9b\u2c9c\7\t\2\2\u2c9c\u2ca7\3\2\2\2\u2c9d\u2c9e\7\u021a\2"+
		"\2\u2c9e\u2c9f\7\u021b\2\2\u2c9f\u2ca0\5\u03ba\u01de\2\u2ca0\u2ca1\7\t"+
		"\2\2\u2ca1\u2ca7\3\2\2\2\u2ca2\u2ca3\7\u021a\2\2\u2ca3\u2ca4\5\u05ce\u02e8"+
		"\2\u2ca4\u2ca5\7\t\2\2\u2ca5\u2ca7\3\2\2\2\u2ca6\u2c91\3\2\2\2\u2ca6\u2c96"+
		"\3\2\2\2\u2ca6\u2c9d\3\2\2\2\u2ca6\u2ca2\3\2\2\2\u2ca7\u05cd\3\2\2\2\u2ca8"+
		"\u2cab\3\2\2\2\u2ca9\u2cab\5\u0628\u0315\2\u2caa\u2ca8\3\2\2\2\u2caa\u2ca9"+
		"\3\2\2\2\u2cab\u05cf\3\2\2\2\u2cac\u2cad\7\u021c\2\2\u2cad\u2cae\5\u05d2"+
		"\u02ea\2\u2cae\u2caf\5\u052c\u0297\2\u2caf\u2cb0\5\u05d4\u02eb\2\u2cb0"+
		"\u2cb1\5\u05d6\u02ec\2\u2cb1\u2cb2\7\t\2\2\u2cb2\u2cc7\3\2\2\2\u2cb3\u2cb4"+
		"\7\u021c\2\2\u2cb4\u2cb5\5\u05d2\u02ea\2\u2cb5\u2cb6\5\u0542\u02a2\2\u2cb6"+
		"\u2cb7\5\u05d6\u02ec\2\u2cb7\u2cb8\7\t\2\2\u2cb8\u2cc7\3\2\2\2\u2cb9\u2cba"+
		"\7\u021c\2\2\u2cba\u2cbb\5\u05d2\u02ea\2\u2cbb\u2cbc\7\u021d\2\2\u2cbc"+
		"\u2cbd\5\u052c\u0297\2\u2cbd\u2cbe\5\u05d6\u02ec\2\u2cbe\u2cbf\7\t\2\2"+
		"\u2cbf\u2cc7\3\2\2\2\u2cc0\u2cc1\7\u021c\2\2\u2cc1\u2cc2\5\u05d2\u02ea"+
		"\2\u2cc2\u2cc3\5\u05d6\u02ec\2\u2cc3\u2cc4\7\t\2\2\u2cc4\u2cc7\3\2\2\2"+
		"\u2cc5\u2cc7\7\u021c\2\2\u2cc6\u2cac\3\2\2\2\u2cc6\u2cb3\3\2\2\2\u2cc6"+
		"\u2cb9\3\2\2\2\u2cc6\u2cc0\3\2\2\2\u2cc6\u2cc5\3\2\2\2\u2cc7\u05d1\3\2"+
		"\2\2\u2cc8\u2cd1\3\2\2\2\u2cc9\u2cd1\3\2\2\2\u2cca\u2cd1\7\u021e\2\2\u2ccb"+
		"\u2cd1\7\u021f\2\2\u2ccc\u2cd1\7\u0220\2\2\u2ccd\u2cd1\7\u0221\2\2\u2cce"+
		"\u2cd1\7\u0222\2\2\u2ccf\u2cd1\7\u0223\2\2\u2cd0\u2cc8\3\2\2\2\u2cd0\u2cc9"+
		"\3\2\2\2\u2cd0\u2cca\3\2\2\2\u2cd0\u2ccb\3\2\2\2\u2cd0\u2ccc\3\2\2\2\u2cd0"+
		"\u2ccd\3\2\2\2\u2cd0\u2cce\3\2\2\2\u2cd0\u2ccf\3\2\2\2\u2cd1\u05d3\3\2"+
		"\2\2\u2cd2\u2cd6\b\u02eb\1\2\u2cd3\u2cd4\7\b\2\2\u2cd4\u2cd6\5\u0488\u0245"+
		"\2\u2cd5\u2cd2\3\2\2\2\u2cd5\u2cd3\3\2\2\2\u2cd6\u2cdc\3\2\2\2\u2cd7\u2cd8"+
		"\f\3\2\2\u2cd8\u2cd9\7\b\2\2\u2cd9\u2cdb\5\u0488\u0245\2\u2cda\u2cd7\3"+
		"\2\2\2\u2cdb\u2cde\3\2\2\2\u2cdc\u2cda\3\2\2\2\u2cdc\u2cdd\3\2\2\2\u2cdd"+
		"\u05d5\3\2\2\2\u2cde\u2cdc\3\2\2\2\u2cdf\u2ce3\3\2\2\2\u2ce0\u2ce1\7\u008a"+
		"\2\2\u2ce1\u2ce3\5\u05da\u02ee\2\u2ce2\u2cdf\3\2\2\2\u2ce2\u2ce0\3\2\2"+
		"\2\u2ce3\u05d7\3\2\2\2\u2ce4\u2ce5\5\u0542\u02a2\2\u2ce5\u2ce6\7\f\2\2"+
		"\u2ce6\u2ce7\5\u0488\u0245\2\u2ce7\u05d9\3\2\2\2\u2ce8\u2cee\5\u05d8\u02ed"+
		"\2\u2ce9\u2cea\5\u05d8\u02ed\2\u2cea\u2ceb\7\b\2\2\u2ceb\u2cec\5\u05da"+
		"\u02ee\2\u2cec\u2cee\3\2\2\2\u2ced\u2ce8\3\2\2\2\u2ced\u2ce9\3\2\2\2\u2cee"+
		"\u05db\3\2\2\2\u2cef\u2cf0\7\u0224\2\2\u2cf0\u2cf1\5\u0628\u0315\2\u2cf1"+
		"\u2cf2\5\u05de\u02f0\2\u2cf2\u2cf3\7\t\2\2\u2cf3\u05dd\3\2\2\2\u2cf4\u2cf8"+
		"\3\2\2\2\u2cf5\u2cf6\7\b\2\2\u2cf6\u2cf8\5\u0628\u0315\2\u2cf7\u2cf4\3"+
		"\2\2\2\u2cf7\u2cf5\3\2\2\2\u2cf8\u05df\3\2\2\2\u2cf9\u2cfa\7\u0225\2\2"+
		"\u2cfa\u2cfb\5\u0588\u02c5\2\u2cfb\u2cfc\7\u01e4\2\2\u2cfc\u2cfd\7\u0225"+
		"\2\2\u2cfd\u2cfe\5\u0620\u0311\2\u2cfe\u2cff\7\t\2\2\u2cff\u05e1\3\2\2"+
		"\2\u2d00\u2d01\5\u0632\u031a\2\u2d01\u2d02\7\t\2\2\u2d02\u05e3\3\2\2\2"+
		"\u2d03\u2d04\7\u00f0\2\2\u2d04\u2d0c\5\u0488\u0245\2\u2d05\u2d06\5\u05ea"+
		"\u02f6\2\u2d06\u2d07\5\u05e6\u02f4\2\u2d07\u2d0d\3\2\2\2\u2d08\u2d09\5"+
		"\u05e6\u02f4\2\u2d09\u2d0a\5\u05ea\u02f6\2\u2d0a\u2d0d\3\2\2\2\u2d0b\u2d0d"+
		"\3\2\2\2\u2d0c\u2d05\3\2\2\2\u2d0c\u2d08\3\2\2\2\u2d0c\u2d0b\3\2\2\2\u2d0d"+
		"\u2d0e\3\2\2\2\u2d0e\u2d0f\7\t\2\2\u2d0f\u05e5\3\2\2\2\u2d10\u2d14\3\2"+
		"\2\2\u2d11\u2d12\7\u008a\2\2\u2d12\u2d14\5\u05e8\u02f5\2\u2d13\u2d10\3"+
		"\2\2\2\u2d13\u2d11\3\2\2\2\u2d14\u05e7\3\2\2\2\u2d15\u2d16\b\u02f5\1\2"+
		"\u2d16\u2d17\5\u0488\u0245\2\u2d17\u2d1d\3\2\2\2\u2d18\u2d19\f\3\2\2\u2d19"+
		"\u2d1a\7\b\2\2\u2d1a\u2d1c\5\u0488\u0245\2\u2d1b\u2d18\3\2\2\2\u2d1c\u2d1f"+
		"\3\2\2\2\u2d1d\u2d1b\3\2\2\2\u2d1d\u2d1e\3\2\2\2\u2d1e\u05e9\3\2\2\2\u2d1f"+
		"\u2d1d\3\2\2\2\u2d20\u2d27\3\2\2\2\u2d21\u2d22\7m\2\2\u2d22\u2d23\7\u0177"+
		"\2\2\u2d23\u2d27\5\u05fc\u02ff\2\u2d24\u2d25\7m\2\2\u2d25\u2d27\5\u05fc"+
		"\u02ff\2\u2d26\u2d20\3\2\2\2\u2d26\u2d21\3\2\2\2\u2d26\u2d24\3\2\2\2\u2d27"+
		"\u05eb\3\2\2\2\u2d28\u2d29\7\u0226\2\2\u2d29\u2d42\5\u053a\u029e\2\u2d2a"+
		"\u2d2b\7\u0226\2\2\u2d2b\u2d2c\5\u0610\u0309\2\u2d2c\u2d2d\5\u05f6\u02fc"+
		"\2\u2d2d\u2d2e\7d\2\2\u2d2e\u2d2f\5\u03ba\u01de\2\u2d2f\u2d30\7\t\2\2"+
		"\u2d30\u2d42\3\2\2\2\u2d31\u2d32\7\u0226\2\2\u2d32\u2d33\5\u0610\u0309"+
		"\2\u2d33\u2d34\5\u05f6\u02fc\2\u2d34\u2d35\7d\2\2\u2d35\u2d36\7\u00f0"+
		"\2\2\u2d36\u2d37\5\u0628\u0315\2\u2d37\u2d38\5\u05f2\u02fa\2\u2d38\u2d39"+
		"\7\t\2\2\u2d39\u2d42\3\2\2\2\u2d3a\u2d3b\7\u0226\2\2\u2d3b\u2d3c\5\u053a"+
		"\u029e\2\u2d3c\u2d3d\7\4\2\2\u2d3d\u2d3e\5\u05f0\u02f9\2\u2d3e\u2d3f\7"+
		"\5\2\2\u2d3f\u2d40\7\t\2\2\u2d40\u2d42\3\2\2\2\u2d41\u2d28\3\2\2\2\u2d41"+
		"\u2d2a\3\2\2\2\u2d41\u2d31\3\2\2\2\u2d41\u2d3a\3\2\2\2\u2d42\u05ed\3\2"+
		"\2\2\u2d43\u2d44\5\u053a\u029e\2\u2d44\u2d45\7\30\2\2\u2d45\u2d46\5\u0488"+
		"\u0245\2\u2d46\u2d49\3\2\2\2\u2d47\u2d49\5\u0488\u0245\2\u2d48\u2d43\3"+
		"\2\2\2\u2d48\u2d47\3\2\2\2\u2d49\u05ef\3\2\2\2\u2d4a\u2d4b\b\u02f9\1\2"+
		"\u2d4b\u2d4c\5\u05ee\u02f8\2\u2d4c\u2d52\3\2\2\2\u2d4d\u2d4e\f\3\2\2\u2d4e"+
		"\u2d4f\7\b\2\2\u2d4f\u2d51\5\u05ee\u02f8\2\u2d50\u2d4d\3\2\2\2\u2d51\u2d54"+
		"\3\2\2\2\u2d52\u2d50\3\2\2\2\u2d52\u2d53\3\2\2\2\u2d53\u05f1\3\2\2\2\u2d54"+
		"\u2d52\3\2\2\2\u2d55\u2d59\3\2\2\2\u2d56\u2d57\7\u008a\2\2\u2d57\u2d59"+
		"\5\u04dc\u026f\2\u2d58\u2d55\3\2\2\2\u2d58\u2d56\3\2\2\2\u2d59\u05f3\3"+
		"\2\2\2\u2d5a\u2d5f\5\u0628\u0315\2\u2d5b\u2d5c\7\b\2\2\u2d5c\u2d5e\5\u0628"+
		"\u0315\2\u2d5d\u2d5b\3\2\2\2\u2d5e\u2d61\3\2\2\2\u2d5f\u2d5d\3\2\2\2\u2d5f"+
		"\u2d60\3\2\2\2\u2d60\u05f5\3\2\2\2\u2d61\u2d5f\3\2\2\2\u2d62\u2d67\3\2"+
		"\2\2\u2d63\u2d64\5\u05f8\u02fd\2\u2d64\u2d65\7\u0161\2\2\u2d65\u2d67\3"+
		"\2\2\2\u2d66\u2d62\3\2\2\2\u2d66\u2d63\3\2\2\2\u2d67\u05f7\3\2\2\2\u2d68"+
		"\u2d6b\3\2\2\2\u2d69\u2d6b\7\u012a\2\2\u2d6a\u2d68\3\2\2\2\u2d6a\u2d69"+
		"\3\2\2\2\u2d6b\u05f9\3\2\2\2\u2d6c\u2d6d\7c\2\2\u2d6d\u2d6e\5\u0600\u0301"+
		"\2\u2d6e\u2d6f\5\u05fe\u0300\2\u2d6f\u2d70\5\u0610\u0309\2\u2d70\u2d71"+
		"\7m\2\2\u2d71\u2d72\5\u05fc\u02ff\2\u2d72\u2d73\7\t\2\2\u2d73\u05fb\3"+
		"\2\2\2\u2d74\u2d75\5\u04dc\u026f\2\u2d75\u05fd\3\2\2\2\u2d76\u2d7a\3\2"+
		"\2\2\u2d77\u2d7a\7f\2\2\u2d78\u2d7a\7j\2\2\u2d79\u2d76\3\2\2\2\u2d79\u2d77"+
		"\3\2\2\2\u2d79\u2d78\3\2\2\2\u2d7a\u05ff\3\2\2\2\u2d7b\u2d92\3\2\2\2\u2d7c"+
		"\u2d92\3\2\2\2\u2d7d\u2d92\7\u0129\2\2\u2d7e\u2d92\7\u0142\2\2\u2d7f\u2d92"+
		"\7\u00f5\2\2\u2d80\u2d92\7\u0116\2\2\u2d81\u2d82\7\u00a8\2\2\u2d82\u2d92"+
		"\5\u0488\u0245\2\u2d83\u2d84\7\u0150\2\2\u2d84\u2d92\5\u0488\u0245\2\u2d85"+
		"\u2d92\5\u0488\u0245\2\u2d86\u2d92\7D\2\2\u2d87\u2d92\7\u00f8\2\2\u2d88"+
		"\u2d89\7\u00f8\2\2\u2d89\u2d92\5\u0488\u0245\2\u2d8a\u2d8b\7\u00f8\2\2"+
		"\u2d8b\u2d92\7D\2\2\u2d8c\u2d92\7\u00b6\2\2\u2d8d\u2d8e\7\u00b6\2\2\u2d8e"+
		"\u2d92\5\u0488\u0245\2\u2d8f\u2d90\7\u00b6\2\2\u2d90\u2d92\7D\2\2\u2d91"+
		"\u2d7b\3\2\2\2\u2d91\u2d7c\3\2\2\2\u2d91\u2d7d\3\2\2\2\u2d91\u2d7e\3\2"+
		"\2\2\u2d91\u2d7f\3\2\2\2\u2d91\u2d80\3\2\2\2\u2d91\u2d81\3\2\2\2\u2d91"+
		"\u2d83\3\2\2\2\u2d91\u2d85\3\2\2\2\u2d91\u2d86\3\2\2\2\u2d91\u2d87\3\2"+
		"\2\2\u2d91\u2d88\3\2\2\2\u2d91\u2d8a\3\2\2\2\u2d91\u2d8c\3\2\2\2\u2d91"+
		"\u2d8d\3\2\2\2\u2d91\u2d8f\3\2\2\2\u2d92\u0601\3\2\2\2\u2d93\u2d94\7\u0126"+
		"\2\2\u2d94\u2d95\5\u0600\u0301\2\u2d95\u2d96\5\u0610\u0309\2\u2d96\u2d97"+
		"\7\t\2\2\u2d97\u0603\3\2\2\2\u2d98\u2d99\7\u00c3\2\2\u2d99\u2d9a\5\u0610"+
		"\u0309\2\u2d9a\u2d9b\7\t\2\2\u2d9b\u0605\3\2\2\2\u2d9c\u2d9d\7t\2\2\u2d9d"+
		"\u2d9e\7\t\2\2\u2d9e\u0607\3\2\2\2\u2d9f\u2da0\7\u00c7\2\2\u2da0\u2da1"+
		"\5\u060c\u0307\2\u2da1\u2da2\7\t\2\2\u2da2\u0609\3\2\2\2\u2da3\u2da4\7"+
		"\u015c\2\2\u2da4\u2da5\5\u060c\u0307\2\u2da5\u2da6\7\t\2\2\u2da6\u060b"+
		"\3\2\2\2\u2da7\u2da8\7G\2\2\u2da8\u2dae\7\u00bf\2\2\u2da9\u2daa\7G\2\2"+
		"\u2daa\u2dab\7\u012a\2\2\u2dab\u2dae\7\u00bf\2\2\u2dac\u2dae\3\2\2\2\u2dad"+
		"\u2da7\3\2\2\2\u2dad\u2da9\3\2\2\2\u2dad\u2dac\3\2\2\2\u2dae\u060d\3\2"+
		"\2\2\u2daf\u2db0\7\u016a\2\2\u2db0\u2db1\5\u020e\u0108\2\u2db1\u2db2\7"+
		"\u0084\2\2\u2db2\u2db3\7[\2\2\u2db3\u2db4\7\t\2\2\u2db4\u2dbd\3\2\2\2"+
		"\u2db5\u2db6\7\u0156\2\2\u2db6\u2db7\5\u020e\u0108\2\u2db7\u2db8\7\t\2"+
		"\2\u2db8\u2dbd\3\2\2\2\u2db9\u2dba\7\u0156\2\2\u2dba\u2dbb\7D\2\2\u2dbb"+
		"\u2dbd\7\t\2\2\u2dbc\u2daf\3\2\2\2\u2dbc\u2db5\3\2\2\2\u2dbc\u2db9\3\2"+
		"\2\2\u2dbd\u060f\3\2\2\2\u2dbe\u2dc1\5\u053a\u029e\2\u2dbf\u2dc1\7!\2"+
		"\2\u2dc0\u2dbe\3\2\2\2\u2dc0\u2dbf\3\2\2\2\u2dc1\u0611\3\2\2\2\u2dc2\u2dc6"+
		"\3\2\2\2\u2dc3\u2dc4\7\u0223\2\2\u2dc4\u2dc6\5\u0614\u030b\2\u2dc5\u2dc2"+
		"\3\2\2\2\u2dc5\u2dc3\3\2\2\2\u2dc6\u0613\3\2\2\2\u2dc7\u2dc8\b\u030b\1"+
		"\2\u2dc8\u2dc9\5\u0616\u030c\2\u2dc9\u2dce\3\2\2\2\u2dca\u2dcb\f\4\2\2"+
		"\u2dcb\u2dcd\5\u0616\u030c\2\u2dcc\u2dca\3\2\2\2\u2dcd\u2dd0\3\2\2\2\u2dce"+
		"\u2dcc\3\2\2\2\u2dce\u2dcf\3\2\2\2\u2dcf\u0615\3\2\2\2\u2dd0\u2dce\3\2"+
		"\2\2\u2dd1\u2dd2\7\u008c\2\2\u2dd2\u2dd3\5\u0618\u030d\2\u2dd3\u2dd4\7"+
		"\u0083\2\2\u2dd4\u2dd5\5\u0588\u02c5\2\u2dd5\u0617\3\2\2\2\u2dd6\u2dd7"+
		"\b\u030d\1\2\u2dd7\u2dd8\5\u061a\u030e\2\u2dd8\u2dde\3\2\2\2\u2dd9\u2dda"+
		"\f\4\2\2\u2dda\u2ddb\7x\2\2\u2ddb\u2ddd\5\u061a\u030e\2\u2ddc\u2dd9\3"+
		"\2\2\2\u2ddd\u2de0\3\2\2\2\u2dde\u2ddc\3\2\2\2\u2dde\u2ddf\3\2\2\2\u2ddf"+
		"\u0619\3\2\2\2\u2de0\u2dde\3\2\2\2\u2de1\u2de5\5\u0624\u0313\2\u2de2\u2de3"+
		"\7\u021d\2\2\u2de3\u2de5\5\u052c\u0297\2\u2de4\u2de1\3\2\2\2\u2de4\u2de2"+
		"\3\2\2\2\u2de5\u061b\3\2\2\2\u2de6\u2de9\3\2\2\2\u2de7\u2de9\5\u0564\u02b3"+
		"\2\u2de8\u2de6\3\2\2\2\u2de8\u2de7\3\2\2\2\u2de9\u061d\3\2\2\2\u2dea\u2ded"+
		"\3\2\2\2\u2deb\u2ded\5\u0564\u02b3\2\u2dec\u2dea\3\2\2\2\u2dec\u2deb\3"+
		"\2\2\2\u2ded\u061f\3\2\2\2\u2dee\u2df1\3\2\2\2\u2def\u2df1\5\u0624\u0313"+
		"\2\u2df0\u2dee\3\2\2\2\u2df0\u2def\3\2\2\2\u2df1\u0621\3\2\2\2\u2df2\u2df6"+
		"\7\t\2\2\u2df3\u2df4\7\u008c\2\2\u2df4\u2df6\5\u062c\u0317\2\u2df5\u2df2"+
		"\3\2\2\2\u2df5\u2df3\3\2\2\2\u2df6\u0623\3\2\2\2\u2df7\u2dfa\5\u053a\u029e"+
		"\2\u2df8\u2dfa\5\u0626\u0314\2\u2df9\u2df7\3\2\2\2\u2df9\u2df8\3\2\2\2"+
		"\u2dfa\u0625\3\2\2\2\u2dfb\u2dfc\t&\2\2\u2dfc\u0627\3\2\2\2\u2dfd\u2dfe"+
		"\5\u050e\u0288\2\u2dfe\u2dff\5\u03d2\u01ea\2\u2dff\u2e00\5\u041a\u020e"+
		"\2\u2e00\u2e01\5\u0440\u0221\2\u2e01\u2e02\5\u03fc\u01ff\2\u2e02\u2e03"+
		"\5\u040a\u0206\2\u2e03\u2e04\5\u04b0\u0259\2\u2e04\u0629\3\2\2\2\u2e05"+
		"\u2e06\5\u0628\u0315\2\u2e06\u062b\3\2\2\2\u2e07\u2e08\5\u0628\u0315\2"+
		"\u2e08\u062d\3\2\2\2\u2e09\u2e0a\5\u0488\u0245\2\u2e0a\u062f\3\2\2\2\u2e0b"+
		"\u2e0c\5\u0488\u0245\2\u2e0c\u0631\3\2\2\2\u2e0d\u2e0e\5\n\6\2\u2e0e\u2e0f"+
		"\5\u0634\u031b\2\u2e0f\u0633\3\2\2\2\u2e10\u2e11\7m\2\2\u2e11\u2e12\5"+
		"\u03d4\u01eb\2\u2e12\u2e13\5\u05fc\u02ff\2\u2e13\u2e16\3\2\2\2\u2e14\u2e16"+
		"\3\2\2\2\u2e15\u2e10\3\2\2\2\u2e15\u2e14\3\2\2\2\u2e16\u0635\3\2\2\2\u0273"+
		"\u0640\u0644\u06c3\u06c7\u06d4\u06db\u06e3\u06fa\u0709\u071d\u0723\u073d"+
		"\u0757\u0786\u078a\u0791\u079a\u07a4\u07ae\u07c0\u07de\u07e8\u07f3\u07f8"+
		"\u0801\u0807\u0818\u081d\u0821\u082e\u0832\u0837\u083c\u084c\u0855\u0865"+
		"\u0911\u091b\u0926\u0a28\u0a2f\u0a34\u0a39\u0a3e\u0a46\u0a4f\u0a59\u0a6b"+
		"\u0a74\u0a81\u0a9d\u0aaa\u0aba\u0ad7\u0add\u0af5\u0afb\u0b00\u0b07\u0b0e"+
		"\u0b34\u0b38\u0b3f\u0b43\u0b4d\u0b5b\u0b65\u0bc7\u0bd5\u0bd9\u0be0\u0bea"+
		"\u0bf5\u0bfb\u0bff\u0c0e\u0c15\u0c20\u0c4a\u0c4f\u0c58\u0c65\u0c67\u0c71"+
		"\u0cac\u0cb1\u0cb8\u0cc2\u0ccd\u0cd6\u0ce0\u0ce8\u0cf1\u0cf5\u0cfd\u0d08"+
		"\u0d1a\u0d22\u0d26\u0d37\u0d48\u0d4d\u0d54\u0d62\u0d67\u0d6e\u0d89\u0d9b"+
		"\u0db0\u0dbf\u0dd6\u0de0\u0df8\u0e06\u0e0a\u0e11\u0e1a\u0e3f\u0e43\u0e4b"+
		"\u0e55\u0e6a\u0e6e\u0e74\u0e79\u0e7f\u0e83\u0e87\u0e94\u0e9e\u0eaf\u0eb6"+
		"\u0ec0\u0ecd\u0f3b\u0f4d\u0f56\u0f5b\u0f6c\u0f74\u0f7e\u0f8e\u0f98\u0fba"+
		"\u0fbf\u0fc5\u0fc9\u0fdb\u1015\u1026\u102e\u1045\u1049\u105d\u1082\u108b"+
		"\u1090\u1095\u109a\u109f\u10d4\u10da\u10e4\u10ee\u10f3\u10fc\u110f\u1113"+
		"\u111d\u1124\u112b\u1132\u1137\u113e\u114c\u1168\u1172\u1183\u1192\u11af"+
		"\u120b\u1219\u1221\u1228\u122d\u123b\u1244\u124e\u1276\u127c\u1294\u129c"+
		"\u12b4\u12b8\u12bd\u12c6\u12ca\u12e5\u12ef\u12fe\u1312\u1326\u1383\u139c"+
		"\u13a3\u13b3\u13bf\u13c6\u13d1\u13dc\u13ea\u147f\u1483\u14e0\u14e5\u14e9"+
		"\u14ef\u1533\u1539\u1556\u1567\u1571\u157d\u15b9\u15c3\u15c9\u15cf\u15e9"+
		"\u15ef\u15f5\u1602\u160e\u162b\u1652\u1656\u165a\u165e\u1663\u166d\u167b"+
		"\u1688\u1690\u169a\u16a0\u16a4\u16a9\u16b0\u16d5\u16da\u16e2\u16ec\u16f7"+
		"\u1702\u170a\u1714\u1726\u172e\u1740\u174b\u1763\u176d\u177b\u1781\u17a6"+
		"\u17b0\u17b9\u17c7\u17cd\u17da\u17ef\u17f8\u17fd\u1823\u1831\u183f\u1857"+
		"\u185e\u1868\u186e\u187c\u1882\u18a6\u18ad\u18bc\u18eb\u1910\u191e\u192f"+
		"\u1b05\u1b09\u1b0e\u1b49\u1b4d\u1c28\u1c3a\u1c45\u1c4c\u1c50\u1d11\u1d1b"+
		"\u1d23\u1d40\u1d53\u1d7d\u1d8b\u1da1\u1dab\u1db3\u1db7\u1dbe\u1dc7\u1dd0"+
		"\u1e04\u1e09\u1e15\u1e1f\u1e21\u1e26\u1e2e\u1e62\u1e70\u1e7d\u1e86\u1e95"+
		"\u1e9f\u1ea3\u1eb7\u1ed8\u1ee2\u1ef5\u1f30\u1f34\u1f85\u1fa1\u1fa6\u1fb5"+
		"\u1fc1\u1fcb\u1fd5\u1fda\u1fde\u1fe2\u1fe6\u1fea\u1ff1\u1ffe\u2003\u2015"+
		"\u2020\u202a\u2032\u2037\u2044\u204a\u2067\u206e\u207a\u2089\u20a0\u20ac"+
		"\u20c2\u20cd\u20d2\u20df\u20ec\u20fe\u2102\u2108\u211b\u2128\u2135\u214c"+
		"\u214e\u2156\u215a\u2164\u2187\u218b\u21aa\u21ac\u21b2\u21b6\u21bc\u21c6"+
		"\u21d0\u21df\u21e3\u21ec\u21f0\u2215\u2219\u221e\u2227\u222b\u222f\u223a"+
		"\u2241\u2249\u2253\u2257\u2278\u2280\u2284\u228d\u2291\u229b\u22a5\u22ad"+
		"\u22c5\u22cb\u22cf\u22d8\u22ea\u22ef\u22ff\u2305\u230c\u234d\u2352\u236d"+
		"\u236f\u2380\u2384\u2398\u23a1\u23a5\u23ae\u23bb\u23c5\u23d0\u23df\u23eb"+
		"\u23f8\u2401\u2406\u240b\u2414\u2418\u2422\u243e\u2448\u2456\u245f\u246a"+
		"\u2474\u247d\u24a2\u24ad\u24af\u24bf\u24c5\u24ce\u24d5\u24e7\u24ee\u24f2"+
		"\u24f6\u2503\u2507\u251d\u2521\u2533\u253e\u255c\u2564\u257c\u25cf\u25d6"+
		"\u25dc\u25e3\u25ea\u25f2\u2652\u2654\u2660\u2698\u269a\u26ab\u26ba\u26eb"+
		"\u26f3\u26f7\u2725\u27d3\u27da\u27e7\u27f6\u27fe\u2807\u2818\u281e\u2827"+
		"\u2830\u2835\u283f\u284b\u2856\u285c\u286b\u2873\u2881\u288e\u289e\u28a8"+
		"\u28ba\u28c8\u28d0\u28de\u28e8\u28f3\u28ff\u2909\u2916\u2920\u2928\u2932"+
		"\u2944\u294b\u2969\u2972\u2979\u2988\u2993\u2997\u299d\u29ad\u29b1\u29ba"+
		"\u29c2\u29c7\u29cb\u29d2\u29da\u29dd\u29e7\u29ee\u29f8\u2a05\u2a26\u2a36"+
		"\u2a3d\u2a42\u2a47\u2a4e\u2a55\u2a5f\u2a66\u2a6c\u2a72\u2a7a\u2a83\u2abc"+
		"\u2acb\u2ae2\u2afe\u2b06\u2b0a\u2b1b\u2b26\u2b30\u2b48\u2b4e\u2b57\u2b61"+
		"\u2b6b\u2b71\u2b78\u2b7d\u2b83\u2b87\u2b90\u2bae\u2bc2\u2bc6\u2bd6\u2be0"+
		"\u2bee\u2bf7\u2c0d\u2c13\u2c1f\u2c28\u2c33\u2c5d\u2c62\u2c6b\u2c70\u2c74"+
		"\u2c79\u2c89\u2ca6\u2caa\u2cc6\u2cd0\u2cd5\u2cdc\u2ce2\u2ced\u2cf7\u2d0c"+
		"\u2d13\u2d1d\u2d26\u2d41\u2d48\u2d52\u2d58\u2d5f\u2d66\u2d6a\u2d79\u2d91"+
		"\u2dad\u2dbc\u2dc0\u2dc5\u2dce\u2dde\u2de4\u2de8\u2dec\u2df0\u2df5\u2df9"+
		"\u2e15";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3,
			_serializedATNSegment4
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}